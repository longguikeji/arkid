{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ArkID \uff1a \u4f01\u4e1a\u7ea7IDaaS/IAM\u5e73\u53f0\u7cfb\u7edf # \u4e30\u5bcc\u7684\u63d2\u4ef6\uff0c\u5feb\u901f\u6784\u5efa\u4e13\u5c5eIDaaS/IAM\u5e73\u53f0 \u8f7b\u677e\u96c6\u6210\u60a8\u7684\u6240\u6709\u5e94\u7528 \u7edf\u4e00\u7684\u8eab\u4efd\uff0c\u8ba4\u8bc1\uff0c\u6743\u9650\u7ba1\u7406\u7cfb\u7edf \u5b98\u65b9\u7f51\u7ad9 \u5b98\u65b9IDaaS \u5b98\u65b9\u6587\u6863 \u529f\u80fd\u7279\u70b9 # \u63d2\u4ef6\u5316 # \u57fa\u4e8ePlug-in\u63d2\u4ef6\u5316\u53ef\u6269\u5c55\u7684\u5e95\u5c42\u5e94\u7528\u67b6\u6784 \u53ef\u5728\u4e0d\u6539\u52a8\u4e3b\u4f53\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u7075\u6d3b\u6781\u901f\u7684\u7ed9\u4e3b\u4f53\u7a0b\u5e8f\u589e\u52a0\u65b0\u529f\u80fd \u7edf\u4e00\u76ee\u5f55 # \u5b9e\u73b0\u4f01\u4e1a\u7ec4\u7ec7\u67b6\u6784\u548c\u6d77\u91cf\u4eba\u5458\u8eab\u4efd\u4fe1\u606f\u7684\u96c6\u4e2d\u5b89\u5168\u5b58\u50a8 \u591a\u7ef4\u5ea6\u5efa\u7acb\u5bf9\u5e94\u5173\u7cfb\uff0c\u5b89\u5168\u96c6\u6210\u4f01\u4e1a\u8eab\u4efd\u6570\u636e\u6e90 \u5b9e\u73b0\u5728\u4e00\u4e2a\u5e73\u53f0\u5bf9\u4f01\u4e1a\u4eba\u5458\u3001\u7ec4\u7ec7\u67b6\u6784\u3001\u5e94\u7528\u4fe1\u606f\u7684\u9ad8\u6548\u7edf\u4e00\u7ba1\u7406 \u5355\u70b9\u767b\u5f55 # \u901a\u8fc7\u4e00\u5957\u7528\u6237\u540d\u548c\u5bc6\u7801\u5373\u53ef\u8bbf\u95ee\u6240\u6709\u5de5\u4f5c\u7cfb\u7edf \u652f\u6301\u5982OIDC\uff0cOAuth2\uff0cCAS\uff0cSAML2\u7b49\u5355\u70b9\u767b\u5f55\u534f\u8bae \u901a\u8fc7\u63d2\u4ef6\u5b9a\u5411\u652f\u6301\u5404\u7c7b\u81ea\u6709\u534f\u8bae\u6216\u975e\u6807\u51c6\u534f\u8bae \u901a\u8fc7\u6d4f\u89c8\u5668\u63d2\u4ef6\u652f\u6301\u8d26\u5bc6\u4ee3\u586b\u7684\u65b9\u5f0f \u8d26\u53f7\u751f\u547d\u5468\u671f # \u5b9e\u73b0\u4eba\u5458\u5165\u79bb\u8c03\u8f6c/\u7ec4\u7ec7\u67b6\u6784\u53d8\u52a8\u7b49\u8eab\u4efd\u4fe1\u606f\u5728\u4e0d\u540c\u5e94\u7528\u7cfb\u7edf\u4e2d\u7684\u81ea\u52a8\u5316\u6d41\u8f6c \u6709\u6548\u63d0\u5347\u8d26\u6237\u914d\u7f6e\u6548\u7387\uff0c\u7ba1\u7406\u65f6\u95f4\u7f29\u77ed90% \u589e\u52a0\u5ba1\u8ba1\u6548\u7387 \u591a\u56e0\u7d20\u8ba4\u8bc1 # \u652f\u6301\u624b\u673a\uff0c\u90ae\u7bb1\uff0c\u4eba\u8138\uff0c\u6307\u7eb9\uff0c\u626b\u7801\u7b49\u5404\u7c7b\u8ba4\u8bc1\u56e0\u7d20 \u652f\u6301\u56fe\u5f62\u9a8c\u8bc1\u7801\uff0c\u52a8\u6001\u9a8c\u8bc1\u7801\u7b49\u5404\u7c7b\u4e8c\u6b21\u8ba4\u8bc1 \u652f\u6301\u5fae\u4fe1\uff0c\u9489\u9489\uff0c\u4f01\u4e1a\u5fae\u4fe1\u7b49\u7b2c\u4e09\u65b9\u8ba4\u8bc1 \u6839\u636e\u5ba2\u6237\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u53ca\u5b89\u5168\u9700\u8981\u667a\u80fd\u5524\u8d77\u4e0d\u540c\u7ec4\u5408\u5f62\u5f0f\u7684\u8ba4\u8bc1\u89c4\u5219 \u96c6\u4e2d\u6388\u6743 # \u652f\u6301RBAC\uff0cABAC\u7684\u6743\u9650\u7ba1\u7406 \u652f\u6301\u6743\u9650\u6570\u636e\u7edf\u4e00\u5f55\u5165\uff0c\u5b58\u50a8\u548c\u5206\u914d \u7edf\u4e00\u6743\u9650\u9a8c\u8bc1\uff0c\u652f\u6301\u7b2c\u4e09\u65b9\u6743\u9650\u7cfb\u7edf\u96c6\u6210 \u96c6\u4e2d\u5ba1\u6279 # \u652f\u6301\u81ea\u5b9a\u4e49\u5ba1\u6279\u52a8\u4f5c \u652f\u6301\u5bf9\u63a5\u7b2c\u4e09\u65b9\u5ba1\u6279\u7cfb\u7edf \u6570\u636e\u540c\u6b65 # \u652f\u6301SCIM\u534f\u8bae\uff0c\u8de8\u7cfb\u7edf\u540c\u6b65\u7528\u6237\u4e0e\u7ec4\u7ec7\u67b6\u6784\u6570\u636e \u652f\u6301\u5305\u62ec\u7528\u6237\uff0c\u7ec4\u7ec7\u67b6\u6784\uff0c\u8ba4\u8bc1\uff0c\u6743\u9650\u7b49\u5404\u7c7b\u6570\u636e\u540c\u6b65 \u652f\u6301\u5bf9\u591a\u4e2a\u4e09\u65b9\u7cfb\u7edf\u4ee5\u5404\u79cd\u7ec4\u5408\u65b9\u5f0f\u8fdb\u884c\u540c\u6b65\uff0c\u5982\u5c06HR\u7cfb\u7edf\u6570\u636e\u540c\u6b65\u81f3AD\u6216LDAP\u670d\u52a1\u4e2d \u5b89\u5168\u5ba1\u8ba1 # \u5b9e\u65f6\u8bb0\u5f55\u7528\u6237\u548c\u7ba1\u7406\u5458\u7684\u6240\u6709\u8bf7\u6c42\u884c\u4e3a \u652f\u6301\u65e5\u5fd7\u8bfb\u53d6\u81f3\u7b2c\u4e09\u65b9\u6570\u636e\u5206\u6790\u6216\u5b89\u5168\u5206\u6790\u7cfb\u7edf\u4e2d \u652f\u6301\u5728\u7cfb\u7edf\u4e2d\u76f4\u63a5\u5c55\u793a\u7b2c\u4e09\u65b9\u6570\u636e\u5206\u6790\u7cfb\u7edf\u7684\u56fe\u8868 \u652f\u6301\u5b89\u5168\u5206\u6790\u7cfb\u7edf\u5bf9\u8ba4\u8bc1\u89c4\u5219\u548c\u8ba4\u8bc1\u7ed3\u679c\u505a\u51fa\u5e72\u9884\uff0c\u5b9e\u73b0\u5b89\u5168\u7684\u667a\u80fd\u63a7\u5236 \u5ba2\u6237\u7aef # \u81ea\u5e26WEB\u9875\u9762 \u652f\u6301\u5404\u7c7b\u5c0f\u7a0b\u5e8f\uff0c\u624b\u673a\u5ba2\u6237\u7aef \u63d2\u4ef6\u65e0\u9700\u7f16\u5199\u524d\u7aef\u4ee3\u7801\u5373\u53ef\u5c55\u793a\u9875\u9762 \u4e91\u539f\u751f # \u652f\u6301Docker\u5f00\u53d1 \u652f\u6301Docker\uff0cK8S\u5bb9\u5668\u5316\u90e8\u7f72 \u4f4e\u4ee3\u7801\u5f00\u53d1\u6846\u67b6 # \u5bf9OpenAPI\u8fdb\u884c\u6269\u5c55\uff0c\u4f7f\u524d\u7aef\u9875\u9762\u7531\u540e\u7aef\u914d\u7f6e\u9a71\u52a8 \u5feb\u901f\u6784\u5efa\u9875\u9762\u539f\u578b \u652f\u6301\u81ea\u5b9a\u4e49CSS\u4e3b\u9898 \u63d2\u4ef6\u4e0e\u5e94\u7528\u5546\u5e97 # \u652f\u6301\u5f00\u53d1\u8005\u5171\u4eab\u51fa\u552e\u63d2\u4ef6 \u652f\u6301SaaS\u5e94\u7528\u4f2a\u672c\u5730\u5316 \u652f\u6301\u4ee3\u7406\u5546\u4ee3\u7406\u4e0e\u5206\u6210","title":"\u9996\u9875"},{"location":"#arkid-idaasiam","text":"\u4e30\u5bcc\u7684\u63d2\u4ef6\uff0c\u5feb\u901f\u6784\u5efa\u4e13\u5c5eIDaaS/IAM\u5e73\u53f0 \u8f7b\u677e\u96c6\u6210\u60a8\u7684\u6240\u6709\u5e94\u7528 \u7edf\u4e00\u7684\u8eab\u4efd\uff0c\u8ba4\u8bc1\uff0c\u6743\u9650\u7ba1\u7406\u7cfb\u7edf \u5b98\u65b9\u7f51\u7ad9 \u5b98\u65b9IDaaS \u5b98\u65b9\u6587\u6863","title":"ArkID \uff1a \u4f01\u4e1a\u7ea7IDaaS/IAM\u5e73\u53f0\u7cfb\u7edf"},{"location":"#_1","text":"","title":"\u529f\u80fd\u7279\u70b9"},{"location":"#_2","text":"\u57fa\u4e8ePlug-in\u63d2\u4ef6\u5316\u53ef\u6269\u5c55\u7684\u5e95\u5c42\u5e94\u7528\u67b6\u6784 \u53ef\u5728\u4e0d\u6539\u52a8\u4e3b\u4f53\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u7075\u6d3b\u6781\u901f\u7684\u7ed9\u4e3b\u4f53\u7a0b\u5e8f\u589e\u52a0\u65b0\u529f\u80fd","title":"\u63d2\u4ef6\u5316"},{"location":"#_3","text":"\u5b9e\u73b0\u4f01\u4e1a\u7ec4\u7ec7\u67b6\u6784\u548c\u6d77\u91cf\u4eba\u5458\u8eab\u4efd\u4fe1\u606f\u7684\u96c6\u4e2d\u5b89\u5168\u5b58\u50a8 \u591a\u7ef4\u5ea6\u5efa\u7acb\u5bf9\u5e94\u5173\u7cfb\uff0c\u5b89\u5168\u96c6\u6210\u4f01\u4e1a\u8eab\u4efd\u6570\u636e\u6e90 \u5b9e\u73b0\u5728\u4e00\u4e2a\u5e73\u53f0\u5bf9\u4f01\u4e1a\u4eba\u5458\u3001\u7ec4\u7ec7\u67b6\u6784\u3001\u5e94\u7528\u4fe1\u606f\u7684\u9ad8\u6548\u7edf\u4e00\u7ba1\u7406","title":"\u7edf\u4e00\u76ee\u5f55"},{"location":"#_4","text":"\u901a\u8fc7\u4e00\u5957\u7528\u6237\u540d\u548c\u5bc6\u7801\u5373\u53ef\u8bbf\u95ee\u6240\u6709\u5de5\u4f5c\u7cfb\u7edf \u652f\u6301\u5982OIDC\uff0cOAuth2\uff0cCAS\uff0cSAML2\u7b49\u5355\u70b9\u767b\u5f55\u534f\u8bae \u901a\u8fc7\u63d2\u4ef6\u5b9a\u5411\u652f\u6301\u5404\u7c7b\u81ea\u6709\u534f\u8bae\u6216\u975e\u6807\u51c6\u534f\u8bae \u901a\u8fc7\u6d4f\u89c8\u5668\u63d2\u4ef6\u652f\u6301\u8d26\u5bc6\u4ee3\u586b\u7684\u65b9\u5f0f","title":"\u5355\u70b9\u767b\u5f55"},{"location":"#_5","text":"\u5b9e\u73b0\u4eba\u5458\u5165\u79bb\u8c03\u8f6c/\u7ec4\u7ec7\u67b6\u6784\u53d8\u52a8\u7b49\u8eab\u4efd\u4fe1\u606f\u5728\u4e0d\u540c\u5e94\u7528\u7cfb\u7edf\u4e2d\u7684\u81ea\u52a8\u5316\u6d41\u8f6c \u6709\u6548\u63d0\u5347\u8d26\u6237\u914d\u7f6e\u6548\u7387\uff0c\u7ba1\u7406\u65f6\u95f4\u7f29\u77ed90% \u589e\u52a0\u5ba1\u8ba1\u6548\u7387","title":"\u8d26\u53f7\u751f\u547d\u5468\u671f"},{"location":"#_6","text":"\u652f\u6301\u624b\u673a\uff0c\u90ae\u7bb1\uff0c\u4eba\u8138\uff0c\u6307\u7eb9\uff0c\u626b\u7801\u7b49\u5404\u7c7b\u8ba4\u8bc1\u56e0\u7d20 \u652f\u6301\u56fe\u5f62\u9a8c\u8bc1\u7801\uff0c\u52a8\u6001\u9a8c\u8bc1\u7801\u7b49\u5404\u7c7b\u4e8c\u6b21\u8ba4\u8bc1 \u652f\u6301\u5fae\u4fe1\uff0c\u9489\u9489\uff0c\u4f01\u4e1a\u5fae\u4fe1\u7b49\u7b2c\u4e09\u65b9\u8ba4\u8bc1 \u6839\u636e\u5ba2\u6237\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u53ca\u5b89\u5168\u9700\u8981\u667a\u80fd\u5524\u8d77\u4e0d\u540c\u7ec4\u5408\u5f62\u5f0f\u7684\u8ba4\u8bc1\u89c4\u5219","title":"\u591a\u56e0\u7d20\u8ba4\u8bc1"},{"location":"#_7","text":"\u652f\u6301RBAC\uff0cABAC\u7684\u6743\u9650\u7ba1\u7406 \u652f\u6301\u6743\u9650\u6570\u636e\u7edf\u4e00\u5f55\u5165\uff0c\u5b58\u50a8\u548c\u5206\u914d \u7edf\u4e00\u6743\u9650\u9a8c\u8bc1\uff0c\u652f\u6301\u7b2c\u4e09\u65b9\u6743\u9650\u7cfb\u7edf\u96c6\u6210","title":"\u96c6\u4e2d\u6388\u6743"},{"location":"#_8","text":"\u652f\u6301\u81ea\u5b9a\u4e49\u5ba1\u6279\u52a8\u4f5c \u652f\u6301\u5bf9\u63a5\u7b2c\u4e09\u65b9\u5ba1\u6279\u7cfb\u7edf","title":"\u96c6\u4e2d\u5ba1\u6279"},{"location":"#_9","text":"\u652f\u6301SCIM\u534f\u8bae\uff0c\u8de8\u7cfb\u7edf\u540c\u6b65\u7528\u6237\u4e0e\u7ec4\u7ec7\u67b6\u6784\u6570\u636e \u652f\u6301\u5305\u62ec\u7528\u6237\uff0c\u7ec4\u7ec7\u67b6\u6784\uff0c\u8ba4\u8bc1\uff0c\u6743\u9650\u7b49\u5404\u7c7b\u6570\u636e\u540c\u6b65 \u652f\u6301\u5bf9\u591a\u4e2a\u4e09\u65b9\u7cfb\u7edf\u4ee5\u5404\u79cd\u7ec4\u5408\u65b9\u5f0f\u8fdb\u884c\u540c\u6b65\uff0c\u5982\u5c06HR\u7cfb\u7edf\u6570\u636e\u540c\u6b65\u81f3AD\u6216LDAP\u670d\u52a1\u4e2d","title":"\u6570\u636e\u540c\u6b65"},{"location":"#_10","text":"\u5b9e\u65f6\u8bb0\u5f55\u7528\u6237\u548c\u7ba1\u7406\u5458\u7684\u6240\u6709\u8bf7\u6c42\u884c\u4e3a \u652f\u6301\u65e5\u5fd7\u8bfb\u53d6\u81f3\u7b2c\u4e09\u65b9\u6570\u636e\u5206\u6790\u6216\u5b89\u5168\u5206\u6790\u7cfb\u7edf\u4e2d \u652f\u6301\u5728\u7cfb\u7edf\u4e2d\u76f4\u63a5\u5c55\u793a\u7b2c\u4e09\u65b9\u6570\u636e\u5206\u6790\u7cfb\u7edf\u7684\u56fe\u8868 \u652f\u6301\u5b89\u5168\u5206\u6790\u7cfb\u7edf\u5bf9\u8ba4\u8bc1\u89c4\u5219\u548c\u8ba4\u8bc1\u7ed3\u679c\u505a\u51fa\u5e72\u9884\uff0c\u5b9e\u73b0\u5b89\u5168\u7684\u667a\u80fd\u63a7\u5236","title":"\u5b89\u5168\u5ba1\u8ba1"},{"location":"#_11","text":"\u81ea\u5e26WEB\u9875\u9762 \u652f\u6301\u5404\u7c7b\u5c0f\u7a0b\u5e8f\uff0c\u624b\u673a\u5ba2\u6237\u7aef \u63d2\u4ef6\u65e0\u9700\u7f16\u5199\u524d\u7aef\u4ee3\u7801\u5373\u53ef\u5c55\u793a\u9875\u9762","title":"\u5ba2\u6237\u7aef"},{"location":"#_12","text":"\u652f\u6301Docker\u5f00\u53d1 \u652f\u6301Docker\uff0cK8S\u5bb9\u5668\u5316\u90e8\u7f72","title":"\u4e91\u539f\u751f"},{"location":"#_13","text":"\u5bf9OpenAPI\u8fdb\u884c\u6269\u5c55\uff0c\u4f7f\u524d\u7aef\u9875\u9762\u7531\u540e\u7aef\u914d\u7f6e\u9a71\u52a8 \u5feb\u901f\u6784\u5efa\u9875\u9762\u539f\u578b \u652f\u6301\u81ea\u5b9a\u4e49CSS\u4e3b\u9898","title":"\u4f4e\u4ee3\u7801\u5f00\u53d1\u6846\u67b6"},{"location":"#_14","text":"\u652f\u6301\u5f00\u53d1\u8005\u5171\u4eab\u51fa\u552e\u63d2\u4ef6 \u652f\u6301SaaS\u5e94\u7528\u4f2a\u672c\u5730\u5316 \u652f\u6301\u4ee3\u7406\u5546\u4ee3\u7406\u4e0e\u5206\u6210","title":"\u63d2\u4ef6\u4e0e\u5e94\u7528\u5546\u5e97"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/","text":"\u5feb\u901f\u5f00\u59cb # \u5feb\u901f\u542f\u52a8 # \u5c06ArkID\u7684\u4ed3\u5e93clone\u5230\u672c\u5730\u540e \u5148\u542f\u52a8celery\uff08\u9700\u8981redis\u670d\u52a1\uff0c\u7aef\u53e36379\uff09 celery -A arkid.core.tasks.celery worker -l debug celery\u542f\u52a8\u5b8c\u6bd5\u540e\u518d\u542f\u52a8 Django server python manage.py runserver 0.0.0.0:8000 \u901a\u8fc7\u6e90\u7801\u76f4\u63a5\u542f\u52a8\uff0c\u7531\u4e8e\u6ca1\u6709nginx\u7b49\u73af\u5883\uff0c\u90e8\u5206\u529f\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u5efa\u8bae\u901a\u8fc7 \u79c1\u6709\u5316\u90e8\u7f72 \u6765\u4f53\u9a8c\u4ea7\u54c1\u3002 \u5b98\u65b9IDaaS # \u5982\u679c\u5e0c\u671b\u5feb\u901f\u7684\u4e86\u89e3\u7cfb\u7edf\u7684\u57fa\u672c\u4f7f\u7528\uff0c\u53ef\u4ee5\u8bbf\u95ee https://idaas.akid.cc \u6ce8\u518c\u540e\uff0c\u521b\u5efa\u81ea\u5df1\u7684\u79df\u6237\uff0c\u5373\u53ef\u4f7f\u7528\u7cfb\u7edf\u7684\u5927\u90e8\u5206\u529f\u80fd\u3002 \u5982\u679c\u5e0c\u671b\u4f53\u9a8c \u8d85\u7ea7\u7ba1\u7406\u5458 \uff0c \u5b89\u88c5\u914d\u7f6e\u63d2\u4ef6 \u7b49\uff0c\u63a8\u8350\u4f7f\u7528 \u79c1\u6709\u5316\u90e8\u7f72 \u7684\u65b9\u5f0f \u79c1\u6709\u5316\u90e8\u7f72 # \u901a\u8fc7ArkOS\u90e8\u7f72(\u63a8\u8350) \u901a\u8fc7docker\u90e8\u7f72 \u901a\u8fc7k8s\u90e8\u7f72","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_1","text":"","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_2","text":"\u5c06ArkID\u7684\u4ed3\u5e93clone\u5230\u672c\u5730\u540e \u5148\u542f\u52a8celery\uff08\u9700\u8981redis\u670d\u52a1\uff0c\u7aef\u53e36379\uff09 celery -A arkid.core.tasks.celery worker -l debug celery\u542f\u52a8\u5b8c\u6bd5\u540e\u518d\u542f\u52a8 Django server python manage.py runserver 0.0.0.0:8000 \u901a\u8fc7\u6e90\u7801\u76f4\u63a5\u542f\u52a8\uff0c\u7531\u4e8e\u6ca1\u6709nginx\u7b49\u73af\u5883\uff0c\u90e8\u5206\u529f\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u5efa\u8bae\u901a\u8fc7 \u79c1\u6709\u5316\u90e8\u7f72 \u6765\u4f53\u9a8c\u4ea7\u54c1\u3002","title":"\u5feb\u901f\u542f\u52a8"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#idaas","text":"\u5982\u679c\u5e0c\u671b\u5feb\u901f\u7684\u4e86\u89e3\u7cfb\u7edf\u7684\u57fa\u672c\u4f7f\u7528\uff0c\u53ef\u4ee5\u8bbf\u95ee https://idaas.akid.cc \u6ce8\u518c\u540e\uff0c\u521b\u5efa\u81ea\u5df1\u7684\u79df\u6237\uff0c\u5373\u53ef\u4f7f\u7528\u7cfb\u7edf\u7684\u5927\u90e8\u5206\u529f\u80fd\u3002 \u5982\u679c\u5e0c\u671b\u4f53\u9a8c \u8d85\u7ea7\u7ba1\u7406\u5458 \uff0c \u5b89\u88c5\u914d\u7f6e\u63d2\u4ef6 \u7b49\uff0c\u63a8\u8350\u4f7f\u7528 \u79c1\u6709\u5316\u90e8\u7f72 \u7684\u65b9\u5f0f","title":"\u5b98\u65b9IDaaS"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_3","text":"\u901a\u8fc7ArkOS\u90e8\u7f72(\u63a8\u8350) \u901a\u8fc7docker\u90e8\u7f72 \u901a\u8fc7k8s\u90e8\u7f72","title":"\u79c1\u6709\u5316\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/","text":"\u901a\u8fc7ArkOS\u90e8\u7f72 # ArkOS\u662f\u7528\u6765\u5b89\u88c5K8s\u548cArkID\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 \u90e8\u7f72\u65f6\u4f1a\u9884\u88c5\u4e00\u4e9b\u5e94\u7528\uff1a ArkID kuboard kubeapps \u73af\u5883\u51c6\u5907 # \u51c6\u5907\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\uff1a # \u9700\u8981\u51c6\u5907\u4e00\u53f0\u673a\u5668\u6765\u8fd0\u884cdocker\uff0c\u7528\u5bb9\u5668\u6765\u90e8\u7f72arkid \u4e00\u53f0centos7+\u6216\u8005ubuntu18+\uff0c\u5b89\u88c5\u6709docker \u4ee5\u4e0bdocker\u73af\u5883\u4e5f\u53ef\u4ee5\uff1a mac\u5b89\u88c5docker desktop pc\u5b89\u88c5docker desktop pc WSL 2.0 \u5b50\u7cfb\u7edf\u4e2d\u5b89\u88c5docker ## linux\u7cfb\u7edf\u5feb\u901f\u5b89\u88c5docker curl -sSL https://get.daocloud.io/docker | sh \u51c6\u5907\u90e8\u7f72arkid\u7684\u673a\u5668 # \u4e00\u3001\u5355\u53f0\u673a\u5668\u90e8\u7f72 # \u9700\u8981\u51c6\u5907\u7684\u6587\u4ef6 - hosts ## hosts \u6587\u4ef6\u683c\u5f0f ## \u53ea\u9700\u4fee\u6539ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd8\u6709\u7528\u6237\u540d\u548c\u5bc6\u7801 ## \u5c06hosts\u6587\u4ef6\u653e\u5230\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u4e2d\u7684\u67d0\u4e2a\u76ee\u5f55 [ arkos-masters ] arkos-master01 hostname = arkos-master01 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 [ all:vars ] ansible_connection = ssh ansible_user = root ansible_password = xxxx \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a ## \u5728\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u6267\u884c ## \u8fdb\u5165\u5230hosts\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4\u6765\u5b89\u88c5arkid docker run --rm --mount type = bind,source = \" $( pwd ) \" /hosts,target = /etc/ansible/hosts harbor.longguikeji.com/ark-releases/arkos one \u4e8c\u3001\u591a\u53f0\u673a\u5668\u90e8\u7f72(\u59825,6\u53f0) # \u9700\u8981\u51c6\u5907\u7684\u6587\u4ef6 hosts ## hosts \u6587\u4ef6\u683c\u5f0f ## \u53ea\u9700\u4fee\u6539ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd8\u6709\u7528\u6237\u540d\u548c\u5bc6\u7801 ## \u5728[arkos-nodes] \u4e0b\u6dfb\u52a0\u6216\u5220\u51cf\u673a\u5668\uff0c\u8bb0\u5f97\u9012\u589e\u5e8f\u53f7 ## \u5c06hosts\u6587\u4ef6\u653e\u5230\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u4e2d\u7684\u67d0\u4e2a\u76ee\u5f55 [ arkos-masters ] arkos-master01 hostname = arkos-master01 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 [ arkos-nodes ] arkos-node01 hostname = arkos-node01 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 arkos-node02 hostname = arkos-node02 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 [ all:vars ] ansible_connection = ssh ansible_user = root ansible_password = xxxx \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a ## \u5728\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u6267\u884c ## \u8fdb\u5165\u5230hosts\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4\u6765\u5b89\u88c5arkid docker run --rm --mount type = bind,source = \" $( pwd ) \" /hosts,target = /etc/ansible/hosts harbor.longguikeji.com/ark-releases/arkos two \u4e09\u3001\u751f\u4ea7\u9ad8\u53ef\u7528\u90e8\u7f72(10+\u53f0\u673a\u5668) # \u4e24\u53f0\u673a\u5668\u7528\u6765\u90e8\u7f72 haproxy \u4e09\u53f0\u673a\u5668\u4f5ck8s master \u5176\u4ed6\u673a\u5668\u4f5ck8s node \u9700\u8981\u51c6\u5907\u7684\u6587\u4ef6 - hosts ## hosts \u6587\u4ef6\u683c\u5f0f ## \u53ea\u9700\u4fee\u6539ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd8\u6709\u7528\u6237\u540d\u548c\u5bc6\u7801 ## \u5728[arkos-nodes] \u4e0b\u53ef\u4ee5\u6dfb\u52a0\u6216\u5220\u51cf\u673a\u5668\uff0c\u8bb0\u5f97\u9012\u589e\u5e8f\u53f7 ## \u5c06hosts\u6587\u4ef6\u653e\u5230\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u4e2d\u7684\u67d0\u4e2a\u76ee\u5f55 [ arkos-has ] arkos-halb01 hostname = arkos-halb01 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-halb02 hostname = arkos-halb02 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 [ arkos-masters ] arkos-master01 hostname = arkos-master01 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-master02 hostname = arkos-master02 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-master03 hostname = arkos-master03 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 [ arkos-nodes ] arkos-node01 hostname = arkos-node01 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-node02 hostname = arkos-node02 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 [ all:vars ] ansible_connection = ssh ansible_user = root ansible_password = root ## \u9700\u8981\u51c6\u5907\u4e24\u4e2avip\uff0cha_vip\u662f\u7528\u6765\u7ed9masters\u7684apiserver\u505a\u8d1f\u8f7d\u5747\u8861\u7684\uff1blb_vip\u662f\u7528\u6765\u7ed9\u96c6\u7fa4\u4e2d\u7684ingress\u505a\u8d1f\u8f7d\u5747\u8861\u7684\uff0c\u4e5f\u662f\u9700\u8981\u5916\u90e8DNS\u89e3\u6790\u5230\u7684ip\u3002 arkos_ha_vip = x.x.x.x arkos_lb_vip = x.x.x.x \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a ## \u5728\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u6267\u884c ## \u8fdb\u5165\u5230hosts\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4\u6765\u5b89\u88c5arkid docker run --rm --mount type = bind,source = \" $( pwd ) \" /hosts,target = /etc/ansible/hosts harbor.longguikeji.com/ark-releases/arkos three \u8bbf\u95ee\u521d\u59cb\u5316arkid # \u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a http://{arkos-master01-ip}:32580 \u9996\u6b21\u6253\u5f00arkid\uff0c\u9700\u8981\u8f93\u5165\u8bbf\u95eeurl\uff0c\u6b64url\u53ea\u80fd\u8f93\u5165\u8fd9\u4e00\u6b21\uff0c\u9700\u8981\u614e\u91cd\uff01\uff01\uff01 \u5982\u679c\u751f\u4ea7\u73af\u5883\u9700\u8981\u57df\u540d\u8bbf\u95ee\uff0c\u90a3\u8bf7\u914d\u7f6e\u597d\u4e00\u5207\u4e4b\u540e\u518d\u586b\u8fd9\u4e2aurl\uff01\uff01\uff01 \u521d\u59cb\u5316\u7528\u6237\u540d\uff1aadmin/admin \u8bbf\u95eekuboard # \u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a http://{arkos-master01-ip}:32567 token\u83b7\u53d6\uff1a ## \u5728 arkos-master01\u673a\u5668\u4e0a\u6267\u884c ## \u590d\u5236\u5230 kuboard \u767b\u5f55\u9875\u9762\u4e0a\u5373\u53ef\u8bbf\u95ee echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep ^kuboard-user | awk '{print $1}') -o go-template='{{.data.token}}' | base64 -d) \u8bbf\u95eekubeapps # \u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a http://{arkos-master01-ip}:32581 token\u83b7\u53d6\uff1a ## \u5728 arkos-master01\u673a\u5668\u4e0a\u6267\u884c ## \u590d\u5236\u5230 kubeapps \u767b\u5f55\u9875\u9762\u4e0a\u5373\u53ef\u8bbf\u95ee echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep ^kuboard-user | awk '{print $1}') -o go-template='{{.data.token}}' | base64 -d) \u66f4\u65b0\u7ec4\u4ef6\u7248\u672c # arkid \u5728github\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://github.com/longguikeji/arkid-charts/releases \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : arkid namespace : kube-system spec : chart : arkid version : 3.0.13 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : arkid kubeapps \u5728ArtifactHUB\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://artifacthub.io/packages/helm/bitnami/kubeapps \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : kubeapps namespace : kube-system spec : chart : kubeapps version : 10.3.1 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : kubeapps","title":"\u901a\u8fc7ArkOS\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#arkos","text":"ArkOS\u662f\u7528\u6765\u5b89\u88c5K8s\u548cArkID\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 \u90e8\u7f72\u65f6\u4f1a\u9884\u88c5\u4e00\u4e9b\u5e94\u7528\uff1a ArkID kuboard kubeapps","title":"\u901a\u8fc7ArkOS\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#_1","text":"","title":"\u73af\u5883\u51c6\u5907"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#_2","text":"\u9700\u8981\u51c6\u5907\u4e00\u53f0\u673a\u5668\u6765\u8fd0\u884cdocker\uff0c\u7528\u5bb9\u5668\u6765\u90e8\u7f72arkid \u4e00\u53f0centos7+\u6216\u8005ubuntu18+\uff0c\u5b89\u88c5\u6709docker \u4ee5\u4e0bdocker\u73af\u5883\u4e5f\u53ef\u4ee5\uff1a mac\u5b89\u88c5docker desktop pc\u5b89\u88c5docker desktop pc WSL 2.0 \u5b50\u7cfb\u7edf\u4e2d\u5b89\u88c5docker ## linux\u7cfb\u7edf\u5feb\u901f\u5b89\u88c5docker curl -sSL https://get.daocloud.io/docker | sh","title":"\u51c6\u5907\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\uff1a"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#arkid","text":"","title":"\u51c6\u5907\u90e8\u7f72arkid\u7684\u673a\u5668"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#_3","text":"\u9700\u8981\u51c6\u5907\u7684\u6587\u4ef6 - hosts ## hosts \u6587\u4ef6\u683c\u5f0f ## \u53ea\u9700\u4fee\u6539ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd8\u6709\u7528\u6237\u540d\u548c\u5bc6\u7801 ## \u5c06hosts\u6587\u4ef6\u653e\u5230\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u4e2d\u7684\u67d0\u4e2a\u76ee\u5f55 [ arkos-masters ] arkos-master01 hostname = arkos-master01 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 [ all:vars ] ansible_connection = ssh ansible_user = root ansible_password = xxxx \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a ## \u5728\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u6267\u884c ## \u8fdb\u5165\u5230hosts\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4\u6765\u5b89\u88c5arkid docker run --rm --mount type = bind,source = \" $( pwd ) \" /hosts,target = /etc/ansible/hosts harbor.longguikeji.com/ark-releases/arkos one","title":"\u4e00\u3001\u5355\u53f0\u673a\u5668\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#56","text":"\u9700\u8981\u51c6\u5907\u7684\u6587\u4ef6 hosts ## hosts \u6587\u4ef6\u683c\u5f0f ## \u53ea\u9700\u4fee\u6539ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd8\u6709\u7528\u6237\u540d\u548c\u5bc6\u7801 ## \u5728[arkos-nodes] \u4e0b\u6dfb\u52a0\u6216\u5220\u51cf\u673a\u5668\uff0c\u8bb0\u5f97\u9012\u589e\u5e8f\u53f7 ## \u5c06hosts\u6587\u4ef6\u653e\u5230\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u4e2d\u7684\u67d0\u4e2a\u76ee\u5f55 [ arkos-masters ] arkos-master01 hostname = arkos-master01 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 [ arkos-nodes ] arkos-node01 hostname = arkos-node01 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 arkos-node02 hostname = arkos-node02 ansible_ssh_host = x.x.x.x ansible_ssh_port = 22 [ all:vars ] ansible_connection = ssh ansible_user = root ansible_password = xxxx \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a ## \u5728\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u6267\u884c ## \u8fdb\u5165\u5230hosts\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4\u6765\u5b89\u88c5arkid docker run --rm --mount type = bind,source = \" $( pwd ) \" /hosts,target = /etc/ansible/hosts harbor.longguikeji.com/ark-releases/arkos two","title":"\u4e8c\u3001\u591a\u53f0\u673a\u5668\u90e8\u7f72(\u59825,6\u53f0)"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#10","text":"\u4e24\u53f0\u673a\u5668\u7528\u6765\u90e8\u7f72 haproxy \u4e09\u53f0\u673a\u5668\u4f5ck8s master \u5176\u4ed6\u673a\u5668\u4f5ck8s node \u9700\u8981\u51c6\u5907\u7684\u6587\u4ef6 - hosts ## hosts \u6587\u4ef6\u683c\u5f0f ## \u53ea\u9700\u4fee\u6539ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd8\u6709\u7528\u6237\u540d\u548c\u5bc6\u7801 ## \u5728[arkos-nodes] \u4e0b\u53ef\u4ee5\u6dfb\u52a0\u6216\u5220\u51cf\u673a\u5668\uff0c\u8bb0\u5f97\u9012\u589e\u5e8f\u53f7 ## \u5c06hosts\u6587\u4ef6\u653e\u5230\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u4e2d\u7684\u67d0\u4e2a\u76ee\u5f55 [ arkos-has ] arkos-halb01 hostname = arkos-halb01 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-halb02 hostname = arkos-halb02 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 [ arkos-masters ] arkos-master01 hostname = arkos-master01 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-master02 hostname = arkos-master02 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-master03 hostname = arkos-master03 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 [ arkos-nodes ] arkos-node01 hostname = arkos-node01 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 arkos-node02 hostname = arkos-node02 ansible_ssh_host = xx.xx.xx.xx ansible_ssh_port = 22 [ all:vars ] ansible_connection = ssh ansible_user = root ansible_password = root ## \u9700\u8981\u51c6\u5907\u4e24\u4e2avip\uff0cha_vip\u662f\u7528\u6765\u7ed9masters\u7684apiserver\u505a\u8d1f\u8f7d\u5747\u8861\u7684\uff1blb_vip\u662f\u7528\u6765\u7ed9\u96c6\u7fa4\u4e2d\u7684ingress\u505a\u8d1f\u8f7d\u5747\u8861\u7684\uff0c\u4e5f\u662f\u9700\u8981\u5916\u90e8DNS\u89e3\u6790\u5230\u7684ip\u3002 arkos_ha_vip = x.x.x.x arkos_lb_vip = x.x.x.x \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a ## \u5728\u8fd0\u7ef4\u64cd\u4f5c\u673a\u5668\u6267\u884c ## \u8fdb\u5165\u5230hosts\u6587\u4ef6\u6240\u5728\u76ee\u5f55\uff0c\u6267\u884c\u547d\u4ee4\u6765\u5b89\u88c5arkid docker run --rm --mount type = bind,source = \" $( pwd ) \" /hosts,target = /etc/ansible/hosts harbor.longguikeji.com/ark-releases/arkos three","title":"\u4e09\u3001\u751f\u4ea7\u9ad8\u53ef\u7528\u90e8\u7f72(10+\u53f0\u673a\u5668)"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#arkid_1","text":"\u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a http://{arkos-master01-ip}:32580 \u9996\u6b21\u6253\u5f00arkid\uff0c\u9700\u8981\u8f93\u5165\u8bbf\u95eeurl\uff0c\u6b64url\u53ea\u80fd\u8f93\u5165\u8fd9\u4e00\u6b21\uff0c\u9700\u8981\u614e\u91cd\uff01\uff01\uff01 \u5982\u679c\u751f\u4ea7\u73af\u5883\u9700\u8981\u57df\u540d\u8bbf\u95ee\uff0c\u90a3\u8bf7\u914d\u7f6e\u597d\u4e00\u5207\u4e4b\u540e\u518d\u586b\u8fd9\u4e2aurl\uff01\uff01\uff01 \u521d\u59cb\u5316\u7528\u6237\u540d\uff1aadmin/admin","title":"\u8bbf\u95ee\u521d\u59cb\u5316arkid"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#kuboard","text":"\u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a http://{arkos-master01-ip}:32567 token\u83b7\u53d6\uff1a ## \u5728 arkos-master01\u673a\u5668\u4e0a\u6267\u884c ## \u590d\u5236\u5230 kuboard \u767b\u5f55\u9875\u9762\u4e0a\u5373\u53ef\u8bbf\u95ee echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep ^kuboard-user | awk '{print $1}') -o go-template='{{.data.token}}' | base64 -d)","title":"\u8bbf\u95eekuboard"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#kubeapps","text":"\u6d4f\u89c8\u5668\u6253\u5f00\u7f51\u5740\uff1a http://{arkos-master01-ip}:32581 token\u83b7\u53d6\uff1a ## \u5728 arkos-master01\u673a\u5668\u4e0a\u6267\u884c ## \u590d\u5236\u5230 kubeapps \u767b\u5f55\u9875\u9762\u4e0a\u5373\u53ef\u8bbf\u95ee echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep ^kuboard-user | awk '{print $1}') -o go-template='{{.data.token}}' | base64 -d)","title":"\u8bbf\u95eekubeapps"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87ArkOS%E9%83%A8%E7%BD%B2/#_4","text":"arkid \u5728github\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://github.com/longguikeji/arkid-charts/releases \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : arkid namespace : kube-system spec : chart : arkid version : 3.0.13 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : arkid kubeapps \u5728ArtifactHUB\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://artifacthub.io/packages/helm/bitnami/kubeapps \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : kubeapps namespace : kube-system spec : chart : kubeapps version : 10.3.1 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : kubeapps","title":"\u66f4\u65b0\u7ec4\u4ef6\u7248\u672c"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87Docker%E9%83%A8%E7%BD%B2/","text":"\u901a\u8fc7docker-compose\u90e8\u7f72 # # \u4e0b\u8f7d arkid \u90e8\u7f72\u6587\u4ef6 git clone https://github.com/longguikeji/arkid-charts.git cd arkid-charts/docker-compose # \u542f\u52a8 docker-compose up -d # \u6253\u5f00 http://localhost:8989 (\u5177\u4f53\u7aef\u53e3\u89c6 .env \u4e2d HTTP_PORT \u800c\u5b9a) \u90e8\u7f72\u5b8c\u6210\uff0c\u521d\u59cb\u5316\u8bbf\u95ee # \u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8989 \uff0c \u9996\u6b21\u6253\u5f00arkid\uff0c\u9700\u8981\u8f93\u5165\u8bbf\u95eeurl\uff0c\u6b64url\u53ea\u80fd\u8f93\u5165\u8fd9\u4e00\u6b21\uff0c\u9700\u8981\u614e\u91cd\uff01\uff01\uff01 \u5982\u679c\u751f\u4ea7\u73af\u5883\u9700\u8981\u57df\u540d\u8bbf\u95ee\uff0c\u90a3\u8bf7\u914d\u7f6e\u597d\u4e00\u5207\u4e4b\u540e\u518d\u586b\u8fd9\u4e2aurl\uff01\uff01\uff01 \u5185\u7f6e\u8d26\u53f7 admin / admin \u767b\u5f55\uff0c\u63a2\u7d22ArkID\u7684\u5b8c\u6574\u529f\u80fd\u3002 \u66f4\u65b0docker-compose\u90e8\u7f72\u7248\u672c # ## \u8fdb\u5165 docker-compose \u76ee\u5f55 cd arkid-charts/docker-compose ## \u505c\u6b62 docker-compose down ## \u62c9\u53d6\u66f4\u65b0 git\u4ed3\u5e93 git pull ## \u518d\u6b21\u6267\u884c\u542f\u52a8\u547d\u4ee4\uff0c\u5c31\u4f1a\u62c9\u53d6\u65b0\u7684\u955c\u50cf\u66f4\u65b0\u7248\u672c docker-compose up -d","title":"\u901a\u8fc7docker-compose\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87Docker%E9%83%A8%E7%BD%B2/#docker-compose","text":"# \u4e0b\u8f7d arkid \u90e8\u7f72\u6587\u4ef6 git clone https://github.com/longguikeji/arkid-charts.git cd arkid-charts/docker-compose # \u542f\u52a8 docker-compose up -d # \u6253\u5f00 http://localhost:8989 (\u5177\u4f53\u7aef\u53e3\u89c6 .env \u4e2d HTTP_PORT \u800c\u5b9a)","title":"\u901a\u8fc7docker-compose\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87Docker%E9%83%A8%E7%BD%B2/#_1","text":"\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8989 \uff0c \u9996\u6b21\u6253\u5f00arkid\uff0c\u9700\u8981\u8f93\u5165\u8bbf\u95eeurl\uff0c\u6b64url\u53ea\u80fd\u8f93\u5165\u8fd9\u4e00\u6b21\uff0c\u9700\u8981\u614e\u91cd\uff01\uff01\uff01 \u5982\u679c\u751f\u4ea7\u73af\u5883\u9700\u8981\u57df\u540d\u8bbf\u95ee\uff0c\u90a3\u8bf7\u914d\u7f6e\u597d\u4e00\u5207\u4e4b\u540e\u518d\u586b\u8fd9\u4e2aurl\uff01\uff01\uff01 \u5185\u7f6e\u8d26\u53f7 admin / admin \u767b\u5f55\uff0c\u63a2\u7d22ArkID\u7684\u5b8c\u6574\u529f\u80fd\u3002","title":"\u90e8\u7f72\u5b8c\u6210\uff0c\u521d\u59cb\u5316\u8bbf\u95ee"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87Docker%E9%83%A8%E7%BD%B2/#docker-compose_1","text":"## \u8fdb\u5165 docker-compose \u76ee\u5f55 cd arkid-charts/docker-compose ## \u505c\u6b62 docker-compose down ## \u62c9\u53d6\u66f4\u65b0 git\u4ed3\u5e93 git pull ## \u518d\u6b21\u6267\u884c\u542f\u52a8\u547d\u4ee4\uff0c\u5c31\u4f1a\u62c9\u53d6\u65b0\u7684\u955c\u50cf\u66f4\u65b0\u7248\u672c docker-compose up -d","title":"\u66f4\u65b0docker-compose\u90e8\u7f72\u7248\u672c"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/","text":"\u901a\u8fc7k8s\u90e8\u7f72 # \u73af\u5883\u51c6\u5907 # Kubernetes 1.12+ Helm 3.1.0 PV provisioner support in the underlying infrastructure ReadWriteMany volumes for deployment scaling \u901a\u8fc7helm\u5b89\u88c5 # !!! \u751f\u4ea7\u73af\u5883\u63a8\u8350\u4f7f\u7528 gitops\u5de5\u5177\uff08\u5982argoCD\uff09\u6765\u90e8\u7f72\u548c\u7ba1\u7406 chart\u6e90\u7801\u4ed3\u5e93\u5730\u5740\uff1a https://github.com/longguikeji/arkid-charts.git \u6dfb\u52a0helm\u4ed3\u5e93 # helm repo add lgkj https://harbor.longguikeji.com/chartrepo/public helm repo update helm \u67e5\u627e arkid \u7684 charts # helm search repo arkid -l \u5b89\u88c5 arkid chart # kubectl create ns arkid helm --namespace arkid install arkid lgkj/arkid \\ --set persistence.init = true nodeport \u7aef\u53e3\u8bbf\u95ee arkid # \u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee: ` http:// { \u4efb\u610f\u8282\u70b9ip } :32580/ ` \u9996\u6b21\u6253\u5f00arkid\uff0c\u9700\u8981\u8f93\u5165\u8bbf\u95eeurl\uff0c\u6b64url\u53ea\u80fd\u8f93\u5165\u8fd9\u4e00\u6b21\uff0c\u9700\u8981\u614e\u91cd\uff01\uff01\uff01 \u5982\u679c\u751f\u4ea7\u73af\u5883\u9700\u8981\u57df\u540d\u8bbf\u95ee\uff0c\u90a3\u8bf7\u914d\u7f6e\u597d\u4e00\u5207\u4e4b\u540e\u518d\u586b\u8fd9\u4e2aurl\uff01\uff01\uff01 \u521d\u59cb\u5bc6\u7801\uff1a ` admin/admin ` \u5347\u7ea7 arkid chart\u7248\u672c # helm repo update helm -n arkid upgrade arkid lgkj/arkid \\ --set persistence.init = true \u66f4\u591a\u914d\u7f6e # https://github.com/longguikeji/arkid-charts.git \u516c\u5171\u914d\u7f6e # NAME Description DEFAULT VALUE imagePullSecrets \u62c9\u53d6\u955c\u50cf\u7684secret\u540d\u5b57 nil persistence.init \u662f\u5426\u65b0\u521b\u5efapvc\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3afalse\u5219claimName\u7684pvc\u5fc5\u987b\u5b58\u5728 true persistence.storageClass storageclass\u540d\u5b57 nil persistence.accessMode pvc\u8bbf\u95ee\u6a21\u5f0f ReadWriteOnce persistence.size \u9ed8\u8ba48GB 8Gi arkid\u914d\u7f6e # NAME DESCRIPTION DEFAULT VALUE fe.image arkid\u524d\u7aef\u7684\u955c\u50cf harbor.longguikeji.com/ark-releases/arkid-fe-vue3:2.5.0 fe.pullPolicy IfNotPresent, Always IfNotPresent fe.resources.requests arkid\u524d\u7aef\u7684requests {\"cpu\": \"800m\",\"memory\": \"1024Mi\"} fe.resources.limits arkid\u524d\u7aef\u7684limits {} be.image arkid\u540e\u7aef\u7684\u955c\u50cf harbor.longguikeji.com/ark-releases/arkid:2.5.0 be.pullPolicy be.resources.requests arkid\u540e\u7aef\u7684requests {\"cpu\": \"800m\",\"memory\": \"1024Mi\"} be.resources.limits arkid\u540e\u7aef\u7684limits {} mysql\u6570\u636e\u5e93\u914d\u7f6e # NAME Description DEFAULT VALUE mysql.enabled true\u4f1a\u90e8\u7f72\u4e00\u4e2amysql\uff0c\u5982\u679c\u662ffalse\u5219\u9700\u8981\u8bbe\u7f6eexternalDatabase\u4e0b\u7684\u914d\u7f6e true externalDatabase.host \u5916\u90e8mysql\u6570\u636e\u5e93\u7684host \"\" externalDatabase.port \u5916\u90e8mysql\u6570\u636e\u5e93\u7684port 3306 externalDatabase.database \u5916\u90e8mysql\u6570\u636e\u5e93\u7684\u5e93\u540d \"\" externalDatabase.user \u5916\u90e8mysql\u6570\u636e\u5e93\u7684user \"\" externalDatabase.password \u5916\u90e8mysql\u6570\u636e\u5e93\u7684password \"\" redis\u914d\u7f6e # NaME Description DEFAULT VALUE redis.enabled true\u4f1a\u90e8\u7f72\u4e00\u4e2aredis\uff0c\u5982\u679c\u662ffalse\u5219\u9700\u8981\u8bbe\u7f6eexternalRedis\u4e0b\u7684\u914d\u7f6e true externalRedis.host \u5916\u90e8redis\u7684host \"\" externalRedis.port \u5916\u90e8redis\u7684port 6379 externalRedis.db \u5916\u90e8redis\u7684db 0 ingress\u914d\u7f6e # name DEscription default value ingress.enabled \u6dfb\u52a0ingress\u8bb0\u5f55 false ingress.cert \u4f7f\u7528cert-manager\u751f\u6210\u8bc1\u4e66 false ingress.annotations ingress\u7684\u6ce8\u91ca {\"kubernetes.io/ingress.class\": \"nginx\",\"certmanager.k8s.io/cluster-issuer\": \"letsencrypt-prod\"} ingress.host.name ingress\u8bb0\u5f55\u7684\u57df\u540d \"\" ingress.tls \u5982\u679c\u6ca1\u6709 cert-manager\uff0ctls\u4e3atrue\u5219helm\u4f1a\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u5b58\u5230secret false","title":"\u901a\u8fc7k8s\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#k8s","text":"","title":"\u901a\u8fc7k8s\u90e8\u7f72"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#_1","text":"Kubernetes 1.12+ Helm 3.1.0 PV provisioner support in the underlying infrastructure ReadWriteMany volumes for deployment scaling","title":"\u73af\u5883\u51c6\u5907"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#helm","text":"!!! \u751f\u4ea7\u73af\u5883\u63a8\u8350\u4f7f\u7528 gitops\u5de5\u5177\uff08\u5982argoCD\uff09\u6765\u90e8\u7f72\u548c\u7ba1\u7406 chart\u6e90\u7801\u4ed3\u5e93\u5730\u5740\uff1a https://github.com/longguikeji/arkid-charts.git","title":"\u901a\u8fc7helm\u5b89\u88c5"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#helm_1","text":"helm repo add lgkj https://harbor.longguikeji.com/chartrepo/public helm repo update","title":"\u6dfb\u52a0helm\u4ed3\u5e93"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#helm-arkid-charts","text":"helm search repo arkid -l","title":"helm \u67e5\u627e arkid \u7684 charts"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#arkid-chart","text":"kubectl create ns arkid helm --namespace arkid install arkid lgkj/arkid \\ --set persistence.init = true","title":"\u5b89\u88c5 arkid chart"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#nodeport-arkid","text":"\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee: ` http:// { \u4efb\u610f\u8282\u70b9ip } :32580/ ` \u9996\u6b21\u6253\u5f00arkid\uff0c\u9700\u8981\u8f93\u5165\u8bbf\u95eeurl\uff0c\u6b64url\u53ea\u80fd\u8f93\u5165\u8fd9\u4e00\u6b21\uff0c\u9700\u8981\u614e\u91cd\uff01\uff01\uff01 \u5982\u679c\u751f\u4ea7\u73af\u5883\u9700\u8981\u57df\u540d\u8bbf\u95ee\uff0c\u90a3\u8bf7\u914d\u7f6e\u597d\u4e00\u5207\u4e4b\u540e\u518d\u586b\u8fd9\u4e2aurl\uff01\uff01\uff01 \u521d\u59cb\u5bc6\u7801\uff1a ` admin/admin `","title":"nodeport \u7aef\u53e3\u8bbf\u95ee arkid"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#arkid-chart_1","text":"helm repo update helm -n arkid upgrade arkid lgkj/arkid \\ --set persistence.init = true","title":"\u5347\u7ea7 arkid chart\u7248\u672c"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#_2","text":"https://github.com/longguikeji/arkid-charts.git","title":"\u66f4\u591a\u914d\u7f6e"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#_3","text":"NAME Description DEFAULT VALUE imagePullSecrets \u62c9\u53d6\u955c\u50cf\u7684secret\u540d\u5b57 nil persistence.init \u662f\u5426\u65b0\u521b\u5efapvc\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3afalse\u5219claimName\u7684pvc\u5fc5\u987b\u5b58\u5728 true persistence.storageClass storageclass\u540d\u5b57 nil persistence.accessMode pvc\u8bbf\u95ee\u6a21\u5f0f ReadWriteOnce persistence.size \u9ed8\u8ba48GB 8Gi","title":"\u516c\u5171\u914d\u7f6e"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#arkid","text":"NAME DESCRIPTION DEFAULT VALUE fe.image arkid\u524d\u7aef\u7684\u955c\u50cf harbor.longguikeji.com/ark-releases/arkid-fe-vue3:2.5.0 fe.pullPolicy IfNotPresent, Always IfNotPresent fe.resources.requests arkid\u524d\u7aef\u7684requests {\"cpu\": \"800m\",\"memory\": \"1024Mi\"} fe.resources.limits arkid\u524d\u7aef\u7684limits {} be.image arkid\u540e\u7aef\u7684\u955c\u50cf harbor.longguikeji.com/ark-releases/arkid:2.5.0 be.pullPolicy be.resources.requests arkid\u540e\u7aef\u7684requests {\"cpu\": \"800m\",\"memory\": \"1024Mi\"} be.resources.limits arkid\u540e\u7aef\u7684limits {}","title":"arkid\u914d\u7f6e"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#mysql","text":"NAME Description DEFAULT VALUE mysql.enabled true\u4f1a\u90e8\u7f72\u4e00\u4e2amysql\uff0c\u5982\u679c\u662ffalse\u5219\u9700\u8981\u8bbe\u7f6eexternalDatabase\u4e0b\u7684\u914d\u7f6e true externalDatabase.host \u5916\u90e8mysql\u6570\u636e\u5e93\u7684host \"\" externalDatabase.port \u5916\u90e8mysql\u6570\u636e\u5e93\u7684port 3306 externalDatabase.database \u5916\u90e8mysql\u6570\u636e\u5e93\u7684\u5e93\u540d \"\" externalDatabase.user \u5916\u90e8mysql\u6570\u636e\u5e93\u7684user \"\" externalDatabase.password \u5916\u90e8mysql\u6570\u636e\u5e93\u7684password \"\"","title":"mysql\u6570\u636e\u5e93\u914d\u7f6e"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#redis","text":"NaME Description DEFAULT VALUE redis.enabled true\u4f1a\u90e8\u7f72\u4e00\u4e2aredis\uff0c\u5982\u679c\u662ffalse\u5219\u9700\u8981\u8bbe\u7f6eexternalRedis\u4e0b\u7684\u914d\u7f6e true externalRedis.host \u5916\u90e8redis\u7684host \"\" externalRedis.port \u5916\u90e8redis\u7684port 6379 externalRedis.db \u5916\u90e8redis\u7684db 0","title":"redis\u914d\u7f6e"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%20%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/%E9%80%9A%E8%BF%87k8s%E9%83%A8%E7%BD%B2/#ingress","text":"name DEscription default value ingress.enabled \u6dfb\u52a0ingress\u8bb0\u5f55 false ingress.cert \u4f7f\u7528cert-manager\u751f\u6210\u8bc1\u4e66 false ingress.annotations ingress\u7684\u6ce8\u91ca {\"kubernetes.io/ingress.class\": \"nginx\",\"certmanager.k8s.io/cluster-issuer\": \"letsencrypt-prod\"} ingress.host.name ingress\u8bb0\u5f55\u7684\u57df\u540d \"\" ingress.tls \u5982\u679c\u6ca1\u6709 cert-manager\uff0ctls\u4e3atrue\u5219helm\u4f1a\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u5b58\u5230secret false","title":"ingress\u914d\u7f6e"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/","text":"\u4f7f\u7528ArkOS\u90e8\u7f72\u7684\u5347\u7ea7\u65b9\u6cd5 # arkid \u5728github\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://github.com/longguikeji/arkid-charts/releases \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : arkid namespace : kube-system spec : chart : arkid version : 3.0.13 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : arkid kubeapps \u5728ArtifactHUB\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://artifacthub.io/packages/helm/bitnami/kubeapps \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : kubeapps namespace : kube-system spec : chart : kubeapps version : 10.3.1 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : kubeapps \u4f7f\u7528Docker\u90e8\u7f72\u7684\u5347\u7ea7\u65b9\u6cd5 # ## \u8fdb\u5165 docker-compose \u76ee\u5f55 cd arkid-charts/docker-compose ## \u505c\u6b62 docker-compose down ## \u62c9\u53d6\u66f4\u65b0 git\u4ed3\u5e93 git pull ## \u518d\u6b21\u6267\u884c\u542f\u52a8\u547d\u4ee4\uff0c\u5c31\u4f1a\u62c9\u53d6\u65b0\u7684\u955c\u50cf\u66f4\u65b0\u7248\u672c docker-compose up -d \u4f7f\u7528K8S\u90e8\u7f72\u7684\u5347\u7ea7\u65b9\u6cd5 # helm repo update helm -n arkid upgrade arkid lgkj/arkid \\ --set persistence.init = true","title":"Index"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/#arkos","text":"arkid \u5728github\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://github.com/longguikeji/arkid-charts/releases \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/arkid.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : arkid namespace : kube-system spec : chart : arkid version : 3.0.13 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : arkid kubeapps \u5728ArtifactHUB\u67e5\u770b\u65b0\u7248\u672c\u53f7 https://artifacthub.io/packages/helm/bitnami/kubeapps \u4fee\u6539\u90e8\u7f72\u6587\u4ef6\u7248\u672c\u53f7\uff0c\u767b\u5f55 arkos-master01\u64cd\u4f5c \u90e8\u7f72\u6587\u4ef6\u7684\u8def\u5f84\uff1a \u524d\u4e24\u79cd\u90e8\u7f72\u7684\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u6700\u540e\u4e00\u79cd\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u6587\u4ef6\u4f4d\u7f6e\uff1a/var/lib/rancher/k3s/server/manifests/kubeapps.yaml \u4fdd\u5b58\u4e4b\u540e\u4f1a\u81ea\u52a8\u66f4\u65b0 ## \u4fee\u6539 version\u5b57\u6bb5\uff0c\u4fdd\u5b58\u9000\u51fa\uff0c\u7a0d\u540e\u4f1a\u5b8c\u6210\u66f4\u65b0 apiVersion : helm.cattle.io/v1 kind : HelmChart metadata : name : kubeapps namespace : kube-system spec : chart : kubeapps version : 10.3.1 repo : https://harbor.longguikeji.com/chartrepo/public targetNamespace : kubeapps","title":"\u4f7f\u7528ArkOS\u90e8\u7f72\u7684\u5347\u7ea7\u65b9\u6cd5"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/#docker","text":"## \u8fdb\u5165 docker-compose \u76ee\u5f55 cd arkid-charts/docker-compose ## \u505c\u6b62 docker-compose down ## \u62c9\u53d6\u66f4\u65b0 git\u4ed3\u5e93 git pull ## \u518d\u6b21\u6267\u884c\u542f\u52a8\u547d\u4ee4\uff0c\u5c31\u4f1a\u62c9\u53d6\u65b0\u7684\u955c\u50cf\u66f4\u65b0\u7248\u672c docker-compose up -d","title":"\u4f7f\u7528Docker\u90e8\u7f72\u7684\u5347\u7ea7\u65b9\u6cd5"},{"location":"%20%20%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/#k8s","text":"helm repo update helm -n arkid upgrade arkid lgkj/arkid \\ --set persistence.init = true","title":"\u4f7f\u7528K8S\u90e8\u7f72\u7684\u5347\u7ea7\u65b9\u6cd5"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/","text":"\u7528\u6237\u6307\u5357 # \u4f7f\u7528ArkID\u6784\u5efa\u4e13\u5c5eIDaaS/IAM\u5e73\u53f0 \u65b0\u624b\u6559\u7a0b # \u6dfb\u52a0\u7b2c\u4e00\u4e2aOIDC\u5e94\u7528 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8d26\u53f7 \u6dfb\u52a0\u7ec4\u7ec7\u7ed3\u6784\u6216\u89d2\u8272 \u4e3a\u76ee\u6807\u8d26\u53f7\u5f00\u901a\u4e00\u4e2a\u5e94\u7528 \u4e3a\u76ee\u6807\u7ec4\u7ec7\u7ed3\u6784\u5f00\u901a\u4e00\u7ec4\u6743\u9650 \u6dfb\u52a0\u624b\u673a\u9a8c\u8bc1\u7801\u4f5c\u4e3a\u65b0\u7684\u8ba4\u8bc1\u56e0\u7d20 AD\u4e0eArkID\u7684\u6570\u636e\u540c\u6b65 \u542f\u7528\u591a\u79df\u6237\uff0c\u6210\u4e3aIDaaS \u7528\u6237\u624b\u518c # \u666e\u901a\u7528\u6237 # \u684c\u9762 \u4e2a\u4eba\u7ba1\u7406 \u8ba4\u8bc1\u7ba1\u7406 \u6388\u6743\u7ba1\u7406 \u5ba1\u6279\u7ba1\u7406 \u79df\u6237\u7ba1\u7406\u5458 # \u5e94\u7528\u7ba1\u7406 \u5e94\u7528\u5217\u8868 \u5e94\u7528\u5206\u7ec4 \u5e94\u7528\u534f\u8bae \u7528\u6237\u7ba1\u7406 \u7528\u6237\u5217\u8868 \u7528\u6237\u5206\u7ec4 \u8d26\u53f7\u751f\u547d\u5468\u671f \u8ba4\u8bc1\u7ba1\u7406 \u8ba4\u8bc1\u56e0\u7d20 \u7b2c\u4e09\u65b9\u767b\u5f55 \u81ea\u52a8\u767b\u5f55 \u8ba4\u8bc1\u89c4\u5219 \u6388\u6743\u7ba1\u7406 \u6743\u9650\u5217\u8868 \u6743\u9650\u5206\u7ec4 \u6743\u9650\u7ba1\u7406 \u6388\u6743\u89c4\u5219 \u5ba1\u6279\u7ba1\u7406 \u5ba1\u6279\u52a8\u4f5c \u5ba1\u6279\u7cfb\u7edf \u5ba1\u6279\u8bf7\u6c42 \u8eab\u4efd\u6570\u636e\u6e90 SCIM\u6570\u636e\u540c\u6b65 \u6743\u9650\u6570\u636e\u540c\u6b65 \u6269\u5c55\u80fd\u529b WebHook OpenAPI \u4e8b\u4ef6\u5217\u8868 \u65e5\u5fd7\u7ba1\u7406 \u7528\u6237\u65e5\u5fd7 \u7ba1\u7406\u5458\u65e5\u5fd7 \u65e5\u5fd7\u914d\u7f6e \u56fe\u8868\u5206\u6790 \u56fe\u8868\u5c55\u793a \u5206\u6790\u7cfb\u7edf \u79df\u6237\u7ba1\u7406 \u79df\u6237\u914d\u7f6e \u5b50\u7ba1\u7406\u5458 \u4e3b\u9898\u8bbe\u7f6e \u63d2\u4ef6\u7ba1\u7406 \u4e2d\u5fc3\u5e73\u53f0 \u5e73\u53f0\u7ba1\u7406\u5458 # \u5e73\u53f0\u7ba1\u7406 \u63d2\u4ef6\u7ba1\u7406 \u8bed\u8a00\u5305\u7ba1\u7406","title":"\u7528\u6237\u6307\u5357"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/#_1","text":"\u4f7f\u7528ArkID\u6784\u5efa\u4e13\u5c5eIDaaS/IAM\u5e73\u53f0","title":"\u7528\u6237\u6307\u5357"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/#_2","text":"\u6dfb\u52a0\u7b2c\u4e00\u4e2aOIDC\u5e94\u7528 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8d26\u53f7 \u6dfb\u52a0\u7ec4\u7ec7\u7ed3\u6784\u6216\u89d2\u8272 \u4e3a\u76ee\u6807\u8d26\u53f7\u5f00\u901a\u4e00\u4e2a\u5e94\u7528 \u4e3a\u76ee\u6807\u7ec4\u7ec7\u7ed3\u6784\u5f00\u901a\u4e00\u7ec4\u6743\u9650 \u6dfb\u52a0\u624b\u673a\u9a8c\u8bc1\u7801\u4f5c\u4e3a\u65b0\u7684\u8ba4\u8bc1\u56e0\u7d20 AD\u4e0eArkID\u7684\u6570\u636e\u540c\u6b65 \u542f\u7528\u591a\u79df\u6237\uff0c\u6210\u4e3aIDaaS","title":"\u65b0\u624b\u6559\u7a0b"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/#_3","text":"","title":"\u7528\u6237\u624b\u518c"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/#_4","text":"\u684c\u9762 \u4e2a\u4eba\u7ba1\u7406 \u8ba4\u8bc1\u7ba1\u7406 \u6388\u6743\u7ba1\u7406 \u5ba1\u6279\u7ba1\u7406","title":"\u666e\u901a\u7528\u6237"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/#_5","text":"\u5e94\u7528\u7ba1\u7406 \u5e94\u7528\u5217\u8868 \u5e94\u7528\u5206\u7ec4 \u5e94\u7528\u534f\u8bae \u7528\u6237\u7ba1\u7406 \u7528\u6237\u5217\u8868 \u7528\u6237\u5206\u7ec4 \u8d26\u53f7\u751f\u547d\u5468\u671f \u8ba4\u8bc1\u7ba1\u7406 \u8ba4\u8bc1\u56e0\u7d20 \u7b2c\u4e09\u65b9\u767b\u5f55 \u81ea\u52a8\u767b\u5f55 \u8ba4\u8bc1\u89c4\u5219 \u6388\u6743\u7ba1\u7406 \u6743\u9650\u5217\u8868 \u6743\u9650\u5206\u7ec4 \u6743\u9650\u7ba1\u7406 \u6388\u6743\u89c4\u5219 \u5ba1\u6279\u7ba1\u7406 \u5ba1\u6279\u52a8\u4f5c \u5ba1\u6279\u7cfb\u7edf \u5ba1\u6279\u8bf7\u6c42 \u8eab\u4efd\u6570\u636e\u6e90 SCIM\u6570\u636e\u540c\u6b65 \u6743\u9650\u6570\u636e\u540c\u6b65 \u6269\u5c55\u80fd\u529b WebHook OpenAPI \u4e8b\u4ef6\u5217\u8868 \u65e5\u5fd7\u7ba1\u7406 \u7528\u6237\u65e5\u5fd7 \u7ba1\u7406\u5458\u65e5\u5fd7 \u65e5\u5fd7\u914d\u7f6e \u56fe\u8868\u5206\u6790 \u56fe\u8868\u5c55\u793a \u5206\u6790\u7cfb\u7edf \u79df\u6237\u7ba1\u7406 \u79df\u6237\u914d\u7f6e \u5b50\u7ba1\u7406\u5458 \u4e3b\u9898\u8bbe\u7f6e \u63d2\u4ef6\u7ba1\u7406 \u4e2d\u5fc3\u5e73\u53f0","title":"\u79df\u6237\u7ba1\u7406\u5458"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/#_6","text":"\u5e73\u53f0\u7ba1\u7406 \u63d2\u4ef6\u7ba1\u7406 \u8bed\u8a00\u5305\u7ba1\u7406","title":"\u5e73\u53f0\u7ba1\u7406\u5458"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/","text":"\u65b0\u624b\u6559\u7a0b # \u4ee5\u4e0b\u4ecb\u7ecd\u4e00\u4e2a\u65b0\u624b\u7ba1\u7406\u5458\u7684\u6210\u957f\u4e4b\u8def \u51c6\u5907\u5de5\u4f5c \u5728SaaS\u7cfb\u7edf\u4e2d\u521b\u5efa\u79df\u6237\uff0c\u6216\u8005\u79c1\u6709\u5316\u90e8\u7f72\u540e\u7528admin\u8d26\u6237\u767b\u5f55\u540e\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4ee5\u4e0b\u64cd\u4f5c \u6dfb\u52a0\u7b2c\u4e00\u4e2aOIDC\u5e94\u7528 # \u6253\u5f00\u5e94\u7528\u5217\u8868 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u586b\u5199\u914d\u7f6e \u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u70b9\u51fb\u786e\u8ba4\u540e\uff0c\u5bf9\u8bdd\u6846\u5173\u95ed\uff0c\u53ef\u4ee5\u770b\u5230\u4f60\u521b\u5efa\u7684\u5e94\u7528\u3002 \u5e94\u7528\u7c7b\u578b\u9009\u62e9\u4e3aOIDC\uff0c\u586b\u5199\u53c2\u6570\uff0c\u521b\u5efa\u5b8c\u6bd5 \u5373\u53ef\u67e5\u770b\u8be5\u534f\u8bae\u6240\u6709\u76f8\u5173\u7684\u53c2\u6570\u3002 \u76f8\u5173\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8bf7\u53c2\u8003 OIDC\u63d2\u4ef6\u7684\u6587\u6863 \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8d26\u53f7 # \u6253\u5f00\u7528\u6237\u5217\u8868 \u70b9\u51fb\u521b\u5efa \u586b\u5199\u4e0b\u9762\u7684\u8868\u5355\uff0c\u70b9\u51fb\u521b\u5efa\u5373\u53ef\u3002 \u6dfb\u52a0\u7ec4\u7ec7\u7ed3\u6784\u6216\u89d2\u8272 # \u6253\u5f00\u7528\u6237\u5206\u7ec4 \u70b9\u51fb\u521b\u5efa \u4e3a\u5206\u7ec4\u6dfb\u52a0\u7528\u6237 \u9009\u62e9\u7528\u6237 \u5173\u4e8e\u5206\u7ec4\u7684\u8be6\u7ec6\u4ecb\u7ecd\u53ef\u4ee5\u770b \u7528\u6237\u7ba1\u7406-\u7528\u6237\u5206\u7ec4 \u586b\u5199\u4e0b\u9762\u7684\u8868\u5355\uff0c\u70b9\u51fb\u521b\u5efa\u5373\u53ef\u3002 \u4e3a\u76ee\u6807\u8d26\u53f7\u5f00\u901a\u4e00\u4e2a\u5e94\u7528 # \u4e3a\u76ee\u6807\u7ec4\u7ec7\u7ed3\u6784\u5f00\u901a\u4e00\u7ec4\u6743\u9650 # \u6dfb\u52a0\u624b\u673a\u9a8c\u8bc1\u7801\u4f5c\u4e3a\u65b0\u7684\u8ba4\u8bc1\u56e0\u7d20 # \u6253\u5f00\u8ba4\u8bc1\u56e0\u7d20 \u70b9\u51fb\u521b\u5efa \u6253\u5f00\u8ba4\u8bc1\u56e0\u7d20 \u9009\u62e9\u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b\u201cmobile\u201d\uff0c\u586b\u5199\u8868\u5355 AD\u4e0eArkID\u7684\u6570\u636e\u540c\u6b65 # \u914d\u7f6e\u540c\u6b65AD\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7\u5230ArkID \u6253\u5f00SCIM\u6570\u636e\u540c\u6b65\uff0c\u70b9\u51fb\u521b\u5efa \u914d\u7f6eAD\u540c\u6b65Server \u914d\u7f6eArkID\u540c\u6b65Client \u67e5\u770bAD\u4e2d\u6e90\u6570\u636e \u67e5\u770bArkID\u4e2d\u5df2\u540c\u6b65\u6570\u636e \u63d0\u793a SCIM\u540c\u6b65\u670d\u52a1\u5668: \u9009\u62e9\u4e0a\u4e2a\u6b65\u9aa4\u521b\u5efa\u7684 AD\u540c\u6b65Server \u5b9a\u65f6\u8fd0\u884c\u65f6\u95f4: \u683c\u5f0f\u53c2\u7167linux crontab, \u4e0b\u56fe\u4e2d\u8868\u793a\u6bcf\u592911\uff1a51\u8fd0\u884c\u5b9a\u65f6\u540c\u6b65\u4efb\u52a1 \u5b9a\u65f6\u4efb\u52a1\u9700\u8981\u542f\u52a8celery work\u548cbeat: celery -A arkid.core.tasks.celery beat -l debug celery -A arkid.core.tasks.celery worker -l debug \u542f\u7528\u591a\u79df\u6237\uff0c\u6210\u4e3aIDaaS #","title":"\u65b0\u624b\u6559\u7a0b"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#_1","text":"\u4ee5\u4e0b\u4ecb\u7ecd\u4e00\u4e2a\u65b0\u624b\u7ba1\u7406\u5458\u7684\u6210\u957f\u4e4b\u8def \u51c6\u5907\u5de5\u4f5c \u5728SaaS\u7cfb\u7edf\u4e2d\u521b\u5efa\u79df\u6237\uff0c\u6216\u8005\u79c1\u6709\u5316\u90e8\u7f72\u540e\u7528admin\u8d26\u6237\u767b\u5f55\u540e\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4ee5\u4e0b\u64cd\u4f5c","title":"\u65b0\u624b\u6559\u7a0b"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#oidc","text":"\u6253\u5f00\u5e94\u7528\u5217\u8868 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u586b\u5199\u914d\u7f6e \u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u70b9\u51fb\u786e\u8ba4\u540e\uff0c\u5bf9\u8bdd\u6846\u5173\u95ed\uff0c\u53ef\u4ee5\u770b\u5230\u4f60\u521b\u5efa\u7684\u5e94\u7528\u3002 \u5e94\u7528\u7c7b\u578b\u9009\u62e9\u4e3aOIDC\uff0c\u586b\u5199\u53c2\u6570\uff0c\u521b\u5efa\u5b8c\u6bd5 \u5373\u53ef\u67e5\u770b\u8be5\u534f\u8bae\u6240\u6709\u76f8\u5173\u7684\u53c2\u6570\u3002 \u76f8\u5173\u53c2\u6570\u7684\u542b\u4e49\uff0c\u8bf7\u53c2\u8003 OIDC\u63d2\u4ef6\u7684\u6587\u6863","title":"\u6dfb\u52a0\u7b2c\u4e00\u4e2aOIDC\u5e94\u7528"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#_2","text":"\u6253\u5f00\u7528\u6237\u5217\u8868 \u70b9\u51fb\u521b\u5efa \u586b\u5199\u4e0b\u9762\u7684\u8868\u5355\uff0c\u70b9\u51fb\u521b\u5efa\u5373\u53ef\u3002","title":"\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8d26\u53f7"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#_3","text":"\u6253\u5f00\u7528\u6237\u5206\u7ec4 \u70b9\u51fb\u521b\u5efa \u4e3a\u5206\u7ec4\u6dfb\u52a0\u7528\u6237 \u9009\u62e9\u7528\u6237 \u5173\u4e8e\u5206\u7ec4\u7684\u8be6\u7ec6\u4ecb\u7ecd\u53ef\u4ee5\u770b \u7528\u6237\u7ba1\u7406-\u7528\u6237\u5206\u7ec4 \u586b\u5199\u4e0b\u9762\u7684\u8868\u5355\uff0c\u70b9\u51fb\u521b\u5efa\u5373\u53ef\u3002","title":"\u6dfb\u52a0\u7ec4\u7ec7\u7ed3\u6784\u6216\u89d2\u8272"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#_4","text":"","title":"\u4e3a\u76ee\u6807\u8d26\u53f7\u5f00\u901a\u4e00\u4e2a\u5e94\u7528"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#_5","text":"","title":"\u4e3a\u76ee\u6807\u7ec4\u7ec7\u7ed3\u6784\u5f00\u901a\u4e00\u7ec4\u6743\u9650"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#_6","text":"\u6253\u5f00\u8ba4\u8bc1\u56e0\u7d20 \u70b9\u51fb\u521b\u5efa \u6253\u5f00\u8ba4\u8bc1\u56e0\u7d20 \u9009\u62e9\u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b\u201cmobile\u201d\uff0c\u586b\u5199\u8868\u5355","title":"\u6dfb\u52a0\u624b\u673a\u9a8c\u8bc1\u7801\u4f5c\u4e3a\u65b0\u7684\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#adarkid","text":"\u914d\u7f6e\u540c\u6b65AD\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7\u5230ArkID \u6253\u5f00SCIM\u6570\u636e\u540c\u6b65\uff0c\u70b9\u51fb\u521b\u5efa \u914d\u7f6eAD\u540c\u6b65Server \u914d\u7f6eArkID\u540c\u6b65Client \u67e5\u770bAD\u4e2d\u6e90\u6570\u636e \u67e5\u770bArkID\u4e2d\u5df2\u540c\u6b65\u6570\u636e \u63d0\u793a SCIM\u540c\u6b65\u670d\u52a1\u5668: \u9009\u62e9\u4e0a\u4e2a\u6b65\u9aa4\u521b\u5efa\u7684 AD\u540c\u6b65Server \u5b9a\u65f6\u8fd0\u884c\u65f6\u95f4: \u683c\u5f0f\u53c2\u7167linux crontab, \u4e0b\u56fe\u4e2d\u8868\u793a\u6bcf\u592911\uff1a51\u8fd0\u884c\u5b9a\u65f6\u540c\u6b65\u4efb\u52a1 \u5b9a\u65f6\u4efb\u52a1\u9700\u8981\u542f\u52a8celery work\u548cbeat: celery -A arkid.core.tasks.celery beat -l debug celery -A arkid.core.tasks.celery worker -l debug","title":"AD\u4e0eArkID\u7684\u6570\u636e\u540c\u6b65"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/#idaas","text":"","title":"\u542f\u7528\u591a\u79df\u6237\uff0c\u6210\u4e3aIDaaS"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/","text":"\u6ce8\u518c\u4e0e\u767b\u5f55 # \u4e00\u5171\u56db\u7c7b\u9875\u9762: \u767b\u5f55,\u6ce8\u518c,\u91cd\u7f6e\u5bc6\u7801\uff0c\u7ed1\u5b9a\u8d26\u53f7 \u6bcf\u4e2a\u9875\u9762\u662f\u6839\u636e\u6b63\u5728\u8fd0\u884c\u7684\u63d2\u4ef6\u548c\u5176\u914d\u7f6e\u6765\u51b3\u5b9a\u5176\u529f\u80fd\u7684\u3002 \u6bcf\u4e2a\u9875\u9762\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b\uff1a \u79df\u6237\u56fe\u6807\u4e0e\u540d\u79f0 \u4e3b\u4f53\u8868\u5355: \u652f\u6301\u591a\u4e2a\u8868\u5355, \u6bcf\u4e2a\u8868\u5355\u5bf9\u5e94\u4e00\u4e2asubmit\u6309\u94ae, \u89e6\u53d1\u5bf9\u5e94\u7684API \u8868\u5355\u6269\u5c55: \u7528\u6765\u8df3\u8f6c\u5230\u5176\u5b83\u9875\u9762\u4e2d \u767b\u5f55\u7a97\u53e3\u7684\u6269\u5c55\u90e8\u5206: \u7b2c\u4e09\u65b9\u767b\u5f55\u5165\u53e3 \u5176\u5b83\u63d0\u793a \u79df\u6237\u56fe\u6807\u4e0e\u540d\u79f0 # \u5728 \u79df\u6237\u914d\u7f6e \u4e2d\u66f4\u6539 \u767b\u5f55, \u6ce8\u518c, \u91cd\u7f6e\u5bc6\u7801 # \u8fd9\u4e09\u4e2a\u9875\u9762\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u7531 \u8ba4\u8bc1\u56e0\u7d20 \u7684\u914d\u7f6e\u51b3\u5b9a\u7684\uff0c\u7531\u7ba1\u7406\u5458\u8fdb\u884c\u914d\u7f6e\uff0c\u4ece\u800c\u5177\u6709\u77ed\u4fe1\u9a8c\u8bc1\uff0c\u90ae\u7bb1\u6ce8\u518c\u7b49\u5404\u79cd\u529f\u80fd\u3002 \u7ed1\u5b9a\u8d26\u53f7 # \u63d0\u793a \u7ed1\u5b9a\u8d26\u53f7\u9875\u9762\u5185\u5bb9\u59cb\u7ec8\u4e0e\u767b\u5f55\u9875\u9762\u5185\u5bb9\u4fdd\u6301\u4e00\u81f4\u3002 \u5f53\u4f60\u901a\u8fc7\u7b2c\u4e09\u65b9\u767b\u5f55\u8fdb\u5165\u7cfb\u7edf\u540e\uff0c\u5982\u679c\u8be5\u8d26\u53f7\u5e76\u6ca1\u6709\u7ed1\u5b9aArkID\u7684\u8d26\u53f7\uff0c \u7ed1\u5b9a\u8d26\u53f7\u9875\u9762 \u5c31\u4f1a\u6253\u5f00\u3002 \u7ed1\u5b9a\u8d26\u53f7\u7a97\u53e3\u4e2d\uff0c\u4f1a\u660e\u786e\u63d0\u9192\u7528\u6237\u662f\u901a\u8fc7\u54ea\u4e2a\u7b2c\u4e09\u65b9\u8d26\u53f7\u5b8c\u6210\u4e86\u767b\u5f55\uff0c\u5e76\u663e\u793a\u5176\u5934\u50cf\u4e0e\u540d\u5b57\u3002\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u663e\u793a\u5728\u201c\u767b\u5f55\u7a97\u53e3\u7684\u6269\u5c55\u90e8\u5206\u201d\u5373\u53ef\u3002\u6587\u5b57\u4e3a\uff1a\u201c\u4f60\u7684\u5fae\u4fe1\u8d26\u53f7\uff08\u5fae\u4fe1\u540d\uff09\u6ca1\u6709\u7ed1\u5b9aArkID\u8d26\u53f7\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6709ArkID\u8d26\u53f7\uff0c\u901a\u8fc7\u8be5\u7a97\u53e3\u767b\u5f55\u5373\u53ef\u5b8c\u6210\u7ed1\u5b9a\u3002\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\uff0c\u53ef\u4ee5\u8fdb\u5165\u6ce8\u518c\u9875\u9762\u5efa\u7acb\u65b0\u8d26\u53f7\u3002\u201d \u7b2c\u4e09\u65b9\u767b\u5f55 # \u7ba1\u7406\u5458\u53ef\u4ee5\u5728 \u7b2c\u4e09\u65b9\u767b\u5f55 \u4e2d\u7ba1\u7406\u6240\u6709\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u3002 \u70b9\u51fb\u7b2c\u4e09\u65b9\u767b\u5f55\uff0c\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\u3002 \u8be5\u4e09\u65b9\u8d26\u53f7\u5df2\u7ecf\u7ed1\u5b9a\u597dArkID\u8d26\u53f7\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u7ed1\u5b9a\uff0c\u76f4\u63a5\u8fdb\u5165\u7cfb\u7edf\u3002 \u7b2c\u4e8c\u79cd\u662f\u8be5\u8d26\u53f7\u672a\u7ed1\u5b9aArkID\u8d26\u53f7\uff0c\u5219\u8981\u6c42\u7ed1\u5b9a\uff0c\u8fdb\u5165\u7ed1\u5b9a\u7a97\u53e3","title":"\u6ce8\u518c\u4e0e\u767b\u5f55"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/#_1","text":"\u4e00\u5171\u56db\u7c7b\u9875\u9762: \u767b\u5f55,\u6ce8\u518c,\u91cd\u7f6e\u5bc6\u7801\uff0c\u7ed1\u5b9a\u8d26\u53f7 \u6bcf\u4e2a\u9875\u9762\u662f\u6839\u636e\u6b63\u5728\u8fd0\u884c\u7684\u63d2\u4ef6\u548c\u5176\u914d\u7f6e\u6765\u51b3\u5b9a\u5176\u529f\u80fd\u7684\u3002 \u6bcf\u4e2a\u9875\u9762\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b\uff1a \u79df\u6237\u56fe\u6807\u4e0e\u540d\u79f0 \u4e3b\u4f53\u8868\u5355: \u652f\u6301\u591a\u4e2a\u8868\u5355, \u6bcf\u4e2a\u8868\u5355\u5bf9\u5e94\u4e00\u4e2asubmit\u6309\u94ae, \u89e6\u53d1\u5bf9\u5e94\u7684API \u8868\u5355\u6269\u5c55: \u7528\u6765\u8df3\u8f6c\u5230\u5176\u5b83\u9875\u9762\u4e2d \u767b\u5f55\u7a97\u53e3\u7684\u6269\u5c55\u90e8\u5206: \u7b2c\u4e09\u65b9\u767b\u5f55\u5165\u53e3 \u5176\u5b83\u63d0\u793a","title":"\u6ce8\u518c\u4e0e\u767b\u5f55"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/#_2","text":"\u5728 \u79df\u6237\u914d\u7f6e \u4e2d\u66f4\u6539","title":"\u79df\u6237\u56fe\u6807\u4e0e\u540d\u79f0"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/#_3","text":"\u8fd9\u4e09\u4e2a\u9875\u9762\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u7531 \u8ba4\u8bc1\u56e0\u7d20 \u7684\u914d\u7f6e\u51b3\u5b9a\u7684\uff0c\u7531\u7ba1\u7406\u5458\u8fdb\u884c\u914d\u7f6e\uff0c\u4ece\u800c\u5177\u6709\u77ed\u4fe1\u9a8c\u8bc1\uff0c\u90ae\u7bb1\u6ce8\u518c\u7b49\u5404\u79cd\u529f\u80fd\u3002","title":"\u767b\u5f55, \u6ce8\u518c, \u91cd\u7f6e\u5bc6\u7801"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/#_4","text":"\u63d0\u793a \u7ed1\u5b9a\u8d26\u53f7\u9875\u9762\u5185\u5bb9\u59cb\u7ec8\u4e0e\u767b\u5f55\u9875\u9762\u5185\u5bb9\u4fdd\u6301\u4e00\u81f4\u3002 \u5f53\u4f60\u901a\u8fc7\u7b2c\u4e09\u65b9\u767b\u5f55\u8fdb\u5165\u7cfb\u7edf\u540e\uff0c\u5982\u679c\u8be5\u8d26\u53f7\u5e76\u6ca1\u6709\u7ed1\u5b9aArkID\u7684\u8d26\u53f7\uff0c \u7ed1\u5b9a\u8d26\u53f7\u9875\u9762 \u5c31\u4f1a\u6253\u5f00\u3002 \u7ed1\u5b9a\u8d26\u53f7\u7a97\u53e3\u4e2d\uff0c\u4f1a\u660e\u786e\u63d0\u9192\u7528\u6237\u662f\u901a\u8fc7\u54ea\u4e2a\u7b2c\u4e09\u65b9\u8d26\u53f7\u5b8c\u6210\u4e86\u767b\u5f55\uff0c\u5e76\u663e\u793a\u5176\u5934\u50cf\u4e0e\u540d\u5b57\u3002\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u663e\u793a\u5728\u201c\u767b\u5f55\u7a97\u53e3\u7684\u6269\u5c55\u90e8\u5206\u201d\u5373\u53ef\u3002\u6587\u5b57\u4e3a\uff1a\u201c\u4f60\u7684\u5fae\u4fe1\u8d26\u53f7\uff08\u5fae\u4fe1\u540d\uff09\u6ca1\u6709\u7ed1\u5b9aArkID\u8d26\u53f7\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6709ArkID\u8d26\u53f7\uff0c\u901a\u8fc7\u8be5\u7a97\u53e3\u767b\u5f55\u5373\u53ef\u5b8c\u6210\u7ed1\u5b9a\u3002\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\uff0c\u53ef\u4ee5\u8fdb\u5165\u6ce8\u518c\u9875\u9762\u5efa\u7acb\u65b0\u8d26\u53f7\u3002\u201d","title":"\u7ed1\u5b9a\u8d26\u53f7"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/#_5","text":"\u7ba1\u7406\u5458\u53ef\u4ee5\u5728 \u7b2c\u4e09\u65b9\u767b\u5f55 \u4e2d\u7ba1\u7406\u6240\u6709\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u3002 \u70b9\u51fb\u7b2c\u4e09\u65b9\u767b\u5f55\uff0c\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\u3002 \u8be5\u4e09\u65b9\u8d26\u53f7\u5df2\u7ecf\u7ed1\u5b9a\u597dArkID\u8d26\u53f7\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u7ed1\u5b9a\uff0c\u76f4\u63a5\u8fdb\u5165\u7cfb\u7edf\u3002 \u7b2c\u4e8c\u79cd\u662f\u8be5\u8d26\u53f7\u672a\u7ed1\u5b9aArkID\u8d26\u53f7\uff0c\u5219\u8981\u6c42\u7ed1\u5b9a\uff0c\u8fdb\u5165\u7ed1\u5b9a\u7a97\u53e3","title":"\u7b2c\u4e09\u65b9\u767b\u5f55"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/","text":"\u666e\u901a\u7528\u6237 # \u684c\u9762 # \u684c\u9762\uff0c\u5b9e\u8d28\u4e0a\u5c31\u662f\u5e94\u7528\u5217\u8868\u3002\u8fd9\u91cc\u5c55\u793a\u4e86\u5f53\u524d\u7528\u6237\u80fd\u6253\u5f00\u7684\u6240\u6709\u5e94\u7528\u7684\u5feb\u6377\u5165\u53e3\u3002\u8fd9\u4e9b\u5e94\u7528\u4e00\u822c\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u79df\u6237\u7ba1\u7406\u4e2d\uff0c\u7531\u79df\u6237\u7ba1\u7406\u5458\u6dfb\u52a0\u5e76\u6388\u6743\u7ed9\u5f53\u524d\u7528\u6237\u7684\u3002 \u4e2a\u4eba\u7ba1\u7406 # \u9ed8\u8ba4\u5728\u8fd9\u91cc\u7ba1\u7406 \u4e2a\u4eba\u8d44\u6599 \u7b2c\u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a token\u7ba1\u7406 \u5176\u5b83\u63d2\u4ef6\u53ef\u80fd\u5728\u8fd9\u91cc\u63d2\u5165\u989d\u5916\u7684\u4e0e\u7528\u6237\u4e2a\u4eba\u6709\u5173\u7684\u9875\u9762\uff0c\u5982\uff1a \u5b50\u8d26\u53f7\u7ba1\u7406 \u8868\u5355\u4ee3\u586b\u8d26\u53f7\u7ba1\u7406 \u7b49\u7b49 \u8ba4\u8bc1\u7ba1\u7406 # \u7528\u6237\u5728\u8fd9\u91cc\u66f4\u65b0\u5404\u7c7b\u8ba4\u8bc1\u56e0\u7d20\u7684\u5173\u952e\u4fe1\u606f\uff0c\u9ed8\u8ba4\u6709\uff1a \u4fee\u6539\u5bc6\u7801 \u4fee\u6539\u624b\u673a\u53f7 \u5176\u5b83\u63d2\u4ef6\u53ef\u80fd\u5e26\u6765\uff1a \u4fee\u6539\u6307\u7eb9 \u4fee\u6539\u9762\u7eb9 \u7b49\u7b49 \u6709\u54ea\u4e9b\u529f\u80fd\u53d6\u51b3\u4e8e\u5e73\u53f0\u7684\u63d2\u4ef6 \u6388\u6743\u7ba1\u7406 # \u67e5\u770b\u5f53\u524d\u7528\u6237\u6240\u62e5\u6709\u7684\u6743\u9650 \u7533\u8bf7\u6743\u9650\uff1a\u7528\u6237\u53ef\u4ee5\u5728\u6b64\u7533\u8bf7\u81ea\u5df1\u6ca1\u6709\u7684\u6743\u9650 \u5ba1\u6279\u8bf7\u6c42 # \u7528\u6237\u53ef\u4ee5\u67e5\u770b\u81ea\u5df1\u53d1\u8d77\u7684\u6743\u9650\u7533\u8bf7\u6216\u5176\u5b83\u9700\u8981\u5ba1\u6279\u7684\u8bf7\u6c42 \u5207\u6362\u79df\u6237 # \u5f53\u591a\u79df\u6237\u529f\u80fd\u6253\u5361\u65f6\uff0c\u5e73\u53f0\u7528\u6237\u53ef\u4ee5\u5728\u591a\u4e2a\u79df\u6237\u95f4\u5207\u6362 \u9000\u51fa\u767b\u5f55 #","title":"\u666e\u901a\u7528\u6237"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_1","text":"","title":"\u666e\u901a\u7528\u6237"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_2","text":"\u684c\u9762\uff0c\u5b9e\u8d28\u4e0a\u5c31\u662f\u5e94\u7528\u5217\u8868\u3002\u8fd9\u91cc\u5c55\u793a\u4e86\u5f53\u524d\u7528\u6237\u80fd\u6253\u5f00\u7684\u6240\u6709\u5e94\u7528\u7684\u5feb\u6377\u5165\u53e3\u3002\u8fd9\u4e9b\u5e94\u7528\u4e00\u822c\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u79df\u6237\u7ba1\u7406\u4e2d\uff0c\u7531\u79df\u6237\u7ba1\u7406\u5458\u6dfb\u52a0\u5e76\u6388\u6743\u7ed9\u5f53\u524d\u7528\u6237\u7684\u3002","title":"\u684c\u9762"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_3","text":"\u9ed8\u8ba4\u5728\u8fd9\u91cc\u7ba1\u7406 \u4e2a\u4eba\u8d44\u6599 \u7b2c\u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a token\u7ba1\u7406 \u5176\u5b83\u63d2\u4ef6\u53ef\u80fd\u5728\u8fd9\u91cc\u63d2\u5165\u989d\u5916\u7684\u4e0e\u7528\u6237\u4e2a\u4eba\u6709\u5173\u7684\u9875\u9762\uff0c\u5982\uff1a \u5b50\u8d26\u53f7\u7ba1\u7406 \u8868\u5355\u4ee3\u586b\u8d26\u53f7\u7ba1\u7406 \u7b49\u7b49","title":"\u4e2a\u4eba\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_4","text":"\u7528\u6237\u5728\u8fd9\u91cc\u66f4\u65b0\u5404\u7c7b\u8ba4\u8bc1\u56e0\u7d20\u7684\u5173\u952e\u4fe1\u606f\uff0c\u9ed8\u8ba4\u6709\uff1a \u4fee\u6539\u5bc6\u7801 \u4fee\u6539\u624b\u673a\u53f7 \u5176\u5b83\u63d2\u4ef6\u53ef\u80fd\u5e26\u6765\uff1a \u4fee\u6539\u6307\u7eb9 \u4fee\u6539\u9762\u7eb9 \u7b49\u7b49 \u6709\u54ea\u4e9b\u529f\u80fd\u53d6\u51b3\u4e8e\u5e73\u53f0\u7684\u63d2\u4ef6","title":"\u8ba4\u8bc1\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_5","text":"\u67e5\u770b\u5f53\u524d\u7528\u6237\u6240\u62e5\u6709\u7684\u6743\u9650 \u7533\u8bf7\u6743\u9650\uff1a\u7528\u6237\u53ef\u4ee5\u5728\u6b64\u7533\u8bf7\u81ea\u5df1\u6ca1\u6709\u7684\u6743\u9650","title":"\u6388\u6743\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_6","text":"\u7528\u6237\u53ef\u4ee5\u67e5\u770b\u81ea\u5df1\u53d1\u8d77\u7684\u6743\u9650\u7533\u8bf7\u6216\u5176\u5b83\u9700\u8981\u5ba1\u6279\u7684\u8bf7\u6c42","title":"\u5ba1\u6279\u8bf7\u6c42"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_7","text":"\u5f53\u591a\u79df\u6237\u529f\u80fd\u6253\u5361\u65f6\uff0c\u5e73\u53f0\u7528\u6237\u53ef\u4ee5\u5728\u591a\u4e2a\u79df\u6237\u95f4\u5207\u6362","title":"\u5207\u6362\u79df\u6237"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/#_8","text":"","title":"\u9000\u51fa\u767b\u5f55"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%BB%91%E5%AE%9A/","text":"\u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a # \u4e09\u65b9\u8d26\u53f7\u7684\u7ed1\u5b9a\u5305\u542b\u8d26\u53f7\u7684\u7ed1\u5b9a\u4e0e\u89e3\u7ed1\uff0carkid\u652f\u6301\u5728\u7528\u6237\u7684\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\uff0c\u5bf9\u4e09\u65b9\u8d26\u53f7\u7edf\u4e00\u8fdb\u884c\u7ed1\u5b9a\u548c\u89e3\u7ed1 \u4e09\u65b9\u8d26\u53f7\u7684\u7ed1\u5b9a # \u7ed1\u5b9a\u9875\u9762\u8def\u5f84: \u70b9\u51fb\u5de6\u4e0a\u89d2\u6635\u79f0>\u70b9\u51fb\u8ba4\u8bc1\u7ba1\u7406\u83dc\u5355 \u70b9\u51fb\u7ed1\u5b9a\u6309\u94ae\u540e\uff0c\u7a0d\u7b49\u7247\u523b\uff0c\u9875\u9762\u4f1a\u8df3\u8f6c\u5230\u7b2c\u4e09\u65b9\u7f51\u7ad9\u5b8c\u6210\u6388\u6743\uff0c\u6388\u6743\u540e\u4f1a\u81ea\u52a8\u8df3\u5230\u5f53\u524d\u7ed1\u5b9a\u9875\u9762 \u4e09\u65b9\u8d26\u53f7\u7684\u89e3\u7ed1 # \u89e3\u7ed1\u9875\u9762\u8def\u5f84: \u70b9\u51fb\u5de6\u4e0a\u89d2\u6635\u79f0>\u70b9\u51fb\u8ba4\u8bc1\u7ba1\u7406\u83dc\u5355 \u70b9\u51fb\u89e3\u7ed1\u6309\u94ae\u540e\uff0c\u4f1a\u81ea\u52a8\u89e3\u9664\u4e09\u65b9\u8d26\u6237\u548c\u7528\u6237\u7684\u7ed1\u5b9a\u5173\u7cfb\uff0c\u5982\u679c\u5f00\u53d1\u8005\u9700\u8981\u5728\u89e3\u9664\u7ed1\u5b9a\u7684\u540c\u65f6\u505a\u4e00\u4e9b\u64cd\u4f5c\uff0c\u9700\u8981\u91cd\u5199 account_unbind() \u65b9\u6cd5","title":"\u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%BB%91%E5%AE%9A/#_1","text":"\u4e09\u65b9\u8d26\u53f7\u7684\u7ed1\u5b9a\u5305\u542b\u8d26\u53f7\u7684\u7ed1\u5b9a\u4e0e\u89e3\u7ed1\uff0carkid\u652f\u6301\u5728\u7528\u6237\u7684\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\uff0c\u5bf9\u4e09\u65b9\u8d26\u53f7\u7edf\u4e00\u8fdb\u884c\u7ed1\u5b9a\u548c\u89e3\u7ed1","title":"\u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%BB%91%E5%AE%9A/#_2","text":"\u7ed1\u5b9a\u9875\u9762\u8def\u5f84: \u70b9\u51fb\u5de6\u4e0a\u89d2\u6635\u79f0>\u70b9\u51fb\u8ba4\u8bc1\u7ba1\u7406\u83dc\u5355 \u70b9\u51fb\u7ed1\u5b9a\u6309\u94ae\u540e\uff0c\u7a0d\u7b49\u7247\u523b\uff0c\u9875\u9762\u4f1a\u8df3\u8f6c\u5230\u7b2c\u4e09\u65b9\u7f51\u7ad9\u5b8c\u6210\u6388\u6743\uff0c\u6388\u6743\u540e\u4f1a\u81ea\u52a8\u8df3\u5230\u5f53\u524d\u7ed1\u5b9a\u9875\u9762","title":"\u4e09\u65b9\u8d26\u53f7\u7684\u7ed1\u5b9a"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/%E4%B8%89%E6%96%B9%E8%B4%A6%E5%8F%B7%E7%BB%91%E5%AE%9A/#_3","text":"\u89e3\u7ed1\u9875\u9762\u8def\u5f84: \u70b9\u51fb\u5de6\u4e0a\u89d2\u6635\u79f0>\u70b9\u51fb\u8ba4\u8bc1\u7ba1\u7406\u83dc\u5355 \u70b9\u51fb\u89e3\u7ed1\u6309\u94ae\u540e\uff0c\u4f1a\u81ea\u52a8\u89e3\u9664\u4e09\u65b9\u8d26\u6237\u548c\u7528\u6237\u7684\u7ed1\u5b9a\u5173\u7cfb\uff0c\u5982\u679c\u5f00\u53d1\u8005\u9700\u8981\u5728\u89e3\u9664\u7ed1\u5b9a\u7684\u540c\u65f6\u505a\u4e00\u4e9b\u64cd\u4f5c\uff0c\u9700\u8981\u91cd\u5199 account_unbind() \u65b9\u6cd5","title":"\u4e09\u65b9\u8d26\u53f7\u7684\u89e3\u7ed1"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%9B%BE%E8%A1%A8%E5%88%86%E6%9E%90/","text":"\u56fe\u8868\u5206\u6790 # \u56fe\u8868\u5c55\u793a # \u5206\u6790\u7cfb\u7edf #","title":"\u56fe\u8868\u5206\u6790"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%9B%BE%E8%A1%A8%E5%88%86%E6%9E%90/#_1","text":"","title":"\u56fe\u8868\u5206\u6790"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%9B%BE%E8%A1%A8%E5%88%86%E6%9E%90/#_2","text":"","title":"\u56fe\u8868\u5c55\u793a"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%9B%BE%E8%A1%A8%E5%88%86%E6%9E%90/#_3","text":"","title":"\u5206\u6790\u7cfb\u7edf"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/","text":"\u5ba1\u6279\u7ba1\u7406 # \u5ba1\u6279\u52a8\u4f5c # \u70b9\u51fb\u521b\u5efa\u6765\u5b9a\u4e49\u201c\u5ba1\u6279\u52a8\u4f5c\u201d\u3002 \u4e00\u4e2aAPI\u4e00\u65e6\u88ab\u5b9a\u4e49\u4e3a\u5ba1\u6279\u52a8\u4f5c\uff0c\u90a3\u4e48\u51e1\u662f\u5bf9\u8be5API\u7684\u8bf7\u6c42\u4f1a\u88ab\u6302\u8d77\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u5ba1\u6279\u8bf7\u6c42\u3002\u76f4\u5230\u8be5\u5ba1\u6279\u8bf7\u6c42\u88ab\u901a\u8fc7\uff0c\u8be5API\u8bf7\u6c42\u624d\u4f1a\u88ab\u653e\u884c\u5e76\u6267\u884c\u3002\u5982\u679c\u8be5\u8bf7\u6c42\u88ab\u62d2\u7edd\uff0c\u5219\u8be5API\u8bf7\u6c42\u4f1a\u88ab\u53d6\u6d88\u3002 \u6bcf\u4e2a\u5ba1\u6279\u52a8\u4f5c\u8981\u6c42\u5bf9\u63a5\u4e00\u4e2a\u5ba1\u6279\u7cfb\u7edf\uff0c\u5ba1\u6279\u7cfb\u7edf\u5c31\u662f\u7528\u6765\u5904\u7406\u7531\u8be5\u5ba1\u6279\u52a8\u4f5c\u6240\u751f\u6210\u7684\u5ba1\u6279\u8bf7\u6c42\u3002 \u5ba1\u6279\u8bf7\u6c42 # \u67e5\u770b\u6240\u6709\u5ba1\u6279\u8bf7\u6c42\u53ca\u5176\u72b6\u6001\u3002 \u5ba1\u6279\u7cfb\u7edf # \u7528\u6765\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u7684\u7cfb\u7edf\u3002 \u7531\u63d2\u4ef6\u5bf9\u63a5\u5404\u4e2a\u5ba1\u6279\u7cfb\u7edf\uff0c\u63d2\u4ef6\u4f1a\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u7ed9\u5404\u4e2a\u5ba1\u6279\u7cfb\u7edf\u5e76\u63a5\u53d7\u5ba1\u6279\u7cfb\u7edf\u5bf9\u8be5\u5ba1\u6279\u8bf7\u6c42\u7684\u66f4\u6539\u53cd\u9988\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u5373\u53ef\u6dfb\u52a0\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u7684\u914d\u7f6e\u3002\u6bcf\u4e2a\u63d2\u4ef6\u914d\u7f6e\u4e0d\u540c\uff0c\u8be6\u89c1\u5404\u4e2a\u63d2\u4ef6\u7684\u6587\u6863\u3002 \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u5904\u7406\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u7531\u79df\u6237\u7ba1\u7406\u5458\u5728 [\u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406] \u4e2d\u53bb\u5904\u7406\u76f8\u5173\u7684\u5ba1\u6279\u8bf7\u6c42\u3002 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 # \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\uff0c\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u7684\u9875\u9762\u3002","title":"\u5ba1\u6279\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u5ba1\u6279\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/#_2","text":"\u70b9\u51fb\u521b\u5efa\u6765\u5b9a\u4e49\u201c\u5ba1\u6279\u52a8\u4f5c\u201d\u3002 \u4e00\u4e2aAPI\u4e00\u65e6\u88ab\u5b9a\u4e49\u4e3a\u5ba1\u6279\u52a8\u4f5c\uff0c\u90a3\u4e48\u51e1\u662f\u5bf9\u8be5API\u7684\u8bf7\u6c42\u4f1a\u88ab\u6302\u8d77\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u5ba1\u6279\u8bf7\u6c42\u3002\u76f4\u5230\u8be5\u5ba1\u6279\u8bf7\u6c42\u88ab\u901a\u8fc7\uff0c\u8be5API\u8bf7\u6c42\u624d\u4f1a\u88ab\u653e\u884c\u5e76\u6267\u884c\u3002\u5982\u679c\u8be5\u8bf7\u6c42\u88ab\u62d2\u7edd\uff0c\u5219\u8be5API\u8bf7\u6c42\u4f1a\u88ab\u53d6\u6d88\u3002 \u6bcf\u4e2a\u5ba1\u6279\u52a8\u4f5c\u8981\u6c42\u5bf9\u63a5\u4e00\u4e2a\u5ba1\u6279\u7cfb\u7edf\uff0c\u5ba1\u6279\u7cfb\u7edf\u5c31\u662f\u7528\u6765\u5904\u7406\u7531\u8be5\u5ba1\u6279\u52a8\u4f5c\u6240\u751f\u6210\u7684\u5ba1\u6279\u8bf7\u6c42\u3002","title":"\u5ba1\u6279\u52a8\u4f5c"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/#_3","text":"\u67e5\u770b\u6240\u6709\u5ba1\u6279\u8bf7\u6c42\u53ca\u5176\u72b6\u6001\u3002","title":"\u5ba1\u6279\u8bf7\u6c42"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/#_4","text":"\u7528\u6765\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u7684\u7cfb\u7edf\u3002 \u7531\u63d2\u4ef6\u5bf9\u63a5\u5404\u4e2a\u5ba1\u6279\u7cfb\u7edf\uff0c\u63d2\u4ef6\u4f1a\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u7ed9\u5404\u4e2a\u5ba1\u6279\u7cfb\u7edf\u5e76\u63a5\u53d7\u5ba1\u6279\u7cfb\u7edf\u5bf9\u8be5\u5ba1\u6279\u8bf7\u6c42\u7684\u66f4\u6539\u53cd\u9988\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u5373\u53ef\u6dfb\u52a0\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u7684\u914d\u7f6e\u3002\u6bcf\u4e2a\u63d2\u4ef6\u914d\u7f6e\u4e0d\u540c\uff0c\u8be6\u89c1\u5404\u4e2a\u63d2\u4ef6\u7684\u6587\u6863\u3002 \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u5904\u7406\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u7531\u79df\u6237\u7ba1\u7406\u5458\u5728 [\u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406] \u4e2d\u53bb\u5904\u7406\u76f8\u5173\u7684\u5ba1\u6279\u8bf7\u6c42\u3002","title":"\u5ba1\u6279\u7cfb\u7edf"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%AE%A1%E6%89%B9%E7%AE%A1%E7%90%86/#_5","text":"\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\uff0c\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u7684\u9875\u9762\u3002","title":"\u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/","text":"\u5e94\u7528\u7ba1\u7406 # \u5e94\u7528\u5217\u8868 # \u5305\u542b\u5e94\u7528\u7684\u67e5\u770b\u3001\u589e\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u529f\u80fd\uff0c \u6bcf\u4e2a\u5e94\u7528\u90fd\u6709\u540d\u79f0\u3001\u5730\u5740\u3001\u56fe\u6807\u3001\u63cf\u8ff0\u3001\u7c7b\u578b \u5b57\u6bb5\uff0c \u5176\u4e2d\u5e94\u7528\u7c7b\u578b\u7684\u79cd\u7c7b\u548c\u5df2\u5b89\u88c5\u63d2\u4ef6\u7684\u914d\u7f6e\u6709\u5173 \u5e94\u7528\u5206\u7ec4 # \u53ef\u4ee5\u5bf9\u5e94\u7528\u8fdb\u884c\u5206\u7ec4\uff0c\u652f\u6301\u6811\u5f62\u7684\u5206\u7ec4\u7ed3\u6784\u3002 \u5e94\u7528\u534f\u8bae # \u67e5\u770b\u7cfb\u7edf\u652f\u6301\u7684\u5e94\u7528\u7c7b\u578b\uff0c\u9ed8\u8ba4\u652f\u6301 OIDC OAuth2 \u5176\u5b83\u534f\u8bae\u5982 SAML2\uff0c CAS\u7b49\u8bf7\u5728\u63d2\u4ef6\u4e2d\u641c\u7d22","title":"\u5e94\u7528\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u5e94\u7528\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/#_2","text":"\u5305\u542b\u5e94\u7528\u7684\u67e5\u770b\u3001\u589e\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u529f\u80fd\uff0c \u6bcf\u4e2a\u5e94\u7528\u90fd\u6709\u540d\u79f0\u3001\u5730\u5740\u3001\u56fe\u6807\u3001\u63cf\u8ff0\u3001\u7c7b\u578b \u5b57\u6bb5\uff0c \u5176\u4e2d\u5e94\u7528\u7c7b\u578b\u7684\u79cd\u7c7b\u548c\u5df2\u5b89\u88c5\u63d2\u4ef6\u7684\u914d\u7f6e\u6709\u5173","title":"\u5e94\u7528\u5217\u8868"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/#_3","text":"\u53ef\u4ee5\u5bf9\u5e94\u7528\u8fdb\u884c\u5206\u7ec4\uff0c\u652f\u6301\u6811\u5f62\u7684\u5206\u7ec4\u7ed3\u6784\u3002","title":"\u5e94\u7528\u5206\u7ec4"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86/#_4","text":"\u67e5\u770b\u7cfb\u7edf\u652f\u6301\u7684\u5e94\u7528\u7c7b\u578b\uff0c\u9ed8\u8ba4\u652f\u6301 OIDC OAuth2 \u5176\u5b83\u534f\u8bae\u5982 SAML2\uff0c CAS\u7b49\u8bf7\u5728\u63d2\u4ef6\u4e2d\u641c\u7d22","title":"\u5e94\u7528\u534f\u8bae"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B/","text":"\u6269\u5c55\u80fd\u529b # Webhook # ArkID\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u53ef\u4ee5\u5bf9\u5916\u89e6\u53d1webhook\u8c03\u7528\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u5373\u53ef\u914d\u7f6e\u4e00\u4e2a\u4e8b\u4ef6\u6240\u5bf9\u5e94\u7684webhook\u8c03\u7528\uff0c\u8be5\u4e8b\u4ef6\u76f8\u5173\u7684\u53c2\u6570\u90fd\u4ee5json\u65b9\u5f0f\u53d1\u9001\u3002 \u6bcf\u4e2awebhook\uff0c\u90fd\u53ef\u4ee5\u67e5\u770b\u5176\u8c03\u7528\u5386\u53f2\u8bb0\u5f55\u5e76\u91cd\u8bd5\u3002 \u4e8b\u4ef6\u5217\u8868 # \u5c55\u793a\u6240\u6709ArkID\u7cfb\u7edf\u5185\u7684\u4e8b\u4ef6\u3002 API\u6587\u6863 # ArkID\u6240\u6709\u63a5\u53e3\u5305\u62ec\u63d2\u4ef6\u7684\u63a5\u53e3\u6587\u6863\u3002","title":"\u6269\u5c55\u80fd\u529b"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B/#_1","text":"","title":"\u6269\u5c55\u80fd\u529b"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B/#webhook","text":"ArkID\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u4e8b\u4ef6\u90fd\u53ef\u4ee5\u5bf9\u5916\u89e6\u53d1webhook\u8c03\u7528\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u5373\u53ef\u914d\u7f6e\u4e00\u4e2a\u4e8b\u4ef6\u6240\u5bf9\u5e94\u7684webhook\u8c03\u7528\uff0c\u8be5\u4e8b\u4ef6\u76f8\u5173\u7684\u53c2\u6570\u90fd\u4ee5json\u65b9\u5f0f\u53d1\u9001\u3002 \u6bcf\u4e2awebhook\uff0c\u90fd\u53ef\u4ee5\u67e5\u770b\u5176\u8c03\u7528\u5386\u53f2\u8bb0\u5f55\u5e76\u91cd\u8bd5\u3002","title":"Webhook"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B/#_2","text":"\u5c55\u793a\u6240\u6709ArkID\u7cfb\u7edf\u5185\u7684\u4e8b\u4ef6\u3002","title":"\u4e8b\u4ef6\u5217\u8868"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%89%A9%E5%B1%95%E8%83%BD%E5%8A%9B/#api","text":"ArkID\u6240\u6709\u63a5\u53e3\u5305\u62ec\u63d2\u4ef6\u7684\u63a5\u53e3\u6587\u6863\u3002","title":"API\u6587\u6863"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/","text":"\u65e5\u5fd7\u7ba1\u7406 # \u65e5\u5fd7\u914d\u7f6e # \u7ba1\u7406\u5458\u884c\u4e3a\u65e5\u5fd7 # \u7528\u6237\u884c\u4e3a\u65e5\u5fd7 #","title":"\u65e5\u5fd7\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u65e5\u5fd7\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/#_2","text":"","title":"\u65e5\u5fd7\u914d\u7f6e"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/#_3","text":"","title":"\u7ba1\u7406\u5458\u884c\u4e3a\u65e5\u5fd7"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/#_4","text":"","title":"\u7528\u6237\u884c\u4e3a\u65e5\u5fd7"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/","text":"\u6743\u9650\u7ba1\u7406 # \u6743\u9650\u5217\u8868 # \u67e5\u770b\u767b\u5f55\u7528\u6237\u6240\u80fd\u8bfb\u53d6\u5230\u7684\u6743\u9650\u4fe1\u606f\uff0c\u8fdb\u884c\u6743\u9650\u7684\u65b0\u5efa\u548c\u7f16\u8f91\u7b49 \u6253\u5f00\u6743\u9650\u5217\u8868 \u65b0\u5efa\u6743\u9650 \u67e5\u770b\u521b\u5efa\u7ed3\u679c \u5220\u9664\u6743\u9650 \u6743\u9650\u641c\u7d22 \u53ea\u6709\u81ea\u5df1\u521b\u5efa\u7684\u6743\u9650\u5141\u8bb8\u5220\u9664\uff0c\u4e0d\u80fd\u5220\u9664\u7cfb\u7edf\u6743\u9650 \u6743\u9650\u5206\u7ec4 # \u5de6\u8fb9\u6811\u7ed3\u6784\u4e2d\uff0c\u7b2c\u4e00\u5c42\u662f\u5e94\u7528\uff0c\u7b2c\u4e8c\u5c42\u662f\u5e94\u7528\u5185\u6743\u9650\u5206\u7ec4\u3002 \u53f3\u8fb9\u662f\u5206\u7ec4\u4e2d\u7684\u6743\u9650 \u53ef\u4ee5\u518d\u8fd9\u91cc\u521b\u5efa\u65b0\u7684\u6743\u9650\u5206\u7ec4\uff0c\u5e76\u7f16\u8f91\u5176\u4e2d\u6743\u9650\u3002 \u6253\u5f00\u6743\u9650\u5206\u7ec4\u5217\u8868 \u65b0\u5efa\u6743\u9650\u5206\u7ec4 \u67e5\u770b\u521b\u5efa\u7ed3\u679c \u67e5\u770b\u6743\u9650\u5206\u7ec4\u7684\u6743\u9650 \u6743\u9650\u5206\u7ec4\u6dfb\u52a0\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u6743\u9650\u7ed3\u679c \u53ea\u6709\u81ea\u5df1\u521b\u5efa\u7684\u6743\u9650\u5206\u7ec4\u5141\u8bb8\u5220\u9664\u548c\u7f16\u8f91\uff0c\u4e0d\u80fd\u5220\u9664\u548c\u7f16\u8f91\u7cfb\u7edf\u5206\u7ec4 \u53ea\u6709\u81ea\u5df1\u6dfb\u52a0\u7684\u6743\u9650\u624d\u53ef\u4ee5\u5220\u9664 \u6388\u6743\u7ba1\u7406 # \u4ece\u4e09\u4e2a\u89d2\u5ea6\uff1a\u7528\u6237\uff0c\u7528\u6237\u5206\u7ec4\uff0c\u5e94\u7528 \u6765\u5206\u914d\u6743\u9650 \u53ef\u4ee5\u7ed9\u67d0\u4e2a\u7528\u6237\u6dfb\u52a0\u6743\u9650\u6216\u5220\u9664\u6743\u9650 \u53ef\u4ee5\u7ed9\u67d0\u4e2a\u7528\u6237\u5206\u7ec4\u6dfb\u52a0\u6743\u9650\u6216\u5220\u9664\u6743\u9650 \u53ef\u4ee5\u7ed9\u67d0\u4e2a\u5e94\u7528\u6765\u6dfb\u52a0\u6743\u9650\u6216\u5220\u9664\u6743\u9650\u6216\u5f00\u653e\u6743\u9650 \u7528\u6237\u6743\u9650 # \u6253\u5f00\u7528\u6237\u6743\u9650\u5217\u8868 \u6dfb\u52a0\u7528\u6237\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u6743\u9650\u7ed3\u679c \u5220\u9664\u7528\u6237\u6743\u9650 \u7528\u6237\u5206\u7ec4\u6743\u9650 # \u6253\u5f00\u7528\u6237\u5206\u7ec4\u5217\u8868 \u6dfb\u52a0\u7528\u6237\u5206\u7ec4\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u7684\u7528\u6237\u5206\u7ec4\u6743\u9650 \u5220\u9664\u7528\u6237\u5206\u7ec4\u6743\u9650 \u5e94\u7528\u6743\u9650 # \u6253\u5f00\u5e94\u7528\u6743\u9650\u5217\u8868 \u6dfb\u52a0\u5e94\u7528\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u7684\u5e94\u7528\u6743\u9650 \u5220\u9664\u5e94\u7528\u6743\u9650 \u5982\u679c\u4f7f\u7528\u5e94\u7528ID\u548cSecret\u8bbf\u95ee # \u83b7\u53d6\u5e94\u7528ID\u548cSecret \u4f7f\u7528\u5e94\u7528ID\u548cSecret\u8bbf\u95ee\uff0c\u9700\u8981\u5728headers\u52a0\u4e0aAPP-ID\u548cAPP-SECRET\u53c2\u6570 \u6388\u6743\u89c4\u5219 # \u9664\u4e86\u6388\u6743\u7ba1\u7406\u4e2dRBAC\u7684\u6743\u9650\u7ba1\u7406\u65b9\u5f0f\uff0c\u8fd8\u6709ABAC\u7684\u6743\u9650\u7ba1\u7406\u65b9\u5f0f\u3002\u6388\u6743\u89c4\u5219\u5c31\u662f\u7528\u6765\u5904\u7406ABAC\u7684\u7c7b\u578b\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u5373\u53ef\u6dfb\u52a0\u76f8\u5173\u63d2\u4ef6\u914d\u7f6e\u3002 \u4e0d\u540c\u63d2\u4ef6\u5904\u7406\u6388\u6743\u89c4\u5219\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5404\u81ea\u914d\u7f6e\u4e5f\u4e0d\u540c\uff0c\u8bf7\u53c2\u770b \u8be6\u7ec6\u63d2\u4ef6\u6587\u6863","title":"\u6743\u9650\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u6743\u9650\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_2","text":"\u67e5\u770b\u767b\u5f55\u7528\u6237\u6240\u80fd\u8bfb\u53d6\u5230\u7684\u6743\u9650\u4fe1\u606f\uff0c\u8fdb\u884c\u6743\u9650\u7684\u65b0\u5efa\u548c\u7f16\u8f91\u7b49 \u6253\u5f00\u6743\u9650\u5217\u8868 \u65b0\u5efa\u6743\u9650 \u67e5\u770b\u521b\u5efa\u7ed3\u679c \u5220\u9664\u6743\u9650 \u6743\u9650\u641c\u7d22 \u53ea\u6709\u81ea\u5df1\u521b\u5efa\u7684\u6743\u9650\u5141\u8bb8\u5220\u9664\uff0c\u4e0d\u80fd\u5220\u9664\u7cfb\u7edf\u6743\u9650","title":"\u6743\u9650\u5217\u8868"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_3","text":"\u5de6\u8fb9\u6811\u7ed3\u6784\u4e2d\uff0c\u7b2c\u4e00\u5c42\u662f\u5e94\u7528\uff0c\u7b2c\u4e8c\u5c42\u662f\u5e94\u7528\u5185\u6743\u9650\u5206\u7ec4\u3002 \u53f3\u8fb9\u662f\u5206\u7ec4\u4e2d\u7684\u6743\u9650 \u53ef\u4ee5\u518d\u8fd9\u91cc\u521b\u5efa\u65b0\u7684\u6743\u9650\u5206\u7ec4\uff0c\u5e76\u7f16\u8f91\u5176\u4e2d\u6743\u9650\u3002 \u6253\u5f00\u6743\u9650\u5206\u7ec4\u5217\u8868 \u65b0\u5efa\u6743\u9650\u5206\u7ec4 \u67e5\u770b\u521b\u5efa\u7ed3\u679c \u67e5\u770b\u6743\u9650\u5206\u7ec4\u7684\u6743\u9650 \u6743\u9650\u5206\u7ec4\u6dfb\u52a0\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u6743\u9650\u7ed3\u679c \u53ea\u6709\u81ea\u5df1\u521b\u5efa\u7684\u6743\u9650\u5206\u7ec4\u5141\u8bb8\u5220\u9664\u548c\u7f16\u8f91\uff0c\u4e0d\u80fd\u5220\u9664\u548c\u7f16\u8f91\u7cfb\u7edf\u5206\u7ec4 \u53ea\u6709\u81ea\u5df1\u6dfb\u52a0\u7684\u6743\u9650\u624d\u53ef\u4ee5\u5220\u9664","title":"\u6743\u9650\u5206\u7ec4"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_4","text":"\u4ece\u4e09\u4e2a\u89d2\u5ea6\uff1a\u7528\u6237\uff0c\u7528\u6237\u5206\u7ec4\uff0c\u5e94\u7528 \u6765\u5206\u914d\u6743\u9650 \u53ef\u4ee5\u7ed9\u67d0\u4e2a\u7528\u6237\u6dfb\u52a0\u6743\u9650\u6216\u5220\u9664\u6743\u9650 \u53ef\u4ee5\u7ed9\u67d0\u4e2a\u7528\u6237\u5206\u7ec4\u6dfb\u52a0\u6743\u9650\u6216\u5220\u9664\u6743\u9650 \u53ef\u4ee5\u7ed9\u67d0\u4e2a\u5e94\u7528\u6765\u6dfb\u52a0\u6743\u9650\u6216\u5220\u9664\u6743\u9650\u6216\u5f00\u653e\u6743\u9650","title":"\u6388\u6743\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_5","text":"\u6253\u5f00\u7528\u6237\u6743\u9650\u5217\u8868 \u6dfb\u52a0\u7528\u6237\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u6743\u9650\u7ed3\u679c \u5220\u9664\u7528\u6237\u6743\u9650","title":"\u7528\u6237\u6743\u9650"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_6","text":"\u6253\u5f00\u7528\u6237\u5206\u7ec4\u5217\u8868 \u6dfb\u52a0\u7528\u6237\u5206\u7ec4\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u7684\u7528\u6237\u5206\u7ec4\u6743\u9650 \u5220\u9664\u7528\u6237\u5206\u7ec4\u6743\u9650","title":"\u7528\u6237\u5206\u7ec4\u6743\u9650"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_7","text":"\u6253\u5f00\u5e94\u7528\u6743\u9650\u5217\u8868 \u6dfb\u52a0\u5e94\u7528\u6743\u9650 \u67e5\u770b\u6dfb\u52a0\u7684\u5e94\u7528\u6743\u9650 \u5220\u9664\u5e94\u7528\u6743\u9650","title":"\u5e94\u7528\u6743\u9650"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#idsecret","text":"\u83b7\u53d6\u5e94\u7528ID\u548cSecret \u4f7f\u7528\u5e94\u7528ID\u548cSecret\u8bbf\u95ee\uff0c\u9700\u8981\u5728headers\u52a0\u4e0aAPP-ID\u548cAPP-SECRET\u53c2\u6570","title":"\u5982\u679c\u4f7f\u7528\u5e94\u7528ID\u548cSecret\u8bbf\u95ee"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/#_8","text":"\u9664\u4e86\u6388\u6743\u7ba1\u7406\u4e2dRBAC\u7684\u6743\u9650\u7ba1\u7406\u65b9\u5f0f\uff0c\u8fd8\u6709ABAC\u7684\u6743\u9650\u7ba1\u7406\u65b9\u5f0f\u3002\u6388\u6743\u89c4\u5219\u5c31\u662f\u7528\u6765\u5904\u7406ABAC\u7684\u7c7b\u578b\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u5373\u53ef\u6dfb\u52a0\u76f8\u5173\u63d2\u4ef6\u914d\u7f6e\u3002 \u4e0d\u540c\u63d2\u4ef6\u5904\u7406\u6388\u6743\u89c4\u5219\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5404\u81ea\u914d\u7f6e\u4e5f\u4e0d\u540c\uff0c\u8bf7\u53c2\u770b \u8be6\u7ec6\u63d2\u4ef6\u6587\u6863","title":"\u6388\u6743\u89c4\u5219"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","text":"\u7528\u6237\u7ba1\u7406 # \u7528\u6237\u5217\u8868 # \u5217\u51fa\u79df\u6237\u7684\u6240\u6709\u7528\u6237 \u589e\u5220\u6539\u67e5 \u4fee\u6539\u5bc6\u7801 \u7b49\u529f\u80fd \u7528\u6237\u5206\u7ec4 # \u5bf9\u7528\u6237\u5206\u7ec4\u8fdb\u884c\u7ba1\u7406 \u589e\u5220\u6539\u67e5 \u5bf9\u5206\u7ec4\u5185\u7528\u6237\u589e\u5220\u6539\u67e5 \u8d26\u53f7\u751f\u547d\u5468\u671f # \u8d26\u53f7\u751f\u547d\u5468\u671f\uff0c\u5c31\u662f\u4f9d\u636e\u4e00\u4e9b\u8d26\u53f7\u7684\u5c5e\u6027\u6765\u51b3\u5b9a\u8be5\u7528\u6237\u8d26\u53f7\u662f\u5426\u53ef\u7528\u3002 \u4e0d\u540c\u7684\u63d2\u4ef6\u53ef\u4ee5\u652f\u6301\u4e0d\u540c\u7684\u914d\u7f6e\u3002 \u9ed8\u8ba4\u63d2\u4ef6\u652f\u6301\u914d\u7f6e\u7ed3\u675f\u65f6\u95f4\uff0c\u5373\u5230\u65f6\u95f4\u540e\u7528\u6237\u8d26\u53f7\u5373\u88ab\u51bb\u7ed3\u3002","title":"\u7528\u6237\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u7528\u6237\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/#_2","text":"\u5217\u51fa\u79df\u6237\u7684\u6240\u6709\u7528\u6237 \u589e\u5220\u6539\u67e5 \u4fee\u6539\u5bc6\u7801 \u7b49\u529f\u80fd","title":"\u7528\u6237\u5217\u8868"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/#_3","text":"\u5bf9\u7528\u6237\u5206\u7ec4\u8fdb\u884c\u7ba1\u7406 \u589e\u5220\u6539\u67e5 \u5bf9\u5206\u7ec4\u5185\u7528\u6237\u589e\u5220\u6539\u67e5","title":"\u7528\u6237\u5206\u7ec4"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/#_4","text":"\u8d26\u53f7\u751f\u547d\u5468\u671f\uff0c\u5c31\u662f\u4f9d\u636e\u4e00\u4e9b\u8d26\u53f7\u7684\u5c5e\u6027\u6765\u51b3\u5b9a\u8be5\u7528\u6237\u8d26\u53f7\u662f\u5426\u53ef\u7528\u3002 \u4e0d\u540c\u7684\u63d2\u4ef6\u53ef\u4ee5\u652f\u6301\u4e0d\u540c\u7684\u914d\u7f6e\u3002 \u9ed8\u8ba4\u63d2\u4ef6\u652f\u6301\u914d\u7f6e\u7ed3\u675f\u65f6\u95f4\uff0c\u5373\u5230\u65f6\u95f4\u540e\u7528\u6237\u8d26\u53f7\u5373\u88ab\u51bb\u7ed3\u3002","title":"\u8d26\u53f7\u751f\u547d\u5468\u671f"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/","text":"\u79df\u6237\u7ba1\u7406 # \u79df\u6237\u914d\u7f6e # \u5b50\u7ba1\u7406\u5458 # \u4e3b\u9898\u8bbe\u7f6e # \u63d2\u4ef6\u7ba1\u7406 # \u4e2d\u5fc3\u5e73\u53f0 #","title":"\u79df\u6237\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u79df\u6237\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/#_2","text":"","title":"\u79df\u6237\u914d\u7f6e"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/#_3","text":"","title":"\u5b50\u7ba1\u7406\u5458"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/#_4","text":"","title":"\u4e3b\u9898\u8bbe\u7f6e"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/#_5","text":"","title":"\u63d2\u4ef6\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/#_6","text":"","title":"\u4e2d\u5fc3\u5e73\u53f0"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/","text":"\u8ba4\u8bc1\u7ba1\u7406 # \u8ba4\u8bc1\u56e0\u7d20 # \u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u5728\u8ba4\u8bc1\u7a97\u53e3\u4e2d\u7684\u529f\u80fd\u6a21\u5757\uff0c\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u8ba4\u8bc1\u56e0\u7d20\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u8ba4\u8bc1\u56e0\u7d20\u5305\u542b\u4e86\uff0c\u767b\u5f55\uff0c\u6ce8\u518c\uff0c\u5fd8\u8bb0\u5bc6\u7801\u7b49\u5404\u79cd\u529f\u80fd\u7c7b\u578b\u3002\u6240\u4ee5\u6bcf\u4e2a\u8ba4\u77e5\u56e0\u7d20\u7684\u914d\u7f6e\u90e8\u5206\uff0c\u90fd\u4f1a\u6709\u662f\u5426\u5f00\u542f\u767b\u5f55\uff0c\u662f\u5426\u5f00\u542f\u6ce8\u518c\uff0c\u662f\u5426\u5f00\u542f\u5fd8\u8bb0\u5bc6\u7801\u7684\u5f00\u5173\u3002 \u6bcf\u4e2a\u8ba4\u8bc1\u56e0\u7d20\u4e5f\u4f1a\u6709\u81ea\u5df1\u4e2a\u6027\u7684\u914d\u7f6e\uff0c\u8fd9\u4e2a\u9700\u8981\u53c2\u8003\u63d2\u4ef6\u81ea\u5df1\u7684\u6587\u6863\u3002 \u7b2c\u4e09\u65b9\u8ba4\u8bc1 # \u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5c06\u5176\u5355\u72ec\u5206\u7c7b \u5728\u8fd9\u91cc\u70b9\u51fb\u521b\u5efa\u5373\u53ef\u6dfb\u52a0\u65b0\u7684\u7b2c\u4e09\u65b9\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u6dfb\u52a0\u7684\u79cd\u7c7b\u53d6\u51b3\u4e8e\u5e73\u53f0\u662f\u5426\u62e5\u6709\u5f53\u524d\u8fd9\u4e2a\u63d2\u4ef6\u3002 \u76f8\u5173\u7684\u63d2\u4ef6\u914d\u7f6e\u9700\u53c2\u8003\u6bcf\u4e2a\u63d2\u4ef6\u81ea\u5df1\u7684\u6587\u6863\u3002 \u81ea\u52a8\u8ba4\u8bc1 # \u81ea\u52a8\u8ba4\u8bc1\u662f\u6307\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u73af\u5883\u4e2d\uff0c\u53ef\u80fd\u4e0d\u9700\u8981\u7528\u6237\u8f93\u5165\u4efb\u4f55\u8d26\u53f7\u5bc6\u7801\u5373\u53ef\u81ea\u52a8\u5b8c\u6210\u8ba4\u8bc1\u3002\u4f8b\u5982\uff1a\u5728window\u57df\u4e2d\uff0c\u5f53\u7528\u6237\u8fdb\u5165\u7535\u8111\u65f6\u5c31\u4f1a\u8981\u6c42\u8f93\u5165AD\u7684\u8d26\u5bc6\u4ee5\u6253\u5f00\u4f7f\u7528\u7535\u8111\uff0c\u800c\u8fd9\u65f6\u53ef\u4ee5\u5f00\u542fkuberos\u63d2\u4ef6\uff0c\u7528\u6237\u4e0d\u9700\u8981\u8f93\u5165\u5bc6\u7801\uff0c\u76f4\u63a5\u4f7f\u7528AD\u5df2\u7ecf\u8ba4\u8bc1\u7684\u90e8\u5206\u5b8c\u6210\u81ea\u52a8\u767b\u5f55\u3002 \u5177\u4f53\u6587\u6863\u53c2\u770b\u5404\u4e2a\u76f8\u5173\u63d2\u4ef6\u3002 \u8ba4\u8bc1\u89c4\u5219 # \u5728\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u5404\u79cd\u53c2\u6570\uff0c\u6bd4\u5982\u7528\u6237\u6240\u5904\u73af\u5883\uff0cIP\u5730\u5740\uff0c\u5bc6\u7801\u9519\u8bef\u6b21\u6570\u7b49\u7b49\u5404\u7c7b\u53ef\u80fd\u4e0e\u5b89\u5168\u6709\u5173\u7684\u60c5\u51b5\uff0c\u8fdb\u884c\u5224\u65ad\uff0c\u5e76\u5f71\u54cd\u7528\u6237\u8ba4\u8bc1\u7684\u8fc7\u7a0b\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u6dfb\u52a0\u8ba4\u8bc1\u89c4\u5219\u63d2\u4ef6\u7684\u914d\u7f6e\u3002\u4e0d\u540c\u7684\u63d2\u4ef6\uff0c\u914d\u7f6e\u4e0d\u540c\uff0c\u529f\u80fd\u4e0d\u540c\u3002\u8be6\u89c1\u5404\u4e2a\u63d2\u4ef6\u7684\u6587\u6863\u8bf4\u660e\u3002 \u9ed8\u8ba4\u63d2\u4ef6\u529f\u80fd\uff0c\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7528\u6237\u5bc6\u7801\u9519\u8bef\u6b21\u6570\u4e0a\u9650\uff0c\u4e00\u5929\u5185\u7528\u6237\u53cd\u590d\u9519\u8bef\u5219\u9700\u8981\u542f\u7528\u53e6\u4e00\u79cd\u8ba4\u8bc1\u56e0\u7d20\u3002","title":"\u8ba4\u8bc1\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u8ba4\u8bc1\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/#_2","text":"\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u5728\u8ba4\u8bc1\u7a97\u53e3\u4e2d\u7684\u529f\u80fd\u6a21\u5757\uff0c\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u8ba4\u8bc1\u56e0\u7d20\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u8ba4\u8bc1\u56e0\u7d20\u5305\u542b\u4e86\uff0c\u767b\u5f55\uff0c\u6ce8\u518c\uff0c\u5fd8\u8bb0\u5bc6\u7801\u7b49\u5404\u79cd\u529f\u80fd\u7c7b\u578b\u3002\u6240\u4ee5\u6bcf\u4e2a\u8ba4\u77e5\u56e0\u7d20\u7684\u914d\u7f6e\u90e8\u5206\uff0c\u90fd\u4f1a\u6709\u662f\u5426\u5f00\u542f\u767b\u5f55\uff0c\u662f\u5426\u5f00\u542f\u6ce8\u518c\uff0c\u662f\u5426\u5f00\u542f\u5fd8\u8bb0\u5bc6\u7801\u7684\u5f00\u5173\u3002 \u6bcf\u4e2a\u8ba4\u8bc1\u56e0\u7d20\u4e5f\u4f1a\u6709\u81ea\u5df1\u4e2a\u6027\u7684\u914d\u7f6e\uff0c\u8fd9\u4e2a\u9700\u8981\u53c2\u8003\u63d2\u4ef6\u81ea\u5df1\u7684\u6587\u6863\u3002","title":"\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/#_3","text":"\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5c06\u5176\u5355\u72ec\u5206\u7c7b \u5728\u8fd9\u91cc\u70b9\u51fb\u521b\u5efa\u5373\u53ef\u6dfb\u52a0\u65b0\u7684\u7b2c\u4e09\u65b9\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u6dfb\u52a0\u7684\u79cd\u7c7b\u53d6\u51b3\u4e8e\u5e73\u53f0\u662f\u5426\u62e5\u6709\u5f53\u524d\u8fd9\u4e2a\u63d2\u4ef6\u3002 \u76f8\u5173\u7684\u63d2\u4ef6\u914d\u7f6e\u9700\u53c2\u8003\u6bcf\u4e2a\u63d2\u4ef6\u81ea\u5df1\u7684\u6587\u6863\u3002","title":"\u7b2c\u4e09\u65b9\u8ba4\u8bc1"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/#_4","text":"\u81ea\u52a8\u8ba4\u8bc1\u662f\u6307\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u73af\u5883\u4e2d\uff0c\u53ef\u80fd\u4e0d\u9700\u8981\u7528\u6237\u8f93\u5165\u4efb\u4f55\u8d26\u53f7\u5bc6\u7801\u5373\u53ef\u81ea\u52a8\u5b8c\u6210\u8ba4\u8bc1\u3002\u4f8b\u5982\uff1a\u5728window\u57df\u4e2d\uff0c\u5f53\u7528\u6237\u8fdb\u5165\u7535\u8111\u65f6\u5c31\u4f1a\u8981\u6c42\u8f93\u5165AD\u7684\u8d26\u5bc6\u4ee5\u6253\u5f00\u4f7f\u7528\u7535\u8111\uff0c\u800c\u8fd9\u65f6\u53ef\u4ee5\u5f00\u542fkuberos\u63d2\u4ef6\uff0c\u7528\u6237\u4e0d\u9700\u8981\u8f93\u5165\u5bc6\u7801\uff0c\u76f4\u63a5\u4f7f\u7528AD\u5df2\u7ecf\u8ba4\u8bc1\u7684\u90e8\u5206\u5b8c\u6210\u81ea\u52a8\u767b\u5f55\u3002 \u5177\u4f53\u6587\u6863\u53c2\u770b\u5404\u4e2a\u76f8\u5173\u63d2\u4ef6\u3002","title":"\u81ea\u52a8\u8ba4\u8bc1"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86/#_5","text":"\u5728\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u5404\u79cd\u53c2\u6570\uff0c\u6bd4\u5982\u7528\u6237\u6240\u5904\u73af\u5883\uff0cIP\u5730\u5740\uff0c\u5bc6\u7801\u9519\u8bef\u6b21\u6570\u7b49\u7b49\u5404\u7c7b\u53ef\u80fd\u4e0e\u5b89\u5168\u6709\u5173\u7684\u60c5\u51b5\uff0c\u8fdb\u884c\u5224\u65ad\uff0c\u5e76\u5f71\u54cd\u7528\u6237\u8ba4\u8bc1\u7684\u8fc7\u7a0b\u3002 \u70b9\u51fb\u521b\u5efa\uff0c\u6dfb\u52a0\u8ba4\u8bc1\u89c4\u5219\u63d2\u4ef6\u7684\u914d\u7f6e\u3002\u4e0d\u540c\u7684\u63d2\u4ef6\uff0c\u914d\u7f6e\u4e0d\u540c\uff0c\u529f\u80fd\u4e0d\u540c\u3002\u8be6\u89c1\u5404\u4e2a\u63d2\u4ef6\u7684\u6587\u6863\u8bf4\u660e\u3002 \u9ed8\u8ba4\u63d2\u4ef6\u529f\u80fd\uff0c\u662f\u53ef\u4ee5\u8bbe\u7f6e\u7528\u6237\u5bc6\u7801\u9519\u8bef\u6b21\u6570\u4e0a\u9650\uff0c\u4e00\u5929\u5185\u7528\u6237\u53cd\u590d\u9519\u8bef\u5219\u9700\u8981\u542f\u7528\u53e6\u4e00\u79cd\u8ba4\u8bc1\u56e0\u7d20\u3002","title":"\u8ba4\u8bc1\u89c4\u5219"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%BA%AB%E4%BB%BD%E6%95%B0%E6%8D%AE%E6%BA%90/","text":"\u8eab\u4efd\u6570\u636e\u6e90 # SCIM\u6570\u636e\u540c\u6b65 # \u7528\u6237\u6570\u636e\u540c\u6b65\uff0c\u4f7f\u7528SCIM\u6807\u51c6\u534f\u8bae\u3002 \u8be5\u534f\u8bae\u5728\u4e3b\u6d41\u7684\u4e91\u5e73\u53f0\u4e2d\u90fd\u5f97\u5230\u652f\u6301\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u63a5\u4e0d\u540c\u7684\u7cfb\u7edf\u9700\u8981\u4e0d\u540c\u7684\u63d2\u4ef6\u6765\u652f\u6301\u3002 \u7cfb\u7edf\u9ed8\u8ba4\u81ea\u5e26ArkID\u7684SCIM\u540c\u6b65\u63d2\u4ef6\uff0c\u652f\u6301client\u548cserver\u4e24\u79cd\u6a21\u5f0f\u3002 \u901a\u8fc7\u70b9\u51fb\u521b\u5efa\uff0c\u6765\u6dfb\u52a0\u5bf9\u5e94\u7684\u63d2\u4ef6\u914d\u7f6e\u3002\u4e0d\u540c\u63d2\u4ef6\u914d\u7f6e\u4e0d\u540c\uff0c\u8bf7\u53c2\u89c1\u63d2\u4ef6\u81ea\u5df1\u7684\u6587\u6863\u3002 \u901a\u8fc7ArkID\uff0c\u5176\u5b83\u7cfb\u7edf\u53ef\u4ee5\u8fdb\u884c\u540c\u6b65\u5bf9\u63a5\uff0c\u800c\u4e0d\u7528\u7ecf\u8fc7ArkID\u7684\u6570\u636e\u5e93\u3002 graph LR A[AD\u57df] --> B[ArkID]; A --> C[HR\u7cfb\u7edf]; C --> A; \u6743\u9650\u6570\u636e\u540c\u6b65 # \u4e3a\u4e86\u8fbe\u5230\u7edf\u4e00\u6743\u9650\u7ba1\u7406\u7684\u76ee\u7684\uff0c\u5c06\u6743\u9650\u6570\u636e\u540c\u6b65\u4e5f\u4e0d\u5931\u4e3a\u4e00\u79cd\u65b9\u5f0f\u3002 ArkID\u81ea\u5b9a\u4e49\u4e86\u4e00\u5957\u6807\u51c6\u6570\u636e\u6a21\u578b\u6765\u540c\u6b65\u6743\u9650\u6570\u636e\u3002\u5bf9\u63a5\u5176\u5b83\u7684\u7cfb\u7edf\u9700\u8981\u63d2\u4ef6\u5c06\u5404\u7cfb\u7edf\u6570\u636e\u8f6c\u5316\u4e3a\u6b64\u6807\u51c6\u6a21\u578b\uff0c\u7136\u540e\u5199\u5165ArkID\u4e2d\u3002\u6216\u5c06\u8be5\u6807\u51c6\u6a21\u578b\u8f6c\u5316\u4e3a\u5176\u5b83\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u3002 \u4e0eSCIM\u534f\u8bae\u7c7b\u4f3c\uff0c\u540c\u6837\u652f\u6301\u5176\u5b83\u7cfb\u7edf\u7684\u76f4\u63a5\u5bf9\u63a5\u3002","title":"\u8eab\u4efd\u6570\u636e\u6e90"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%BA%AB%E4%BB%BD%E6%95%B0%E6%8D%AE%E6%BA%90/#_1","text":"","title":"\u8eab\u4efd\u6570\u636e\u6e90"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%BA%AB%E4%BB%BD%E6%95%B0%E6%8D%AE%E6%BA%90/#scim","text":"\u7528\u6237\u6570\u636e\u540c\u6b65\uff0c\u4f7f\u7528SCIM\u6807\u51c6\u534f\u8bae\u3002 \u8be5\u534f\u8bae\u5728\u4e3b\u6d41\u7684\u4e91\u5e73\u53f0\u4e2d\u90fd\u5f97\u5230\u652f\u6301\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u63a5\u4e0d\u540c\u7684\u7cfb\u7edf\u9700\u8981\u4e0d\u540c\u7684\u63d2\u4ef6\u6765\u652f\u6301\u3002 \u7cfb\u7edf\u9ed8\u8ba4\u81ea\u5e26ArkID\u7684SCIM\u540c\u6b65\u63d2\u4ef6\uff0c\u652f\u6301client\u548cserver\u4e24\u79cd\u6a21\u5f0f\u3002 \u901a\u8fc7\u70b9\u51fb\u521b\u5efa\uff0c\u6765\u6dfb\u52a0\u5bf9\u5e94\u7684\u63d2\u4ef6\u914d\u7f6e\u3002\u4e0d\u540c\u63d2\u4ef6\u914d\u7f6e\u4e0d\u540c\uff0c\u8bf7\u53c2\u89c1\u63d2\u4ef6\u81ea\u5df1\u7684\u6587\u6863\u3002 \u901a\u8fc7ArkID\uff0c\u5176\u5b83\u7cfb\u7edf\u53ef\u4ee5\u8fdb\u884c\u540c\u6b65\u5bf9\u63a5\uff0c\u800c\u4e0d\u7528\u7ecf\u8fc7ArkID\u7684\u6570\u636e\u5e93\u3002 graph LR A[AD\u57df] --> B[ArkID]; A --> C[HR\u7cfb\u7edf]; C --> A;","title":"SCIM\u6570\u636e\u540c\u6b65"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%20%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86%E5%91%98/%E8%BA%AB%E4%BB%BD%E6%95%B0%E6%8D%AE%E6%BA%90/#_2","text":"\u4e3a\u4e86\u8fbe\u5230\u7edf\u4e00\u6743\u9650\u7ba1\u7406\u7684\u76ee\u7684\uff0c\u5c06\u6743\u9650\u6570\u636e\u540c\u6b65\u4e5f\u4e0d\u5931\u4e3a\u4e00\u79cd\u65b9\u5f0f\u3002 ArkID\u81ea\u5b9a\u4e49\u4e86\u4e00\u5957\u6807\u51c6\u6570\u636e\u6a21\u578b\u6765\u540c\u6b65\u6743\u9650\u6570\u636e\u3002\u5bf9\u63a5\u5176\u5b83\u7684\u7cfb\u7edf\u9700\u8981\u63d2\u4ef6\u5c06\u5404\u7cfb\u7edf\u6570\u636e\u8f6c\u5316\u4e3a\u6b64\u6807\u51c6\u6a21\u578b\uff0c\u7136\u540e\u5199\u5165ArkID\u4e2d\u3002\u6216\u5c06\u8be5\u6807\u51c6\u6a21\u578b\u8f6c\u5316\u4e3a\u5176\u5b83\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u3002 \u4e0eSCIM\u534f\u8bae\u7c7b\u4f3c\uff0c\u540c\u6837\u652f\u6301\u5176\u5b83\u7cfb\u7edf\u7684\u76f4\u63a5\u5bf9\u63a5\u3002","title":"\u6743\u9650\u6570\u636e\u540c\u6b65"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98/","text":"\u5e73\u53f0\u7ba1\u7406 # \u63d2\u4ef6\u5546\u5e97 # \u8bed\u8a00\u5305\u7ba1\u7406 # \u79df\u6237\u5217\u8868 # \u5e73\u53f0\u914d\u7f6e #","title":"\u5e73\u53f0\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98/#_1","text":"","title":"\u5e73\u53f0\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98/#_2","text":"","title":"\u63d2\u4ef6\u5546\u5e97"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98/#_3","text":"","title":"\u8bed\u8a00\u5305\u7ba1\u7406"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98/#_4","text":"","title":"\u79df\u6237\u5217\u8868"},{"location":"%20%20%20%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E5%B9%B3%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98/#_5","text":"","title":"\u5e73\u53f0\u914d\u7f6e"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/","text":"\u5546\u4e1a\u5408\u4f5c\u6307\u5357 # \u4efb\u4f55\u4e2a\u4eba\u6216\u4f01\u4e1a\uff0c\u90fd\u6b22\u8fce\u6210\u4e3a\u6211\u4eec\u7684\u5546\u4e1a\u5408\u4f5c\u4f19\u4f34\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u6765\u53c2\u4e0e\u5e76\u5171\u5efaArkID\u751f\u6001\uff1a \u6210\u4e3a ArkID\u5f00\u53d1\u5546 \u6210\u4e3a ArkID\u4ee3\u7406\u5546 \u6210\u4e3a ArkID\u8fd0\u8425\u5546 \u540c\u65f6\u6211\u4eec\u4e5f\u5f00\u653e\u5404\u79cd\u7c7b\u578b\u7684\u5408\u4f5c\u65b9\u5f0f\uff0c\u5982\u679c\u60a8\u6709\u5176\u5b83\u4efb\u4f55\u60f3\u6cd5\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\u4eec\u3002 \u8054\u7cfb\u90ae\u7bb1\uff1a bd@longguikeji.com","title":"\u5546\u4e1a\u5408\u4f5c\u6307\u5357"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/#_1","text":"\u4efb\u4f55\u4e2a\u4eba\u6216\u4f01\u4e1a\uff0c\u90fd\u6b22\u8fce\u6210\u4e3a\u6211\u4eec\u7684\u5546\u4e1a\u5408\u4f5c\u4f19\u4f34\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e09\u79cd\u65b9\u5f0f\u6765\u53c2\u4e0e\u5e76\u5171\u5efaArkID\u751f\u6001\uff1a \u6210\u4e3a ArkID\u5f00\u53d1\u5546 \u6210\u4e3a ArkID\u4ee3\u7406\u5546 \u6210\u4e3a ArkID\u8fd0\u8425\u5546 \u540c\u65f6\u6211\u4eec\u4e5f\u5f00\u653e\u5404\u79cd\u7c7b\u578b\u7684\u5408\u4f5c\u65b9\u5f0f\uff0c\u5982\u679c\u60a8\u6709\u5176\u5b83\u4efb\u4f55\u60f3\u6cd5\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\u4eec\u3002 \u8054\u7cfb\u90ae\u7bb1\uff1a bd@longguikeji.com","title":"\u5546\u4e1a\u5408\u4f5c\u6307\u5357"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/","text":"ArkID\u5f00\u53d1\u5546 # \u5982\u679c\u60a8\u6709\u5f00\u53d1\u80fd\u529b\uff0c\u6216\u8005\u72ec\u7acb\u8fd0\u8425\u81ea\u5df1\u7684SaaS\u4ea7\u54c1\uff0c\u53ea\u901a\u8fc7ArkID\u8d26\u53f7\u8bbf\u95eeArkStore\uff0c\u5373\u53ef\u6210\u4e3aArkID\u5f00\u53d1\u5546\u3002 \u5f00\u53d1\u5546\u6761\u4ef6 # \u4efb\u4f55\u4e2a\u4eba\u6216\u4f01\u4e1a \u6709\u5f00\u53d1\u81ea\u7814\u80fd\u529b \u62e5\u6709ArkID\u8d26\u53f7 \u8bbf\u95eeArkStore \u5f00\u53d1\u5546\u53ef\u4ee5\u5411ArkID\u751f\u6001\u63d0\u4f9b\u751f\u4ea7\u4e24\u7c7b\u4ea7\u54c1\uff1a ArkID\u63d2\u4ef6 \u4e0e SaaS\u5e94\u7528 \u3002 \u521b\u5efa\u63d2\u4ef6\u6216\u5e94\u7528 # ArkID\u63d2\u4ef6 # \u8bbf\u95eeArkStore \u70b9\u51fb\u5f00\u53d1\u5546-\u4ed3\u5e93\u7ba1\u7406\uff0c\u4e0a\u4f20\u63d2\u4ef6\u6240\u5728\u7684github\u4ed3\u5e93\u6216\u8005zip\u538b\u7f29\u5305 \u6ce8\u610f ArkStore\u4f1a\u901a\u8fc7\u89e3\u6790\u63d2\u4ef6\u4e0bconfig.json\u6587\u4ef6\uff0c\u6765\u751f\u6210\u63d2\u4ef6\u8bb0\u5f55 \u8bbe\u7f6e\u4ef7\u683c\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4ef7\u683c\u89c4\u5219 \u63d0\u4ea4\u5ba1\u6279 \u901a\u8fc7\u5373\u4e0a\u67b6\u5b8c\u6210\uff0c\u6240\u6709ArkID\u7684\u7528\u6237\u5728\u5176\u63d2\u4ef6\u5546\u5e97\u4e2d\u90fd\u80fd\u770b\u5230\u8be5\u63d2\u4ef6\u4e86\u3002 SaaS\u5e94\u7528 # OIDC # \u8bbf\u95ee\u5b98\u65b9\u4e2d\u5fc3ArkID\u3002 \u521b\u5efa\u5e94\u7528\uff0c\u9009\u62e9OIDC-platform\u534f\u8bae\uff0c\u5e76\u5b8c\u6210\u5e94\u7528\u63a5\u5165\u3002 \u63d0\u793a OIDC-platform\u5c31\u662fOIDC\u534f\u8bae\uff0c\u53ea\u662f\u8be5\u7c7b\u578b\u7684\u5e94\u7528\u53ef\u4ee5\u88ab\u6574\u4e2a\u5e73\u53f0\u6240\u6709\u79df\u6237\u8bbf\u95ee\u3002\u4f60\u53ef\u4ee5\u6309\u7167OIDC\u7684\u63a5\u5165\u6d41\u7a0b\u63a5\u5165\u5373\u53ef\uff0c\u53ea\u662f\u7528\u6237\u53c2\u6570\u4e2d\u4f1a\u589e\u52a0\uff1a\u79df\u6237\u6807\u8bc6\u3002 \u8bbf\u95eeArkStore \u70b9\u51fb\u5f00\u53d1\u5546-\u5e94\u7528\u7ba1\u7406\uff0c\u521b\u5efa\u5e94\u7528\uff0c\u7ed1\u5b9a\u5728ArkID\u4e2d\u521b\u5efa\u7684\u5e94\u7528\u3002 \u8bbe\u7f6e\u4ef7\u683c\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4ef7\u683c\u89c4\u5219 \u63d0\u4ea4\u5ba1\u6838 \u901a\u8fc7\u5373\u4e0a\u67b6\u5b8c\u6210\uff0c\u6240\u6709ArkID\u7684\u7528\u6237\u5728\u5176\u5e94\u7528\u5546\u5e97\u4e2d\u90fd\u80fd\u770b\u5230\u8be5\u5e94\u7528\u4e86\u3002 \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u534f\u8bae # \u5982\u679c\u4f60\u7684\u5e94\u7528\u4f7f\u7528\u7684\u662f\u5176\u5b83\u975e\u6807\u51c6\u534f\u8bae\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\u3002 \u8d26\u5bc6\u4ee3\u586b # \u5982\u679c\u4f60\u7684\u5e94\u7528\u6682\u65f6\u65e0\u6cd5\u901a\u8fc7OIDC\u63a5\u5165\uff0c\u6211\u4eec\u8fd8\u63a8\u8350\u4f7f\u7528\u8d26\u5bc6\u4ee3\u586b\u7684\u65b9\u5f0f\u3002 \u8d26\u5bc6\u4ee3\u586b\u5e76\u975e\u5355\u70b9\u767b\u5f55\u7684\u534f\u8bae\uff0c\u53ea\u662f\u4f1a\u5728\u6d4f\u89c8\u5668\u4e2d\u8bb0\u5f55\u5bf9\u5e94\u7ad9\u70b9\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u5e76\u81ea\u52a8\u586b\u5165\u5e76\u70b9\u51fb\u767b\u5f55\u3002 \u5982\u679c\u8be5\u7f51\u7ad9\u4f7f\u7528\u4e86\u5982\u9a8c\u8bc1\u7801\u7b49\u989d\u5916\u7684\u65b9\u5f0f\uff0c\u5219\u4e0d\u9002\u7528\u8d26\u5bc6\u4ee3\u586b\u3002 \u63a8\u5e7f\u94fe\u63a5 # \u5982\u679c\u5f53\u524d\u5e94\u7528\u4e0d\u652f\u6301\u4e0a\u8ff0\u5404\u7c7b\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u4ec5\u4ec5\u4e0a\u4f20\u4e00\u4e2aArkID\u7684\u4e13\u5c5e\u63a8\u5e7f\u94fe\u63a5\uff0c\u5e76\u8bb0\u5f55\u4e0b\u8be5\u7528\u6237\u540e\u7eed\u7684\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u4ed8\u8d39\u7b49\u884c\u4e3a\uff0c\u7528\u6765\u4f5c\u4e3a\u4e0eArkID\u5206\u8d26\u7684\u4f9d\u636e\u3002 \u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\uff0c\u652f\u4ed8\u4f1a\u4f7f\u7528\u5185\u4ed8\u8d39\u7684\u5f62\u5f0f\uff0c\u4f60\u9700\u8981\u8054\u7cfb\u6211\u4eec\u3002 \u4ef7\u683c\u89c4\u5219 # \u5546\u5e97\u652f\u4ed8 # \u63d2\u4ef6\u53ea\u80fd\u9009\u62e9\u5546\u5e97\u652f\u4ed8\u7684\u65b9\u5f0f\uff0c\u5e94\u7528\u53ef\u4ee5\u662f\u5546\u5e97\u652f\u4ed8\u6216\u8005\u5e94\u7528\u5185\u652f\u4ed8\u7684\u65b9\u5f0f\u3002 \u65e0\u8bba\u662f\u63d2\u4ef6\u8fd8\u662f\u5e94\u7528\uff0c\u5f00\u53d1\u5546\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4ef7\u683c\u3002 \u4ef7\u683c\u5206\u4e24\u7c7b\uff1a \u8d2d\u4e70\u4ef7\u683c \u4e0e \u79df\u8d41\u4ef7\u683c \uff0c\u4e24\u79cd\u4ef7\u683c\u7684\u7ec4\u6210\u662f\u76f8\u540c\u7684\u3002 \u4ef7\u683c\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff1a \u5e02\u573a\u6307\u5bfc\u4ef7 \u4e0e \u6210\u672c\u6298\u6263 \u5e02\u573a\u6307\u5bfc\u4ef7\u7684\u5355\u4f4d\u4e3a\uff1a x\u5143/y\u4eba/z\u5929 \u5f53x=0\uff0c\u5219\u88ab\u89c6\u4e3a\u514d\u8d39 \u5f53y=0\uff0c\u5219\u88ab\u8ba4\u4e3a\u4e0d\u9650\u4eba\u6570 \u5f53z=0\uff0c\u5219\u88ab\u8ba4\u4e3a\u4e0d\u9650\u5929\u6570 \u6210\u672c\u6298\u6263\u53ef\u4ee5\u4e3a0-1\u4e4b\u95f4\u7684\u4efb\u4f55\u4e00\u4e2a\u4e24\u4f4d\u5c0f\u6570\u3002 \u6ce8\u610f \u6bcf\u6210\u4ea4\u4e00\u4e2a\u4ea7\u54c1\uff0c\u5f00\u53d1\u5546\u5b9e\u9645\u83b7\u5f97\u7684\u6536\u76ca\u4e3a\uff1a\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6210\u672c\u6298\u6263 \u4ef7\u683c\u53ef\u4ee5\u8bbe\u7f6e\u591a\u6761\uff0c\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u5b9a\u4ef7\u7b56\u7565\u3002 \u5e94\u7528\u5185\u652f\u4ed8 # \u4f60\u7684\u5e94\u7528\u53ef\u4ee5\u4e0d\u901a\u8fc7\u5546\u5e97\u652f\u4ed8\uff0c\u800c\u662f\u7528\u6237\u81ea\u884c\u5728\u4f60\u7684\u5e94\u7528\u5185\u652f\u4ed8\u9875\u9762\u5b8c\u6210\u652f\u4ed8\u3002 \u8fd9\u79cd\u60c5\u51b5\uff0c\u9700\u8981\u4f60\u8ddf\u9f99\u5f52\u7b7e\u7f72\u76f8\u5173\u5408\u4f5c\u534f\u8bae\uff0c\u5e76\u5546\u5b9a\u597d\u5206\u6210\u6bd4\u4f8b\uff0c\u5b9a\u671f\u4e0e\u9f99\u5f52\u7ed3\u7b97\u5373\u53ef\u3002 \u8ba2\u5355\u8bb0\u5f55 # \u5728ArkStore\u4e2d\uff0c\u70b9\u51fb \u8d39\u7528\u4e2d\u5fc3-\u5f00\u53d1\u5546\u8ba2\u5355 \u5373\u53ef\u67e5\u770b \u63d0\u73b0 # \u5728ArkStore\u4e2d\uff0c\u70b9\u51fb \u8d39\u7528\u4e2d\u5fc3-\u63d0\u73b0\u7533\u8bf7 \u5373\u53ef\u53d1\u8d77\u7533\u8bf7\uff0c\u540e\u53f0\u5ba1\u6838\u5b8c\u540e\u4f1a\u6253\u6b3e\u3002 \u5fae\u4fe1\u5206\u8d26\u529f\u80fd\u6b63\u5728\u63a5\u5165\u3002","title":"ArkID\u5f00\u53d1\u5546"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#arkid","text":"\u5982\u679c\u60a8\u6709\u5f00\u53d1\u80fd\u529b\uff0c\u6216\u8005\u72ec\u7acb\u8fd0\u8425\u81ea\u5df1\u7684SaaS\u4ea7\u54c1\uff0c\u53ea\u901a\u8fc7ArkID\u8d26\u53f7\u8bbf\u95eeArkStore\uff0c\u5373\u53ef\u6210\u4e3aArkID\u5f00\u53d1\u5546\u3002","title":"ArkID\u5f00\u53d1\u5546"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_1","text":"\u4efb\u4f55\u4e2a\u4eba\u6216\u4f01\u4e1a \u6709\u5f00\u53d1\u81ea\u7814\u80fd\u529b \u62e5\u6709ArkID\u8d26\u53f7 \u8bbf\u95eeArkStore \u5f00\u53d1\u5546\u53ef\u4ee5\u5411ArkID\u751f\u6001\u63d0\u4f9b\u751f\u4ea7\u4e24\u7c7b\u4ea7\u54c1\uff1a ArkID\u63d2\u4ef6 \u4e0e SaaS\u5e94\u7528 \u3002","title":"\u5f00\u53d1\u5546\u6761\u4ef6"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_2","text":"","title":"\u521b\u5efa\u63d2\u4ef6\u6216\u5e94\u7528"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#arkid_1","text":"\u8bbf\u95eeArkStore \u70b9\u51fb\u5f00\u53d1\u5546-\u4ed3\u5e93\u7ba1\u7406\uff0c\u4e0a\u4f20\u63d2\u4ef6\u6240\u5728\u7684github\u4ed3\u5e93\u6216\u8005zip\u538b\u7f29\u5305 \u6ce8\u610f ArkStore\u4f1a\u901a\u8fc7\u89e3\u6790\u63d2\u4ef6\u4e0bconfig.json\u6587\u4ef6\uff0c\u6765\u751f\u6210\u63d2\u4ef6\u8bb0\u5f55 \u8bbe\u7f6e\u4ef7\u683c\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4ef7\u683c\u89c4\u5219 \u63d0\u4ea4\u5ba1\u6279 \u901a\u8fc7\u5373\u4e0a\u67b6\u5b8c\u6210\uff0c\u6240\u6709ArkID\u7684\u7528\u6237\u5728\u5176\u63d2\u4ef6\u5546\u5e97\u4e2d\u90fd\u80fd\u770b\u5230\u8be5\u63d2\u4ef6\u4e86\u3002","title":"ArkID\u63d2\u4ef6"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#saas","text":"","title":"SaaS\u5e94\u7528"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#oidc","text":"\u8bbf\u95ee\u5b98\u65b9\u4e2d\u5fc3ArkID\u3002 \u521b\u5efa\u5e94\u7528\uff0c\u9009\u62e9OIDC-platform\u534f\u8bae\uff0c\u5e76\u5b8c\u6210\u5e94\u7528\u63a5\u5165\u3002 \u63d0\u793a OIDC-platform\u5c31\u662fOIDC\u534f\u8bae\uff0c\u53ea\u662f\u8be5\u7c7b\u578b\u7684\u5e94\u7528\u53ef\u4ee5\u88ab\u6574\u4e2a\u5e73\u53f0\u6240\u6709\u79df\u6237\u8bbf\u95ee\u3002\u4f60\u53ef\u4ee5\u6309\u7167OIDC\u7684\u63a5\u5165\u6d41\u7a0b\u63a5\u5165\u5373\u53ef\uff0c\u53ea\u662f\u7528\u6237\u53c2\u6570\u4e2d\u4f1a\u589e\u52a0\uff1a\u79df\u6237\u6807\u8bc6\u3002 \u8bbf\u95eeArkStore \u70b9\u51fb\u5f00\u53d1\u5546-\u5e94\u7528\u7ba1\u7406\uff0c\u521b\u5efa\u5e94\u7528\uff0c\u7ed1\u5b9a\u5728ArkID\u4e2d\u521b\u5efa\u7684\u5e94\u7528\u3002 \u8bbe\u7f6e\u4ef7\u683c\uff0c\u8be6\u60c5\u8bf7\u89c1 \u4ef7\u683c\u89c4\u5219 \u63d0\u4ea4\u5ba1\u6838 \u901a\u8fc7\u5373\u4e0a\u67b6\u5b8c\u6210\uff0c\u6240\u6709ArkID\u7684\u7528\u6237\u5728\u5176\u5e94\u7528\u5546\u5e97\u4e2d\u90fd\u80fd\u770b\u5230\u8be5\u5e94\u7528\u4e86\u3002","title":"OIDC"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_3","text":"\u5982\u679c\u4f60\u7684\u5e94\u7528\u4f7f\u7528\u7684\u662f\u5176\u5b83\u975e\u6807\u51c6\u534f\u8bae\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\u3002","title":"\u81ea\u5b9a\u4e49\u8ba4\u8bc1\u534f\u8bae"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_4","text":"\u5982\u679c\u4f60\u7684\u5e94\u7528\u6682\u65f6\u65e0\u6cd5\u901a\u8fc7OIDC\u63a5\u5165\uff0c\u6211\u4eec\u8fd8\u63a8\u8350\u4f7f\u7528\u8d26\u5bc6\u4ee3\u586b\u7684\u65b9\u5f0f\u3002 \u8d26\u5bc6\u4ee3\u586b\u5e76\u975e\u5355\u70b9\u767b\u5f55\u7684\u534f\u8bae\uff0c\u53ea\u662f\u4f1a\u5728\u6d4f\u89c8\u5668\u4e2d\u8bb0\u5f55\u5bf9\u5e94\u7ad9\u70b9\u7684\u8d26\u53f7\u5bc6\u7801\uff0c\u5e76\u81ea\u52a8\u586b\u5165\u5e76\u70b9\u51fb\u767b\u5f55\u3002 \u5982\u679c\u8be5\u7f51\u7ad9\u4f7f\u7528\u4e86\u5982\u9a8c\u8bc1\u7801\u7b49\u989d\u5916\u7684\u65b9\u5f0f\uff0c\u5219\u4e0d\u9002\u7528\u8d26\u5bc6\u4ee3\u586b\u3002","title":"\u8d26\u5bc6\u4ee3\u586b"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_5","text":"\u5982\u679c\u5f53\u524d\u5e94\u7528\u4e0d\u652f\u6301\u4e0a\u8ff0\u5404\u7c7b\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u4ec5\u4ec5\u4e0a\u4f20\u4e00\u4e2aArkID\u7684\u4e13\u5c5e\u63a8\u5e7f\u94fe\u63a5\uff0c\u5e76\u8bb0\u5f55\u4e0b\u8be5\u7528\u6237\u540e\u7eed\u7684\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u4ed8\u8d39\u7b49\u884c\u4e3a\uff0c\u7528\u6765\u4f5c\u4e3a\u4e0eArkID\u5206\u8d26\u7684\u4f9d\u636e\u3002 \u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\uff0c\u652f\u4ed8\u4f1a\u4f7f\u7528\u5185\u4ed8\u8d39\u7684\u5f62\u5f0f\uff0c\u4f60\u9700\u8981\u8054\u7cfb\u6211\u4eec\u3002","title":"\u63a8\u5e7f\u94fe\u63a5"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_6","text":"","title":"\u4ef7\u683c\u89c4\u5219"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_7","text":"\u63d2\u4ef6\u53ea\u80fd\u9009\u62e9\u5546\u5e97\u652f\u4ed8\u7684\u65b9\u5f0f\uff0c\u5e94\u7528\u53ef\u4ee5\u662f\u5546\u5e97\u652f\u4ed8\u6216\u8005\u5e94\u7528\u5185\u652f\u4ed8\u7684\u65b9\u5f0f\u3002 \u65e0\u8bba\u662f\u63d2\u4ef6\u8fd8\u662f\u5e94\u7528\uff0c\u5f00\u53d1\u5546\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4ef7\u683c\u3002 \u4ef7\u683c\u5206\u4e24\u7c7b\uff1a \u8d2d\u4e70\u4ef7\u683c \u4e0e \u79df\u8d41\u4ef7\u683c \uff0c\u4e24\u79cd\u4ef7\u683c\u7684\u7ec4\u6210\u662f\u76f8\u540c\u7684\u3002 \u4ef7\u683c\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff1a \u5e02\u573a\u6307\u5bfc\u4ef7 \u4e0e \u6210\u672c\u6298\u6263 \u5e02\u573a\u6307\u5bfc\u4ef7\u7684\u5355\u4f4d\u4e3a\uff1a x\u5143/y\u4eba/z\u5929 \u5f53x=0\uff0c\u5219\u88ab\u89c6\u4e3a\u514d\u8d39 \u5f53y=0\uff0c\u5219\u88ab\u8ba4\u4e3a\u4e0d\u9650\u4eba\u6570 \u5f53z=0\uff0c\u5219\u88ab\u8ba4\u4e3a\u4e0d\u9650\u5929\u6570 \u6210\u672c\u6298\u6263\u53ef\u4ee5\u4e3a0-1\u4e4b\u95f4\u7684\u4efb\u4f55\u4e00\u4e2a\u4e24\u4f4d\u5c0f\u6570\u3002 \u6ce8\u610f \u6bcf\u6210\u4ea4\u4e00\u4e2a\u4ea7\u54c1\uff0c\u5f00\u53d1\u5546\u5b9e\u9645\u83b7\u5f97\u7684\u6536\u76ca\u4e3a\uff1a\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6210\u672c\u6298\u6263 \u4ef7\u683c\u53ef\u4ee5\u8bbe\u7f6e\u591a\u6761\uff0c\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u5b9a\u4ef7\u7b56\u7565\u3002","title":"\u5546\u5e97\u652f\u4ed8"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_8","text":"\u4f60\u7684\u5e94\u7528\u53ef\u4ee5\u4e0d\u901a\u8fc7\u5546\u5e97\u652f\u4ed8\uff0c\u800c\u662f\u7528\u6237\u81ea\u884c\u5728\u4f60\u7684\u5e94\u7528\u5185\u652f\u4ed8\u9875\u9762\u5b8c\u6210\u652f\u4ed8\u3002 \u8fd9\u79cd\u60c5\u51b5\uff0c\u9700\u8981\u4f60\u8ddf\u9f99\u5f52\u7b7e\u7f72\u76f8\u5173\u5408\u4f5c\u534f\u8bae\uff0c\u5e76\u5546\u5b9a\u597d\u5206\u6210\u6bd4\u4f8b\uff0c\u5b9a\u671f\u4e0e\u9f99\u5f52\u7ed3\u7b97\u5373\u53ef\u3002","title":"\u5e94\u7528\u5185\u652f\u4ed8"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_9","text":"\u5728ArkStore\u4e2d\uff0c\u70b9\u51fb \u8d39\u7528\u4e2d\u5fc3-\u5f00\u53d1\u5546\u8ba2\u5355 \u5373\u53ef\u67e5\u770b","title":"\u8ba2\u5355\u8bb0\u5f55"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%20%E5%BC%80%E5%8F%91%E5%95%86/#_10","text":"\u5728ArkStore\u4e2d\uff0c\u70b9\u51fb \u8d39\u7528\u4e2d\u5fc3-\u63d0\u73b0\u7533\u8bf7 \u5373\u53ef\u53d1\u8d77\u7533\u8bf7\uff0c\u540e\u53f0\u5ba1\u6838\u5b8c\u540e\u4f1a\u6253\u6b3e\u3002 \u5fae\u4fe1\u5206\u8d26\u529f\u80fd\u6b63\u5728\u63a5\u5165\u3002","title":"\u63d0\u73b0"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/","text":"ArkID\u4ee3\u7406\u5546 # \u5982\u679c\u4f60\u80fd\u63a5\u89e6\u5ba2\u6237\uff0c\u5e76\u5f81\u670d\u5ba2\u6237\u3002\u90a3\u975e\u5e38\u9002\u5408\u6210\u4e3aArkID\u4ee3\u7406\u5546\u3002 \u4ee3\u7406\u5546\u6761\u4ef6 # \u6709\u673a\u4f1a\u63a5\u89e6\u5ba2\u6237 \u62e5\u6709ArkID\u8d26\u53f7 \u8bbf\u95eeArkStore \u63d2\u4ef6\u4ee3\u7406\u89c4\u5219 # \u8bbf\u95eeArkStore \u70b9\u51fb \u4ee3\u7406\u5546-\u4ee3\u7406\u5546\u8be6\u60c5\uff0c\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u5f53\u524d\u4ee3\u7406\u5546\u7684\u6240\u6709\u4fe1\u606f \u4ee3\u7406\u5546\u6807\u5fd7 \u603b\u9500\u552e\u989d\uff08\u5e02\u573a\u6307\u5bfc\u4ef7\uff09 \u5e74\u9500\u552e\u989d\uff08\u5e02\u573a\u6307\u5bfc\u4ef7\uff09 \u5b9e\u9645\u603b\u9500\u552e\u989d\uff08\u4ea4\u6613\u4ef7\u683c\uff09 \u5b9e\u9645\u5e74\u9500\u552e\u989d\uff08\u4ea4\u6613\u4ef7\u683c\uff09 \u521d\u59cb\u7b49\u7ea7 \u5e74\u7b49\u7ea7 \u4ee3\u7406\u5546\u7b49\u7ea7 \u7b49\u7ea7\u6298\u6263 \u5347\u7ea7\u6240\u9700\u9500\u552e\u989d \u4ee3\u7406\u6298\u6263\uff08\u53ef\u66f4\u6539\uff09 \u5206\u522b\u89e3\u91ca\u5404\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u4e0e\u4f5c\u7528\uff1a \u603b\u9500\u552e\u989d\uff0c\u662f\u663e\u793a\u672c\u4ee3\u7406\u5546\u6240\u6709\u7d2f\u79ef\u9500\u552e\u603b\u989d,\u4ee5\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7\u8ba1\u7b97\u3002 \u5e74\u9500\u552e\u989d\uff0c\u6307\u4eca\u5e74\u7684\u9500\u552e\u989d\uff0c\u4ee5\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7\u8ba1\u7b97\u3002 \u5b9e\u9645\u603b\u9500\u552e\u989d\uff0c\u4ee5\u5b9e\u9645\u6210\u4ea4\u4ef7\u6765\u8ba1\u7b97\uff0c\u6240\u6709\u7d2f\u79ef\u7684\u9500\u552e\u989d\u3002 \u5b9e\u9645\u5e74\u9500\u552e\u989d\uff0c\u4ee5\u5b9e\u9645\u6210\u4ea4\u4ef7\u8ba1\u7b97\uff0c\u4eca\u5e74\u7684\u9500\u552e\u989d\u3002 \u4ee3\u7406\u5546\u6807\u5fd7 # \u5f53\u60a8\u7684\u5ba2\u6237\u4f7f\u7528\u79c1\u6709\u5316\u90e8\u7f72\u65b9\u5f0f\u5b89\u88c5ArkID\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u8be5ArkID\u7ba1\u7406\u540e\u53f0\u4e2d\uff1a\u5e73\u53f0\u7ba1\u7406 - \u5e73\u53f0\u63d2\u4ef6 \u9875\u9762\u7684\u53f3\u4e0a\u89d2\u627e\u5230 \u201c\u8bbe\u7f6e\u4ee3\u7406\u5546\u201d \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5e76\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u586b\u5165\"\u4ee3\u7406\u5546\u6807\u5fd7\"\uff0c\u70b9\u51fb\u786e\u8ba4\u3002\u8fd9\u5c31\u5b8c\u6210\u5ba2\u6237\u65b9\uff0c\u4ee3\u7406\u5546\u7684\u7ed1\u5b9a\u3002 \u5ba2\u6237\u5b8c\u6210\u4ee3\u7406\u5546\u7ed1\u5b9a\u540e\uff0c\u5176\u63d2\u4ef6\u5546\u5e97\u548c\u5e94\u7528\u5546\u5e97\u7684\u4ea7\u54c1\u4ef7\u683c\u90fd\u4f1a\u663e\u793a\u4ee3\u7406\u5546\u7684\u4ef7\u683c\uff0c\u5e76\u4e14\u6240\u6709\u8d2d\u4e70\u884c\u4e3a\u90fd\u4f1a\u901a\u8fc7\u4ee3\u7406\u5546\u751f\u4ea7\u8ba2\u5355\u3002 \u4ee3\u7406\u5546\u7b49\u7ea7 # \u603b\u9500\u552e\u989d\uff0c\u4ee3\u7406\u5546\u7b49\u7ea7\uff08\u521d\u59cb\u7b49\u7ea7\uff0c\u5e74\u7b49\u7ea7\uff09\uff0c \u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263\uff0c\u5e74\u7b49\u7ea7\u5347\u7ea7\u6240\u9700\u9500\u552e\u989d\u3002\u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u4ee3\u7406\u5546\u7b49\u7ea7\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002 \u4ee3\u7406\u5546\u7b49\u7ea7 \u53d6 \u4ee3\u7406\u5546\u521d\u59cb\u7b49\u7ea7 \u4e0e \u4ee3\u7406\u5546\u5e74\u7b49\u7ea7 \u7684\u6700\u5927\u503c \u4ee3\u7406\u5546\u521d\u59cb\u7b49\u7ea7\uff1a\u4ee3\u7406\u5546\u53bb\u5e74\u7684 \u5e74\u7b49\u7ea7 \u4f1a\u6210\u4e3a\u4ee3\u7406\u5546\u4eca\u5e74\u7684 \u521d\u59cb\u7b49\u7ea7 \uff0c\u9ed8\u8ba4\u503c\u4e3a1 \u4ee3\u7406\u5546\u5e74\u7b49\u7ea7\uff1a\u6bcf\u5e741\u67081\u65e5\u51cc\u6668\u4f1a\u91cd\u7f6e\u4e3a1\uff0c\u5e76\u5c06\u5e74\u9500\u552e\u989d\u6e05\u96f6 \u4ee3\u7406\u5546\u7b49\u7ea7\u4f1a\u51b3\u5b9a\u5bf9\u5e94\u7684\u7b49\u7ea7\u6298\u6263\uff0c\u89c1\u4e0b\u8868\uff1a \u4ee3\u7406\u7b49\u7ea7 \u7b49\u7ea7\u6298\u6263 \u5e74\u7b49\u7ea7 \u5347\u7ea7\u9700\u8981\u5e74\u9500\u552e\u989d\uff08\u5143\uff09 1\uff08\u521d\u59cb\u7b49\u7ea7\uff09 0.9 0 2 0.8 200 3 0.7 400 4 0.6 800 5 0.5 1600 6 0.4 3200 7 0.3 6400 8 0.2 12800 9 0.1 25600 10 0 51200 \u6ce8\u610f \u5e74\u7b49\u7ea7\u5347\u7ea7\u6240\u9700\u7684\u5e74\u9500\u552e\u989d\uff0c\u662f\u4ee5\u5e02\u573a\u6307\u5bfc\u4ef7\u6765\u8ba1\u7b97\u7684\u3002 \u7b49\u7ea7\u6298\u6263\u51b3\u5b9a\u8be5\u4ee3\u7406\u5546\u62ff\u8d27\u7684\u6700\u5c0f\u6298\u6263\uff0c\u5982\u679c\u8be5\u4ea7\u54c1\u7684\u5f00\u53d1\u5546\u8bbe\u7f6e\u7684 \u6210\u672c\u6298\u6263 \u5c0f\u4e8e\u4ee3\u7406\u5546\u7684 \u7b49\u7ea7\u6298\u6263 \uff0c\u5219\u6309\u7167 \u7b49\u7ea7\u6298\u6263 \u8ba1\u7b97\u62ff\u8d27\u4ef7\u683c\uff0c\u5982\u679c\u5f00\u53d1\u5546\u7684 \u6210\u672c\u6298\u6263 \u5927\u4e8e\u4ee3\u7406\u5546\u7684 \u7b49\u7ea7\u6298\u6263 \uff0c\u5219\u6309 \u6210\u672c\u6298\u6263 \u8ba1\u7b97\u62ff\u8d27\u4ef7\u683c\u3002\u5373\uff1a \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u5927\u503c(\u5f00\u53d1\u5546\u6210\u672c\u6298\u6263\uff0c\u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263) + ArkStore\u5e73\u53f0\u63d0\u6210 ArkStore\u5e73\u53f0\u63d0\u6210 # ArkStore\u5e73\u53f0\u63d0\u6210 = \u6700\u5c0f\u503c\uff08\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * 0.1 \uff0c \u5f00\u53d1\u5546\u6210\u672c\u4ef7 * 0.3\uff09 \u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5982\u679c\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7\u4e3a0\uff0c\u5373\u514d\u8d39\uff0c\u7528\u6237\u5373\u53ef\u514d\u8d39\u83b7\u53d6\u3002 \u5982\u679c\u5f00\u53d1\u5546\u6210\u672c\u4ef7\u4e3a0\uff0c\u5373\u5f00\u53d1\u5546\u7684\u6210\u672c\u6298\u6263\u4e3a0\uff0c\u90a3\u4e48\u4ee3\u7406\u5546\u53ef\u4ee5\u514d\u8d39\u62ff\u8d27\u3002 \u4ee3\u7406\u6298\u6263 # \u7531\u4ee3\u7406\u5546\u81ea\u7531\u8bbe\u7f6e 0-1 \u4e4b\u95f4\u7684\u5c0f\u6570\u3002 \u8ba1\u7b97\u89c4\u5219\u5982\u4e0b # \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u5927\u503c(\u5f00\u53d1\u5546\u6210\u672c\u6298\u6263\uff0c\u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263) + ArkStore\u5e73\u53f0\u63d0\u6210 \u4ea7\u54c1\u9884\u671f\u9500\u552e\u4ef7\u683c \u4ea7\u54c1\u9884\u671f\u9500\u552e\u4ef7\u683c = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u4ee3\u7406\u5546\u4ee3\u7406\u6298\u6263 + \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c \u4ea7\u54c1\u6700\u7ec8\u9500\u552e\u4ef7\u683c\uff1a\u4e0d\u5f97\u9ad8\u4e8e\u5f00\u53d1\u5546\u5b9a\u7684\u5e02\u573a\u6307\u5bfc\u4ef7 \u4ea7\u54c1\u6700\u7ec8\u9500\u552e\u4ef7\u683c = \u6700\u5c0f\u503c(\u4ea7\u54c1\u9884\u671f\u9500\u552e\u4ef7\u683c, \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7) \u4ee3\u7406\u5546\u5229\u6da6 = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u4ee3\u7406\u5546\u4ee3\u7406\u6298\u6263\u3002 \u4ee3\u7406\u5546\u5229\u6da6 = \u4ea7\u54c1\u6700\u7ec8\u9500\u552e\u4ef7\u683c - \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c \u5e94\u7528\u4ee3\u7406\u89c4\u5219 # \u5e94\u7528\u4ee3\u7406\u89c4\u5219 \u76f8\u6bd4 \u63d2\u4ef6 \u8981\u590d\u6742\u4e00\u4e9b\u3002\u56e0\u4e3a\u5e94\u7528\u63a5\u5165\u6807\u51c6\u4e0d\u540c\uff0c\u5404\u4e2a\u5e94\u7528\u5f00\u53d1\u5546\u8981\u6c42\u7684\u5206\u6210\u6bd4\u4f8b\uff0c\u8d26\u671f\u90fd\u4e0d\u540c\u3002\u6bcf\u4e2a\u5e94\u7528\u90fd\u9700\u8981\u5177\u4f53\u770b\u5176\u5177\u4f53\u7684\u4ee3\u7406\u89c4\u5219\u3002 \u5927\u81f4\u5206\u4e3a\u8fd9\u51e0\u7c7b\uff1a OIDC \u4e0e \u5546\u5e97\u652f\u4ed8 \u5e94\u7528\u4f7f\u7528OIDC\u534f\u8bae\u4e0eArkID\u5bf9\u63a5\u5e76\u63a5\u5165\u4e86\u5546\u5e97\u652f\u4ed8\u6807\u51c6\uff0c\u5176\u4ee3\u7406\u89c4\u5219\u5219\u4e0e\u63d2\u4ef6\u4e00\u81f4\u3002 \u5e94\u7528\u5185\u652f\u4ed8 \u5e94\u7528\u867d\u7136\u4f7f\u7528 OIDC\u534f\u8bae \u6216 \u81ea\u5b9a\u4e49\u534f\u8bae \u63a5\u5165ArkID\uff0c\u4f46\u4f7f\u7528\u4e86\u5e94\u7528\u5185\u652f\u4ed8\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u8be5\u5e94\u7528\u4e3a\u514d\u8d39\u5e94\u7528\u3002\u5206\u6210\u6bd4\u4f8b\u5c31\u4ee5\u5f00\u53d1\u5546\u8bbe\u7f6e\u4e3a\u51c6\u3002 \u63a8\u5e7f\u94fe\u63a5 \u4e0e \u5e94\u7528\u5185\u652f\u4ed8 \u5982\u679c\u5e94\u7528\u4ec5\u4ec5\u4f7f\u7528\u63a8\u5e7f\u94fe\u63a5\uff0cArkID\u65e0\u6cd5\u83b7\u53d6\u5e94\u7528\u5185\u8eab\u4efd\u4e0eArkID\u8eab\u4efd\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u65e0\u6cd5\u6309\u7167\u5b9e\u9645\u4f7f\u7528\u60c5\u51b5\u4e0e\u4ee3\u7406\u5546\u5206\u6210\u3002 \u63a8\u5e7f\u94fe\u63a5\u91c7\u7528\u8bb0\u5f55\u70b9\u51fb\u91cf\u5e76\u8ba1\u7b97\u70b9\u51fb\u5360\u6bd4\uff0c\u901a\u8fc7\u8be5\u70b9\u51fb\u5360\u6bd4\u8fdb\u884c\u5206\u6210\u3002 \u8ba2\u5355\u4e0e\u63d0\u73b0 # \u5728ArkStore\u7684\u8d39\u7528\u4e2d\u5fc3\u4e2d\u5373\u53ef\u67e5\u770b\u4ee3\u7406\u5546\u8ba2\u5355\u6216\u53d1\u8d77\u63d0\u73b0\u7533\u8bf7\u3002 Q&A #","title":"ArkID\u4ee3\u7406\u5546"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#arkid","text":"\u5982\u679c\u4f60\u80fd\u63a5\u89e6\u5ba2\u6237\uff0c\u5e76\u5f81\u670d\u5ba2\u6237\u3002\u90a3\u975e\u5e38\u9002\u5408\u6210\u4e3aArkID\u4ee3\u7406\u5546\u3002","title":"ArkID\u4ee3\u7406\u5546"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_1","text":"\u6709\u673a\u4f1a\u63a5\u89e6\u5ba2\u6237 \u62e5\u6709ArkID\u8d26\u53f7 \u8bbf\u95eeArkStore","title":"\u4ee3\u7406\u5546\u6761\u4ef6"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_2","text":"\u8bbf\u95eeArkStore \u70b9\u51fb \u4ee3\u7406\u5546-\u4ee3\u7406\u5546\u8be6\u60c5\uff0c\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u5f53\u524d\u4ee3\u7406\u5546\u7684\u6240\u6709\u4fe1\u606f \u4ee3\u7406\u5546\u6807\u5fd7 \u603b\u9500\u552e\u989d\uff08\u5e02\u573a\u6307\u5bfc\u4ef7\uff09 \u5e74\u9500\u552e\u989d\uff08\u5e02\u573a\u6307\u5bfc\u4ef7\uff09 \u5b9e\u9645\u603b\u9500\u552e\u989d\uff08\u4ea4\u6613\u4ef7\u683c\uff09 \u5b9e\u9645\u5e74\u9500\u552e\u989d\uff08\u4ea4\u6613\u4ef7\u683c\uff09 \u521d\u59cb\u7b49\u7ea7 \u5e74\u7b49\u7ea7 \u4ee3\u7406\u5546\u7b49\u7ea7 \u7b49\u7ea7\u6298\u6263 \u5347\u7ea7\u6240\u9700\u9500\u552e\u989d \u4ee3\u7406\u6298\u6263\uff08\u53ef\u66f4\u6539\uff09 \u5206\u522b\u89e3\u91ca\u5404\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u4e0e\u4f5c\u7528\uff1a \u603b\u9500\u552e\u989d\uff0c\u662f\u663e\u793a\u672c\u4ee3\u7406\u5546\u6240\u6709\u7d2f\u79ef\u9500\u552e\u603b\u989d,\u4ee5\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7\u8ba1\u7b97\u3002 \u5e74\u9500\u552e\u989d\uff0c\u6307\u4eca\u5e74\u7684\u9500\u552e\u989d\uff0c\u4ee5\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7\u8ba1\u7b97\u3002 \u5b9e\u9645\u603b\u9500\u552e\u989d\uff0c\u4ee5\u5b9e\u9645\u6210\u4ea4\u4ef7\u6765\u8ba1\u7b97\uff0c\u6240\u6709\u7d2f\u79ef\u7684\u9500\u552e\u989d\u3002 \u5b9e\u9645\u5e74\u9500\u552e\u989d\uff0c\u4ee5\u5b9e\u9645\u6210\u4ea4\u4ef7\u8ba1\u7b97\uff0c\u4eca\u5e74\u7684\u9500\u552e\u989d\u3002","title":"\u63d2\u4ef6\u4ee3\u7406\u89c4\u5219"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_3","text":"\u5f53\u60a8\u7684\u5ba2\u6237\u4f7f\u7528\u79c1\u6709\u5316\u90e8\u7f72\u65b9\u5f0f\u5b89\u88c5ArkID\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u8be5ArkID\u7ba1\u7406\u540e\u53f0\u4e2d\uff1a\u5e73\u53f0\u7ba1\u7406 - \u5e73\u53f0\u63d2\u4ef6 \u9875\u9762\u7684\u53f3\u4e0a\u89d2\u627e\u5230 \u201c\u8bbe\u7f6e\u4ee3\u7406\u5546\u201d \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5e76\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u586b\u5165\"\u4ee3\u7406\u5546\u6807\u5fd7\"\uff0c\u70b9\u51fb\u786e\u8ba4\u3002\u8fd9\u5c31\u5b8c\u6210\u5ba2\u6237\u65b9\uff0c\u4ee3\u7406\u5546\u7684\u7ed1\u5b9a\u3002 \u5ba2\u6237\u5b8c\u6210\u4ee3\u7406\u5546\u7ed1\u5b9a\u540e\uff0c\u5176\u63d2\u4ef6\u5546\u5e97\u548c\u5e94\u7528\u5546\u5e97\u7684\u4ea7\u54c1\u4ef7\u683c\u90fd\u4f1a\u663e\u793a\u4ee3\u7406\u5546\u7684\u4ef7\u683c\uff0c\u5e76\u4e14\u6240\u6709\u8d2d\u4e70\u884c\u4e3a\u90fd\u4f1a\u901a\u8fc7\u4ee3\u7406\u5546\u751f\u4ea7\u8ba2\u5355\u3002","title":"\u4ee3\u7406\u5546\u6807\u5fd7"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_4","text":"\u603b\u9500\u552e\u989d\uff0c\u4ee3\u7406\u5546\u7b49\u7ea7\uff08\u521d\u59cb\u7b49\u7ea7\uff0c\u5e74\u7b49\u7ea7\uff09\uff0c \u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263\uff0c\u5e74\u7b49\u7ea7\u5347\u7ea7\u6240\u9700\u9500\u552e\u989d\u3002\u8fd9\u4e9b\u53c2\u6570\u90fd\u662f\u4ee3\u7406\u5546\u7b49\u7ea7\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002 \u4ee3\u7406\u5546\u7b49\u7ea7 \u53d6 \u4ee3\u7406\u5546\u521d\u59cb\u7b49\u7ea7 \u4e0e \u4ee3\u7406\u5546\u5e74\u7b49\u7ea7 \u7684\u6700\u5927\u503c \u4ee3\u7406\u5546\u521d\u59cb\u7b49\u7ea7\uff1a\u4ee3\u7406\u5546\u53bb\u5e74\u7684 \u5e74\u7b49\u7ea7 \u4f1a\u6210\u4e3a\u4ee3\u7406\u5546\u4eca\u5e74\u7684 \u521d\u59cb\u7b49\u7ea7 \uff0c\u9ed8\u8ba4\u503c\u4e3a1 \u4ee3\u7406\u5546\u5e74\u7b49\u7ea7\uff1a\u6bcf\u5e741\u67081\u65e5\u51cc\u6668\u4f1a\u91cd\u7f6e\u4e3a1\uff0c\u5e76\u5c06\u5e74\u9500\u552e\u989d\u6e05\u96f6 \u4ee3\u7406\u5546\u7b49\u7ea7\u4f1a\u51b3\u5b9a\u5bf9\u5e94\u7684\u7b49\u7ea7\u6298\u6263\uff0c\u89c1\u4e0b\u8868\uff1a \u4ee3\u7406\u7b49\u7ea7 \u7b49\u7ea7\u6298\u6263 \u5e74\u7b49\u7ea7 \u5347\u7ea7\u9700\u8981\u5e74\u9500\u552e\u989d\uff08\u5143\uff09 1\uff08\u521d\u59cb\u7b49\u7ea7\uff09 0.9 0 2 0.8 200 3 0.7 400 4 0.6 800 5 0.5 1600 6 0.4 3200 7 0.3 6400 8 0.2 12800 9 0.1 25600 10 0 51200 \u6ce8\u610f \u5e74\u7b49\u7ea7\u5347\u7ea7\u6240\u9700\u7684\u5e74\u9500\u552e\u989d\uff0c\u662f\u4ee5\u5e02\u573a\u6307\u5bfc\u4ef7\u6765\u8ba1\u7b97\u7684\u3002 \u7b49\u7ea7\u6298\u6263\u51b3\u5b9a\u8be5\u4ee3\u7406\u5546\u62ff\u8d27\u7684\u6700\u5c0f\u6298\u6263\uff0c\u5982\u679c\u8be5\u4ea7\u54c1\u7684\u5f00\u53d1\u5546\u8bbe\u7f6e\u7684 \u6210\u672c\u6298\u6263 \u5c0f\u4e8e\u4ee3\u7406\u5546\u7684 \u7b49\u7ea7\u6298\u6263 \uff0c\u5219\u6309\u7167 \u7b49\u7ea7\u6298\u6263 \u8ba1\u7b97\u62ff\u8d27\u4ef7\u683c\uff0c\u5982\u679c\u5f00\u53d1\u5546\u7684 \u6210\u672c\u6298\u6263 \u5927\u4e8e\u4ee3\u7406\u5546\u7684 \u7b49\u7ea7\u6298\u6263 \uff0c\u5219\u6309 \u6210\u672c\u6298\u6263 \u8ba1\u7b97\u62ff\u8d27\u4ef7\u683c\u3002\u5373\uff1a \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u5927\u503c(\u5f00\u53d1\u5546\u6210\u672c\u6298\u6263\uff0c\u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263) + ArkStore\u5e73\u53f0\u63d0\u6210","title":"\u4ee3\u7406\u5546\u7b49\u7ea7"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#arkstore","text":"ArkStore\u5e73\u53f0\u63d0\u6210 = \u6700\u5c0f\u503c\uff08\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * 0.1 \uff0c \u5f00\u53d1\u5546\u6210\u672c\u4ef7 * 0.3\uff09 \u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5982\u679c\u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7\u4e3a0\uff0c\u5373\u514d\u8d39\uff0c\u7528\u6237\u5373\u53ef\u514d\u8d39\u83b7\u53d6\u3002 \u5982\u679c\u5f00\u53d1\u5546\u6210\u672c\u4ef7\u4e3a0\uff0c\u5373\u5f00\u53d1\u5546\u7684\u6210\u672c\u6298\u6263\u4e3a0\uff0c\u90a3\u4e48\u4ee3\u7406\u5546\u53ef\u4ee5\u514d\u8d39\u62ff\u8d27\u3002","title":"ArkStore\u5e73\u53f0\u63d0\u6210"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_5","text":"\u7531\u4ee3\u7406\u5546\u81ea\u7531\u8bbe\u7f6e 0-1 \u4e4b\u95f4\u7684\u5c0f\u6570\u3002","title":"\u4ee3\u7406\u6298\u6263"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_6","text":"\u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u5927\u503c(\u5f00\u53d1\u5546\u6210\u672c\u6298\u6263\uff0c\u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263) + ArkStore\u5e73\u53f0\u63d0\u6210 \u4ea7\u54c1\u9884\u671f\u9500\u552e\u4ef7\u683c \u4ea7\u54c1\u9884\u671f\u9500\u552e\u4ef7\u683c = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u4ee3\u7406\u5546\u4ee3\u7406\u6298\u6263 + \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c \u4ea7\u54c1\u6700\u7ec8\u9500\u552e\u4ef7\u683c\uff1a\u4e0d\u5f97\u9ad8\u4e8e\u5f00\u53d1\u5546\u5b9a\u7684\u5e02\u573a\u6307\u5bfc\u4ef7 \u4ea7\u54c1\u6700\u7ec8\u9500\u552e\u4ef7\u683c = \u6700\u5c0f\u503c(\u4ea7\u54c1\u9884\u671f\u9500\u552e\u4ef7\u683c, \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7) \u4ee3\u7406\u5546\u5229\u6da6 = \u5f00\u53d1\u5546\u5e02\u573a\u6307\u5bfc\u4ef7 * \u4ee3\u7406\u5546\u4ee3\u7406\u6298\u6263\u3002 \u4ee3\u7406\u5546\u5229\u6da6 = \u4ea7\u54c1\u6700\u7ec8\u9500\u552e\u4ef7\u683c - \u4ee3\u7406\u5546\u62ff\u8d27\u4ef7\u683c","title":"\u8ba1\u7b97\u89c4\u5219\u5982\u4e0b"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_7","text":"\u5e94\u7528\u4ee3\u7406\u89c4\u5219 \u76f8\u6bd4 \u63d2\u4ef6 \u8981\u590d\u6742\u4e00\u4e9b\u3002\u56e0\u4e3a\u5e94\u7528\u63a5\u5165\u6807\u51c6\u4e0d\u540c\uff0c\u5404\u4e2a\u5e94\u7528\u5f00\u53d1\u5546\u8981\u6c42\u7684\u5206\u6210\u6bd4\u4f8b\uff0c\u8d26\u671f\u90fd\u4e0d\u540c\u3002\u6bcf\u4e2a\u5e94\u7528\u90fd\u9700\u8981\u5177\u4f53\u770b\u5176\u5177\u4f53\u7684\u4ee3\u7406\u89c4\u5219\u3002 \u5927\u81f4\u5206\u4e3a\u8fd9\u51e0\u7c7b\uff1a OIDC \u4e0e \u5546\u5e97\u652f\u4ed8 \u5e94\u7528\u4f7f\u7528OIDC\u534f\u8bae\u4e0eArkID\u5bf9\u63a5\u5e76\u63a5\u5165\u4e86\u5546\u5e97\u652f\u4ed8\u6807\u51c6\uff0c\u5176\u4ee3\u7406\u89c4\u5219\u5219\u4e0e\u63d2\u4ef6\u4e00\u81f4\u3002 \u5e94\u7528\u5185\u652f\u4ed8 \u5e94\u7528\u867d\u7136\u4f7f\u7528 OIDC\u534f\u8bae \u6216 \u81ea\u5b9a\u4e49\u534f\u8bae \u63a5\u5165ArkID\uff0c\u4f46\u4f7f\u7528\u4e86\u5e94\u7528\u5185\u652f\u4ed8\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u8be5\u5e94\u7528\u4e3a\u514d\u8d39\u5e94\u7528\u3002\u5206\u6210\u6bd4\u4f8b\u5c31\u4ee5\u5f00\u53d1\u5546\u8bbe\u7f6e\u4e3a\u51c6\u3002 \u63a8\u5e7f\u94fe\u63a5 \u4e0e \u5e94\u7528\u5185\u652f\u4ed8 \u5982\u679c\u5e94\u7528\u4ec5\u4ec5\u4f7f\u7528\u63a8\u5e7f\u94fe\u63a5\uff0cArkID\u65e0\u6cd5\u83b7\u53d6\u5e94\u7528\u5185\u8eab\u4efd\u4e0eArkID\u8eab\u4efd\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u65e0\u6cd5\u6309\u7167\u5b9e\u9645\u4f7f\u7528\u60c5\u51b5\u4e0e\u4ee3\u7406\u5546\u5206\u6210\u3002 \u63a8\u5e7f\u94fe\u63a5\u91c7\u7528\u8bb0\u5f55\u70b9\u51fb\u91cf\u5e76\u8ba1\u7b97\u70b9\u51fb\u5360\u6bd4\uff0c\u901a\u8fc7\u8be5\u70b9\u51fb\u5360\u6bd4\u8fdb\u884c\u5206\u6210\u3002","title":"\u5e94\u7528\u4ee3\u7406\u89c4\u5219"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#_8","text":"\u5728ArkStore\u7684\u8d39\u7528\u4e2d\u5fc3\u4e2d\u5373\u53ef\u67e5\u770b\u4ee3\u7406\u5546\u8ba2\u5355\u6216\u53d1\u8d77\u63d0\u73b0\u7533\u8bf7\u3002","title":"\u8ba2\u5355\u4e0e\u63d0\u73b0"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E4%BB%A3%E7%90%86%E5%95%86/#qa","text":"","title":"Q&amp;A"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/","text":"ArkID\u8fd0\u8425\u5546 # \u5982\u679c\u60a8\u5e0c\u671b\u8fd0\u8425\u81ea\u5df1\u72ec\u7acb\u7684IDaaS\u7ad9\u70b9\uff0c\u60a8\u7684\u7528\u6237\u76f4\u63a5\u4f5c\u4e3a\u79df\u6237\u6765\u4f7f\u7528ArkID\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06ArkID\u66b4\u9732\u5728\u516c\u7f51\u4e0a\uff0c\u914d\u7f6e\u57df\u540d\u5373\u53ef\u3002 \u8fd0\u8425\u5546\u6761\u4ef6 # \u516c\u7f51\u670d\u52a1\u5668(\u4efb\u4f55\u4e91\u670d\u52a1\u90fd\u53ef\u4ee5) \u90e8\u7f72\u79c1\u6709ArkID\u5e76\u8bbe\u7f6e\u57df\u540d \u6253\u5f00ArkID\u7684\u591a\u79df\u6237\u5f00\u5173 \u8fd0\u8425\u89c4\u5219 # \u63d2\u4ef6\u79df\u8d41 # \u79df\u6237\u4ed8\u8d39\u4f7f\u7528\u8fd0\u8425\u5546\u7684ArkID\u670d\u52a1\u3002ArkID\u7684\u63d2\u4ef6\u652f\u6301\u79df\u8d41\u3002\u4e5f\u5c31\u662f\u79df\u6237\u90fd\u9700\u8981\u79df\u8d41\u624d\u80fd\u4f7f\u7528\u8fd9\u4e9b\u63d2\u4ef6\u3002 \u8fd0\u8425\u5546\u88ab\u89c6\u4e3a\u4ee3\u7406\u5546\u7684\u4e00\u79cd\uff0c\u76f8\u5173\u8bbe\u7f6e\u4e0e\u4ee3\u7406\u5546\u5b8c\u5168\u4e00\u81f4\u3002 \u540c\u6837\u6709 \u4ee3\u7406\u5546\u7b49\u7ea7 \uff0c\u5e76\u8bbe\u7f6e \u4ee3\u7406\u5546\u6298\u6263 \u4e0e\u4ee3\u7406\u7c7b\u4f3c\uff0c\u6240\u6709\u79df\u6237\u90fd\u5c06\u8fd0\u8425\u5546\u89c6\u4e3a\u5176\u4ee3\u7406\u5546\u3002\u76f8\u5173\u8ba1\u7b97\u5982\u4e0b\uff1a \u79df\u6237\u79df\u8d41\u4ef7\u683c \u79df\u6237\u79df\u8d41\u4ef7\u683c = \u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * \u8fd0\u8425\u5546\u4ee3\u7406\u6298\u6263 + \u8fd0\u8425\u5546\u62ff\u8d27\u4ef7\u683c \u8fd0\u8425\u5546\u62ff\u8d27\u4ef7\u683c \u8fd0\u8425\u5546\u62ff\u8d27\u4ef7\u683c = \u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u5927\u503c\uff08\u5f00\u53d1\u5546\u79df\u8d41\u6210\u672c\u6298\u6263\uff0c\u8fd0\u8425\u5546\u4ee3\u7406\u7b49\u7ea7\u6298\u6263\uff09+ ArkStore\u5e73\u53f0\u63d0\u6210 ArkStore\u5e73\u53f0\u63d0\u6210 ArkStore\u5e73\u53f0\u63d0\u6210 = \u6700\u5c0f\u503c\uff08\u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * 0.1 \uff0c \u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * \u5f00\u53d1\u5546\u79df\u8d41\u6210\u672c\u6298\u6263 * 0.3\uff09 \u8fd0\u8425\u5546\u7b49\u7ea7\u6298\u6263 \u8fd0\u8425\u5546\u7b49\u7ea7\u6298\u6263\u89c4\u5219\uff0c\u53c2\u89c1 \u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263\u89c4\u5219 \u5e94\u7528\u8d2d\u4e70 # \u8fd0\u8425\u5546\u4f1a\u88ab\u89c6\u4e3a\u5176\u79df\u6237\u7684\u4ee3\u7406\u5546\uff0c\u5373\u79df\u6237\u8d2d\u4e70\u5e94\u7528\uff0c\u8fd0\u8425\u5546\u4e5f\u4f1a\u83b7\u5f97\u76f8\u5e94\u7684\u5206\u6210\u3002 \u8fd0\u8425\u8d39\u7528 # \u9664\u4e86\u8fd0\u8425\u5546\u9700\u8981\u4ece\u63d2\u4ef6\u6216\u5e94\u7528\u5546\u5e97\u4e2d\u76f4\u63a5\u8d2d\u4e70\u63d2\u4ef6\u6216\u5e94\u7528\u5916\uff0c\u9f99\u5f52\u539f\u5219\u4e0a\u4e0d\u4f1a\u5bf9\u8fd0\u8425\u5546\u6709\u4efb\u4f55\u989d\u5916\u7684\u6536\u8d39\uff0c\u4e5f\u4e0d\u6392\u9664\u8fd0\u8425\u5546\u9700\u8981\u989d\u5916\u7684\u6258\u7ba1\uff0c\u8fd0\u7ef4\uff0c\u5f00\u53d1\u670d\u52a1\uff0c\u8fd9\u90e8\u5206\u53ef\u4ee5\u53d1\u9001\u90ae\u4ef6\u81f3 bd@longguikeji.com \uff0c\u5c06\u60a8\u7684\u9700\u6c42\u544a\u77e5\uff0c\u6211\u4eec\u4f1a\u4e0e\u60a8\u8054\u7cfb\u3002 \u8ba2\u5355\u4e0e\u63d0\u73b0 # \u5728ArkStore\u7684\u8d39\u7528\u4e2d\u5fc3\u4e2d\u5373\u53ef\u67e5\u770b\u4ee3\u7406\u5546\u8ba2\u5355\u6216\u53d1\u8d77\u63d0\u73b0\u7533\u8bf7\u3002","title":"ArkID\u8fd0\u8425\u5546"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#arkid","text":"\u5982\u679c\u60a8\u5e0c\u671b\u8fd0\u8425\u81ea\u5df1\u72ec\u7acb\u7684IDaaS\u7ad9\u70b9\uff0c\u60a8\u7684\u7528\u6237\u76f4\u63a5\u4f5c\u4e3a\u79df\u6237\u6765\u4f7f\u7528ArkID\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06ArkID\u66b4\u9732\u5728\u516c\u7f51\u4e0a\uff0c\u914d\u7f6e\u57df\u540d\u5373\u53ef\u3002","title":"ArkID\u8fd0\u8425\u5546"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#_1","text":"\u516c\u7f51\u670d\u52a1\u5668(\u4efb\u4f55\u4e91\u670d\u52a1\u90fd\u53ef\u4ee5) \u90e8\u7f72\u79c1\u6709ArkID\u5e76\u8bbe\u7f6e\u57df\u540d \u6253\u5f00ArkID\u7684\u591a\u79df\u6237\u5f00\u5173","title":"\u8fd0\u8425\u5546\u6761\u4ef6"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#_2","text":"","title":"\u8fd0\u8425\u89c4\u5219"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#_3","text":"\u79df\u6237\u4ed8\u8d39\u4f7f\u7528\u8fd0\u8425\u5546\u7684ArkID\u670d\u52a1\u3002ArkID\u7684\u63d2\u4ef6\u652f\u6301\u79df\u8d41\u3002\u4e5f\u5c31\u662f\u79df\u6237\u90fd\u9700\u8981\u79df\u8d41\u624d\u80fd\u4f7f\u7528\u8fd9\u4e9b\u63d2\u4ef6\u3002 \u8fd0\u8425\u5546\u88ab\u89c6\u4e3a\u4ee3\u7406\u5546\u7684\u4e00\u79cd\uff0c\u76f8\u5173\u8bbe\u7f6e\u4e0e\u4ee3\u7406\u5546\u5b8c\u5168\u4e00\u81f4\u3002 \u540c\u6837\u6709 \u4ee3\u7406\u5546\u7b49\u7ea7 \uff0c\u5e76\u8bbe\u7f6e \u4ee3\u7406\u5546\u6298\u6263 \u4e0e\u4ee3\u7406\u7c7b\u4f3c\uff0c\u6240\u6709\u79df\u6237\u90fd\u5c06\u8fd0\u8425\u5546\u89c6\u4e3a\u5176\u4ee3\u7406\u5546\u3002\u76f8\u5173\u8ba1\u7b97\u5982\u4e0b\uff1a \u79df\u6237\u79df\u8d41\u4ef7\u683c \u79df\u6237\u79df\u8d41\u4ef7\u683c = \u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * \u8fd0\u8425\u5546\u4ee3\u7406\u6298\u6263 + \u8fd0\u8425\u5546\u62ff\u8d27\u4ef7\u683c \u8fd0\u8425\u5546\u62ff\u8d27\u4ef7\u683c \u8fd0\u8425\u5546\u62ff\u8d27\u4ef7\u683c = \u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u5927\u503c\uff08\u5f00\u53d1\u5546\u79df\u8d41\u6210\u672c\u6298\u6263\uff0c\u8fd0\u8425\u5546\u4ee3\u7406\u7b49\u7ea7\u6298\u6263\uff09+ ArkStore\u5e73\u53f0\u63d0\u6210 ArkStore\u5e73\u53f0\u63d0\u6210 ArkStore\u5e73\u53f0\u63d0\u6210 = \u6700\u5c0f\u503c\uff08\u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * 0.1 \uff0c \u5f00\u53d1\u5546\u79df\u8d41\u5e02\u573a\u6307\u5bfc\u4ef7 * \u5f00\u53d1\u5546\u79df\u8d41\u6210\u672c\u6298\u6263 * 0.3\uff09 \u8fd0\u8425\u5546\u7b49\u7ea7\u6298\u6263 \u8fd0\u8425\u5546\u7b49\u7ea7\u6298\u6263\u89c4\u5219\uff0c\u53c2\u89c1 \u4ee3\u7406\u5546\u7b49\u7ea7\u6298\u6263\u89c4\u5219","title":"\u63d2\u4ef6\u79df\u8d41"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#_4","text":"\u8fd0\u8425\u5546\u4f1a\u88ab\u89c6\u4e3a\u5176\u79df\u6237\u7684\u4ee3\u7406\u5546\uff0c\u5373\u79df\u6237\u8d2d\u4e70\u5e94\u7528\uff0c\u8fd0\u8425\u5546\u4e5f\u4f1a\u83b7\u5f97\u76f8\u5e94\u7684\u5206\u6210\u3002","title":"\u5e94\u7528\u8d2d\u4e70"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#_5","text":"\u9664\u4e86\u8fd0\u8425\u5546\u9700\u8981\u4ece\u63d2\u4ef6\u6216\u5e94\u7528\u5546\u5e97\u4e2d\u76f4\u63a5\u8d2d\u4e70\u63d2\u4ef6\u6216\u5e94\u7528\u5916\uff0c\u9f99\u5f52\u539f\u5219\u4e0a\u4e0d\u4f1a\u5bf9\u8fd0\u8425\u5546\u6709\u4efb\u4f55\u989d\u5916\u7684\u6536\u8d39\uff0c\u4e5f\u4e0d\u6392\u9664\u8fd0\u8425\u5546\u9700\u8981\u989d\u5916\u7684\u6258\u7ba1\uff0c\u8fd0\u7ef4\uff0c\u5f00\u53d1\u670d\u52a1\uff0c\u8fd9\u90e8\u5206\u53ef\u4ee5\u53d1\u9001\u90ae\u4ef6\u81f3 bd@longguikeji.com \uff0c\u5c06\u60a8\u7684\u9700\u6c42\u544a\u77e5\uff0c\u6211\u4eec\u4f1a\u4e0e\u60a8\u8054\u7cfb\u3002","title":"\u8fd0\u8425\u8d39\u7528"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%20%E8%BF%90%E8%90%A5%E5%95%86/#_6","text":"\u5728ArkStore\u7684\u8d39\u7528\u4e2d\u5fc3\u4e2d\u5373\u53ef\u67e5\u770b\u4ee3\u7406\u5546\u8ba2\u5355\u6216\u53d1\u8d77\u63d0\u73b0\u7533\u8bf7\u3002","title":"\u8ba2\u5355\u4e0e\u63d0\u73b0"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%8A%80%E6%9C%AF%E5%92%A8%E8%AF%A2%E4%B8%8E%E6%94%AF%E6%8C%81/","text":"\u524d\u63d0 # arkid\u5185\u6838\u4f7f\u7528 AGPL-3.0 \u5f00\u6e90\u534f\u8bae\uff0c\u53ef\u4ee5\u5728\u4fdd\u6301\u5f00\u6e90\u7684\u72b6\u51b5\u4e0b\u968f\u610f\u4f7f\u7528\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u9075\u5b88\u5f00\u6e90\u534f\u8bae\uff0c\u5219\u9700\u8981\u83b7\u53d6\u5b98\u65b9\u5546\u4e1a\u6388\u6743\u3002\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u54a8\u8be2\u670d\u52a1\uff0c\u90fd\u9644\u5e26\u5546\u4e1a\u6388\u6743\u3002 \u652f\u6301\u8303\u56f4 # \u4e3a\u5728\u5f00\u53d1\u9636\u6bb5\u548c\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528 ArKID \u7684\u516c\u53f8\u63d0\u4f9b\u539f\u5382\u5546\u4e1a\u652f\u6301\u3002 \u670d\u52a1\u5185\u5bb9 # \u670d\u52a1\u652f\u6301\u5305\u62ec\u67b6\u6784\u5ba1\u67e5\u3001\u4ee3\u7801\u5ba1\u67e5\u3001\u6545\u969c\u6392\u9664\u3001\u8bca\u65ad\u3001\u5efa\u8bae\u3001\u5347\u7ea7\u548c\u5b89\u5168\u8865\u4e01\uff0c\u4ee5\u786e\u4fdd ArKID\u7684\u6b63\u5e38\u8fd0\u884c\u3002 \u5982\u679c\u60a8\u5df2\u7ecf\u4fee\u6539\u4e86ArKID\u7684\u6838\u5fc3\uff0c\u6216\u8005\u6709\u81ea\u5b9a\u4e49\u63d2\u4ef6\uff0c\u5efa\u8bae\u8d2d\u4e70\u9ad8\u7ea7\u7248\u672c\uff0c\u4ee5\u4fbf\u6211\u4eec\u4e86\u89e3\u8fd9\u4e9b\u66f4\u6539\u5e76\u66f4\u5feb\u5730\u5b9a\u4f4d\u548c\u89e3\u51b3\u6545\u969c\u3002 \u6807\u51c6\u7248 \u9ad8\u7ea7\u7248 \u5546\u4e1a\u6388\u6743 \u2713 \u2713 \u63a8\u8350\u6a21\u5f0f \u5173\u952e\u4e1a\u52a1 \u5173\u952e\u4e1a\u52a1 \u7d27\u5bc6\u6c9f\u901a \u8fd0\u7ef4\u90e8\u7f72 \u2713 \u2713 \u6545\u969c\u6392\u67e5 - \u2713 \u5b89\u5168\u8865\u4e01 \u2713 \u2713 \u7248\u672c\u66f4\u65b0 - \u2713 \u6027\u80fd\u8c03\u4f18 - \u2713 \u6280\u672f\u54a8\u8be2&\u7b54\u7591 \u2713 \u2713 \u67b6\u6784\u8bc4\u5ba1 \u2713 \u2713 \u4ee3\u7801 review - \u2713 \u652f\u6301\u65b9\u5f0f Email\\\u5fae\u4fe1 Email\\\u5fae\u4fe1\\Phone \u652f\u6301\u65f6\u95f4 \u5de5\u4f5c\u65f6\u95f4\uff085x8h\uff09 7X 24h \u54cd\u5e94\u65f6\u95f4 SLA 8 \u5c0f\u65f6 \u9ad8\uff1a30 \u5206\u949f;\u4e2d\uff1a1 \u5c0f\u65f6;\u4f4e\uff1a24 \u5c0f\u65f6 \u6280\u672f\u652f\u6301\u8054\u7cfb\u4eba 1 2 \u6280\u672f\u652f\u6301\u7ecf\u7406 - \u2713 \u5de1\u68c0 - \u2713 \u8d60\u9001\u989d\u5916\u7684\u5f00\u53d1\u652f\u6301\u65f6\u95f4 - 5\u4eba\u5929 \u6536\u8d39 # \u6839\u636e\u4e0d\u540c\u670d\u52a1\u7b49\u7ea7\uff0c\u6309\u7167\u5e74\u5ea6\u8ba2\u9605\u6536\u8d39\u3002\u8d85\u51fa\u5957\u9910\u5185\u5f00\u53d1\u652f\u6301\u65f6\u957f\uff0c\u9700\u989d\u5916\u652f\u4ed8\u8d39\u7528\u3002 \u6807\u51c6\u7248\uff1a 5\u4e07 \u5143/\u5e74 \u9ad8\u7ea7\u7248\uff1a 12\u4e07 \u5143/\u5e74 \u5f00\u53d1\u652f\u6301\uff1a 3000 \u5143/\u4eba\u5929","title":"\u6280\u672f\u54a8\u8be2\u4e0e\u652f\u6301"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%8A%80%E6%9C%AF%E5%92%A8%E8%AF%A2%E4%B8%8E%E6%94%AF%E6%8C%81/#_1","text":"arkid\u5185\u6838\u4f7f\u7528 AGPL-3.0 \u5f00\u6e90\u534f\u8bae\uff0c\u53ef\u4ee5\u5728\u4fdd\u6301\u5f00\u6e90\u7684\u72b6\u51b5\u4e0b\u968f\u610f\u4f7f\u7528\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u9075\u5b88\u5f00\u6e90\u534f\u8bae\uff0c\u5219\u9700\u8981\u83b7\u53d6\u5b98\u65b9\u5546\u4e1a\u6388\u6743\u3002\u4ee5\u4e0b\u4efb\u610f\u4e00\u4e2a\u54a8\u8be2\u670d\u52a1\uff0c\u90fd\u9644\u5e26\u5546\u4e1a\u6388\u6743\u3002","title":"\u524d\u63d0"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%8A%80%E6%9C%AF%E5%92%A8%E8%AF%A2%E4%B8%8E%E6%94%AF%E6%8C%81/#_2","text":"\u4e3a\u5728\u5f00\u53d1\u9636\u6bb5\u548c\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528 ArKID \u7684\u516c\u53f8\u63d0\u4f9b\u539f\u5382\u5546\u4e1a\u652f\u6301\u3002","title":"\u652f\u6301\u8303\u56f4"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%8A%80%E6%9C%AF%E5%92%A8%E8%AF%A2%E4%B8%8E%E6%94%AF%E6%8C%81/#_3","text":"\u670d\u52a1\u652f\u6301\u5305\u62ec\u67b6\u6784\u5ba1\u67e5\u3001\u4ee3\u7801\u5ba1\u67e5\u3001\u6545\u969c\u6392\u9664\u3001\u8bca\u65ad\u3001\u5efa\u8bae\u3001\u5347\u7ea7\u548c\u5b89\u5168\u8865\u4e01\uff0c\u4ee5\u786e\u4fdd ArKID\u7684\u6b63\u5e38\u8fd0\u884c\u3002 \u5982\u679c\u60a8\u5df2\u7ecf\u4fee\u6539\u4e86ArKID\u7684\u6838\u5fc3\uff0c\u6216\u8005\u6709\u81ea\u5b9a\u4e49\u63d2\u4ef6\uff0c\u5efa\u8bae\u8d2d\u4e70\u9ad8\u7ea7\u7248\u672c\uff0c\u4ee5\u4fbf\u6211\u4eec\u4e86\u89e3\u8fd9\u4e9b\u66f4\u6539\u5e76\u66f4\u5feb\u5730\u5b9a\u4f4d\u548c\u89e3\u51b3\u6545\u969c\u3002 \u6807\u51c6\u7248 \u9ad8\u7ea7\u7248 \u5546\u4e1a\u6388\u6743 \u2713 \u2713 \u63a8\u8350\u6a21\u5f0f \u5173\u952e\u4e1a\u52a1 \u5173\u952e\u4e1a\u52a1 \u7d27\u5bc6\u6c9f\u901a \u8fd0\u7ef4\u90e8\u7f72 \u2713 \u2713 \u6545\u969c\u6392\u67e5 - \u2713 \u5b89\u5168\u8865\u4e01 \u2713 \u2713 \u7248\u672c\u66f4\u65b0 - \u2713 \u6027\u80fd\u8c03\u4f18 - \u2713 \u6280\u672f\u54a8\u8be2&\u7b54\u7591 \u2713 \u2713 \u67b6\u6784\u8bc4\u5ba1 \u2713 \u2713 \u4ee3\u7801 review - \u2713 \u652f\u6301\u65b9\u5f0f Email\\\u5fae\u4fe1 Email\\\u5fae\u4fe1\\Phone \u652f\u6301\u65f6\u95f4 \u5de5\u4f5c\u65f6\u95f4\uff085x8h\uff09 7X 24h \u54cd\u5e94\u65f6\u95f4 SLA 8 \u5c0f\u65f6 \u9ad8\uff1a30 \u5206\u949f;\u4e2d\uff1a1 \u5c0f\u65f6;\u4f4e\uff1a24 \u5c0f\u65f6 \u6280\u672f\u652f\u6301\u8054\u7cfb\u4eba 1 2 \u6280\u672f\u652f\u6301\u7ecf\u7406 - \u2713 \u5de1\u68c0 - \u2713 \u8d60\u9001\u989d\u5916\u7684\u5f00\u53d1\u652f\u6301\u65f6\u95f4 - 5\u4eba\u5929","title":"\u670d\u52a1\u5185\u5bb9"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%8A%80%E6%9C%AF%E5%92%A8%E8%AF%A2%E4%B8%8E%E6%94%AF%E6%8C%81/#_4","text":"\u6839\u636e\u4e0d\u540c\u670d\u52a1\u7b49\u7ea7\uff0c\u6309\u7167\u5e74\u5ea6\u8ba2\u9605\u6536\u8d39\u3002\u8d85\u51fa\u5957\u9910\u5185\u5f00\u53d1\u652f\u6301\u65f6\u957f\uff0c\u9700\u989d\u5916\u652f\u4ed8\u8d39\u7528\u3002 \u6807\u51c6\u7248\uff1a 5\u4e07 \u5143/\u5e74 \u9ad8\u7ea7\u7248\uff1a 12\u4e07 \u5143/\u5e74 \u5f00\u53d1\u652f\u6301\uff1a 3000 \u5143/\u4eba\u5929","title":"\u6536\u8d39"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%94%B6%E7%9B%8A%E8%AE%A1%E7%AE%97%E5%99%A8/","text":"\u6536\u76ca\u8ba1\u7b97\u5668 # \u65b9\u4fbf\u6d4b\u7b97\u4e00\u4e2a\u4ea7\u54c1\u9500\u552e\u65f6\uff0c\u53c2\u4e0e\u5404\u65b9\u7684\u6536\u76ca\u548c\u4ea7\u54c1\u6700\u7ec8\u552e\u4ef7\u3002 function compute(){ //\u5f00\u53d1\u5546 market_price = document.getElementById(\"market_price\").value cost_rate = document.getElementById(\"cost_rate\").value income = round(market_price * cost_rate) //ArkStore market_price_rate = document.getElementById(\"market_price_rate\").value cost_price_rate = document.getElementById(\"cost_price_rate\").value market_price_rate_price = round(market_price * market_price_rate) cost_price_rate_price = round(income * cost_price_rate) final_rate_price = Math.min(market_price_rate_price, cost_price_rate_price) init_level = document.getElementById(\"init_level\").value year_all_sell = document.getElementById(\"year_all_sell\").value year_level = 1 if(year_all_sell >= 200) year_level = 2 if(year_all_sell >= 400) year_level = 3 if(year_all_sell >= 800) year_level = 4 if(year_all_sell >= 1600) year_level = 5 if(year_all_sell >= 3200) year_level = 6 if(year_all_sell >= 6400) year_level = 7 if(year_all_sell >= 12800) year_level = 8 if(year_all_sell >= 25600) year_level = 9 if(year_all_sell >= 51200) year_level = 10 dl_level = Math.max(init_level, year_level) dl_level_rate = round((10-dl_level)*0.1) dl_final_rate = Math.max(dl_level_rate, cost_rate) dl_final_rate_price = round(market_price * dl_final_rate + final_rate_price) dl_rate = document.getElementById(\"dl_rate\").value dl_hope_income = round(market_price * dl_rate) hope_price = dl_final_rate_price + dl_hope_income final_price = Math.min(hope_price, market_price) dl_income = final_price - dl_final_rate_price document.getElementById(\"market_price\").value = market_price document.getElementById(\"income\").value = income document.getElementById(\"market_price_rate_price\").value = market_price_rate_price document.getElementById(\"cost_price_rate_price\").value = cost_price_rate_price document.getElementById(\"final_rate_price\").value = final_rate_price document.getElementById(\"year_level\").value = year_level document.getElementById(\"dl_level\").value = dl_level document.getElementById(\"dl_level_rate\").value = dl_level_rate document.getElementById(\"dl_final_rate\").value = dl_final_rate document.getElementById(\"dl_final_rate_price\").value = dl_final_rate_price document.getElementById(\"dl_hope_income\").value = dl_hope_income document.getElementById(\"hope_price\").value = hope_price document.getElementById(\"final_price\").value = final_price document.getElementById(\"dl_income\").value = dl_income } function round(num){ return Math.round(num * 100)/100 } \u5f00\u53d1\u5546 \u5e02\u573a\u6307\u5bfc\u4ef7 \u5f00\u653e\u5546\u81ea\u5b9a\u4e49 \u6210\u672c\u6298\u6263 \u5f00\u53d1\u5546\u81ea\u5b9a\u4e49 \u6536\u76ca/\u6210\u672c\u4ef7 \u5e02\u573a\u6307\u5bfc\u4ef7 * \u6210\u672c\u6298\u6263 ArkStore\u5e73\u53f0 \u5e02\u573a\u4ef7\u63d0\u70b9 \u56fa\u5b9a\u503c \u5e02\u573a\u4ef7\u63d0\u6210\u989d \u5e02\u573a\u6307\u5bfc\u4ef7 * \u5e02\u573a\u4ef7\u63d0\u70b9 \u6210\u672c\u4ef7\u63d0\u70b9 \u56fa\u5b9a\u503c \u6210\u672c\u4ef7\u63d0\u6210\u989d \u6210\u672c\u4ef7 * \u6210\u672c\u4ef7\u63d0\u70b9 \u6700\u7ec8\u63d0\u6210\u989d \u6210\u672c\u4ef7\u63d0\u6210\u989d \u4e0e \u5e02\u573a\u4ef7\u63d0\u6210\u989d \u4e2d\u7684\u6700\u5c0f\u503c \u4ee3\u7406\u5546 \u521d\u59cb\u7b49\u7ea7 \u521d\u59cb\u4e3a1\uff0c\u6216\u7531\u53bb\u5e74 \u5e74\u7b49\u7ea7 \u51b3\u5b9a \u5e74\u9500\u552e\u989d \u4eca\u5e74\u6240\u6709\u9500\u552e\u4ea7\u54c1\u7684\u5e02\u573a\u6307\u5bfc\u4ef7\u4e4b\u548c \u5e74\u7b49\u7ea7 \u7531\u5e74\u9500\u552e\u989d\u51b3\u5b9a \u4ee3\u7406\u5546\u7b49\u7ea7 \u521d\u59cb\u7b49\u7ea7 \u4e0e \u5e74\u7b49\u7ea7 \u4e2d\u7684\u6700\u5927\u503c \u7b49\u7ea7\u6298\u6263 \u53c2\u89c1\uff1a\u300a\u4ee3\u7406\u5546\u7b49\u7ea7\u4e0e\u7b49\u7ea7\u6298\u6263\u5bf9\u5e94\u8868\u300b \u6700\u7ec8\u6298\u6263 \u7b49\u7ea7\u6298\u6263 \u4e0e \u6210\u672c\u6298\u6263 \u4e2d\u7684\u6700\u5927\u503c \u62ff\u8d27\u4ef7\u683c \u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u7ec8\u6298\u6263 + ArkStore\u5e73\u53f0\u6700\u7ec8\u63d0\u6210\u989d \u4ee3\u7406\u6298\u6263 \u4ee3\u7406\u5546\u81ea\u5b9a\u4e49 \u4ee3\u7406\u9884\u671f\u6536\u76ca \u5e02\u573a\u6307\u5bfc\u4ef7 * \u4ee3\u7406\u6298\u6263 \u4ea7\u54c1\u9884\u671f\u552e\u4ef7 \u62ff\u8d27\u4ef7\u683c + \u4ee3\u7406\u9884\u671f\u6536\u76ca \u4ea7\u54c1\u6700\u7ec8\u552e\u4ef7 \u4ea7\u54c1\u9884\u671f\u552e\u4ef7 \u4e0e \u5e02\u573a\u6307\u5bfc\u4ef7 \u53d6\u6700\u5c0f\u503c \u4ee3\u7406\u5b9e\u9645\u6536\u76ca \u4ea7\u54c1\u6700\u7ec8\u552e\u4ef7 - \u62ff\u8d27\u4ef7\u683c","title":"\u6536\u76ca\u8ba1\u7b97\u5668"},{"location":"%20%20%E5%95%86%E4%B8%9A%E5%90%88%E4%BD%9C%E6%8C%87%E5%8D%97/%E6%94%B6%E7%9B%8A%E8%AE%A1%E7%AE%97%E5%99%A8/#_1","text":"\u65b9\u4fbf\u6d4b\u7b97\u4e00\u4e2a\u4ea7\u54c1\u9500\u552e\u65f6\uff0c\u53c2\u4e0e\u5404\u65b9\u7684\u6536\u76ca\u548c\u4ea7\u54c1\u6700\u7ec8\u552e\u4ef7\u3002 function compute(){ //\u5f00\u53d1\u5546 market_price = document.getElementById(\"market_price\").value cost_rate = document.getElementById(\"cost_rate\").value income = round(market_price * cost_rate) //ArkStore market_price_rate = document.getElementById(\"market_price_rate\").value cost_price_rate = document.getElementById(\"cost_price_rate\").value market_price_rate_price = round(market_price * market_price_rate) cost_price_rate_price = round(income * cost_price_rate) final_rate_price = Math.min(market_price_rate_price, cost_price_rate_price) init_level = document.getElementById(\"init_level\").value year_all_sell = document.getElementById(\"year_all_sell\").value year_level = 1 if(year_all_sell >= 200) year_level = 2 if(year_all_sell >= 400) year_level = 3 if(year_all_sell >= 800) year_level = 4 if(year_all_sell >= 1600) year_level = 5 if(year_all_sell >= 3200) year_level = 6 if(year_all_sell >= 6400) year_level = 7 if(year_all_sell >= 12800) year_level = 8 if(year_all_sell >= 25600) year_level = 9 if(year_all_sell >= 51200) year_level = 10 dl_level = Math.max(init_level, year_level) dl_level_rate = round((10-dl_level)*0.1) dl_final_rate = Math.max(dl_level_rate, cost_rate) dl_final_rate_price = round(market_price * dl_final_rate + final_rate_price) dl_rate = document.getElementById(\"dl_rate\").value dl_hope_income = round(market_price * dl_rate) hope_price = dl_final_rate_price + dl_hope_income final_price = Math.min(hope_price, market_price) dl_income = final_price - dl_final_rate_price document.getElementById(\"market_price\").value = market_price document.getElementById(\"income\").value = income document.getElementById(\"market_price_rate_price\").value = market_price_rate_price document.getElementById(\"cost_price_rate_price\").value = cost_price_rate_price document.getElementById(\"final_rate_price\").value = final_rate_price document.getElementById(\"year_level\").value = year_level document.getElementById(\"dl_level\").value = dl_level document.getElementById(\"dl_level_rate\").value = dl_level_rate document.getElementById(\"dl_final_rate\").value = dl_final_rate document.getElementById(\"dl_final_rate_price\").value = dl_final_rate_price document.getElementById(\"dl_hope_income\").value = dl_hope_income document.getElementById(\"hope_price\").value = hope_price document.getElementById(\"final_price\").value = final_price document.getElementById(\"dl_income\").value = dl_income } function round(num){ return Math.round(num * 100)/100 } \u5f00\u53d1\u5546 \u5e02\u573a\u6307\u5bfc\u4ef7 \u5f00\u653e\u5546\u81ea\u5b9a\u4e49 \u6210\u672c\u6298\u6263 \u5f00\u53d1\u5546\u81ea\u5b9a\u4e49 \u6536\u76ca/\u6210\u672c\u4ef7 \u5e02\u573a\u6307\u5bfc\u4ef7 * \u6210\u672c\u6298\u6263 ArkStore\u5e73\u53f0 \u5e02\u573a\u4ef7\u63d0\u70b9 \u56fa\u5b9a\u503c \u5e02\u573a\u4ef7\u63d0\u6210\u989d \u5e02\u573a\u6307\u5bfc\u4ef7 * \u5e02\u573a\u4ef7\u63d0\u70b9 \u6210\u672c\u4ef7\u63d0\u70b9 \u56fa\u5b9a\u503c \u6210\u672c\u4ef7\u63d0\u6210\u989d \u6210\u672c\u4ef7 * \u6210\u672c\u4ef7\u63d0\u70b9 \u6700\u7ec8\u63d0\u6210\u989d \u6210\u672c\u4ef7\u63d0\u6210\u989d \u4e0e \u5e02\u573a\u4ef7\u63d0\u6210\u989d \u4e2d\u7684\u6700\u5c0f\u503c \u4ee3\u7406\u5546 \u521d\u59cb\u7b49\u7ea7 \u521d\u59cb\u4e3a1\uff0c\u6216\u7531\u53bb\u5e74 \u5e74\u7b49\u7ea7 \u51b3\u5b9a \u5e74\u9500\u552e\u989d \u4eca\u5e74\u6240\u6709\u9500\u552e\u4ea7\u54c1\u7684\u5e02\u573a\u6307\u5bfc\u4ef7\u4e4b\u548c \u5e74\u7b49\u7ea7 \u7531\u5e74\u9500\u552e\u989d\u51b3\u5b9a \u4ee3\u7406\u5546\u7b49\u7ea7 \u521d\u59cb\u7b49\u7ea7 \u4e0e \u5e74\u7b49\u7ea7 \u4e2d\u7684\u6700\u5927\u503c \u7b49\u7ea7\u6298\u6263 \u53c2\u89c1\uff1a\u300a\u4ee3\u7406\u5546\u7b49\u7ea7\u4e0e\u7b49\u7ea7\u6298\u6263\u5bf9\u5e94\u8868\u300b \u6700\u7ec8\u6298\u6263 \u7b49\u7ea7\u6298\u6263 \u4e0e \u6210\u672c\u6298\u6263 \u4e2d\u7684\u6700\u5927\u503c \u62ff\u8d27\u4ef7\u683c \u5e02\u573a\u6307\u5bfc\u4ef7 * \u6700\u7ec8\u6298\u6263 + ArkStore\u5e73\u53f0\u6700\u7ec8\u63d0\u6210\u989d \u4ee3\u7406\u6298\u6263 \u4ee3\u7406\u5546\u81ea\u5b9a\u4e49 \u4ee3\u7406\u9884\u671f\u6536\u76ca \u5e02\u573a\u6307\u5bfc\u4ef7 * \u4ee3\u7406\u6298\u6263 \u4ea7\u54c1\u9884\u671f\u552e\u4ef7 \u62ff\u8d27\u4ef7\u683c + \u4ee3\u7406\u9884\u671f\u6536\u76ca \u4ea7\u54c1\u6700\u7ec8\u552e\u4ef7 \u4ea7\u54c1\u9884\u671f\u552e\u4ef7 \u4e0e \u5e02\u573a\u6307\u5bfc\u4ef7 \u53d6\u6700\u5c0f\u503c \u4ee3\u7406\u5b9e\u9645\u6536\u76ca \u4ea7\u54c1\u6700\u7ec8\u552e\u4ef7 - \u62ff\u8d27\u4ef7\u683c","title":"\u6536\u76ca\u8ba1\u7b97\u5668"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/","text":"\u6982\u8ff0 # ArkID\u6784\u5efa\u4e8e\uff1a Django 4 Django-ninja Vue3 Bootstrap 5","title":"\u6982\u8ff0"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/#_1","text":"ArkID\u6784\u5efa\u4e8e\uff1a Django 4 Django-ninja Vue3 Bootstrap 5","title":"\u6982\u8ff0"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","text":"\u524d\u8a00 # \u4e3a\u4e86\u65b9\u4fbf\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0cArkID\u4ec5\u652f\u6301\u7528\u5bb9\u5668\u5316\u7684\u65b9\u5f0f\u5f00\u53d1\u3002 \u4e00\u3001\u6240\u9700\u5de5\u5177 # vscode \u6700\u65b0\u7248 Docker Desktop \u6700\u65b0\u7248\u5e76\u5b89\u88c5\u63d2\u4ef6 remote-containers\u3001python docker-compose \u4e8c\u3001\u514b\u9686arkid\u4ee3\u7801 # ## \u53ef\u4ee5\u5148fork\u6b64\u4ed3\u5e93\uff0c\u7136\u540eclone\u4e0b\u6765fork\u540e\u7684\u4ed3\u5e93 git clone https://github.com/longguikeji/arkid.git \u4e09\u3001\u542f\u52a8 docker-compose # cd arkid/docker-compose docker-compose up -d ## \u9700\u8981\u7b49\u6240\u6709\u5bb9\u5668\u542f\u52a8\u5b8c\u6210\uff0c\u9996\u6b21\u542f\u52a8\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f \u56db\u3001vscode\u6253\u5f00\u5bb9\u5668\u4e2d\u7684\u73af\u5883\uff0c\u8fdb\u884c\u5f00\u53d1 # 1\u3001\u6253\u5f00vscode\uff0c\u70b9\u51fb\u201cAttach to Running Container\u201d, \u9009\u62e9arkid-be 2\u3001\u7b2c\u4e00\u6b21\u6253\u5f00\u4e4b\u540e\u9700\u8981\u70b9\u51fb \u6253\u5f00\u6587\u4ef6\u5939\uff0c\u9879\u76ee\u6587\u4ef6\u5728 /arkid \u5ffd\u7565\u5bb9\u5668\u73af\u5883\u4e2d\u7684git\u53d8\u66f4\uff0c\u56e0\u4e3a\u6682\u65f6\u5728\u5bb9\u5668\u4e2d\u65e0\u6cd5\u4f7f\u7528git\u547d\u4ee4\uff0c\u9700\u8981\u4f7f\u7528\u5bb9\u5668\u5916\u7684git\u5de5\u5177\u6765\u8fdb\u884c\u62c9\u53d6\u63a8\u9001\u7b49\u64cd\u4f5c 4\u3001\u6253\u5f00\u5bb9\u5668\u73af\u5883\u7684\u7ec8\u7aef\uff0c\u67e5\u770b\u8fdb\u7a0b # \u9ed8\u8ba4\u540e\u7aef\u542f\u52a8\u547d\u4ee4\u4e3a supervisord # \u67e5\u770b\u8fdb\u7a0b\u72b6\u6001\uff1a supervisorctl status # \u5173\u95ed\u6240\u6709\u8fdb\u7a0b\uff1a supervisorctl stop all # \u542f\u52a8\u6240\u6709\u8fdb\u7a0b\uff1a supervisorctl start all 5\u3001\u6253\u5f00\u6d4f\u89c8\u5668 http://localhost:8989 \u9996\u6b21\u6253\u5f00\u9700\u8981\u586b\u8bbf\u95ee\u5730\u5740\uff0c\u70b9\u786e\u5b9ad","title":"Index"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#_1","text":"\u4e3a\u4e86\u65b9\u4fbf\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0cArkID\u4ec5\u652f\u6301\u7528\u5bb9\u5668\u5316\u7684\u65b9\u5f0f\u5f00\u53d1\u3002","title":"\u524d\u8a00"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#_2","text":"vscode \u6700\u65b0\u7248 Docker Desktop \u6700\u65b0\u7248\u5e76\u5b89\u88c5\u63d2\u4ef6 remote-containers\u3001python docker-compose","title":"\u4e00\u3001\u6240\u9700\u5de5\u5177"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#arkid","text":"## \u53ef\u4ee5\u5148fork\u6b64\u4ed3\u5e93\uff0c\u7136\u540eclone\u4e0b\u6765fork\u540e\u7684\u4ed3\u5e93 git clone https://github.com/longguikeji/arkid.git","title":"\u4e8c\u3001\u514b\u9686arkid\u4ee3\u7801"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#docker-compose","text":"cd arkid/docker-compose docker-compose up -d ## \u9700\u8981\u7b49\u6240\u6709\u5bb9\u5668\u542f\u52a8\u5b8c\u6210\uff0c\u9996\u6b21\u542f\u52a8\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f","title":"\u4e09\u3001\u542f\u52a8 docker-compose"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#vscode","text":"1\u3001\u6253\u5f00vscode\uff0c\u70b9\u51fb\u201cAttach to Running Container\u201d, \u9009\u62e9arkid-be 2\u3001\u7b2c\u4e00\u6b21\u6253\u5f00\u4e4b\u540e\u9700\u8981\u70b9\u51fb \u6253\u5f00\u6587\u4ef6\u5939\uff0c\u9879\u76ee\u6587\u4ef6\u5728 /arkid \u5ffd\u7565\u5bb9\u5668\u73af\u5883\u4e2d\u7684git\u53d8\u66f4\uff0c\u56e0\u4e3a\u6682\u65f6\u5728\u5bb9\u5668\u4e2d\u65e0\u6cd5\u4f7f\u7528git\u547d\u4ee4\uff0c\u9700\u8981\u4f7f\u7528\u5bb9\u5668\u5916\u7684git\u5de5\u5177\u6765\u8fdb\u884c\u62c9\u53d6\u63a8\u9001\u7b49\u64cd\u4f5c 4\u3001\u6253\u5f00\u5bb9\u5668\u73af\u5883\u7684\u7ec8\u7aef\uff0c\u67e5\u770b\u8fdb\u7a0b # \u9ed8\u8ba4\u540e\u7aef\u542f\u52a8\u547d\u4ee4\u4e3a supervisord # \u67e5\u770b\u8fdb\u7a0b\u72b6\u6001\uff1a supervisorctl status # \u5173\u95ed\u6240\u6709\u8fdb\u7a0b\uff1a supervisorctl stop all # \u542f\u52a8\u6240\u6709\u8fdb\u7a0b\uff1a supervisorctl start all 5\u3001\u6253\u5f00\u6d4f\u89c8\u5668 http://localhost:8989 \u9996\u6b21\u6253\u5f00\u9700\u8981\u586b\u8bbf\u95ee\u5730\u5740\uff0c\u70b9\u786e\u5b9ad","title":"\u56db\u3001vscode\u6253\u5f00\u5bb9\u5668\u4e2d\u7684\u73af\u5883\uff0c\u8fdb\u884c\u5f00\u53d1"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/","text":"\u5e94\u7528\u63a5\u5165 # \u4e1a\u52a1\u7cfb\u7edf\u6478\u5e95 # \u5f00\u59cb\u63a5\u5165\u4e4b\u524d\uff0c\u8981\u5148\u641e\u6e05\u695a\u516c\u53f8\u4e1a\u52a1\u7cfb\u7edf\u7684\u5927\u81f4\u60c5\u51b5\uff1a \u90fd\u6709\u54ea\u4e9b\u7cfb\u7edf \u5404\u4e2a\u7cfb\u7edf\u90fd\u662f\u901a\u8fc7\u4ec0\u4e48\u534f\u8bae\u6765\u652f\u6301\u5355\u70b9\u767b\u5f55\u6216\u8005\u7edf\u4e00\u8d26\u5bc6\u7684 \u7528\u6237\u7684\u6570\u636e\u6e90\u6709\u51e0\u4e2a\uff0c\u54ea\u4e9b\u4fdd\u7559\u54ea\u4e9b\u629b\u5f03 \u6570\u636e\u6e90\u4e4b\u95f4\u7684\u540c\u6b65\u5173\u7cfb\u5982\u4f55 \u7b49\u7b49 \u7cfb\u7edf\u67b6\u6784 # \u5728\u5904\u7406\u5b8c\u8fd9\u4e9b\u95ee\u9898\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7740\u624b\u8bbe\u8ba1\u7cfb\u7edf\u67b6\u6784\uff0c\u4e0b\u56fe\u4e3a\u4e00\u4e2a\u5178\u578b\u7684\u7cfb\u7edf\u67b6\u6784\u56fe\u793a\u4f8b\uff1a \u7528\u6237\u6570\u636e\u5f55\u5165EHR\u7cfb\u7edf\u540e\uff0c\u901a\u8fc7SCIM\u6570\u636e\u540c\u6b65\u81f3AD\u57df\u4e2d\uff0c\u5c06AD\u57df\u4f5c\u4e3a\u6807\u51c6\u6570\u636e\u6e90\uff0c\u5fae\u8f6f\u7c7b\u7cfb\u7edf\u6216\u67d0\u4e9b\u652f\u6301AD\u7684\u7cfb\u7edf\u5219\u53ef\u4ee5\u76f4\u63a5\u4e0eAD\u57df\u5bf9\u63a5\uff08\u6ce8\u610f\uff0cAD\u57df\u662f\u7edf\u4e00\u8d26\u5bc6\uff0c\u5e76\u975e\u5355\u70b9\u767b\u5f55\uff09\uff0c\u5176\u5b83\u7cfb\u7edf\u5982OA\u7b49\u53ef\u4ee5\u901a\u8fc7OIDC\u6216\u8005SAML2\u7b49\u5355\u70b9\u767b\u5f55\u534f\u8bae\u4e0eArkID\u5bf9\u63a5\u5373\u53ef\u3002 \u4e5f\u53ef\u4ee5\u6709\u53e6\u4e00\u79cd\u67b6\u6784\u8bbe\u8ba1\uff0c\u5982\u56fe\uff1a \u8fd9\u4e2a\u67b6\u6784\u4e2d\uff0cArkID\u53ef\u4ee5\u4f5c\u4e3aLDAP Server\u5bf9\u5916\u63d0\u4f9b\u7edf\u4e00\u8d26\u5bc6\u670d\u52a1\uff0c\u5df2\u7ecf\u652f\u6301AD\u57df\u7684\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u63a5\u5165\u3002\u8bf8\u5982\u98de\u4e66\uff0cOffice365\u7b49\u4e09\u65b9\u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7SAML2\u534f\u8bae\u63a5\u5165\u5b8c\u6210\u5355\u70b9\u767b\u5f55\u3002 \u5e94\u7528\u63a5\u5165 # \u5355\u70b9\u767b\u5f55 # ArkID \u901a\u8fc7\u5bf9\u4e0d\u540c\u534f\u8bae\u7684\u652f\u6301\uff0c\u4ece\u800c\u652f\u6301\u5404\u79cd\u5355\u70b9\u767b\u5f55\u534f\u8bae \u7edf\u4e00\u6743\u9650 # \u9664\u4e86\u80fd\u7edf\u4e00\u63a7\u5236\u7531\u5355\u70b9\u767b\u5f55\u800c\u5bf9\u5e94\u7684\u5165\u53e3\u6743\u9650\uff0cArkID\u4e5f\u63d0\u4f9b\u4e86\u7edf\u4e00\u63a7\u5236\u5e94\u7528\u5185\u6743\u9650\u7684\u6280\u672f\u65b9\u6848\u3002 \u7edf\u4e00\u5ba1\u6279 # ArkID\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7528\u5185\u90e8\u6240\u6709\u9700\u8981\u88ab\u5ba1\u6279\u7684\u8bf7\u6c42\u7edf\u4e00\u5904\u7406\u7684\u6280\u672f\u65b9\u6848\uff0c\u5e76\u652f\u6301\u5c06\u8fd9\u4e9b\u5ba1\u6279\u8bf7\u6c42\u63a8\u9001\u7ed9\u4e0d\u540c\u7684\u5ba1\u6279\u7cfb\u7edf\u4e2d\u3002","title":"\u5e94\u7528\u63a5\u5165"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_1","text":"","title":"\u5e94\u7528\u63a5\u5165"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_2","text":"\u5f00\u59cb\u63a5\u5165\u4e4b\u524d\uff0c\u8981\u5148\u641e\u6e05\u695a\u516c\u53f8\u4e1a\u52a1\u7cfb\u7edf\u7684\u5927\u81f4\u60c5\u51b5\uff1a \u90fd\u6709\u54ea\u4e9b\u7cfb\u7edf \u5404\u4e2a\u7cfb\u7edf\u90fd\u662f\u901a\u8fc7\u4ec0\u4e48\u534f\u8bae\u6765\u652f\u6301\u5355\u70b9\u767b\u5f55\u6216\u8005\u7edf\u4e00\u8d26\u5bc6\u7684 \u7528\u6237\u7684\u6570\u636e\u6e90\u6709\u51e0\u4e2a\uff0c\u54ea\u4e9b\u4fdd\u7559\u54ea\u4e9b\u629b\u5f03 \u6570\u636e\u6e90\u4e4b\u95f4\u7684\u540c\u6b65\u5173\u7cfb\u5982\u4f55 \u7b49\u7b49","title":"\u4e1a\u52a1\u7cfb\u7edf\u6478\u5e95"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_3","text":"\u5728\u5904\u7406\u5b8c\u8fd9\u4e9b\u95ee\u9898\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7740\u624b\u8bbe\u8ba1\u7cfb\u7edf\u67b6\u6784\uff0c\u4e0b\u56fe\u4e3a\u4e00\u4e2a\u5178\u578b\u7684\u7cfb\u7edf\u67b6\u6784\u56fe\u793a\u4f8b\uff1a \u7528\u6237\u6570\u636e\u5f55\u5165EHR\u7cfb\u7edf\u540e\uff0c\u901a\u8fc7SCIM\u6570\u636e\u540c\u6b65\u81f3AD\u57df\u4e2d\uff0c\u5c06AD\u57df\u4f5c\u4e3a\u6807\u51c6\u6570\u636e\u6e90\uff0c\u5fae\u8f6f\u7c7b\u7cfb\u7edf\u6216\u67d0\u4e9b\u652f\u6301AD\u7684\u7cfb\u7edf\u5219\u53ef\u4ee5\u76f4\u63a5\u4e0eAD\u57df\u5bf9\u63a5\uff08\u6ce8\u610f\uff0cAD\u57df\u662f\u7edf\u4e00\u8d26\u5bc6\uff0c\u5e76\u975e\u5355\u70b9\u767b\u5f55\uff09\uff0c\u5176\u5b83\u7cfb\u7edf\u5982OA\u7b49\u53ef\u4ee5\u901a\u8fc7OIDC\u6216\u8005SAML2\u7b49\u5355\u70b9\u767b\u5f55\u534f\u8bae\u4e0eArkID\u5bf9\u63a5\u5373\u53ef\u3002 \u4e5f\u53ef\u4ee5\u6709\u53e6\u4e00\u79cd\u67b6\u6784\u8bbe\u8ba1\uff0c\u5982\u56fe\uff1a \u8fd9\u4e2a\u67b6\u6784\u4e2d\uff0cArkID\u53ef\u4ee5\u4f5c\u4e3aLDAP Server\u5bf9\u5916\u63d0\u4f9b\u7edf\u4e00\u8d26\u5bc6\u670d\u52a1\uff0c\u5df2\u7ecf\u652f\u6301AD\u57df\u7684\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u63a5\u5165\u3002\u8bf8\u5982\u98de\u4e66\uff0cOffice365\u7b49\u4e09\u65b9\u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7SAML2\u534f\u8bae\u63a5\u5165\u5b8c\u6210\u5355\u70b9\u767b\u5f55\u3002","title":"\u7cfb\u7edf\u67b6\u6784"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_4","text":"","title":"\u5e94\u7528\u63a5\u5165"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_5","text":"ArkID \u901a\u8fc7\u5bf9\u4e0d\u540c\u534f\u8bae\u7684\u652f\u6301\uff0c\u4ece\u800c\u652f\u6301\u5404\u79cd\u5355\u70b9\u767b\u5f55\u534f\u8bae","title":"\u5355\u70b9\u767b\u5f55"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_6","text":"\u9664\u4e86\u80fd\u7edf\u4e00\u63a7\u5236\u7531\u5355\u70b9\u767b\u5f55\u800c\u5bf9\u5e94\u7684\u5165\u53e3\u6743\u9650\uff0cArkID\u4e5f\u63d0\u4f9b\u4e86\u7edf\u4e00\u63a7\u5236\u5e94\u7528\u5185\u6743\u9650\u7684\u6280\u672f\u65b9\u6848\u3002","title":"\u7edf\u4e00\u6743\u9650"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/#_7","text":"ArkID\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7528\u5185\u90e8\u6240\u6709\u9700\u8981\u88ab\u5ba1\u6279\u7684\u8bf7\u6c42\u7edf\u4e00\u5904\u7406\u7684\u6280\u672f\u65b9\u6848\uff0c\u5e76\u652f\u6301\u5c06\u8fd9\u4e9b\u5ba1\u6279\u8bf7\u6c42\u63a8\u9001\u7ed9\u4e0d\u540c\u7684\u5ba1\u6279\u7cfb\u7edf\u4e2d\u3002","title":"\u7edf\u4e00\u5ba1\u6279"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/","text":"\u5355\u70b9\u767b\u5f55 # \u867d\u7136ArkID\u80fd\u901a\u8fc7\u63d2\u4ef6\u80fd\u652f\u6301\u5404\u79cd\u5e94\u7528\u63a5\u5165\u534f\u8bae\uff0c\u4f46\u6211\u4eec\u63a8\u8350\u4f18\u5148\u4f7f\u7528OIDC\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u63a5\u5165\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u534f\u8bae\uff0c\u8bf7\u53c2\u8003\u5404\u81ea\u63d2\u4ef6\u7684\u6587\u6863\uff1a OAuth2 OIDC SAML2 CAS \u7b49\u7b49\uff0c\u5176\u5b83\u534f\u8bae\u53ef\u4ee5\u5728\u63d2\u4ef6\u5546\u5e97\u4e2d\u5bfb\u627e\u5bf9\u5e94\u7684\u63d2\u4ef6\u652f\u6301 \u5982\u679c\u9047\u5230\u8fd8\u6ca1\u6709\u652f\u6301\u7684\u534f\u8bae\uff0c\u6b22\u8fce\u5728gitee\u6216\u8005github\u4e2d\u7559\u8a00\u7ed9\u6211\u4eec ArkStore\u7684\u5e94\u7528\u63a5\u5165 # \u5982\u679c\u4f60\u662fSaaS\u5e94\u7528\u7684\u5f00\u53d1\u5546\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5728\u4e2d\u5fc3ArkID\u4e2d\u5b8c\u6210\u5e94\u7528\u63a5\u5165\u5e76\u63d0\u4ea4\u5230ArkStore\u4e2d\u3002 ArkStore\u7684\u5e94\u7528\u63a5\u5165\uff0c\u6211\u4eec\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\uff1a OIDC\u534f\u8bae \u8d26\u5bc6\u4ee3\u586b \u63a8\u5e7f\u94fe\u63a5 \u81ea\u5b9a\u4e49 OIDC\u534f\u8bae # 1.\u5728 \u4e2d\u5fc3ArkID \uff0c\u70b9\u51fb\u5e94\u7528\u7ba1\u7406-\u5e94\u7528\u5217\u8868-\u521b\u5efa\uff0c\u521b\u5efa\u5e94\u7528 2.\u70b9\u51fb\u4e2d\u5fc3ArkID\u5e94\u7528\u7684\u534f\u8bae\u914d\u7f6e\uff0cApp Type\u9009\u62e9 OIDC-Platform\uff0c\u914d\u7f6e\u5185\u5bb9\u8f93\u5165OIDC\u534f\u8bae\u5bf9\u5e94\u7684\u5b57\u6bb5 3.\u5728 Arkstore \uff0c\u70b9\u51fb\u5f00\u53d1\u5546-\u5e94\u7528\u7ba1\u7406-\u6dfb\u52a0\u5e94\u7528\uff0c\u6dfb\u52a0\u5e94\u7528 \u8865\u5145\u8bf4\u660e \u63a5\u5165\u65b9\u5f0f\u9009\u62e9OIDC \u5e94\u7528ID\u5b57\u6bb5\u586b\u5165\u4e2d\u5fc3ArkID\u521b\u5efa\u7684\u5e94\u7528ID\uff0c\u53ef\u5728\u4e2d\u5fc3ArkID\u4e2d\u7f16\u8f91\u5e94\u7528\u6765\u67e5\u770b 4.\u5728Arkstore\u4e2d\u6dfb\u52a0\u5e94\u7528\u540e\uff0c\u70b9\u51fb\u63d0\u4ea4\u5ba1\u6838\uff0c\u9f99\u5f52\u5c06\u4f1a\u5ba1\u6838\u60a8\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u540e\u4f1a\u4e0a\u67b6\u5230Arkstore\u5e94\u7528\u5e02\u96c6\u4e2d \u8d26\u5bc6\u4ee3\u586b # \u6682\u672a\u4eceArkID v2\u8fc1\u79fb\u5230v2.5 \u63a8\u5e7f\u94fe\u63a5 # 1.\u5728 \u4e2d\u5fc3ArkID \uff0c\u70b9\u51fb\u5e94\u7528\u7ba1\u7406-\u5e94\u7528\u5217\u8868-\u521b\u5efa\uff0c\u521b\u5efa\u5e94\u7528 2.\u5728 Arkstore \uff0c\u70b9\u51fb\u5f00\u53d1\u5546-\u5e94\u7528\u7ba1\u7406-\u6dfb\u52a0\u5e94\u7528\uff0c\u6dfb\u52a0\u5e94\u7528 \u8865\u5145\u8bf4\u660e \u63a5\u5165\u65b9\u5f0f\u9009\u62e9\u63a8\u5e7f\u94fe\u63a5 \u5e94\u7528ID\u5b57\u6bb5\u586b\u5165\u4e2d\u5fc3ArkID\u521b\u5efa\u7684\u5e94\u7528ID\uff0c\u53ef\u5728\u4e2d\u5fc3ArkID\u4e2d\u7f16\u8f91\u5e94\u7528\u6765\u67e5\u770b 3.\u5728Arkstore\u4e2d\u6dfb\u52a0\u5e94\u7528\u540e\uff0c\u70b9\u51fb\u63d0\u4ea4\u5ba1\u6838\uff0c\u9f99\u5f52\u5c06\u4f1a\u5ba1\u6838\u60a8\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u540e\u4f1a\u4e0a\u67b6\u5230Arkstore\u5e94\u7528\u5e02\u96c6\u4e2d \u81ea\u5b9a\u4e49 # \u5982\u679c\u4f60\u7684\u5e94\u7528\u4e0d\u60f3\u7528\u4ee5\u4e0b\u4efb\u4f55\u4e00\u79cd\u65b9\u5f0f\u63a5\u5165\uff0c\u60f3\u7528\u81ea\u5b9a\u4e49\u7684\u534f\u8bae\u63a5\u5165\u7684\u8bdd\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\u4eec\uff1a support@longguikeji.com","title":"\u5355\u70b9\u767b\u5f55"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/#_1","text":"\u867d\u7136ArkID\u80fd\u901a\u8fc7\u63d2\u4ef6\u80fd\u652f\u6301\u5404\u79cd\u5e94\u7528\u63a5\u5165\u534f\u8bae\uff0c\u4f46\u6211\u4eec\u63a8\u8350\u4f18\u5148\u4f7f\u7528OIDC\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u63a5\u5165\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u534f\u8bae\uff0c\u8bf7\u53c2\u8003\u5404\u81ea\u63d2\u4ef6\u7684\u6587\u6863\uff1a OAuth2 OIDC SAML2 CAS \u7b49\u7b49\uff0c\u5176\u5b83\u534f\u8bae\u53ef\u4ee5\u5728\u63d2\u4ef6\u5546\u5e97\u4e2d\u5bfb\u627e\u5bf9\u5e94\u7684\u63d2\u4ef6\u652f\u6301 \u5982\u679c\u9047\u5230\u8fd8\u6ca1\u6709\u652f\u6301\u7684\u534f\u8bae\uff0c\u6b22\u8fce\u5728gitee\u6216\u8005github\u4e2d\u7559\u8a00\u7ed9\u6211\u4eec","title":"\u5355\u70b9\u767b\u5f55"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/#arkstore","text":"\u5982\u679c\u4f60\u662fSaaS\u5e94\u7528\u7684\u5f00\u53d1\u5546\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5728\u4e2d\u5fc3ArkID\u4e2d\u5b8c\u6210\u5e94\u7528\u63a5\u5165\u5e76\u63d0\u4ea4\u5230ArkStore\u4e2d\u3002 ArkStore\u7684\u5e94\u7528\u63a5\u5165\uff0c\u6211\u4eec\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\uff1a OIDC\u534f\u8bae \u8d26\u5bc6\u4ee3\u586b \u63a8\u5e7f\u94fe\u63a5 \u81ea\u5b9a\u4e49","title":"ArkStore\u7684\u5e94\u7528\u63a5\u5165"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/#oidc","text":"1.\u5728 \u4e2d\u5fc3ArkID \uff0c\u70b9\u51fb\u5e94\u7528\u7ba1\u7406-\u5e94\u7528\u5217\u8868-\u521b\u5efa\uff0c\u521b\u5efa\u5e94\u7528 2.\u70b9\u51fb\u4e2d\u5fc3ArkID\u5e94\u7528\u7684\u534f\u8bae\u914d\u7f6e\uff0cApp Type\u9009\u62e9 OIDC-Platform\uff0c\u914d\u7f6e\u5185\u5bb9\u8f93\u5165OIDC\u534f\u8bae\u5bf9\u5e94\u7684\u5b57\u6bb5 3.\u5728 Arkstore \uff0c\u70b9\u51fb\u5f00\u53d1\u5546-\u5e94\u7528\u7ba1\u7406-\u6dfb\u52a0\u5e94\u7528\uff0c\u6dfb\u52a0\u5e94\u7528 \u8865\u5145\u8bf4\u660e \u63a5\u5165\u65b9\u5f0f\u9009\u62e9OIDC \u5e94\u7528ID\u5b57\u6bb5\u586b\u5165\u4e2d\u5fc3ArkID\u521b\u5efa\u7684\u5e94\u7528ID\uff0c\u53ef\u5728\u4e2d\u5fc3ArkID\u4e2d\u7f16\u8f91\u5e94\u7528\u6765\u67e5\u770b 4.\u5728Arkstore\u4e2d\u6dfb\u52a0\u5e94\u7528\u540e\uff0c\u70b9\u51fb\u63d0\u4ea4\u5ba1\u6838\uff0c\u9f99\u5f52\u5c06\u4f1a\u5ba1\u6838\u60a8\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u540e\u4f1a\u4e0a\u67b6\u5230Arkstore\u5e94\u7528\u5e02\u96c6\u4e2d","title":"OIDC\u534f\u8bae"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/#_2","text":"\u6682\u672a\u4eceArkID v2\u8fc1\u79fb\u5230v2.5","title":"\u8d26\u5bc6\u4ee3\u586b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/#_3","text":"1.\u5728 \u4e2d\u5fc3ArkID \uff0c\u70b9\u51fb\u5e94\u7528\u7ba1\u7406-\u5e94\u7528\u5217\u8868-\u521b\u5efa\uff0c\u521b\u5efa\u5e94\u7528 2.\u5728 Arkstore \uff0c\u70b9\u51fb\u5f00\u53d1\u5546-\u5e94\u7528\u7ba1\u7406-\u6dfb\u52a0\u5e94\u7528\uff0c\u6dfb\u52a0\u5e94\u7528 \u8865\u5145\u8bf4\u660e \u63a5\u5165\u65b9\u5f0f\u9009\u62e9\u63a8\u5e7f\u94fe\u63a5 \u5e94\u7528ID\u5b57\u6bb5\u586b\u5165\u4e2d\u5fc3ArkID\u521b\u5efa\u7684\u5e94\u7528ID\uff0c\u53ef\u5728\u4e2d\u5fc3ArkID\u4e2d\u7f16\u8f91\u5e94\u7528\u6765\u67e5\u770b 3.\u5728Arkstore\u4e2d\u6dfb\u52a0\u5e94\u7528\u540e\uff0c\u70b9\u51fb\u63d0\u4ea4\u5ba1\u6838\uff0c\u9f99\u5f52\u5c06\u4f1a\u5ba1\u6838\u60a8\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u540e\u4f1a\u4e0a\u67b6\u5230Arkstore\u5e94\u7528\u5e02\u96c6\u4e2d","title":"\u63a8\u5e7f\u94fe\u63a5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/#_4","text":"\u5982\u679c\u4f60\u7684\u5e94\u7528\u4e0d\u60f3\u7528\u4ee5\u4e0b\u4efb\u4f55\u4e00\u79cd\u65b9\u5f0f\u63a5\u5165\uff0c\u60f3\u7528\u81ea\u5b9a\u4e49\u7684\u534f\u8bae\u63a5\u5165\u7684\u8bdd\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\u4eec\uff1a support@longguikeji.com","title":"\u81ea\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E7%BB%9F%E4%B8%80%E6%9D%83%E9%99%90/","text":"\u7edf\u4e00\u6743\u9650 # arkid\u652f\u6301\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c\u901a\u8fc7\u8f93\u51fa\u81ea\u8eab\u7684\u63a5\u53e3\u6587\u6863\uff0carkid\u8fd9\u8fb9\u901a\u8fc7\u8bfb\u53d6\u5e94\u7528\u672c\u8eab\u63a5\u53e3\u6587\u6863\uff0c\u53ef\u4ee5\u5728arkid\u4e2d\u65b9\u4fbf\u7075\u6d3b\u7684\u7ba1\u7406\u6743\u9650\u3002 \u63a5\u5165\u6b65\u9aa4 # 1.\u9700\u8981\u51c6\u5907\u4e00\u4e2a\u53ef\u4ee5\u8bfb\u53d6\u7684openapi.json\u8bbf\u95ee\u5730\u5740\uff0cjson\u4e2d\u81f3\u5c11\u8981\u6709permissions\u8282\u70b9\uff0cpermissions\u4e2d\u8981\u542b\u6709\u57fa\u7840\u7684\u89d2\u8272\u4fe1\u606f\uff0c\u4ee5\u53ca\u63a5\u53e3\u4fe1\u606f\u3002\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u542b\u6709permissions\u8282\u70b9\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u8003: { \"permissions\" :[ { \"name\" : \"customer\" , \"sort_id\" : 0 , \"type\" : \"group\" , \"container\" :[ 3 , 6 ] }, { \"name\" : \"tenant-admin\" , \"sort_id\" : 1 , \"type\" : \"group\" , \"container\" :[ 4 ] }, { \"name\" : \"platform-admin\" , \"sort_id\" : 2 , \"type\" : \"group\" , \"container\" :[ 5 ] }, { \"name\" : \"app\u5217\u8868\" , \"sort_id\" : 3 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_list_apps\" }, { \"name\" : \"\u521b\u5efa\u5e94\u7528\" , \"sort_id\" : 4 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_create_app\" }, { \"name\" : \"\u516c\u5f00app\u5217\u8868\" , \"sort_id\" : 5 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_list_open_apps\" }, { \"name\" : \"\u83b7\u53d6app\" , \"sort_id\" : 6 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_get_app\" } ] } \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e name \u540d\u79f0 sort_id \u6392\u5e8fid(\u5f00\u53d1\u8005\u81ea\u884c\u751f\u6210) type \u7c7b\u578b(api \u6216 group) container \u5305\u542b\u63a5\u53e3\u7684sort_id(\u53ea\u6709\u5728group\u7c7b\u578b\u4e2d\u624d\u6709\u503c) operation_id \u64cd\u4f5cid(\u53ea\u6709api\u7c7b\u578b\u624d\u6709\u8fd9\u4e2a\u5b57\u6bb5) 2.\u9700\u8981\u5728\u5e94\u7528\u7ba1\u7406\u83dc\u5355\u4e0b\u7684\u5e94\u7528\u5217\u8868\uff0c\u65b0\u5efa\u4e00\u4e2a\u5e94\u7528 3.\u9700\u8981\u5bf9\u5e94\u7528\u8fdb\u884c\u534f\u8bae\u914d\u7f6e\uff0c\u8fd9\u91cc\u4ee5OIDC\u7c7b\u578b\u7684\u5e94\u7528\u4e3a\u4f8b \u8865\u5145\u8bf4\u660e \u76ee\u524d\u53ea\u652f\u6301OIDC\u7c7b\u578b\uff0c\u6216\u8005Oauth2\u7c7b\u578b\u7684\u5e94\u7528\u3002\u5176\u5b83\u7c7b\u578b\u7684\u5e94\u7528\u65e0\u6cd5\u4f7f\u7528\u83b7\u53d6\u6743\u9650\u5b57\u7b26\u4e32\u7684\u529f\u80fd 4.\u9700\u8981\u5bf9\u5e94\u7528\u8fdb\u884c\u5f00\u653eAPI\u914d\u7f6e \u8865\u5145\u8bf4\u660e \u5982\u679c\u63a5\u53e3\u6587\u6863\u4e2d\u7684permissions\u5185\u5bb9\u6709\u53d8\u66f4\uff0c\u9700\u8981\u66f4\u6539\u5e94\u7528\u7248\u672c\uff0c\u7b2c\u4e00\u6b21\u914d\u7f6e\u65f6\u9664\u5916 \u5982\u4f55\u4f7f\u7528 # 1.\u53ef\u4ee5\u5728\u6743\u9650\u7ba1\u7406\u83dc\u5355\u4e0b\uff0c\u6388\u6743\u7ba1\u7406\u83dc\u5355\u4e0b\u7684\u6240\u6709\u5e94\u7528\u9875\u9762\u4e2d\uff0c\u628a\u5df2\u7ecf\u8bfb\u53d6\u5230\u7684\u6743\u9650\uff0c\u6388\u6743\u7ed9\u5176\u5b83\u79df\u6237\u7684\u4eba\u4f7f\u7528\u3002 \u8865\u5145\u8bf4\u660e \u6743\u9650\u7684\u5206\u914d\u662f\u9010\u7ea7\u5411\u4e0b\u7684\uff0c\u4e00\u822c\u6388\u6743\u5f00\u542f\u65f6\uff0c\u9664\u8981\u5f00\u542f\u7684\u6743\u9650\u5916\uff0c\u4f1a\u6253\u5f00\u5e94\u7528\u5165\u53e3\u6743\u9650\uff0c\u9632\u6b62\u5176\u5b83\u79df\u6237\u7684\u7528\u6237\u65e0\u6cd5\u8fdb\u884c\u767b\u5f55 \u6388\u6743\u5f00\u542f:\u8be5\u6743\u9650\u88ab\u6388\u6743\u7ed9\u5176\u5b83\u79df\u6237\u4f7f\u7528\uff0c\u5176\u5b83\u79df\u6237\u7684\u7ba1\u7406\u5458\u662f\u6700\u5148\u62e5\u6709\u8be5\u6743\u9650\u7684\uff0c\u5176\u5b83\u79df\u6237\u7ba1\u7406\u5458\u53ef\u4ee5\u5bf9\u81ea\u5df1\u62e5\u6709\u7684\u6743\u9650\u8fdb\u884c\u4e8c\u6b21\u5206\u914d\u3002 \u6388\u6743\u5173\u95ed:\u8be5\u6743\u9650\u5982\u679c\u4ece\u5f00\u542f\u72b6\u6001\u5207\u6362\u5230\u5173\u95ed\u72b6\u6001\uff0c\u5219\u5df2\u7ecf\u5206\u914d\u7ed9\u5176\u5b83\u79df\u6237\u7684\u6743\u9650\uff0c\u5c06\u88ab\u6536\u56de\uff0c\u5305\u62ec\u5176\u5b83\u79df\u6237\u4e8c\u6b21\u5206\u914d\u7684\u3002 2.\u9664\u4e86\u6388\u6743\u7ed9\u5176\u5b83\u79df\u6237\u4f7f\u7528\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u672c\u79df\u6237\u5185\uff0c\u8fdb\u884c\u7528\u6237\u6743\u9650\u8d4b\u4e88 \u5982\u4f55\u83b7\u53d6\u7528\u6237\u7684\u6743\u9650\u5b57\u7b26\u4e32 # 1.\u8bbf\u95ee\u5e94\u7528\u5217\u8868\uff0c\u7f16\u8f91\u5e94\u7528\uff0c\u83b7\u53d6\u53c2\u6570\u4fe1\u606f \u82f1\u6587\u53c2\u6570\u540d\u79f0 \u5bf9\u5e94\u9875\u9762\u5b57\u6bb5 redirect url \u56de\u8c03\u5730\u5740 client_id \u5ba2\u6237\u7aefid client_token \u5ba2\u6237\u7aef\u79d8\u94a5 authorize url \u6388\u6743url get token url \u83b7\u53d6access_token\u5730\u5740 userinfo url \u7528\u6237\u4fe1\u606f\u5730\u5740 logout url \u9000\u51fa\u767b\u5f55\u5730\u5740 2.\u83b7\u53d6Authorization Code \u8bf7\u6c42\u5730\u5740: authorize url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b client_id client_id redirect_uri redirect url response_type \u586b\u5165code code scope \u586b\u5165 (openid userinfo) \u8bf7\u6c42\u793a\u4f8b: http://authorize url/?client_id=xxxxx&redirect_uri=xxxxx&response_type=code&scope=userinfo \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 \u8fd4\u56de\u793a\u4f8b: http://redirect_uri?code=XEV8esOvaVk9wyAuiNXpb3Nuwn5av9&token=cd34840ffc804b894ede31bc21b176ef559e137f 3.\u83b7\u53d6Access Token \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization token\u683c\u5f0f\u4e3a client_id:client_secret \u4f7f\u7528base64\u7f16\u7801 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 grant_type \u586b\u5165authorization_code \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c id_token id_token \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"nRmo1Ko5UbStrtBNtySnUi8Ezw9YBm\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"openid userinfo\" , \"refresh_token\" : \"na3bP6WX3JzZynqLSJS8wI4m6zWiC9\" , \"id_token\" : \"eyJhbGciOiAiUlMyNTYiLCAidXNlIjogInNpZyIsICJraWQiOiAiRjlYSlg3N0VkTjVnNnA5Q3ZnS1NnTW9GRTh4cjNJeWp6aUNLTnR3enhWTSIsICJlIjogIkFRQUIiLCAia3R5IjogIlJTQSIsICJuIjogImlFNFkyMDhLV0x1QzhLcWZLQU96NmctaUlfeHNLU3hTYmoyMWxXbmdnMmwtay01b2ZKaVRDQklKZjFTR1dyQ3hfRXNGT1ptZUxEM29xcE96WUNhdFZ3NlBlNnVacFJhRFZSekFoOV9Da00waUFWclc2bHB4QkowSFlxZ1d3cHBpSG15M2VEbkg2V3lGVkNQUFhKd3F1MU5ETlludENqcUtWa2gxamotdjktVSJ9.eyJhdWQiOiAiQXJkeHJwajVVb0JmUUNiN1F4TDE1RG9YR2ozcHpOeHFkeFl2U1YxeCIsICJpYXQiOiAxNjYwMTE1MDU4LCAiYXRfaGFzaCI6ICJqa19ET1M0MFNnT3Fubk91QzhjeHdnIiwgInN1YiI6ICJmYWY1YWFlNi0zY2RmLTQ1OTUtOGI0YS0zYTA2YjMxMTE3YzgiLCAic3ViX2lkIjogImZhZjVhYWU2LTNjZGYtNDU5NS04YjRhLTNhMDZiMzExMTdjOCIsICJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiYWRtaW4iLCAiZ3JvdXBzIjogWyJ0ZW5hbnRfYWRtaW4iXSwgInRlbmFudF9pZCI6ICI0ZGExMTRjZS1lMTE1LTQ0YTAtODIzYi1kMzcyMTE0NDI1ZDAiLCAidGVuYW50X3NsdWciOiAiIiwgImlzcyI6ICJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL3RlbmFudC80ZGExMTRjZS1lMTE1LTQ0YTAtODIzYi1kMzcyMTE0NDI1ZDAiLCAiZXhwIjogMTY2MDE1MTA1OCwgImF1dGhfdGltZSI6IDE2NjAxMTUwNTh9.Xcz9d79UdPAVtiObwkauIPVodQtDK8ZX9zYBhTgmjs5_lQhlgzCeUZPeUJCsIb_3AR9BChDw_EDYzwFhg1h4vYofYlRk4V9wHZypbRoDFopm343h78JbzGeexFiRhE_e4zIPmVsQj925TpMuMOP4zLKX3U6pTPJETflrvblXcUs\" } 4.\u83b7\u53d6\u6743\u9650\u5b57\u7b26\u4e32 \u8bf7\u6c42\u5730\u5740: /api/v1/app/permission_result \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b ID-TOKEN \u83b7\u53d6access_token\u63a5\u53e3\u8fd4\u56de\u7684id_token xxxxx \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b result \u7528\u6237\u6743\u9650\u5b57\u7b26\u4e32(1\u662f\u6709\u6743\u9650\uff0c0\u662f\u6ca1\u6743\u9650\uff0c\u6bcf\u4f4d\u4e0e\u63a5\u53e3\u6587\u6863\u4e2d\u7684sort_id\u5bf9\u5e94) \u8fd4\u56de\u793a\u4f8b: { \"result\" : \"11111\" }","title":"\u7edf\u4e00\u6743\u9650"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E7%BB%9F%E4%B8%80%E6%9D%83%E9%99%90/#_1","text":"arkid\u652f\u6301\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c\u901a\u8fc7\u8f93\u51fa\u81ea\u8eab\u7684\u63a5\u53e3\u6587\u6863\uff0carkid\u8fd9\u8fb9\u901a\u8fc7\u8bfb\u53d6\u5e94\u7528\u672c\u8eab\u63a5\u53e3\u6587\u6863\uff0c\u53ef\u4ee5\u5728arkid\u4e2d\u65b9\u4fbf\u7075\u6d3b\u7684\u7ba1\u7406\u6743\u9650\u3002","title":"\u7edf\u4e00\u6743\u9650"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E7%BB%9F%E4%B8%80%E6%9D%83%E9%99%90/#_2","text":"1.\u9700\u8981\u51c6\u5907\u4e00\u4e2a\u53ef\u4ee5\u8bfb\u53d6\u7684openapi.json\u8bbf\u95ee\u5730\u5740\uff0cjson\u4e2d\u81f3\u5c11\u8981\u6709permissions\u8282\u70b9\uff0cpermissions\u4e2d\u8981\u542b\u6709\u57fa\u7840\u7684\u89d2\u8272\u4fe1\u606f\uff0c\u4ee5\u53ca\u63a5\u53e3\u4fe1\u606f\u3002\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u542b\u6709permissions\u8282\u70b9\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u8003: { \"permissions\" :[ { \"name\" : \"customer\" , \"sort_id\" : 0 , \"type\" : \"group\" , \"container\" :[ 3 , 6 ] }, { \"name\" : \"tenant-admin\" , \"sort_id\" : 1 , \"type\" : \"group\" , \"container\" :[ 4 ] }, { \"name\" : \"platform-admin\" , \"sort_id\" : 2 , \"type\" : \"group\" , \"container\" :[ 5 ] }, { \"name\" : \"app\u5217\u8868\" , \"sort_id\" : 3 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_list_apps\" }, { \"name\" : \"\u521b\u5efa\u5e94\u7528\" , \"sort_id\" : 4 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_create_app\" }, { \"name\" : \"\u516c\u5f00app\u5217\u8868\" , \"sort_id\" : 5 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_list_open_apps\" }, { \"name\" : \"\u83b7\u53d6app\" , \"sort_id\" : 6 , \"type\" : \"api\" , \"container\" :[ ], \"operation_id\" : \"api_v1_views_app_get_app\" } ] } \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e name \u540d\u79f0 sort_id \u6392\u5e8fid(\u5f00\u53d1\u8005\u81ea\u884c\u751f\u6210) type \u7c7b\u578b(api \u6216 group) container \u5305\u542b\u63a5\u53e3\u7684sort_id(\u53ea\u6709\u5728group\u7c7b\u578b\u4e2d\u624d\u6709\u503c) operation_id \u64cd\u4f5cid(\u53ea\u6709api\u7c7b\u578b\u624d\u6709\u8fd9\u4e2a\u5b57\u6bb5) 2.\u9700\u8981\u5728\u5e94\u7528\u7ba1\u7406\u83dc\u5355\u4e0b\u7684\u5e94\u7528\u5217\u8868\uff0c\u65b0\u5efa\u4e00\u4e2a\u5e94\u7528 3.\u9700\u8981\u5bf9\u5e94\u7528\u8fdb\u884c\u534f\u8bae\u914d\u7f6e\uff0c\u8fd9\u91cc\u4ee5OIDC\u7c7b\u578b\u7684\u5e94\u7528\u4e3a\u4f8b \u8865\u5145\u8bf4\u660e \u76ee\u524d\u53ea\u652f\u6301OIDC\u7c7b\u578b\uff0c\u6216\u8005Oauth2\u7c7b\u578b\u7684\u5e94\u7528\u3002\u5176\u5b83\u7c7b\u578b\u7684\u5e94\u7528\u65e0\u6cd5\u4f7f\u7528\u83b7\u53d6\u6743\u9650\u5b57\u7b26\u4e32\u7684\u529f\u80fd 4.\u9700\u8981\u5bf9\u5e94\u7528\u8fdb\u884c\u5f00\u653eAPI\u914d\u7f6e \u8865\u5145\u8bf4\u660e \u5982\u679c\u63a5\u53e3\u6587\u6863\u4e2d\u7684permissions\u5185\u5bb9\u6709\u53d8\u66f4\uff0c\u9700\u8981\u66f4\u6539\u5e94\u7528\u7248\u672c\uff0c\u7b2c\u4e00\u6b21\u914d\u7f6e\u65f6\u9664\u5916","title":"\u63a5\u5165\u6b65\u9aa4"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E7%BB%9F%E4%B8%80%E6%9D%83%E9%99%90/#_3","text":"1.\u53ef\u4ee5\u5728\u6743\u9650\u7ba1\u7406\u83dc\u5355\u4e0b\uff0c\u6388\u6743\u7ba1\u7406\u83dc\u5355\u4e0b\u7684\u6240\u6709\u5e94\u7528\u9875\u9762\u4e2d\uff0c\u628a\u5df2\u7ecf\u8bfb\u53d6\u5230\u7684\u6743\u9650\uff0c\u6388\u6743\u7ed9\u5176\u5b83\u79df\u6237\u7684\u4eba\u4f7f\u7528\u3002 \u8865\u5145\u8bf4\u660e \u6743\u9650\u7684\u5206\u914d\u662f\u9010\u7ea7\u5411\u4e0b\u7684\uff0c\u4e00\u822c\u6388\u6743\u5f00\u542f\u65f6\uff0c\u9664\u8981\u5f00\u542f\u7684\u6743\u9650\u5916\uff0c\u4f1a\u6253\u5f00\u5e94\u7528\u5165\u53e3\u6743\u9650\uff0c\u9632\u6b62\u5176\u5b83\u79df\u6237\u7684\u7528\u6237\u65e0\u6cd5\u8fdb\u884c\u767b\u5f55 \u6388\u6743\u5f00\u542f:\u8be5\u6743\u9650\u88ab\u6388\u6743\u7ed9\u5176\u5b83\u79df\u6237\u4f7f\u7528\uff0c\u5176\u5b83\u79df\u6237\u7684\u7ba1\u7406\u5458\u662f\u6700\u5148\u62e5\u6709\u8be5\u6743\u9650\u7684\uff0c\u5176\u5b83\u79df\u6237\u7ba1\u7406\u5458\u53ef\u4ee5\u5bf9\u81ea\u5df1\u62e5\u6709\u7684\u6743\u9650\u8fdb\u884c\u4e8c\u6b21\u5206\u914d\u3002 \u6388\u6743\u5173\u95ed:\u8be5\u6743\u9650\u5982\u679c\u4ece\u5f00\u542f\u72b6\u6001\u5207\u6362\u5230\u5173\u95ed\u72b6\u6001\uff0c\u5219\u5df2\u7ecf\u5206\u914d\u7ed9\u5176\u5b83\u79df\u6237\u7684\u6743\u9650\uff0c\u5c06\u88ab\u6536\u56de\uff0c\u5305\u62ec\u5176\u5b83\u79df\u6237\u4e8c\u6b21\u5206\u914d\u7684\u3002 2.\u9664\u4e86\u6388\u6743\u7ed9\u5176\u5b83\u79df\u6237\u4f7f\u7528\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u672c\u79df\u6237\u5185\uff0c\u8fdb\u884c\u7528\u6237\u6743\u9650\u8d4b\u4e88","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%20%E7%BB%9F%E4%B8%80%E6%9D%83%E9%99%90/#_4","text":"1.\u8bbf\u95ee\u5e94\u7528\u5217\u8868\uff0c\u7f16\u8f91\u5e94\u7528\uff0c\u83b7\u53d6\u53c2\u6570\u4fe1\u606f \u82f1\u6587\u53c2\u6570\u540d\u79f0 \u5bf9\u5e94\u9875\u9762\u5b57\u6bb5 redirect url \u56de\u8c03\u5730\u5740 client_id \u5ba2\u6237\u7aefid client_token \u5ba2\u6237\u7aef\u79d8\u94a5 authorize url \u6388\u6743url get token url \u83b7\u53d6access_token\u5730\u5740 userinfo url \u7528\u6237\u4fe1\u606f\u5730\u5740 logout url \u9000\u51fa\u767b\u5f55\u5730\u5740 2.\u83b7\u53d6Authorization Code \u8bf7\u6c42\u5730\u5740: authorize url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b client_id client_id redirect_uri redirect url response_type \u586b\u5165code code scope \u586b\u5165 (openid userinfo) \u8bf7\u6c42\u793a\u4f8b: http://authorize url/?client_id=xxxxx&redirect_uri=xxxxx&response_type=code&scope=userinfo \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 \u8fd4\u56de\u793a\u4f8b: http://redirect_uri?code=XEV8esOvaVk9wyAuiNXpb3Nuwn5av9&token=cd34840ffc804b894ede31bc21b176ef559e137f 3.\u83b7\u53d6Access Token \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization token\u683c\u5f0f\u4e3a client_id:client_secret \u4f7f\u7528base64\u7f16\u7801 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 grant_type \u586b\u5165authorization_code \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c id_token id_token \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"nRmo1Ko5UbStrtBNtySnUi8Ezw9YBm\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"openid userinfo\" , \"refresh_token\" : \"na3bP6WX3JzZynqLSJS8wI4m6zWiC9\" , \"id_token\" : \"eyJhbGciOiAiUlMyNTYiLCAidXNlIjogInNpZyIsICJraWQiOiAiRjlYSlg3N0VkTjVnNnA5Q3ZnS1NnTW9GRTh4cjNJeWp6aUNLTnR3enhWTSIsICJlIjogIkFRQUIiLCAia3R5IjogIlJTQSIsICJuIjogImlFNFkyMDhLV0x1QzhLcWZLQU96NmctaUlfeHNLU3hTYmoyMWxXbmdnMmwtay01b2ZKaVRDQklKZjFTR1dyQ3hfRXNGT1ptZUxEM29xcE96WUNhdFZ3NlBlNnVacFJhRFZSekFoOV9Da00waUFWclc2bHB4QkowSFlxZ1d3cHBpSG15M2VEbkg2V3lGVkNQUFhKd3F1MU5ETlludENqcUtWa2gxamotdjktVSJ9.eyJhdWQiOiAiQXJkeHJwajVVb0JmUUNiN1F4TDE1RG9YR2ozcHpOeHFkeFl2U1YxeCIsICJpYXQiOiAxNjYwMTE1MDU4LCAiYXRfaGFzaCI6ICJqa19ET1M0MFNnT3Fubk91QzhjeHdnIiwgInN1YiI6ICJmYWY1YWFlNi0zY2RmLTQ1OTUtOGI0YS0zYTA2YjMxMTE3YzgiLCAic3ViX2lkIjogImZhZjVhYWU2LTNjZGYtNDU5NS04YjRhLTNhMDZiMzExMTdjOCIsICJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiYWRtaW4iLCAiZ3JvdXBzIjogWyJ0ZW5hbnRfYWRtaW4iXSwgInRlbmFudF9pZCI6ICI0ZGExMTRjZS1lMTE1LTQ0YTAtODIzYi1kMzcyMTE0NDI1ZDAiLCAidGVuYW50X3NsdWciOiAiIiwgImlzcyI6ICJodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxL3RlbmFudC80ZGExMTRjZS1lMTE1LTQ0YTAtODIzYi1kMzcyMTE0NDI1ZDAiLCAiZXhwIjogMTY2MDE1MTA1OCwgImF1dGhfdGltZSI6IDE2NjAxMTUwNTh9.Xcz9d79UdPAVtiObwkauIPVodQtDK8ZX9zYBhTgmjs5_lQhlgzCeUZPeUJCsIb_3AR9BChDw_EDYzwFhg1h4vYofYlRk4V9wHZypbRoDFopm343h78JbzGeexFiRhE_e4zIPmVsQj925TpMuMOP4zLKX3U6pTPJETflrvblXcUs\" } 4.\u83b7\u53d6\u6743\u9650\u5b57\u7b26\u4e32 \u8bf7\u6c42\u5730\u5740: /api/v1/app/permission_result \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b ID-TOKEN \u83b7\u53d6access_token\u63a5\u53e3\u8fd4\u56de\u7684id_token xxxxx \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b result \u7528\u6237\u6743\u9650\u5b57\u7b26\u4e32(1\u662f\u6709\u6743\u9650\uff0c0\u662f\u6ca1\u6743\u9650\uff0c\u6bcf\u4f4d\u4e0e\u63a5\u53e3\u6587\u6863\u4e2d\u7684sort_id\u5bf9\u5e94) \u8fd4\u56de\u793a\u4f8b: { \"result\" : \"11111\" }","title":"\u5982\u4f55\u83b7\u53d6\u7528\u6237\u7684\u6743\u9650\u5b57\u7b26\u4e32"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%E7%BB%9F%E4%B8%80%E5%AE%A1%E6%89%B9/","text":"\u7edf\u4e00\u5ba1\u6279 # \u529f\u80fd\u4ecb\u7ecd # \u7edf\u4e00\u5ba1\u6279\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a \u5ba1\u6279\u52a8\u4f5c \u5ba1\u6279\u8bf7\u6c42 \u5ba1\u6279\u7cfb\u7edf ArkID\u6838\u5fc3(\u5ba1\u6279\u52a8\u4f5c\uff0c\u5ba1\u6279\u8bf7\u6c42\uff0c\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u57fa\u7c7b)\uff1a # \u521b\u5efa \u5ba1\u6279\u52a8\u4f5c : \u6307\u5b9a\u9700\u8981\u5ba1\u6279\u7684API\u63a5\u53e3, \u4ee5\u53ca\u8d1f\u8d23\u5ba1\u6279\u8be5API\u8c03\u7528\u7684 \u5ba1\u6279\u7cfb\u7edf \u76d1\u63a7API\u8c03\u7528: API\u8c03\u7528\u53d1\u751f\u7684\u65f6\u5019\uff0c\u505a\u5982\u4e0b\u5904\u7406: \u5982\u679cAPI\u8c03\u7528\u6ca1\u6709\u521b\u5efa\u5bf9\u5e94\u7684 \u5ba1\u6279\u8bf7\u6c42 \uff0cAPI\u8c03\u7528\u4e2d\u65ad\uff0c\u521b\u5efa \u5ba1\u6279\u8bf7\u6c42 \uff0c\u901a\u8fc7 CREATE_APPROVE_REQUEST \u4e8b\u4ef6\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u5ba1\u6279\u7cfb\u7edf\u4e2d\u3002 \u5982\u679cAPI\u8c03\u7528\u5df2\u7ecf\u521b\u5efa\u5bf9\u5e94\u7684 \u5ba1\u6279\u8bf7\u6c42 : \u8be5 \u5ba1\u6279\u8bf7\u6c42 \u88ab \u5ba1\u6279\u7cfb\u7edf \u672a\u5904\u7406\uff0cAPI\u8c03\u7528\u4e2d\u65ad \u8be5 \u5ba1\u6279\u8bf7\u6c42 \u88ab \u5ba1\u6279\u7cfb\u7edf \u62d2\u7edd\uff0cAPI\u8c03\u7528\u4e2d\u65ad \u8be5 \u5ba1\u6279\u8bf7\u6c42 \u88ab \u5ba1\u6279\u7cfb\u7edf \u540c\u610f\uff0cAPI\u8c03\u7528\u7ee7\u7eed\u6267\u884c \u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u57fa\u7c7b \u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.approve_system.ApproveSystemExtension \u76d1\u542c CREATE_APPROVE_REQUEST \u4e8b\u4ef6\uff0c\u5b9a\u4e49\u62bd\u8c61\u51fd\u6570 create_approve_request , \u7b2c\u4e09\u65b9\u63d2\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u5b9e\u73b0\u6b64\u65b9\u6cd5\uff0c\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u7b2c\u4e09\u65b9\u7cfb\u7edf\u4e2d\u5904\u7406 \u521b\u5efa\u4e24\u4e2a\u63a5\u53e3\u5206\u522b\u7528\u4e8e\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u901a\u8fc7\u548c\u62d2\u7edd\u7684\u903b\u8f91: \u540c\u610f \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/pass/ method: PUT \u5904\u7406\u51fd\u6570\uff1apass_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: pass_approve_request \u62d2\u7edd \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/deny/' method: PUT \u5904\u7406\u51fd\u6570\uff1adeny_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: deny_approve_request ArkID\u7cfb\u7edf\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf \u7b2c\u4e09\u65b9\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u53ef\u4ee5\u53c2\u8003\u7cfb\u7edf\u81ea\u5e26\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u903b\u8f91\uff0c \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u89c1 extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension","title":"\u7edf\u4e00\u5ba1\u6279"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%E7%BB%9F%E4%B8%80%E5%AE%A1%E6%89%B9/#_1","text":"","title":"\u7edf\u4e00\u5ba1\u6279"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%E7%BB%9F%E4%B8%80%E5%AE%A1%E6%89%B9/#_2","text":"\u7edf\u4e00\u5ba1\u6279\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a \u5ba1\u6279\u52a8\u4f5c \u5ba1\u6279\u8bf7\u6c42 \u5ba1\u6279\u7cfb\u7edf","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%20%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5/%E7%BB%9F%E4%B8%80%E5%AE%A1%E6%89%B9/#arkid","text":"\u521b\u5efa \u5ba1\u6279\u52a8\u4f5c : \u6307\u5b9a\u9700\u8981\u5ba1\u6279\u7684API\u63a5\u53e3, \u4ee5\u53ca\u8d1f\u8d23\u5ba1\u6279\u8be5API\u8c03\u7528\u7684 \u5ba1\u6279\u7cfb\u7edf \u76d1\u63a7API\u8c03\u7528: API\u8c03\u7528\u53d1\u751f\u7684\u65f6\u5019\uff0c\u505a\u5982\u4e0b\u5904\u7406: \u5982\u679cAPI\u8c03\u7528\u6ca1\u6709\u521b\u5efa\u5bf9\u5e94\u7684 \u5ba1\u6279\u8bf7\u6c42 \uff0cAPI\u8c03\u7528\u4e2d\u65ad\uff0c\u521b\u5efa \u5ba1\u6279\u8bf7\u6c42 \uff0c\u901a\u8fc7 CREATE_APPROVE_REQUEST \u4e8b\u4ef6\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u5ba1\u6279\u7cfb\u7edf\u4e2d\u3002 \u5982\u679cAPI\u8c03\u7528\u5df2\u7ecf\u521b\u5efa\u5bf9\u5e94\u7684 \u5ba1\u6279\u8bf7\u6c42 : \u8be5 \u5ba1\u6279\u8bf7\u6c42 \u88ab \u5ba1\u6279\u7cfb\u7edf \u672a\u5904\u7406\uff0cAPI\u8c03\u7528\u4e2d\u65ad \u8be5 \u5ba1\u6279\u8bf7\u6c42 \u88ab \u5ba1\u6279\u7cfb\u7edf \u62d2\u7edd\uff0cAPI\u8c03\u7528\u4e2d\u65ad \u8be5 \u5ba1\u6279\u8bf7\u6c42 \u88ab \u5ba1\u6279\u7cfb\u7edf \u540c\u610f\uff0cAPI\u8c03\u7528\u7ee7\u7eed\u6267\u884c \u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u57fa\u7c7b \u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.approve_system.ApproveSystemExtension \u76d1\u542c CREATE_APPROVE_REQUEST \u4e8b\u4ef6\uff0c\u5b9a\u4e49\u62bd\u8c61\u51fd\u6570 create_approve_request , \u7b2c\u4e09\u65b9\u63d2\u4ef6\u7cfb\u7edf\u53ef\u4ee5\u5b9e\u73b0\u6b64\u65b9\u6cd5\uff0c\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u7b2c\u4e09\u65b9\u7cfb\u7edf\u4e2d\u5904\u7406 \u521b\u5efa\u4e24\u4e2a\u63a5\u53e3\u5206\u522b\u7528\u4e8e\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u901a\u8fc7\u548c\u62d2\u7edd\u7684\u903b\u8f91: \u540c\u610f \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/pass/ method: PUT \u5904\u7406\u51fd\u6570\uff1apass_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: pass_approve_request \u62d2\u7edd \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/deny/' method: PUT \u5904\u7406\u51fd\u6570\uff1adeny_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: deny_approve_request ArkID\u7cfb\u7edf\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf \u7b2c\u4e09\u65b9\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u53ef\u4ee5\u53c2\u8003\u7cfb\u7edf\u81ea\u5e26\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u903b\u8f91\uff0c \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u89c1 extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension","title":"ArkID\u6838\u5fc3(\u5ba1\u6279\u52a8\u4f5c\uff0c\u5ba1\u6279\u8bf7\u6c42\uff0c\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u57fa\u7c7b)\uff1a"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/","text":"\u63d2\u4ef6\u5f00\u53d1 # \u63d2\u4ef6\u662f\u4ec0\u4e48\uff1f # \u63d2\u4ef6\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u6ee1\u8db3\u7528\u6237\u7684\u4e2a\u6027\u9700\u6c42\uff0c\u5e76\u9632\u6b62ArkID\u81ea\u8eab\u4ea7\u54c1\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002 \u63d2\u4ef6\u5c31\u662f\u4e00\u4e2a\u72ec\u7acb\u7684python\u6a21\u5757\u3002 \u63d2\u4ef6\u80fd\u505a\u4ec0\u4e48\uff1f # \u63d2\u4ef6\u53ef\u4ee5\u5b8c\u6574\u7684\u4f7f\u7528Django\u4e0eDjango-ninja\u6846\u67b6\u4f7f\u7528\u7684\u5b8c\u6574\u529f\u80fd\u5916\uff0c ArkID\u4e3a\u63d2\u4ef6\u5b9a\u4e49\u6216\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff1a \u81ea\u5b9a\u4e49\u65b0\u7684API\uff0c\u6216\u66f4\u65b0\u5185\u6838API \u81ea\u5b9a\u4e49\u65b0\u7684\u540e\u7aef\u8def\u7531\uff0c\u524d\u7aef\u8def\u7531\uff0c\u524d\u7aef\u9875\u9762 \u81ea\u5b9a\u4e49\u65b0\u7684Django Model\uff0c\u6216\u6269\u5c55\u5185\u6838\u539f\u6709\u7684Model \u81ea\u5b9a\u4e49\u65b0\u7684\u4e8b\u4ef6(Event)\uff0c\u6216\u4fa6\u542c\u5185\u6838\u4e8b\u4ef6 \u81ea\u5b9a\u4e49pip\u4f9d\u8d56 \u81ea\u5b9a\u4e49\u914d\u7f6e \u81ea\u5b9a\u4e49\u6587\u6863 \u81ea\u5b9a\u4e49\u8bed\u8a00\u5305 \u5982\u4f55\u5f00\u53d1\u63d2\u4ef6\uff1f # \u5c06ArkID\u7684\u4ed3\u5e93clone\u5230\u672c\u5730\uff0c\u5728 extension_root \u76ee\u5f55\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u8be5\u6587\u4ef6\u5939\u5373\u4e3a\u63d2\u4ef6\u7684\u4e3b\u76ee\u5f55\u3002 \u5728\u6b64\u76ee\u5f55\u4e2d\u6dfb\u52a0 __init__.py \u6587\u4ef6\uff0c\u5373\u4e3a\u63d2\u4ef6\u7684 main \u6587\u4ef6\u3002 \u5728 extension_root \u76ee\u5f55\u4e2d\uff0c\u5b98\u65b9\u63d0\u4f9b\u4e86\u591a\u4e2a\u9ed8\u8ba4\u63d2\u4ef6\uff0c\u90fd\u662f\u5f88\u597d\u7684\u793a\u4f8b\u3002 \u66f4\u591a\u6559\u5b66\uff0c\u53c2\u8003 \u65b0\u624b\u6559\u7a0b\uff1a\u5f00\u53d1\u7b2c\u4e00\u4e2a\u63d2\u4ef6 \u60f3\u5206\u4eab\u6216\u51fa\u552e\u60a8\u7684\u63d2\u4ef6\uff1f # \u5b98\u65b9\u63d0\u4f9b\u4e86\u63d2\u4ef6\u5546\u5e97\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5c06\u8be5\u63d2\u4ef6\u6240\u5728\u7684 github\u79c1\u6709\u4ed3\u5e93\u94fe\u63a5 \u6216 zip\u5305 \u4e0a\u4f20\uff0c\u5373\u53ef\u5206\u4eab\u6216\u51fa\u552e\u60a8\u7684\u63d2\u4ef6\u3002 \u5177\u4f53\u6559\u7a0b\u53c2\u8003\uff1a \u63d2\u4ef6\u53d1\u5e03 \u9700\u8981\u5e2e\u52a9\uff1f # \u60a8\u9700\u8981\u4efb\u4f55\u5e2e\u52a9\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u90ae\u4ef6\u968f\u65f6\u8054\u7cfb\u6211\u4eec\uff0c\u90ae\u7bb1\u5730\u5740\uff1a support@longguikeji.com \u4e5f\u53ef\u4ee5\u5728\u4e0b\u9762 \u8bc4\u8bba \u6216 github\u8bba\u575b \u4e2d\u7ed9\u6211\u4eec\u63d0\u95ee\u6216\u7559\u8a00\u3002","title":"\u63d2\u4ef6\u5f00\u53d1"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#_1","text":"","title":"\u63d2\u4ef6\u5f00\u53d1"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#_2","text":"\u63d2\u4ef6\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u6ee1\u8db3\u7528\u6237\u7684\u4e2a\u6027\u9700\u6c42\uff0c\u5e76\u9632\u6b62ArkID\u81ea\u8eab\u4ea7\u54c1\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002 \u63d2\u4ef6\u5c31\u662f\u4e00\u4e2a\u72ec\u7acb\u7684python\u6a21\u5757\u3002","title":"\u63d2\u4ef6\u662f\u4ec0\u4e48\uff1f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#_3","text":"\u63d2\u4ef6\u53ef\u4ee5\u5b8c\u6574\u7684\u4f7f\u7528Django\u4e0eDjango-ninja\u6846\u67b6\u4f7f\u7528\u7684\u5b8c\u6574\u529f\u80fd\u5916\uff0c ArkID\u4e3a\u63d2\u4ef6\u5b9a\u4e49\u6216\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff1a \u81ea\u5b9a\u4e49\u65b0\u7684API\uff0c\u6216\u66f4\u65b0\u5185\u6838API \u81ea\u5b9a\u4e49\u65b0\u7684\u540e\u7aef\u8def\u7531\uff0c\u524d\u7aef\u8def\u7531\uff0c\u524d\u7aef\u9875\u9762 \u81ea\u5b9a\u4e49\u65b0\u7684Django Model\uff0c\u6216\u6269\u5c55\u5185\u6838\u539f\u6709\u7684Model \u81ea\u5b9a\u4e49\u65b0\u7684\u4e8b\u4ef6(Event)\uff0c\u6216\u4fa6\u542c\u5185\u6838\u4e8b\u4ef6 \u81ea\u5b9a\u4e49pip\u4f9d\u8d56 \u81ea\u5b9a\u4e49\u914d\u7f6e \u81ea\u5b9a\u4e49\u6587\u6863 \u81ea\u5b9a\u4e49\u8bed\u8a00\u5305","title":"\u63d2\u4ef6\u80fd\u505a\u4ec0\u4e48\uff1f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#_4","text":"\u5c06ArkID\u7684\u4ed3\u5e93clone\u5230\u672c\u5730\uff0c\u5728 extension_root \u76ee\u5f55\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u8be5\u6587\u4ef6\u5939\u5373\u4e3a\u63d2\u4ef6\u7684\u4e3b\u76ee\u5f55\u3002 \u5728\u6b64\u76ee\u5f55\u4e2d\u6dfb\u52a0 __init__.py \u6587\u4ef6\uff0c\u5373\u4e3a\u63d2\u4ef6\u7684 main \u6587\u4ef6\u3002 \u5728 extension_root \u76ee\u5f55\u4e2d\uff0c\u5b98\u65b9\u63d0\u4f9b\u4e86\u591a\u4e2a\u9ed8\u8ba4\u63d2\u4ef6\uff0c\u90fd\u662f\u5f88\u597d\u7684\u793a\u4f8b\u3002 \u66f4\u591a\u6559\u5b66\uff0c\u53c2\u8003 \u65b0\u624b\u6559\u7a0b\uff1a\u5f00\u53d1\u7b2c\u4e00\u4e2a\u63d2\u4ef6","title":"\u5982\u4f55\u5f00\u53d1\u63d2\u4ef6\uff1f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#_5","text":"\u5b98\u65b9\u63d0\u4f9b\u4e86\u63d2\u4ef6\u5546\u5e97\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5c06\u8be5\u63d2\u4ef6\u6240\u5728\u7684 github\u79c1\u6709\u4ed3\u5e93\u94fe\u63a5 \u6216 zip\u5305 \u4e0a\u4f20\uff0c\u5373\u53ef\u5206\u4eab\u6216\u51fa\u552e\u60a8\u7684\u63d2\u4ef6\u3002 \u5177\u4f53\u6559\u7a0b\u53c2\u8003\uff1a \u63d2\u4ef6\u53d1\u5e03","title":"\u60f3\u5206\u4eab\u6216\u51fa\u552e\u60a8\u7684\u63d2\u4ef6\uff1f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#_6","text":"\u60a8\u9700\u8981\u4efb\u4f55\u5e2e\u52a9\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u90ae\u4ef6\u968f\u65f6\u8054\u7cfb\u6211\u4eec\uff0c\u90ae\u7bb1\u5730\u5740\uff1a support@longguikeji.com \u4e5f\u53ef\u4ee5\u5728\u4e0b\u9762 \u8bc4\u8bba \u6216 github\u8bba\u575b \u4e2d\u7ed9\u6211\u4eec\u63d0\u95ee\u6216\u7559\u8a00\u3002","title":"\u9700\u8981\u5e2e\u52a9\uff1f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/","text":"\u5f00\u53d1\u7b2c\u4e00\u4e2a\u63d2\u4ef6 # \u521b\u5efa\u63d2\u4ef6\u76ee\u5f55\u4e0e\u6587\u4ef6 # clone\u4e0barkid\u7684git\u4ed3\u5e93\uff0c\u5728\u6839\u76ee\u5f55\u4e0b\u627e\u5230 arkid.toml \u6587\u4ef6 \u627e\u5230 extension \u9879\uff0c\u8be5\u914d\u7f6e\u6307\u793a\u63d2\u4ef6\u6240\u5b58\u653e\u7684\u6587\u4ef6\u4f4d\u7f6e\uff0c\u5982\u4e0b\uff1a [extension] root = [ \"./extension_root\" , \"./my_extensions\" ] \u5728 my_extensions \u76ee\u5f55\u4e0b\u65b0\u5efa\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a\uff1a com_company_type_helloworld \u6ce8\u610f \u63d2\u4ef6\u76ee\u5f55\u7684\u6587\u4ef6\u540d\u8981\u4e0e\u5176package\u5b8c\u5168\u5bf9\u5e94\uff0c\u4ec5\u4ec5\u5c06package\u7684\u7b26\u53f7\u70b9 ' . ' \u66f4\u6362\u4e3a\u4e0b\u5212\u7ebf' _ ' \u5728\u6587\u4ef6\u5939 com_company_type_helloworld \u4e0b\uff0c\u65b0\u5efa\u6587\u4ef6 __init__.py \u8fd9\u6837\u63d2\u4ef6\u7684\u4e3b\u4f53\u76ee\u5f55\u4e0e\u4e3b\u4f53\u6587\u4ef6\u5efa\u7acb\u5b8c\u6bd5\u3002 \u7f16\u5199\u63d2\u4ef6\u4ee3\u7801(\u9010\u884c\u89e3\u6790) # \u5728 __init__.py \u6587\u4ef6\u4e2d\u63d2\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from arkid.core import extension , api , event # (1) from pydantic import Field HELLOWORLD = 'HELLOWORLD' # (2) package = 'com.company.type.helloworld' # (3) HelloworldOutSchema = extension . create_extension_schema ( # (11) 'HelloworldOutSchema' , package , fields = [ ( 'data' , str , Field ()) ] ) class HelloworldExtension ( extension . Extension ): # (4) def load ( self ): # (5) super () . load () self . register_api ( # (10) '/helloworld_api/' , 'GET' , self . helloworld_api , tags = [ 'helloworld' ], response = HelloworldOutSchema ) hellowold_event_tag = self . register_event ( HELLOWORLD , 'helloworld' ) # (6) self . listen_event ( hellowold_event_tag , self . helloworld ) # (7) def helloworld_api ( self , request ): event_results = event . dispatch_event ( event . Event ( package + '.' + HELLOWORLD , tenant = None , data = 'helloworld' )) # (12) for fun , ( result , ext ) in event_results : return { 'data' : result } def helloworld ( self , event , ** kwargs ): # (8) print ( event . data ) # (9) return event . data extension = HelloworldExtension ( # (13) package = package , description = 'my first extension' , version = '1.0' , labels = 'hellowworld' , homepage = 'https://arkid.cc' , logo = '' , author = 'your-name@your-company.com' , ) ArkID\u7684\u5185\u6838\u4ee3\u7801\u90fd\u5728arkid.core\u8fd9\u4e2a\u5305\u4e2d, extension(\u63d2\u4ef6\u76f8\u5173\u7684\u5404\u79cd\u57fa\u7c7b), api(\u5c01\u88c5\u7684ninja\u7684api\u5bf9\u8c61), event(\u4e8b\u4ef6\u6709\u5173\u7684\u6240\u6709\u5bf9\u8c61\u548c\u65b9\u6cd5) \u4e8b\u4ef6tag \u63d2\u4ef6\u7684package, \u56e0\u4e3a\u8981\u53cd\u590d\u4f7f\u7528\uff0c\u5e94\u8be5\u5355\u72ec\u5b9a\u4e49 \u5b9a\u4e49\u63d2\u4ef6\uff0c\u7ee7\u627f\u6700\u57fa\u7840\u7684\u63d2\u4ef6\u57fa\u7c7b Extension load() \u62bd\u8c61\u65b9\u6cd5\uff0c\u6240\u6709\u63d2\u4ef6\u7684\u6838\u5fc3\u542f\u52a8\u65b9\u6cd5\uff0c\u5fc5\u987b\u5b9e\u73b0 \u63d2\u4ef6\u5185\u6ce8\u518c\u4e8b\u4ef6\uff0c\u4e3a\u4e86\u65b9\u5f0f\u4e8b\u4ef6tag\u547d\u540d\u51b2\u7a81\uff0c\u4f1a\u5728\u4f20\u5165\u7684tag\u524d\u6dfb\u52a0 package+'.' \u4e3a\u524d\u7f00 \u6dfb\u52a0\u4fa6\u542c\u4e8b\u4ef6\u7684\u56de\u8c03\u51fd\u6570 \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 \u6253\u5370event\u7684data\u53c2\u6570 \u5b9a\u4e49\u4e00\u4e2aAPI\uff0c\u53c2\u8003Django-ninja\u7684\u76f8\u5173\u6587\u6863 \u5b9a\u4e49api\u7684Schema\uff0c\u4e3a\u4e86\u907f\u514d\u547d\u540d\u51b2\u7a81\uff0c\u53ea\u80fd\u901a\u8fc7extension.create_extension_schema\u65b9\u6cd5 \u629b\u51fa\u4e8b\u4ef6\uff0c\u6ce8\u610f\u4e8b\u4ef6\u7684tag\u4e3a\u6dfb\u52a0\u524d\u7f00\u7684\u90e8\u5206 \u751f\u6210\u8be5\u63d2\u4ef6\u7684\u5355\u4f8b\u5bf9\u8c61\uff0cArkID\u4f1a\u83b7\u53d6__init__.py\u6587\u4ef6\u4e2d\u7684extension\u5bf9\u8c61\u4f5c\u4e3a\u63d2\u4ef6\u4e3b\u4f53 \u8f7d\u5165\u4e0e\u542f\u52a8\u63d2\u4ef6 # \u542f\u52a8Django python manager.py runserver ArkID\u4f1a\u6839\u636earkid.toml\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\uff0c\u81ea\u52a8\u5728\u6240\u6709\u63d2\u4ef6\u76ee\u5f55\u4e0b\u4f9d\u6b21\u52a0\u8f7d\u6240\u6709\u63d2\u4ef6\uff0c\u5e76\u6253\u5370\u51fa\u52a0\u8f7d\u4fe1\u606f\u3002 Importing my_extension/com_company_type_helloworld xxxx-xx-xx 03 :21:57,944 - arkid - INFO - Imported <module 'my_extension.com_company_type_helloworld' from '/arkid/my_extension/com_company_type_helloworld/__init__.py' > xxxx-xx-xx 03 :21:57,944 - arkid - INFO - my_extension.com_company_type_helloworld import success \u52a0\u8f7d\u6210\u529f\u540e\uff0c\u5982\u679c\u63d2\u4ef6\u662f\u88ab\u542f\u7528\u7684\uff0c\u5219\u4f1a\u8c03\u7528\u5176 load() \u51fd\u6570\uff0c \u5b8c\u6210\u542f\u52a8\uff0c\u542f\u52a8\u6210\u529f\u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a 2022 -xx-xx 03 :22:00,993 - arkid - INFO - my_extension.com_company_type_helloworld load success \u68c0\u67e5\u4e0e\u6d4b\u8bd5\u63d2\u4ef6 # \u8bbf\u95ee: http:// { ArkID host } /api/redoc#tag/helloworld/operation/my_extension_com_company_type_helloworld_helloworld \u53ef\u4ee5\u770b\u5230\u5728\u63d2\u4ef6\u4e2d\u5b9a\u4e49\u7684API\u4f1a\u663e\u793a\u5728\u6587\u6863\u4e2d\uff0c \u5c1d\u8bd5\u8c03\u7528\u8be5\u63a5\u53e3\uff0c\u53ef\u4ee5\u83b7\u5f97\u6253\u5370\uff1a helloworld [ xx/xx/xxxx 03 :22:07 ] \"GET /api/v1/tenant/{tenant_id}/helloworld/ HTTP/1.1\" 200 4 \u63d0\u793a \u63a5\u53e3\u4e2d\u7684 tenant_id \u53ef\u4ee5\u5728 \u79df\u6237\u7ba1\u7406-\u79df\u6237\u914d\u7f6e \u4e2d\u770b\u5230","title":"\u5f00\u53d1\u7b2c\u4e00\u4e2a\u63d2\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/#_1","text":"","title":"\u5f00\u53d1\u7b2c\u4e00\u4e2a\u63d2\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/#_2","text":"clone\u4e0barkid\u7684git\u4ed3\u5e93\uff0c\u5728\u6839\u76ee\u5f55\u4e0b\u627e\u5230 arkid.toml \u6587\u4ef6 \u627e\u5230 extension \u9879\uff0c\u8be5\u914d\u7f6e\u6307\u793a\u63d2\u4ef6\u6240\u5b58\u653e\u7684\u6587\u4ef6\u4f4d\u7f6e\uff0c\u5982\u4e0b\uff1a [extension] root = [ \"./extension_root\" , \"./my_extensions\" ] \u5728 my_extensions \u76ee\u5f55\u4e0b\u65b0\u5efa\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a\uff1a com_company_type_helloworld \u6ce8\u610f \u63d2\u4ef6\u76ee\u5f55\u7684\u6587\u4ef6\u540d\u8981\u4e0e\u5176package\u5b8c\u5168\u5bf9\u5e94\uff0c\u4ec5\u4ec5\u5c06package\u7684\u7b26\u53f7\u70b9 ' . ' \u66f4\u6362\u4e3a\u4e0b\u5212\u7ebf' _ ' \u5728\u6587\u4ef6\u5939 com_company_type_helloworld \u4e0b\uff0c\u65b0\u5efa\u6587\u4ef6 __init__.py \u8fd9\u6837\u63d2\u4ef6\u7684\u4e3b\u4f53\u76ee\u5f55\u4e0e\u4e3b\u4f53\u6587\u4ef6\u5efa\u7acb\u5b8c\u6bd5\u3002","title":"\u521b\u5efa\u63d2\u4ef6\u76ee\u5f55\u4e0e\u6587\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/#_3","text":"\u5728 __init__.py \u6587\u4ef6\u4e2d\u63d2\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from arkid.core import extension , api , event # (1) from pydantic import Field HELLOWORLD = 'HELLOWORLD' # (2) package = 'com.company.type.helloworld' # (3) HelloworldOutSchema = extension . create_extension_schema ( # (11) 'HelloworldOutSchema' , package , fields = [ ( 'data' , str , Field ()) ] ) class HelloworldExtension ( extension . Extension ): # (4) def load ( self ): # (5) super () . load () self . register_api ( # (10) '/helloworld_api/' , 'GET' , self . helloworld_api , tags = [ 'helloworld' ], response = HelloworldOutSchema ) hellowold_event_tag = self . register_event ( HELLOWORLD , 'helloworld' ) # (6) self . listen_event ( hellowold_event_tag , self . helloworld ) # (7) def helloworld_api ( self , request ): event_results = event . dispatch_event ( event . Event ( package + '.' + HELLOWORLD , tenant = None , data = 'helloworld' )) # (12) for fun , ( result , ext ) in event_results : return { 'data' : result } def helloworld ( self , event , ** kwargs ): # (8) print ( event . data ) # (9) return event . data extension = HelloworldExtension ( # (13) package = package , description = 'my first extension' , version = '1.0' , labels = 'hellowworld' , homepage = 'https://arkid.cc' , logo = '' , author = 'your-name@your-company.com' , ) ArkID\u7684\u5185\u6838\u4ee3\u7801\u90fd\u5728arkid.core\u8fd9\u4e2a\u5305\u4e2d, extension(\u63d2\u4ef6\u76f8\u5173\u7684\u5404\u79cd\u57fa\u7c7b), api(\u5c01\u88c5\u7684ninja\u7684api\u5bf9\u8c61), event(\u4e8b\u4ef6\u6709\u5173\u7684\u6240\u6709\u5bf9\u8c61\u548c\u65b9\u6cd5) \u4e8b\u4ef6tag \u63d2\u4ef6\u7684package, \u56e0\u4e3a\u8981\u53cd\u590d\u4f7f\u7528\uff0c\u5e94\u8be5\u5355\u72ec\u5b9a\u4e49 \u5b9a\u4e49\u63d2\u4ef6\uff0c\u7ee7\u627f\u6700\u57fa\u7840\u7684\u63d2\u4ef6\u57fa\u7c7b Extension load() \u62bd\u8c61\u65b9\u6cd5\uff0c\u6240\u6709\u63d2\u4ef6\u7684\u6838\u5fc3\u542f\u52a8\u65b9\u6cd5\uff0c\u5fc5\u987b\u5b9e\u73b0 \u63d2\u4ef6\u5185\u6ce8\u518c\u4e8b\u4ef6\uff0c\u4e3a\u4e86\u65b9\u5f0f\u4e8b\u4ef6tag\u547d\u540d\u51b2\u7a81\uff0c\u4f1a\u5728\u4f20\u5165\u7684tag\u524d\u6dfb\u52a0 package+'.' \u4e3a\u524d\u7f00 \u6dfb\u52a0\u4fa6\u542c\u4e8b\u4ef6\u7684\u56de\u8c03\u51fd\u6570 \u5b9a\u4e49\u56de\u8c03\u51fd\u6570 \u6253\u5370event\u7684data\u53c2\u6570 \u5b9a\u4e49\u4e00\u4e2aAPI\uff0c\u53c2\u8003Django-ninja\u7684\u76f8\u5173\u6587\u6863 \u5b9a\u4e49api\u7684Schema\uff0c\u4e3a\u4e86\u907f\u514d\u547d\u540d\u51b2\u7a81\uff0c\u53ea\u80fd\u901a\u8fc7extension.create_extension_schema\u65b9\u6cd5 \u629b\u51fa\u4e8b\u4ef6\uff0c\u6ce8\u610f\u4e8b\u4ef6\u7684tag\u4e3a\u6dfb\u52a0\u524d\u7f00\u7684\u90e8\u5206 \u751f\u6210\u8be5\u63d2\u4ef6\u7684\u5355\u4f8b\u5bf9\u8c61\uff0cArkID\u4f1a\u83b7\u53d6__init__.py\u6587\u4ef6\u4e2d\u7684extension\u5bf9\u8c61\u4f5c\u4e3a\u63d2\u4ef6\u4e3b\u4f53","title":"\u7f16\u5199\u63d2\u4ef6\u4ee3\u7801(\u9010\u884c\u89e3\u6790)"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/#_4","text":"\u542f\u52a8Django python manager.py runserver ArkID\u4f1a\u6839\u636earkid.toml\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\uff0c\u81ea\u52a8\u5728\u6240\u6709\u63d2\u4ef6\u76ee\u5f55\u4e0b\u4f9d\u6b21\u52a0\u8f7d\u6240\u6709\u63d2\u4ef6\uff0c\u5e76\u6253\u5370\u51fa\u52a0\u8f7d\u4fe1\u606f\u3002 Importing my_extension/com_company_type_helloworld xxxx-xx-xx 03 :21:57,944 - arkid - INFO - Imported <module 'my_extension.com_company_type_helloworld' from '/arkid/my_extension/com_company_type_helloworld/__init__.py' > xxxx-xx-xx 03 :21:57,944 - arkid - INFO - my_extension.com_company_type_helloworld import success \u52a0\u8f7d\u6210\u529f\u540e\uff0c\u5982\u679c\u63d2\u4ef6\u662f\u88ab\u542f\u7528\u7684\uff0c\u5219\u4f1a\u8c03\u7528\u5176 load() \u51fd\u6570\uff0c \u5b8c\u6210\u542f\u52a8\uff0c\u542f\u52a8\u6210\u529f\u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a 2022 -xx-xx 03 :22:00,993 - arkid - INFO - my_extension.com_company_type_helloworld load success","title":"\u8f7d\u5165\u4e0e\u542f\u52a8\u63d2\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/#_5","text":"\u8bbf\u95ee: http:// { ArkID host } /api/redoc#tag/helloworld/operation/my_extension_com_company_type_helloworld_helloworld \u53ef\u4ee5\u770b\u5230\u5728\u63d2\u4ef6\u4e2d\u5b9a\u4e49\u7684API\u4f1a\u663e\u793a\u5728\u6587\u6863\u4e2d\uff0c \u5c1d\u8bd5\u8c03\u7528\u8be5\u63a5\u53e3\uff0c\u53ef\u4ee5\u83b7\u5f97\u6253\u5370\uff1a helloworld [ xx/xx/xxxx 03 :22:07 ] \"GET /api/v1/tenant/{tenant_id}/helloworld/ HTTP/1.1\" 200 4 \u63d0\u793a \u63a5\u53e3\u4e2d\u7684 tenant_id \u53ef\u4ee5\u5728 \u79df\u6237\u7ba1\u7406-\u79df\u6237\u914d\u7f6e \u4e2d\u770b\u5230","title":"\u68c0\u67e5\u4e0e\u6d4b\u8bd5\u63d2\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/","text":"\u63d2\u4ef6\u57fa\u7c7b # \u63d2\u4ef6\u6700\u57fa\u7840\u7684\u57fa\u7c7b\u4e3a arkid.core.extension.Extension \u652f\u6301\u70ed\u62d4\u63d2\u7684\u6838\u5fc3\u65b9\u6cd5\u4e3a start() \u4e0e stop() \u5206\u522b\u4f1a\u8c03\u7528 load() \u4e0e unload() \u65b9\u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u662f\u5404\u4e2a\u63d2\u4ef6\u5b50\u7c7b\u4e2d\uff0c\u7528\u6765\u81ea\u5b9a\u4e49\u5b89\u88c5\u4e0e\u5378\u8f7d\u65f6\u6240\u505a\u7684\u64cd\u4f5c load() \u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u8981\u6c42\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u5e94\u5b9e\u73b0\u3002 unload() \u4e5f\u53ef\u4ee5\u88ab\u91cd\u8f7d\u3002\u4f1a\u5c06\u6240\u6709load()\u8fc7\u7a0b\u4e2d\u6ce8\u518c\u8fc7\u7684API\uff0c\u4e8b\u4ef6\uff0c\u7b49\u7b49\u8fdb\u884c\u9500\u6bc1\u3002 \u56e0\u6b64\uff0c\u5728\u63d2\u4ef6\u4e2d\u5c3d\u91cf\u907f\u514d\u76f4\u63a5\u4f7f\u7528\u5185\u6838\u7684API\uff0c\u800c\u8981\u4f7f\u7528\u63d2\u4ef6\u4e2d\u5c01\u88c5\u597d\u7684\u4ee5 register \u5f00\u5934\u7684\u65b9\u6cd5\u3002\u8c03\u7528 register \u7c7b\u578b\u7684\u65b9\u6cd5\u65f6\uff0c\u76f8\u5173\u64cd\u4f5c\u7684\u9500\u6bc1\u90fd\u4f1a\u5728stop\u4e2d\u5df2\u7ecf\u6267\u884c\uff0c\u4e0d\u9700\u8981\u5728unload\u4e2d\u53bb\u505a\u3002 \u90e8\u5206\u5bf9\u9875\u9762\u5185\u5bb9\u7684\u66f4\u6539\uff0c\u6bd4\u5982actions\u76f8\u5173\u4fee\u6539\uff0c\u5219\u9700\u8981\u5728unload\u4e2d\u663e\u793a\u7684\u9500\u6bc1\u3002 \u63d0\u793a \u4e8b\u5b9e\u4e0a\uff0c\u5728\u8c03\u7528 start() \u524d\u4f1a\u8fdb\u884c migrate \uff0c\u662f\u7684\uff01\u63d2\u4ef6\u5185\u7684 migrations \u4f9d\u7136\u6709\u6548\u3002 arkid.core.extension.Extension ( ABC ) # Parameters: Name Type Description Default name str, \u63d2\u4ef6\u540d\u5b57\uff0cpackage\u4e2d\u70b9\u201c.\u201d\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\"_\" None ext_dir property writable # \u63d2\u4ef6\u5b8c\u6574\u8def\u5f84\uff0c\u7528.\u5206\u9694 full_name property readonly # \u63d2\u4ef6\u5b8c\u6574\u8def\u5f84\uff0c\u7528/\u5206\u9694 model property readonly # \u63d2\u4ef6\u5bf9\u5e94\u6570\u636e\u5e93model __init__ ( self , package = None , version = None , name = None , logo = None , description = None , labels = None , homepage = None , author = None ) special # summary Parameters: Name Type Description Default package str \u63d2\u4ef6\u5305\u540d\uff0c\u552f\u4e00\u6807\u8bc6 None version str \u7248\u672c\u53f7 None name str \u540d\u79f0 None logo str \u63d2\u4ef6\u7684\u56fe\u6807 None description str \u63cf\u8ff0 None labels List[str] \u6807\u7b7e None homepage str \u4e3b\u9875\uff0cURL None author str \u4f5c\u8005 None create_composite_config_schema ( schema_cls_name , exclude = [], ** field_definitions ) classmethod # \u521b\u9020\u590d\u5408\u7c7b\u578b \u8fd0\u884c\u65f6\u914d\u7f6e \u7684Schema Parameters: Name Type Description Default schema_cls_name str \u590d\u5408\u7c7b\u578b\u8fd0\u884c\u65f6\u914d\u7f6e\u7684Schema\u7684\u540d\u5b57 required exclude list \u53bb\u6389\u7684\u5b57\u6bb5\u5217\u8868. Defaults to []. [] Returns: Type Description Schema \u521b\u5efa\u597d\u7684Schema create_config_schema ( name , ** field_definitions ) classmethod # \u521b\u5efa\u5e76\u8fd4\u56de\u63d2\u4ef6 \u8fd0\u884c\u65f6\u914d\u7f6e \u7684Schema Parameters: Name Type Description Default name str \u9700\u8981\u521b\u5efa\u7684 Schema Class \u7684\u540d\u5b57 required field_definitions Any \u4efb\u610f\u6570\u91cf\u7684field,\u683c\u5f0f\u4e3a: field_name=(field_type, Field(...)) {} create_profile_schema ( name , ** field_definitions ) classmethod # \u521b\u5efa\u5e76\u8fd4\u56de\u63d2\u4ef6\u914d\u7f6e\u7684Schema Parameters: Name Type Description Default name str \u9700\u8981\u521b\u5efa\u7684 Schema Class \u7684\u540d\u5b57 required field_definitions Any \u4efb\u610f\u6570\u91cf\u7684field,\u683c\u5f0f\u4e3a: field_name=(field_type, Field(...)) {} create_settings_schema ( name , ** field_definitions ) classmethod # \u521b\u5efa\u5e76\u8fd4\u56de\u63d2\u4ef6 \u79df\u6237\u914d\u7f6e(settings) \u7684Schema Parameters: Name Type Description Default name str \u9700\u8981\u521b\u5efa\u7684 Schema Class \u7684\u540d\u5b57 required field_definitions Any \u4efb\u610f\u6570\u91cf\u7684field,\u683c\u5f0f\u4e3a: field_name=(field_type, Field(...)) {} create_tenant_config ( self , tenant , config , name , type ) # \u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 delete_tenant_config ( self , id ) # \u5220\u9664\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default id str config_id required Returns: Type Description TenantExtensionConfig \u5220\u9664\u7684\u5bf9\u8c61 dispatch_event ( self , event ) # \u629b\u51fa\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u4e8b\u4ef6\u5b9e\u4f8b required Returns: Type Description (tuple[Function, Result]) \u4e8b\u4ef6\u5904\u7406\u7684\u8fd4\u56de\u503c error ( self , enum = None , ** kwargs ) # API\u63a5\u53e3\u9519\u8befdict Parameters: Name Type Description Default enum Enum \u9519\u8bef\u7684\u679a\u4e3e\u7c7b\uff0c\u5982\u679c\u4e3aNone\uff0c\u6807\u8bc6\u6210\u529f\u8fd4\u56de. Defaults to None. None Returns: Type Description dict \u751f\u6210\u7684\u9519\u8befdict get_config_by_id ( self , id ) # \u901a\u8fc7config_id\u6765\u83b7\u53d6config Parameters: Name Type Description Default id UUID config_id required Returns: Type Description TenantExtensionConfig config get_settings ( self , tenant ) # \u83b7\u53d6\u79df\u6237\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required Returns: Type Description TenantExtension \u79df\u6237\u914d\u7f6e get_tenant_configs ( self , tenant ) # \u83b7\u53d6\u5f53\u524d\u79df\u6237\u4e0b\u6240\u6709\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required Returns: Type Description List[TenantExtensionConfig] tenant\u4e0b\u6240\u6709\u7684\u8fd0\u884c\u65f6\u914d\u7f6e listen_event ( self , tag , func ) # \u4fa6\u542c\u4e8b\u4ef6 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u7684tag required func Function \u56de\u8c03\u51fd\u6570, event, **kwargs\u4e3a\u5fc5\u6709\u53c2\u6570\u3002\u5176\u4e2d\u53ea\u6709\u5f53\u524d\u63d2\u4ef6\u7684package\u5728event.packages\u4e2d\u65f6\uff0c\u8be5\u63d2\u4ef6\u624d\u54cd\u5e94\u8be5\u4e8b\u4ef6\u3002 required load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 register_api ( self , path , method , view_func , * , tenant_path = False , auth = ninja . constants . NOT_SET_TYPE , response = ninja . constants . NOT_SET_TYPE , operation_id = None , summary = None , description = None , tags = None , deprecated = None , by_alias = False , exclude_unset = False , exclude_defaults = False , exclude_none = False , url_name = None , include_in_schema = True ) # Django-ninja\u7684\u65b9\u5f0f\u6ce8\u518c\u81ea\u5b9a\u4e49API Parameters: Name Type Description Default path str \u8bf7\u6c42\u8def\u5f84 required method str \u8bf7\u6c42\u65b9\u6cd5,\u503c\u4e3a\uff1aGET\uff0cPOST\uff0cDELETE\uff0cPUT\u7b49 required view_func Callable api\u65b9\u6cd5 required tenant_path bool \u662f\u5426\u9700\u8981tenant\u5f00\u5934\uff0c\u4e3aTure\u65f6\uff0cpath\u524d\u81ea\u52a8\u52a0\u4e0a'/tenant/{tenant_id}'\u7684\u7ed3\u6784. Defaults to False. False auth Any \u8ba4\u8bc1\u65b9\u6cd5. Defaults to NOT_SET. ninja.constants.NOT_SET_TYPE response Any response schema. Defaults to NOT_SET. ninja.constants.NOT_SET_TYPE operation_id Optional[str] Defaults to None. None summary Optional[str] Defaults to None. None description Optional[str] Defaults to None. None tags Optional[List[str]] Defaults to None. None deprecated Optional[bool] Defaults to None. None by_alias bool Defaults to False. False exclude_unset bool Defaults to False. False exclude_defaults bool Defaults to False. False exclude_none bool Defaults to False. False url_name Optional[str] Defaults to None. None include_in_schema bool Defaults to True. True Returns: Type Description str \u771f\u5b9e\u7684\u5730\u5740path register_composite_config_schema ( self , schema , composite_value , exclude = [], package = None ) # \u6ce8\u518c\u590d\u5408\u7c7b\u578b \u8fd0\u884c\u65f6\u914d\u7f6e \u7684Schema Parameters: Name Type Description Default schema class Schema\u7c7b required composite_value str \u590d\u5408\u7c7b\u578b required exclude list \u4eceschema\u7684\u5b57\u6bb5\u4e2d\u5220\u6389\u7684\u5b57\u6bb5\u5217\u8868. Defaults to []. [] package str \u81ea\u5b9a\u4e49package\u540d\u5b57\uff0c\u4e0d\u4f20\u5c31\u4f7f\u7528self.package\uff0c \u6b63\u5e38\u60c5\u51b5\u4e0d\u7528\u8bbe\u7f6e. None register_config_schema ( self , schema , schema_tag = None ) # \u6ce8\u518c\u63d2\u4ef6\u7684 \u8fd0\u884c\u65f6\u914d\u7f6e config schema Parameters: Name Type Description Default schema class schema\u7684\u7c7b required schema_tag str shema\u7684\u6807\u8bc6, \u9ed8\u8ba4\u4e3aself.package None register_event ( self , tag , name , data_schema = None , description = '' ) # \u6ce8\u518c\u4e8b\u4ef6 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u6807\u8bc6 required name str \u4e8b\u4ef6\u540d\u5b57 required data_schema schema class event.data\u7684schema. Defaults to None. None description str \u4e8b\u4ef6\u63cf\u8ff0. Defaults to ''. '' Returns: Type Description str \u771f\u5b9e\u4e8b\u4ef6\u6807\u8bc6tag\uff0c\u4e3aself.package +'.'+ tag register_event_type ( self , event_type ) # \u6ce8\u518c\u4e8b\u4ef6\u7c7b\u578b Parameters: Name Type Description Default event_type EventType \u4e8b\u4ef6\u7c7b\u578b\u5bf9\u8c61 required Returns: Type Description EventType tag = package+'.'+tag register_extend_api ( self , * api_schema_cls , ** field_definitions ) # \u6ce8\u518c\u6269\u5c55\u5185\u6838API Parameters: Name Type Description Default api_schema_cls class API Schema Class () field_definitions name=tuple(Type,Field \u9700\u8981\u589e\u52a0\u7684\u5b57\u6bb5\uff0cexample\uff1aname=(str, Field(title='\u540d\u5b57')) {} register_extend_field ( self , model_cls , model_field , alias = None ) # \u6ce8\u518c\u6269\u5c55\u6570\u636e\u5e93\u5b57\u6bb5\uff0c\u5bf9\u539f\u672c\u6570\u636e\u5e93\u5b57\u6bb5\u8fdb\u884c\u6269\u5c55 Parameters: Name Type Description Default model_cls Union[ core_expand.TenantExpandAbstract, core_expand.UserExpandAbstract, core_expand.UserGroupExpandAbstract, core_expand.AppExpandAbstract, core_expand.AppGroupExpandAbstract, ] \u6269\u5c55\u5b9a\u4e49\u7684model required model_field str \u6269\u5c55\u7684\u5b57\u6bb5 required alias str \u6269\u5c55\u5b57\u6bb5\u5728\u539fmodel\u4e2d\u7684\u522b\u540d. None\u610f\u5473\u7740\u5c31\u4f7f\u7528model_field\u4f5c\u4e3a\u5176\u5728\u539fmodel\u4e2d\u7684\u522b\u540d None Exceptions: Type Description Exception \u975e\u6cd5\u7684\u6269\u5c55\u5b57\u6bb5\u7c7b\u5bf9\u5e94\u7684\u7236\u7c7b register_front_pages ( self , page ) # \u6ce8\u518c\u524d\u7aef\u9875\u9762 Parameters: Name Type Description Default page core_pages.FrontPage \u524d\u7aef\u9875\u9762 required register_front_routers ( self , router , primary = None ) # \u6ce8\u518c\u524d\u7aef\u8def\u7531 Parameters: Name Type Description Default router core_routers.FrontRouter \u524d\u7aef\u8def\u7531\u5b9e\u4f8b required primary core_routers.FrontRouter \u4e00\u7ea7\u8def\u7531\u540d\u5b57\uff0c\u7531 core_routers \u6587\u4ef6\u63d0\u4f9b\u5b9a\u4e49. Defaults to None. None register_profile_schema ( self , schema , schema_tag = None ) # \u6ce8\u518c\u63d2\u4ef6\u914d\u7f6e profile schema Parameters: Name Type Description Default schema class schema\u7684\u7c7b required schema_tag str shema\u7684\u6807\u8bc6, \u9ed8\u8ba4\u4e3aself.package None register_routers ( self , urls_ext , tenant_urls = False ) # \u6ce8\u518c\u8def\u7531 Parameters: Name Type Description Default urls_ext List[partial] \u9700\u8981\u6ce8\u518c\u7684\u8def\u7531 required tenant_urls bool \u662f\u5426\u8981\u6dfb\u52a0 tenant/{tenant_id}/ \u524d\u7f00. Defaults to False. False register_settings_schema ( self , schema , schema_tag = None ) # \u6ce8\u518c\u63d2\u4ef6\u7684 \u79df\u6237\u914d\u7f6e settings schema Parameters: Name Type Description Default schema class schema\u7684\u7c7b required schema_tag str shema\u7684\u6807\u8bc6, \u9ed8\u8ba4\u4e3aself.package None stop ( self ) # \u63d2\u4ef6\u5378\u8f7d success ( self , data = None , ** kwargs ) # API\u63a5\u53e3\u6210\u529fdict Parameters: Name Type Description Default data dict \u6210\u529f\u65f6\u9700\u8981\u8fd4\u56de\u7684\u6570\u636e. Defaults to None. None Returns: Type Description dict \u751f\u6210\u7684\u6210\u529fdict update_or_create_settings ( self , tenant , settings , is_active , use_platform_config ) # \u66f4\u65b0\u6216\u521b\u5efa\u79df\u6237\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required settings dict \u79df\u6237\u914d\u7f6e required is_active bool \u662f\u5426\u542f\u7528 required use_platform_config bool \u662f\u5426\u4f7f\u7528\u5e73\u53f0\u914d\u7f6e required Returns: Type Description TenantExtension \u66f4\u65b0\u6216\u521b\u5efa\u7684\u5bf9\u8c61 update_tenant_config ( self , id , config , name , type ) # \u66f4\u65b0\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default id str config_id required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description bool \u66f4\u65b0\u6210\u529fTrue\uff0c\u6ca1\u6709\u627e\u5230\u8be5\u914d\u7f6e\u8fd4\u56deFalse arkid . core . extension . create_extension_schema ( name , file_path , fields = None , base_schema =< class ' ninja . schema . Schema '>, exclude=[]) # \u63d0\u4f9b\u7ed9\u63d2\u4ef6\u7528\u6765\u521b\u5efaSchema\u7684\u65b9\u6cd5 \u6ce8\u610f \u63d2\u4ef6\u5fc5\u987b\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u5b9a\u4e49Schema,\u907f\u514d\u4e0e\u5176\u5b83Schema\u7684\u547d\u540d\u51b2\u7a81 Parameters: Name Type Description Default name str Schema\u7684\u7c7b\u540d required file_path str \u6307\u63d2\u4ef6__init__.py\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84, \u7528\u6765\u901a\u8fc7\u63d2\u4ef6\u7684config.toml\u6587\u4ef6\u83b7\u53d6package,\u4ece\u800c\u907f\u514dschema\u7684\u547d\u540d\u51b2\u7a81 required fields Optional[List[Tuple[str, Any, Any]]] Schema\u7684\u5b57\u6bb5\u5b9a\u4e49 None base_schema Type[Schema] Schema\u7684\u57fa\u7c7b. \u9ed8\u8ba4\u4e3a: ninja.Schema <class 'ninja.schema.Schema'> Returns: Type Description ninja.Schema \u521b\u5efa\u7684Schema\u7c7b arkid . core . extension . create_extension_schema_by_package ( name , package = '' , fields = None , base_schema =< class ' ninja . schema . Schema '>, exclude=[]) # \u63d0\u4f9b\u7ed9\u63d2\u4ef6\u7528\u6765\u521b\u5efaSchema\u7684\u65b9\u6cd5 \u6ce8\u610f \u63d2\u4ef6\u5fc5\u987b\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u5b9a\u4e49Schema,\u907f\u514d\u4e0e\u5176\u5b83Schema\u7684\u547d\u540d\u51b2\u7a81 Parameters: Name Type Description Default name str Schema\u7684\u7c7b\u540d required package str \u5982\u679c\u662f\u63d2\u4ef6\u8c03\u7528\u7684\u8be5\u65b9\u6cd5,\u4e00\u5b9a\u8981\u5c06\u63d2\u4ef6\u7684package\u4f20\u8fc7\u6765,\u4ee5\u907f\u514d\u547d\u540d\u51b2\u7a81 '' fields Optional[List[Tuple[str, Any, Any]]] Schema\u7684\u5b57\u6bb5\u5b9a\u4e49 None base_schema Type[Schema] Schema\u7684\u57fa\u7c7b. \u9ed8\u8ba4\u4e3a: ninja.Schema <class 'ninja.schema.Schema'> Returns: Type Description ninja.Schema \u521b\u5efa\u7684Schema\u7c7b arkid . core . extension . create_extension_schema_from_django_model ( model , * , name = '' , depth = 0 , fields = None , exclude = None , custom_fields = None , base_class =< class ' ninja . schema . Schema '>) # \u63d0\u4f9b\u7ed9\u63d2\u4ef6\u901a\u8fc7Django.Model\u521b\u5efaSchema\u7684\u65b9\u6cd5 \u6ce8\u610f \u63d2\u4ef6\u5fc5\u987b\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u5b9a\u4e49Schema,\u907f\u514d\u4e0e\u5176\u5b83Schema\u7684\u547d\u540d\u51b2\u7a81 Parameters: Name Type Description Default model Type[Model] \u57fa\u4e8e\u7684 Django Model required name str Schema\u7684\u7c7b\u540d. '' depth int \u904d\u5386Django Model\u7684\u6df1\u5ea6. 0 fields Optional[List[str]] \u4eceDjango Model\u4e2d\u83b7\u53d6\u7684\u5b57\u6bb5\u540d, \u5982\u679c\u662f\u6240\u6709\u7684\u5c31\u8bbe\u4e3a __all__ . None exclude Optional[List[str]] \u4eceDjango Model\u4e2d\u6392\u9664\u7684\u5b57\u6bb5\u540d. None custom_fields Optional[List[Tuple[str, Any, Any]]] \u6dfb\u52a0\u7684\u81ea\u5b9a\u4e49\u5b57\u6bb5. None base_class Type[Schema] Schema\u7684\u57fa\u7c7b. <class 'ninja.schema.Schema'> Returns: Type Description ninjia.Schema \u65b0\u521b\u5efa\u7684Schema\u7c7b","title":"\u63d2\u4ef6\u57fa\u7c7b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#_1","text":"\u63d2\u4ef6\u6700\u57fa\u7840\u7684\u57fa\u7c7b\u4e3a arkid.core.extension.Extension \u652f\u6301\u70ed\u62d4\u63d2\u7684\u6838\u5fc3\u65b9\u6cd5\u4e3a start() \u4e0e stop() \u5206\u522b\u4f1a\u8c03\u7528 load() \u4e0e unload() \u65b9\u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u662f\u5404\u4e2a\u63d2\u4ef6\u5b50\u7c7b\u4e2d\uff0c\u7528\u6765\u81ea\u5b9a\u4e49\u5b89\u88c5\u4e0e\u5378\u8f7d\u65f6\u6240\u505a\u7684\u64cd\u4f5c load() \u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u8981\u6c42\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u5e94\u5b9e\u73b0\u3002 unload() \u4e5f\u53ef\u4ee5\u88ab\u91cd\u8f7d\u3002\u4f1a\u5c06\u6240\u6709load()\u8fc7\u7a0b\u4e2d\u6ce8\u518c\u8fc7\u7684API\uff0c\u4e8b\u4ef6\uff0c\u7b49\u7b49\u8fdb\u884c\u9500\u6bc1\u3002 \u56e0\u6b64\uff0c\u5728\u63d2\u4ef6\u4e2d\u5c3d\u91cf\u907f\u514d\u76f4\u63a5\u4f7f\u7528\u5185\u6838\u7684API\uff0c\u800c\u8981\u4f7f\u7528\u63d2\u4ef6\u4e2d\u5c01\u88c5\u597d\u7684\u4ee5 register \u5f00\u5934\u7684\u65b9\u6cd5\u3002\u8c03\u7528 register \u7c7b\u578b\u7684\u65b9\u6cd5\u65f6\uff0c\u76f8\u5173\u64cd\u4f5c\u7684\u9500\u6bc1\u90fd\u4f1a\u5728stop\u4e2d\u5df2\u7ecf\u6267\u884c\uff0c\u4e0d\u9700\u8981\u5728unload\u4e2d\u53bb\u505a\u3002 \u90e8\u5206\u5bf9\u9875\u9762\u5185\u5bb9\u7684\u66f4\u6539\uff0c\u6bd4\u5982actions\u76f8\u5173\u4fee\u6539\uff0c\u5219\u9700\u8981\u5728unload\u4e2d\u663e\u793a\u7684\u9500\u6bc1\u3002 \u63d0\u793a \u4e8b\u5b9e\u4e0a\uff0c\u5728\u8c03\u7528 start() \u524d\u4f1a\u8fdb\u884c migrate \uff0c\u662f\u7684\uff01\u63d2\u4ef6\u5185\u7684 migrations \u4f9d\u7136\u6709\u6548\u3002","title":"\u63d2\u4ef6\u57fa\u7c7b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension","text":"Parameters: Name Type Description Default name str, \u63d2\u4ef6\u540d\u5b57\uff0cpackage\u4e2d\u70b9\u201c.\u201d\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\"_\" None","title":"Extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.ext_dir","text":"\u63d2\u4ef6\u5b8c\u6574\u8def\u5f84\uff0c\u7528.\u5206\u9694","title":"ext_dir"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.full_name","text":"\u63d2\u4ef6\u5b8c\u6574\u8def\u5f84\uff0c\u7528/\u5206\u9694","title":"full_name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.model","text":"\u63d2\u4ef6\u5bf9\u5e94\u6570\u636e\u5e93model","title":"model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.__init__","text":"summary Parameters: Name Type Description Default package str \u63d2\u4ef6\u5305\u540d\uff0c\u552f\u4e00\u6807\u8bc6 None version str \u7248\u672c\u53f7 None name str \u540d\u79f0 None logo str \u63d2\u4ef6\u7684\u56fe\u6807 None description str \u63cf\u8ff0 None labels List[str] \u6807\u7b7e None homepage str \u4e3b\u9875\uff0cURL None author str \u4f5c\u8005 None","title":"__init__()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.create_composite_config_schema","text":"\u521b\u9020\u590d\u5408\u7c7b\u578b \u8fd0\u884c\u65f6\u914d\u7f6e \u7684Schema Parameters: Name Type Description Default schema_cls_name str \u590d\u5408\u7c7b\u578b\u8fd0\u884c\u65f6\u914d\u7f6e\u7684Schema\u7684\u540d\u5b57 required exclude list \u53bb\u6389\u7684\u5b57\u6bb5\u5217\u8868. Defaults to []. [] Returns: Type Description Schema \u521b\u5efa\u597d\u7684Schema","title":"create_composite_config_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.create_config_schema","text":"\u521b\u5efa\u5e76\u8fd4\u56de\u63d2\u4ef6 \u8fd0\u884c\u65f6\u914d\u7f6e \u7684Schema Parameters: Name Type Description Default name str \u9700\u8981\u521b\u5efa\u7684 Schema Class \u7684\u540d\u5b57 required field_definitions Any \u4efb\u610f\u6570\u91cf\u7684field,\u683c\u5f0f\u4e3a: field_name=(field_type, Field(...)) {}","title":"create_config_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.create_profile_schema","text":"\u521b\u5efa\u5e76\u8fd4\u56de\u63d2\u4ef6\u914d\u7f6e\u7684Schema Parameters: Name Type Description Default name str \u9700\u8981\u521b\u5efa\u7684 Schema Class \u7684\u540d\u5b57 required field_definitions Any \u4efb\u610f\u6570\u91cf\u7684field,\u683c\u5f0f\u4e3a: field_name=(field_type, Field(...)) {}","title":"create_profile_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.create_settings_schema","text":"\u521b\u5efa\u5e76\u8fd4\u56de\u63d2\u4ef6 \u79df\u6237\u914d\u7f6e(settings) \u7684Schema Parameters: Name Type Description Default name str \u9700\u8981\u521b\u5efa\u7684 Schema Class \u7684\u540d\u5b57 required field_definitions Any \u4efb\u610f\u6570\u91cf\u7684field,\u683c\u5f0f\u4e3a: field_name=(field_type, Field(...)) {}","title":"create_settings_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.create_tenant_config","text":"\u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61","title":"create_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.delete_tenant_config","text":"\u5220\u9664\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default id str config_id required Returns: Type Description TenantExtensionConfig \u5220\u9664\u7684\u5bf9\u8c61","title":"delete_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.dispatch_event","text":"\u629b\u51fa\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u4e8b\u4ef6\u5b9e\u4f8b required Returns: Type Description (tuple[Function, Result]) \u4e8b\u4ef6\u5904\u7406\u7684\u8fd4\u56de\u503c","title":"dispatch_event()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.error","text":"API\u63a5\u53e3\u9519\u8befdict Parameters: Name Type Description Default enum Enum \u9519\u8bef\u7684\u679a\u4e3e\u7c7b\uff0c\u5982\u679c\u4e3aNone\uff0c\u6807\u8bc6\u6210\u529f\u8fd4\u56de. Defaults to None. None Returns: Type Description dict \u751f\u6210\u7684\u9519\u8befdict","title":"error()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.get_config_by_id","text":"\u901a\u8fc7config_id\u6765\u83b7\u53d6config Parameters: Name Type Description Default id UUID config_id required Returns: Type Description TenantExtensionConfig config","title":"get_config_by_id()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.get_settings","text":"\u83b7\u53d6\u79df\u6237\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required Returns: Type Description TenantExtension \u79df\u6237\u914d\u7f6e","title":"get_settings()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.get_tenant_configs","text":"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u4e0b\u6240\u6709\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required Returns: Type Description List[TenantExtensionConfig] tenant\u4e0b\u6240\u6709\u7684\u8fd0\u884c\u65f6\u914d\u7f6e","title":"get_tenant_configs()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.listen_event","text":"\u4fa6\u542c\u4e8b\u4ef6 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u7684tag required func Function \u56de\u8c03\u51fd\u6570, event, **kwargs\u4e3a\u5fc5\u6709\u53c2\u6570\u3002\u5176\u4e2d\u53ea\u6709\u5f53\u524d\u63d2\u4ef6\u7684package\u5728event.packages\u4e2d\u65f6\uff0c\u8be5\u63d2\u4ef6\u624d\u54cd\u5e94\u8be5\u4e8b\u4ef6\u3002 required","title":"listen_event()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_api","text":"Django-ninja\u7684\u65b9\u5f0f\u6ce8\u518c\u81ea\u5b9a\u4e49API Parameters: Name Type Description Default path str \u8bf7\u6c42\u8def\u5f84 required method str \u8bf7\u6c42\u65b9\u6cd5,\u503c\u4e3a\uff1aGET\uff0cPOST\uff0cDELETE\uff0cPUT\u7b49 required view_func Callable api\u65b9\u6cd5 required tenant_path bool \u662f\u5426\u9700\u8981tenant\u5f00\u5934\uff0c\u4e3aTure\u65f6\uff0cpath\u524d\u81ea\u52a8\u52a0\u4e0a'/tenant/{tenant_id}'\u7684\u7ed3\u6784. Defaults to False. False auth Any \u8ba4\u8bc1\u65b9\u6cd5. Defaults to NOT_SET. ninja.constants.NOT_SET_TYPE response Any response schema. Defaults to NOT_SET. ninja.constants.NOT_SET_TYPE operation_id Optional[str] Defaults to None. None summary Optional[str] Defaults to None. None description Optional[str] Defaults to None. None tags Optional[List[str]] Defaults to None. None deprecated Optional[bool] Defaults to None. None by_alias bool Defaults to False. False exclude_unset bool Defaults to False. False exclude_defaults bool Defaults to False. False exclude_none bool Defaults to False. False url_name Optional[str] Defaults to None. None include_in_schema bool Defaults to True. True Returns: Type Description str \u771f\u5b9e\u7684\u5730\u5740path","title":"register_api()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_composite_config_schema","text":"\u6ce8\u518c\u590d\u5408\u7c7b\u578b \u8fd0\u884c\u65f6\u914d\u7f6e \u7684Schema Parameters: Name Type Description Default schema class Schema\u7c7b required composite_value str \u590d\u5408\u7c7b\u578b required exclude list \u4eceschema\u7684\u5b57\u6bb5\u4e2d\u5220\u6389\u7684\u5b57\u6bb5\u5217\u8868. Defaults to []. [] package str \u81ea\u5b9a\u4e49package\u540d\u5b57\uff0c\u4e0d\u4f20\u5c31\u4f7f\u7528self.package\uff0c \u6b63\u5e38\u60c5\u51b5\u4e0d\u7528\u8bbe\u7f6e. None","title":"register_composite_config_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_config_schema","text":"\u6ce8\u518c\u63d2\u4ef6\u7684 \u8fd0\u884c\u65f6\u914d\u7f6e config schema Parameters: Name Type Description Default schema class schema\u7684\u7c7b required schema_tag str shema\u7684\u6807\u8bc6, \u9ed8\u8ba4\u4e3aself.package None","title":"register_config_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_event","text":"\u6ce8\u518c\u4e8b\u4ef6 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u6807\u8bc6 required name str \u4e8b\u4ef6\u540d\u5b57 required data_schema schema class event.data\u7684schema. Defaults to None. None description str \u4e8b\u4ef6\u63cf\u8ff0. Defaults to ''. '' Returns: Type Description str \u771f\u5b9e\u4e8b\u4ef6\u6807\u8bc6tag\uff0c\u4e3aself.package +'.'+ tag","title":"register_event()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_event_type","text":"\u6ce8\u518c\u4e8b\u4ef6\u7c7b\u578b Parameters: Name Type Description Default event_type EventType \u4e8b\u4ef6\u7c7b\u578b\u5bf9\u8c61 required Returns: Type Description EventType tag = package+'.'+tag","title":"register_event_type()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_extend_api","text":"\u6ce8\u518c\u6269\u5c55\u5185\u6838API Parameters: Name Type Description Default api_schema_cls class API Schema Class () field_definitions name=tuple(Type,Field \u9700\u8981\u589e\u52a0\u7684\u5b57\u6bb5\uff0cexample\uff1aname=(str, Field(title='\u540d\u5b57')) {}","title":"register_extend_api()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_extend_field","text":"\u6ce8\u518c\u6269\u5c55\u6570\u636e\u5e93\u5b57\u6bb5\uff0c\u5bf9\u539f\u672c\u6570\u636e\u5e93\u5b57\u6bb5\u8fdb\u884c\u6269\u5c55 Parameters: Name Type Description Default model_cls Union[ core_expand.TenantExpandAbstract, core_expand.UserExpandAbstract, core_expand.UserGroupExpandAbstract, core_expand.AppExpandAbstract, core_expand.AppGroupExpandAbstract, ] \u6269\u5c55\u5b9a\u4e49\u7684model required model_field str \u6269\u5c55\u7684\u5b57\u6bb5 required alias str \u6269\u5c55\u5b57\u6bb5\u5728\u539fmodel\u4e2d\u7684\u522b\u540d. None\u610f\u5473\u7740\u5c31\u4f7f\u7528model_field\u4f5c\u4e3a\u5176\u5728\u539fmodel\u4e2d\u7684\u522b\u540d None Exceptions: Type Description Exception \u975e\u6cd5\u7684\u6269\u5c55\u5b57\u6bb5\u7c7b\u5bf9\u5e94\u7684\u7236\u7c7b","title":"register_extend_field()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_front_pages","text":"\u6ce8\u518c\u524d\u7aef\u9875\u9762 Parameters: Name Type Description Default page core_pages.FrontPage \u524d\u7aef\u9875\u9762 required","title":"register_front_pages()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_front_routers","text":"\u6ce8\u518c\u524d\u7aef\u8def\u7531 Parameters: Name Type Description Default router core_routers.FrontRouter \u524d\u7aef\u8def\u7531\u5b9e\u4f8b required primary core_routers.FrontRouter \u4e00\u7ea7\u8def\u7531\u540d\u5b57\uff0c\u7531 core_routers \u6587\u4ef6\u63d0\u4f9b\u5b9a\u4e49. Defaults to None. None","title":"register_front_routers()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_profile_schema","text":"\u6ce8\u518c\u63d2\u4ef6\u914d\u7f6e profile schema Parameters: Name Type Description Default schema class schema\u7684\u7c7b required schema_tag str shema\u7684\u6807\u8bc6, \u9ed8\u8ba4\u4e3aself.package None","title":"register_profile_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_routers","text":"\u6ce8\u518c\u8def\u7531 Parameters: Name Type Description Default urls_ext List[partial] \u9700\u8981\u6ce8\u518c\u7684\u8def\u7531 required tenant_urls bool \u662f\u5426\u8981\u6dfb\u52a0 tenant/{tenant_id}/ \u524d\u7f00. Defaults to False. False","title":"register_routers()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.register_settings_schema","text":"\u6ce8\u518c\u63d2\u4ef6\u7684 \u79df\u6237\u914d\u7f6e settings schema Parameters: Name Type Description Default schema class schema\u7684\u7c7b required schema_tag str shema\u7684\u6807\u8bc6, \u9ed8\u8ba4\u4e3aself.package None","title":"register_settings_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.stop","text":"\u63d2\u4ef6\u5378\u8f7d","title":"stop()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.success","text":"API\u63a5\u53e3\u6210\u529fdict Parameters: Name Type Description Default data dict \u6210\u529f\u65f6\u9700\u8981\u8fd4\u56de\u7684\u6570\u636e. Defaults to None. None Returns: Type Description dict \u751f\u6210\u7684\u6210\u529fdict","title":"success()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.update_or_create_settings","text":"\u66f4\u65b0\u6216\u521b\u5efa\u79df\u6237\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required settings dict \u79df\u6237\u914d\u7f6e required is_active bool \u662f\u5426\u542f\u7528 required use_platform_config bool \u662f\u5426\u4f7f\u7528\u5e73\u53f0\u914d\u7f6e required Returns: Type Description TenantExtension \u66f4\u65b0\u6216\u521b\u5efa\u7684\u5bf9\u8c61","title":"update_or_create_settings()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.Extension.update_tenant_config","text":"\u66f4\u65b0\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default id str config_id required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description bool \u66f4\u65b0\u6210\u529fTrue\uff0c\u6ca1\u6709\u627e\u5230\u8be5\u914d\u7f6e\u8fd4\u56deFalse","title":"update_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.create_extension_schema","text":"\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u7528\u6765\u521b\u5efaSchema\u7684\u65b9\u6cd5 \u6ce8\u610f \u63d2\u4ef6\u5fc5\u987b\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u5b9a\u4e49Schema,\u907f\u514d\u4e0e\u5176\u5b83Schema\u7684\u547d\u540d\u51b2\u7a81 Parameters: Name Type Description Default name str Schema\u7684\u7c7b\u540d required file_path str \u6307\u63d2\u4ef6__init__.py\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84, \u7528\u6765\u901a\u8fc7\u63d2\u4ef6\u7684config.toml\u6587\u4ef6\u83b7\u53d6package,\u4ece\u800c\u907f\u514dschema\u7684\u547d\u540d\u51b2\u7a81 required fields Optional[List[Tuple[str, Any, Any]]] Schema\u7684\u5b57\u6bb5\u5b9a\u4e49 None base_schema Type[Schema] Schema\u7684\u57fa\u7c7b. \u9ed8\u8ba4\u4e3a: ninja.Schema <class 'ninja.schema.Schema'> Returns: Type Description ninja.Schema \u521b\u5efa\u7684Schema\u7c7b","title":"create_extension_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.create_extension_schema_by_package","text":"\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u7528\u6765\u521b\u5efaSchema\u7684\u65b9\u6cd5 \u6ce8\u610f \u63d2\u4ef6\u5fc5\u987b\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u5b9a\u4e49Schema,\u907f\u514d\u4e0e\u5176\u5b83Schema\u7684\u547d\u540d\u51b2\u7a81 Parameters: Name Type Description Default name str Schema\u7684\u7c7b\u540d required package str \u5982\u679c\u662f\u63d2\u4ef6\u8c03\u7528\u7684\u8be5\u65b9\u6cd5,\u4e00\u5b9a\u8981\u5c06\u63d2\u4ef6\u7684package\u4f20\u8fc7\u6765,\u4ee5\u907f\u514d\u547d\u540d\u51b2\u7a81 '' fields Optional[List[Tuple[str, Any, Any]]] Schema\u7684\u5b57\u6bb5\u5b9a\u4e49 None base_schema Type[Schema] Schema\u7684\u57fa\u7c7b. \u9ed8\u8ba4\u4e3a: ninja.Schema <class 'ninja.schema.Schema'> Returns: Type Description ninja.Schema \u521b\u5efa\u7684Schema\u7c7b","title":"create_extension_schema_by_package()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%B1%BB/#arkid.core.extension.create_extension_schema_from_django_model","text":"\u63d0\u4f9b\u7ed9\u63d2\u4ef6\u901a\u8fc7Django.Model\u521b\u5efaSchema\u7684\u65b9\u6cd5 \u6ce8\u610f \u63d2\u4ef6\u5fc5\u987b\u4f7f\u7528\u6b64\u65b9\u6cd5\u6765\u5b9a\u4e49Schema,\u907f\u514d\u4e0e\u5176\u5b83Schema\u7684\u547d\u540d\u51b2\u7a81 Parameters: Name Type Description Default model Type[Model] \u57fa\u4e8e\u7684 Django Model required name str Schema\u7684\u7c7b\u540d. '' depth int \u904d\u5386Django Model\u7684\u6df1\u5ea6. 0 fields Optional[List[str]] \u4eceDjango Model\u4e2d\u83b7\u53d6\u7684\u5b57\u6bb5\u540d, \u5982\u679c\u662f\u6240\u6709\u7684\u5c31\u8bbe\u4e3a __all__ . None exclude Optional[List[str]] \u4eceDjango Model\u4e2d\u6392\u9664\u7684\u5b57\u6bb5\u540d. None custom_fields Optional[List[Tuple[str, Any, Any]]] \u6dfb\u52a0\u7684\u81ea\u5b9a\u4e49\u5b57\u6bb5. None base_class Type[Schema] Schema\u7684\u57fa\u7c7b. <class 'ninja.schema.Schema'> Returns: Type Description ninjia.Schema \u65b0\u521b\u5efa\u7684Schema\u7c7b","title":"create_extension_schema_from_django_model()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/","text":"API # ArkID\u57fa\u4e8eDjango-ninja\u6846\u67b6\u6765\u5f00\u53d1API\uff0c\u5b8c\u6574\u7ee7\u627f\u4e86\u5176\u6240\u6709\u80fd\u529b\u3002 \u81ea\u5b9a\u4e49API # \u53ef\u4ee5\u901a\u8fc7 Django-ninja \u4e0e Django\u539f\u751f \u4e24\u79cd\u65b9\u5f0f\u6765\u81ea\u5b9a\u4e49API\u3002 \u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0cDjango-ninja\u65b9\u5f0f\u5b9a\u4e49\u4f1a\u81ea\u52a8\u51fa\u73b0\u5728openapi.json\u4e2d,\u5e76\u4f9d\u8d56Schema\uff0cDjango\u539f\u751f\u5219\u4e0d\u4f1a\u6216\u4e0d\u9700\u8981\u3002 Django-ninja \u7684 API \u5b9a\u4e49\u65b9\u5f0f # \u4f7f\u7528 arkid.core.extension.Extension.register_api \u521b\u5efaSchema # \u4f7f\u7528 arkid.core.extension.create_extension_schema \u6ce8\u610f\uff01\u8be5\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u662f\u6307\u7684\u63d2\u4ef6\u7684 __init__.py \u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55 \u793a\u4f8b from arkid.core import extension class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_api ( '/path/' , 'GET' , self . api_func ) def api_func ( self , request ): pass \u6743\u9650 # {todo} \u5206\u9875 # arkid\u63d0\u4f9b\u57fa\u7840\u5206\u9875\u5668\u529f\u80fd\uff0c\u5176\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u5206\u9875 ... from ninja.pagination import paginate #\u5f15\u5165\u5206\u9875\u88c5\u9970\u5668 from arkid.core.pagenation import CustomPagination #\u5f15\u5165\u5206\u9875\u5668 ... # \u58f0\u660e\u8fd4\u56de\u5217\u8868\u9879\u7ed3\u6784 class AppGroupListItemOut ( Schema ): id : str name : str # \u58f0\u660e\u8fd4\u56de\u7ed3\u6784\u4f53 class AppGroupListOut ( ResponseSchema ): data : List [ AppGroupListItemOut ] @api . get ( \"/path/\" , response = List [ AppGroupListItemOut ]) #\u6ce8\u610f \u6b64\u5904\u56e0\u5206\u9875\u5668\u4f1a\u81ea\u52a8\u5c01\u88c5\u9519\u8bef\u63d0\u793a\u7b49\u6570\u636e \u6545\u800c\u6b64\u5904\u4e0d\u9700\u8981\u586b\u5199\u5c01\u88c5\u9519\u8bef\u4fe1\u606f\u540e\u7684Schema @operation ( AppGroupListOut ) @paginate ( CustomPagination ) def get_app_groups ( request , tenant_id : str ): \"\"\" \u5e94\u7528\u5206\u7ec4\u5217\u8868 \"\"\" groups = AppGroup . expand_objects . filter ( tenant__id = tenant_id ) parent_id = query_data . dict () . get ( \"parent_id\" , None ) groups = groups . filter ( parent__id = parent_id ) return groups . all () Django \u7684 API \u5b9a\u4e49\u65b9\u5f0f # \u4f7f\u7528 arkid.core.extension.Extension.register_routers \u793a\u4f8b from arkid.core import extension from django.urls import re_path from django class CaseExtension ( extension . Extension ): def load ( self ): super () . load () class CaseView ( View ): def post ( self , request ): pass path_list = [ re_path ( rf '^/path/$' , self . api_func ), re_path ( rf '^/path2/$' , CaseView . as_view ()), ] self . register_routers ( path_list ) def api_func ( self , request ): pass \u4fee\u6539\u5185\u6838API # \u5fc5\u8981\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u66f4\u6539\u539f\u5185\u6838\u4e2d\u7684API\u3002 \u4fee\u6539request # \u4fee\u6539request\uff0c\u5c31\u662f\u4fee\u6539API\u76f8\u5173\u7684Request Schema. \u4e4b\u540e\uff0c\u6211\u4eec\u5e0c\u671b\u83b7\u53d6\u8be5request\uff0c\u5e76\u6267\u884c\u81ea\u5b9a\u4e49\u7684\u903b\u8f91. \u5728\u6bcf\u4e2aAPI\u54cd\u5e94\u4e4b\u524d\uff0c\u90fd\u4f1a\u629b\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4e8b\u4ef6tag\u4e3a: operation_id + '_pre' , \u4fa6\u542c\u8be5\u4e8b\u4ef6\u5373\u53ef\u83b7\u53d6request\u5bf9\u8c61 \u63d0\u793a operation_id \u53ef\u4ee5\u5728 openapi.json \u4e2d\u67e5\u627e \u4f7f\u7528 arkid.core.extension.Extension.register_extend_api arkid.core.extension.Extension.listen_event \u793a\u4f8b from arkid.core import extension from api.v1.views.app import AppConfigSchemaIn class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_extend_api ( AppConfigSchemaIn , case1 = str , case2 = ( str , Field ( title = 'case2_name' ))) self . listen_event ( 'api_v1_views_app_list_apps_pre' , self . app_list_pre_handler ) def app_list_pre_handler ( self , event , ** kwargs ): print ( event . request . case1 ) print ( event . request . case2 ) \u4fee\u6539response # \u4fee\u6539response\uff0c\u9664\u4e86\u8981\u4fee\u6539Response Schema\u4ee5\u5916\uff0c\u8fd8\u9700\u8981\u771f\u7684\u6539\u53d8\u6700\u7ec8\u7684\u8fd4\u56de\u503c \u5728\u6bcf\u4e2aAPI\u54cd\u5e94\u5b8c\u6bd5\u4e4b\u540e\uff0c\u4e5f\u4f1a\u629b\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u7684tag\u4e3a operation_id\uff0c \u4fa6\u542c\u8be5\u4e8b\u4ef6\u5e76\u4fee\u6539\u4e8b\u4ef6\u4e2d\u7684reponse\u5373\u53ef\u3002 \u4f7f\u7528 arkid.core.extension.Extension.register_extend_api arkid.core.extension.Extension.listen_event \u793a\u4f8b from arkid.core import extension from api.v1.views.app import AppConfigSchemaOut class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_extend_api ( AppConfigSchemaOut , case1 = str , case2 = ( str , Field ( title = 'case2_name' ))) self . listen_event ( 'api_v1_views_app_list_apps' , self . app_list_handler ) def app_list_pre_handler ( self , event , ** kwargs ): event . response [ 'case1' ] = 'case1' event . response [ 'case2' ] = 'case2'","title":"API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#api","text":"ArkID\u57fa\u4e8eDjango-ninja\u6846\u67b6\u6765\u5f00\u53d1API\uff0c\u5b8c\u6574\u7ee7\u627f\u4e86\u5176\u6240\u6709\u80fd\u529b\u3002","title":"API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#api_1","text":"\u53ef\u4ee5\u901a\u8fc7 Django-ninja \u4e0e Django\u539f\u751f \u4e24\u79cd\u65b9\u5f0f\u6765\u81ea\u5b9a\u4e49API\u3002 \u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0cDjango-ninja\u65b9\u5f0f\u5b9a\u4e49\u4f1a\u81ea\u52a8\u51fa\u73b0\u5728openapi.json\u4e2d,\u5e76\u4f9d\u8d56Schema\uff0cDjango\u539f\u751f\u5219\u4e0d\u4f1a\u6216\u4e0d\u9700\u8981\u3002","title":"\u81ea\u5b9a\u4e49API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#django-ninja-api","text":"\u4f7f\u7528 arkid.core.extension.Extension.register_api","title":"Django-ninja \u7684 API \u5b9a\u4e49\u65b9\u5f0f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#schema","text":"\u4f7f\u7528 arkid.core.extension.create_extension_schema \u6ce8\u610f\uff01\u8be5\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u662f\u6307\u7684\u63d2\u4ef6\u7684 __init__.py \u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55 \u793a\u4f8b from arkid.core import extension class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_api ( '/path/' , 'GET' , self . api_func ) def api_func ( self , request ): pass","title":"\u521b\u5efaSchema"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#_1","text":"{todo}","title":"\u6743\u9650"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#_2","text":"arkid\u63d0\u4f9b\u57fa\u7840\u5206\u9875\u5668\u529f\u80fd\uff0c\u5176\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u5206\u9875 ... from ninja.pagination import paginate #\u5f15\u5165\u5206\u9875\u88c5\u9970\u5668 from arkid.core.pagenation import CustomPagination #\u5f15\u5165\u5206\u9875\u5668 ... # \u58f0\u660e\u8fd4\u56de\u5217\u8868\u9879\u7ed3\u6784 class AppGroupListItemOut ( Schema ): id : str name : str # \u58f0\u660e\u8fd4\u56de\u7ed3\u6784\u4f53 class AppGroupListOut ( ResponseSchema ): data : List [ AppGroupListItemOut ] @api . get ( \"/path/\" , response = List [ AppGroupListItemOut ]) #\u6ce8\u610f \u6b64\u5904\u56e0\u5206\u9875\u5668\u4f1a\u81ea\u52a8\u5c01\u88c5\u9519\u8bef\u63d0\u793a\u7b49\u6570\u636e \u6545\u800c\u6b64\u5904\u4e0d\u9700\u8981\u586b\u5199\u5c01\u88c5\u9519\u8bef\u4fe1\u606f\u540e\u7684Schema @operation ( AppGroupListOut ) @paginate ( CustomPagination ) def get_app_groups ( request , tenant_id : str ): \"\"\" \u5e94\u7528\u5206\u7ec4\u5217\u8868 \"\"\" groups = AppGroup . expand_objects . filter ( tenant__id = tenant_id ) parent_id = query_data . dict () . get ( \"parent_id\" , None ) groups = groups . filter ( parent__id = parent_id ) return groups . all ()","title":"\u5206\u9875"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#django-api","text":"\u4f7f\u7528 arkid.core.extension.Extension.register_routers \u793a\u4f8b from arkid.core import extension from django.urls import re_path from django class CaseExtension ( extension . Extension ): def load ( self ): super () . load () class CaseView ( View ): def post ( self , request ): pass path_list = [ re_path ( rf '^/path/$' , self . api_func ), re_path ( rf '^/path2/$' , CaseView . as_view ()), ] self . register_routers ( path_list ) def api_func ( self , request ): pass","title":"Django \u7684 API \u5b9a\u4e49\u65b9\u5f0f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#api_2","text":"\u5fc5\u8981\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u66f4\u6539\u539f\u5185\u6838\u4e2d\u7684API\u3002","title":"\u4fee\u6539\u5185\u6838API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#request","text":"\u4fee\u6539request\uff0c\u5c31\u662f\u4fee\u6539API\u76f8\u5173\u7684Request Schema. \u4e4b\u540e\uff0c\u6211\u4eec\u5e0c\u671b\u83b7\u53d6\u8be5request\uff0c\u5e76\u6267\u884c\u81ea\u5b9a\u4e49\u7684\u903b\u8f91. \u5728\u6bcf\u4e2aAPI\u54cd\u5e94\u4e4b\u524d\uff0c\u90fd\u4f1a\u629b\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4e8b\u4ef6tag\u4e3a: operation_id + '_pre' , \u4fa6\u542c\u8be5\u4e8b\u4ef6\u5373\u53ef\u83b7\u53d6request\u5bf9\u8c61 \u63d0\u793a operation_id \u53ef\u4ee5\u5728 openapi.json \u4e2d\u67e5\u627e \u4f7f\u7528 arkid.core.extension.Extension.register_extend_api arkid.core.extension.Extension.listen_event \u793a\u4f8b from arkid.core import extension from api.v1.views.app import AppConfigSchemaIn class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_extend_api ( AppConfigSchemaIn , case1 = str , case2 = ( str , Field ( title = 'case2_name' ))) self . listen_event ( 'api_v1_views_app_list_apps_pre' , self . app_list_pre_handler ) def app_list_pre_handler ( self , event , ** kwargs ): print ( event . request . case1 ) print ( event . request . case2 )","title":"\u4fee\u6539request"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/API/#response","text":"\u4fee\u6539response\uff0c\u9664\u4e86\u8981\u4fee\u6539Response Schema\u4ee5\u5916\uff0c\u8fd8\u9700\u8981\u771f\u7684\u6539\u53d8\u6700\u7ec8\u7684\u8fd4\u56de\u503c \u5728\u6bcf\u4e2aAPI\u54cd\u5e94\u5b8c\u6bd5\u4e4b\u540e\uff0c\u4e5f\u4f1a\u629b\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u7684tag\u4e3a operation_id\uff0c \u4fa6\u542c\u8be5\u4e8b\u4ef6\u5e76\u4fee\u6539\u4e8b\u4ef6\u4e2d\u7684reponse\u5373\u53ef\u3002 \u4f7f\u7528 arkid.core.extension.Extension.register_extend_api arkid.core.extension.Extension.listen_event \u793a\u4f8b from arkid.core import extension from api.v1.views.app import AppConfigSchemaOut class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_extend_api ( AppConfigSchemaOut , case1 = str , case2 = ( str , Field ( title = 'case2_name' ))) self . listen_event ( 'api_v1_views_app_list_apps' , self . app_list_handler ) def app_list_pre_handler ( self , event , ** kwargs ): event . response [ 'case1' ] = 'case1' event . response [ 'case2' ] = 'case2'","title":"\u4fee\u6539response"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/Pip%E4%BE%9D%E8%B5%96/","text":"Pip\u4f9d\u8d56 # \u5f53\u63d2\u4ef6\u9700\u8981\u989d\u5916\u7684\u4f9d\u8d56\u5305\u65f6\uff0c\u53ea\u9700\u8981\u5c06\u63d2\u4ef6\u7684requirements.txt\u6587\u4ef6\u751f\u6210\u5e76\u653e\u5728\u6839\u76ee\u5f55\u4e0b\u5373\u53ef ArkID\u4f1a\u5728\u52a0\u8f7d\u63d2\u4ef6\u4e4b\u524d\u81ea\u52a8\u5b89\u88c5requirements.txt\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u4f9d\u8d56\u5305\u3002 requirements.txt alibabacloud-dysmsapi20170525==2.0.9","title":"Pip\u4f9d\u8d56"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/Pip%E4%BE%9D%E8%B5%96/#pip","text":"\u5f53\u63d2\u4ef6\u9700\u8981\u989d\u5916\u7684\u4f9d\u8d56\u5305\u65f6\uff0c\u53ea\u9700\u8981\u5c06\u63d2\u4ef6\u7684requirements.txt\u6587\u4ef6\u751f\u6210\u5e76\u653e\u5728\u6839\u76ee\u5f55\u4e0b\u5373\u53ef ArkID\u4f1a\u5728\u52a0\u8f7d\u63d2\u4ef6\u4e4b\u524d\u81ea\u52a8\u5b89\u88c5requirements.txt\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u4f9d\u8d56\u5305\u3002 requirements.txt alibabacloud-dysmsapi20170525==2.0.9","title":"Pip\u4f9d\u8d56"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E4%BA%8B%E4%BB%B6/","text":"\u4e8b\u4ef6 # \u4e8b\u4ef6\u4f5c\u4e3a\u63d2\u4ef6\u4e0e\u5185\u6838\u6c9f\u901a\u7684\u6838\u5fc3\u80fd\u529b\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6216\u8005\u4fa6\u542c\u5185\u6838\u4e8b\u4ef6\u6765\u5b8c\u6210\u3002 \u4e8b\u4ef6\u7684\u5b9a\u4e49\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a EventType: \u4e8b\u4ef6\u7c7b\u578b\uff0c\u7528\u4e8e\u6ce8\u518c(register) Event: \u4e8b\u4ef6\uff0c\u7528\u4e8e\u89e6\u53d1(dispatch) \u81ea\u5b9a\u4e49\u4e8b\u4ef6 # \u5bf9\u4e8b\u4ef6\u7684\u4e00\u822c\u903b\u8f91\u662f\uff1a \u6ce8\u518c \u4e8b\u4ef6\u7c7b\u578b : arkid.core.extension.Extension.register_event arkid.core.extension.Extension.register_event_type \u4fa6\u542c\u4e8b\u4ef6: arkid.core.extension.Extension.listen_event \u4ea7\u751f\u4e8b\u4ef6: arkid.core.extension.Extension.dispatch_event \u6ce8\u610f \u5728\u6ce8\u518c\u4e8b\u4ef6\u7c7b\u578b\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u4e8b\u4ef6tag\u547d\u540d\u51b2\u7a81\uff0c\u4f1a\u5728tag\u524d\u6dfb\u52a0\u8be5\u63d2\u4ef6\u7684 package + '.' \u4f5c\u4e3a\u524d\u7f00 \u793a\u4f8b from arkid.core import extension , event CUSTOM_EVENT = 'CUSTOM_EVENT' CUSTOM_EVENT2 = 'CUSTOM_EVENT2' class CaseExtension ( extension . Extension ): def load ( self ): super () . load () custom_event_tag = self . register_event ( CUSTOM_EVENT , '\u81ea\u5b9a\u4e49\u4e8b\u4ef6' ) custom_event2_tag = self . register_event_type ( event . EventType ( CUSTOM_EVENT2 , '\u81ea\u5b9a\u4e49\u4e8b\u4ef62' )) self . listen_event ( custom_event_tag , event_handler ) self . listen_event ( custom_event2_tag , event_handler ) self . register_api ( '/custom_event/' , 'GET' , self . api_func ) self . register_api ( '/custom_event2/' , 'GET' , self . api_func2 ) def api_func ( self , request ): self . dispatch_event ( event . Event ( CUSTOM_EVENT )) def api_func2 ( self , request ): self . dispatch_event ( event . Event ( CUSTOM_EVENT2 )) def event_handler ( self , event , ** kwargs ): print ( event . tag ) \u4fa6\u542c\u5185\u6838\u6216\u5176\u5b83\u4e8b\u4ef6 # \u5185\u6838\u4e8b\u4ef6\u53ef\u4ee5\u53c2\u770b \u5185\u6838\u4e8b\u4ef6\u6587\u6863 \u6240\u6709\u4e8b\u4ef6\u7c7b\u578b\uff08\u5305\u542b\u5185\u6838\u4e0e\u63d2\u4ef6\u6ce8\u518c\u989d\u4e8b\u4ef6\u7c7b\u578b\uff09\u53ef\u4ee5\u5728\u7cfb\u7edf\u7684 \u6269\u5c55\u80fd\u529b-\u4e8b\u4ef6\u5217\u8868 \u4e2d\u67e5\u770b \u6ce8\u610f \u4e8b\u5b9e\u4e0a\uff0c\u5728\u63d2\u4ef6\u4e2d\u5b9a\u4e49\u7684\u4e8b\u4ef6\u4e5f\u540c\u6837\u53ef\u4ee5\u88ab\u4fa6\u542c\uff0c\u4f46\u7531\u4e8e\u63d2\u4ef6\u672c\u8eab\u53ef\u80fd\u5e76\u4e0d\u7a33\u5b9a\uff0c\u6bd4\u5982\u5347\u7ea7\u4e4b\u7c7b\u7684\u4f1a\u4f7f\u7684\u76f8\u5173\u4e8b\u4ef6\u53d1\u751f\u53d8\u5316,\u6240\u4ee5\u5e76\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\u3002","title":"\u4e8b\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E4%BA%8B%E4%BB%B6/#_1","text":"\u4e8b\u4ef6\u4f5c\u4e3a\u63d2\u4ef6\u4e0e\u5185\u6838\u6c9f\u901a\u7684\u6838\u5fc3\u80fd\u529b\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6216\u8005\u4fa6\u542c\u5185\u6838\u4e8b\u4ef6\u6765\u5b8c\u6210\u3002 \u4e8b\u4ef6\u7684\u5b9a\u4e49\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a EventType: \u4e8b\u4ef6\u7c7b\u578b\uff0c\u7528\u4e8e\u6ce8\u518c(register) Event: \u4e8b\u4ef6\uff0c\u7528\u4e8e\u89e6\u53d1(dispatch)","title":"\u4e8b\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E4%BA%8B%E4%BB%B6/#_2","text":"\u5bf9\u4e8b\u4ef6\u7684\u4e00\u822c\u903b\u8f91\u662f\uff1a \u6ce8\u518c \u4e8b\u4ef6\u7c7b\u578b : arkid.core.extension.Extension.register_event arkid.core.extension.Extension.register_event_type \u4fa6\u542c\u4e8b\u4ef6: arkid.core.extension.Extension.listen_event \u4ea7\u751f\u4e8b\u4ef6: arkid.core.extension.Extension.dispatch_event \u6ce8\u610f \u5728\u6ce8\u518c\u4e8b\u4ef6\u7c7b\u578b\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u4e8b\u4ef6tag\u547d\u540d\u51b2\u7a81\uff0c\u4f1a\u5728tag\u524d\u6dfb\u52a0\u8be5\u63d2\u4ef6\u7684 package + '.' \u4f5c\u4e3a\u524d\u7f00 \u793a\u4f8b from arkid.core import extension , event CUSTOM_EVENT = 'CUSTOM_EVENT' CUSTOM_EVENT2 = 'CUSTOM_EVENT2' class CaseExtension ( extension . Extension ): def load ( self ): super () . load () custom_event_tag = self . register_event ( CUSTOM_EVENT , '\u81ea\u5b9a\u4e49\u4e8b\u4ef6' ) custom_event2_tag = self . register_event_type ( event . EventType ( CUSTOM_EVENT2 , '\u81ea\u5b9a\u4e49\u4e8b\u4ef62' )) self . listen_event ( custom_event_tag , event_handler ) self . listen_event ( custom_event2_tag , event_handler ) self . register_api ( '/custom_event/' , 'GET' , self . api_func ) self . register_api ( '/custom_event2/' , 'GET' , self . api_func2 ) def api_func ( self , request ): self . dispatch_event ( event . Event ( CUSTOM_EVENT )) def api_func2 ( self , request ): self . dispatch_event ( event . Event ( CUSTOM_EVENT2 )) def event_handler ( self , event , ** kwargs ): print ( event . tag )","title":"\u81ea\u5b9a\u4e49\u4e8b\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E4%BA%8B%E4%BB%B6/#_3","text":"\u5185\u6838\u4e8b\u4ef6\u53ef\u4ee5\u53c2\u770b \u5185\u6838\u4e8b\u4ef6\u6587\u6863 \u6240\u6709\u4e8b\u4ef6\u7c7b\u578b\uff08\u5305\u542b\u5185\u6838\u4e0e\u63d2\u4ef6\u6ce8\u518c\u989d\u4e8b\u4ef6\u7c7b\u578b\uff09\u53ef\u4ee5\u5728\u7cfb\u7edf\u7684 \u6269\u5c55\u80fd\u529b-\u4e8b\u4ef6\u5217\u8868 \u4e2d\u67e5\u770b \u6ce8\u610f \u4e8b\u5b9e\u4e0a\uff0c\u5728\u63d2\u4ef6\u4e2d\u5b9a\u4e49\u7684\u4e8b\u4ef6\u4e5f\u540c\u6837\u53ef\u4ee5\u88ab\u4fa6\u542c\uff0c\u4f46\u7531\u4e8e\u63d2\u4ef6\u672c\u8eab\u53ef\u80fd\u5e76\u4e0d\u7a33\u5b9a\uff0c\u6bd4\u5982\u5347\u7ea7\u4e4b\u7c7b\u7684\u4f1a\u4f7f\u7684\u76f8\u5173\u4e8b\u4ef6\u53d1\u751f\u53d8\u5316,\u6240\u4ee5\u5e76\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\u3002","title":"\u4fa6\u542c\u5185\u6838\u6216\u5176\u5b83\u4e8b\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/","text":"\u524d\u7aef # \u6839\u636e\u4e0a\u8ff0\u914d\u7f6e\u4fe1\u606f\u7ed3\u6784\u8bf4\u660e\uff0c\u6211\u4eec\u9700\u8981\u5728\u540e\u7aef\u63a5\u53e3\uff08/api/v1/openapi.json\uff09\u4e2d\u5bf9\u5e94\u751f\u6210\u9875\u9762\u914d\u7f6e\u6570\u636e\u4ee5\u4f9b\u524d\u7aef\u89e3\u6790\uff0c\u4ee5\u4e0b\u662f\u57fa\u7840\u7684\u4ee3\u7801\u6b65\u9aa4\uff1a \u521b\u5efa\u4e00\u4e2apage # from arkid.core import pages user_list_tag = 'user_list' user_list_name = '\u7528\u6237\u5217\u8868' page = pages . FrontPage ( tag = user_list_tag , name = user_list_name , page_type = pages . FrontPageType . TABLE_PAGE , init_action = pages . FrontAction ( path = '/api/v1/tenant/ {tenant_id} /users/' , method = pages . FrontActionMethod . GET ) ) \u4e3apage\u6dfb\u52a0action # ... page . add_local_action ( [ pages . FrontAction ( name = _ ( \"\u5220\u9664\" ), method = pages . FrontActionMethod . DELETE , path = \"/api/v1/tenant/ {tenant_id} /users/ {id} /\" , icon = \"icon-delete\" , action_type = pages . FrontActionType . DIRECT_ACTION ) ] ) ... \u5c06page\u6ce8\u518c\u5230\u5168\u5c40 # pages . register_front_pages ( page ) \u5199\u5165\u8def\u7531\u4fe1\u606f # from arkid.core import routers user_list_router = routers . FrontRouter ( path = \"user_list\" , name = '\u7528\u6237\u7ba1\u7406' , icon = 'user' , page = page , ) router = routers . FrontRouter ( path = 'user' , name = '\u7528\u6237\u7ba1\u7406' , icon = 'user' , children = [ user_list_router , ], ) \u6700\u540e\u5728\u8bbf\u95ee/api/v1/openapi.json\u63a5\u53e3\u65f6\u53ef\u5f97\u5230\u6570\u636e\u4e3a\uff1a # { ... \"routers\" : [ { \"path\" : \"user\" , \"name\" : \"\u7528\u6237\u7ba1\u7406\" , \"icon\" : \"user\" , \"children\" : [ { \"path\" : \"user_list\" , \"name\" : \"\u7528\u6237\u7ba1\u7406\" , \"icon\" : \"user\" , \"page\" : \"user_list\" } ] } ], \"pages\" : [ { \"tag\" : \"user_list\" , \"name\" : \"\u7528\u6237\u5217\u8868\" , \"type\" : \"table\" , \"init\" : { \"tag\" : \"16058e11df284ae1a58fd1220a85e501\" , \"path\" : \"/api/v1/tenant/{tenant_id}/users/\" , \"method\" : \"get\" }, \"local\" : [ { \"tag\" : \"9181f711ffcb4ac5b5a793e043468595\" , \"name\" : \"\u5220\u9664\" , \"path\" : \"/api/v1/tenant/{tenant_id}/users/{id}/\" , \"method\" : \"delete\" , \"icon\" : \"icon-delete\" , \"type\" : \"direct\" } ], }, ] } ...","title":"\u524d\u7aef"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/#_1","text":"\u6839\u636e\u4e0a\u8ff0\u914d\u7f6e\u4fe1\u606f\u7ed3\u6784\u8bf4\u660e\uff0c\u6211\u4eec\u9700\u8981\u5728\u540e\u7aef\u63a5\u53e3\uff08/api/v1/openapi.json\uff09\u4e2d\u5bf9\u5e94\u751f\u6210\u9875\u9762\u914d\u7f6e\u6570\u636e\u4ee5\u4f9b\u524d\u7aef\u89e3\u6790\uff0c\u4ee5\u4e0b\u662f\u57fa\u7840\u7684\u4ee3\u7801\u6b65\u9aa4\uff1a","title":"\u524d\u7aef"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/#page","text":"from arkid.core import pages user_list_tag = 'user_list' user_list_name = '\u7528\u6237\u5217\u8868' page = pages . FrontPage ( tag = user_list_tag , name = user_list_name , page_type = pages . FrontPageType . TABLE_PAGE , init_action = pages . FrontAction ( path = '/api/v1/tenant/ {tenant_id} /users/' , method = pages . FrontActionMethod . GET ) )","title":"\u521b\u5efa\u4e00\u4e2apage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/#pageaction","text":"... page . add_local_action ( [ pages . FrontAction ( name = _ ( \"\u5220\u9664\" ), method = pages . FrontActionMethod . DELETE , path = \"/api/v1/tenant/ {tenant_id} /users/ {id} /\" , icon = \"icon-delete\" , action_type = pages . FrontActionType . DIRECT_ACTION ) ] ) ...","title":"\u4e3apage\u6dfb\u52a0action"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/#page_1","text":"pages . register_front_pages ( page )","title":"\u5c06page\u6ce8\u518c\u5230\u5168\u5c40"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/#_2","text":"from arkid.core import routers user_list_router = routers . FrontRouter ( path = \"user_list\" , name = '\u7528\u6237\u7ba1\u7406' , icon = 'user' , page = page , ) router = routers . FrontRouter ( path = 'user' , name = '\u7528\u6237\u7ba1\u7406' , icon = 'user' , children = [ user_list_router , ], )","title":"\u5199\u5165\u8def\u7531\u4fe1\u606f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%89%8D%E7%AB%AF/#apiv1openapijson","text":"{ ... \"routers\" : [ { \"path\" : \"user\" , \"name\" : \"\u7528\u6237\u7ba1\u7406\" , \"icon\" : \"user\" , \"children\" : [ { \"path\" : \"user_list\" , \"name\" : \"\u7528\u6237\u7ba1\u7406\" , \"icon\" : \"user\" , \"page\" : \"user_list\" } ] } ], \"pages\" : [ { \"tag\" : \"user_list\" , \"name\" : \"\u7528\u6237\u5217\u8868\" , \"type\" : \"table\" , \"init\" : { \"tag\" : \"16058e11df284ae1a58fd1220a85e501\" , \"path\" : \"/api/v1/tenant/{tenant_id}/users/\" , \"method\" : \"get\" }, \"local\" : [ { \"tag\" : \"9181f711ffcb4ac5b5a793e043468595\" , \"name\" : \"\u5220\u9664\" , \"path\" : \"/api/v1/tenant/{tenant_id}/users/{id}/\" , \"method\" : \"delete\" , \"icon\" : \"icon-delete\" , \"type\" : \"direct\" } ], }, ] } ...","title":"\u6700\u540e\u5728\u8bbf\u95ee/api/v1/openapi.json\u63a5\u53e3\u65f6\u53ef\u5f97\u5230\u6570\u636e\u4e3a\uff1a"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%A4%9A%E8%AF%AD%E8%A8%80/","text":"\u591a\u8bed\u8a00 # \u7531\u4e8eDjango-ninja\u5728OpenAPI\u7684\u63a5\u53e3\u5b9e\u73b0\u4e0a\u4e0eDjango\u539f\u672c\u7684\u591a\u8bed\u8a00\u63a5\u53e3\u517c\u5bb9\u6027\u4e0d\u597d\u3002 \u6240\u4ee5\uff0cArkID\u81ea\u5b9a\u4e49\u4e86\u4e00\u5957\u591a\u8bed\u8a00\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002 \u4e3b\u8981\u901a\u8fc7\uff1a arkid.core.translation.gettext_default \u6765\u5b9e\u73b0\u7684\uff0c\u9ed8\u8ba4\u4e3a\u201d\u7b80\u4f53\u4e2d\u6587\u201c\u3002 from django.db import models from arkid.core.translation import gettext_default as _ from django.apps import AppConfig app_label = \"com_longgui_case\" class CaseApp ( AppConfig ): name = app_label class CaseModel ( models . Model ): class Meta : app_label = app_label nickname = models . CharField ( verbose_name = _ ( 'nickname' , '\u6635\u79f0' ), max_length = 128 )","title":"\u591a\u8bed\u8a00"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E5%A4%9A%E8%AF%AD%E8%A8%80/#_1","text":"\u7531\u4e8eDjango-ninja\u5728OpenAPI\u7684\u63a5\u53e3\u5b9e\u73b0\u4e0a\u4e0eDjango\u539f\u672c\u7684\u591a\u8bed\u8a00\u63a5\u53e3\u517c\u5bb9\u6027\u4e0d\u597d\u3002 \u6240\u4ee5\uff0cArkID\u81ea\u5b9a\u4e49\u4e86\u4e00\u5957\u591a\u8bed\u8a00\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002 \u4e3b\u8981\u901a\u8fc7\uff1a arkid.core.translation.gettext_default \u6765\u5b9e\u73b0\u7684\uff0c\u9ed8\u8ba4\u4e3a\u201d\u7b80\u4f53\u4e2d\u6587\u201c\u3002 from django.db import models from arkid.core.translation import gettext_default as _ from django.apps import AppConfig app_label = \"com_longgui_case\" class CaseApp ( AppConfig ): name = app_label class CaseModel ( models . Model ): class Meta : app_label = app_label nickname = models . CharField ( verbose_name = _ ( 'nickname' , '\u6635\u79f0' ), max_length = 128 )","title":"\u591a\u8bed\u8a00"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%95%B0%E6%8D%AE%E5%BA%93/","text":"\u6570\u636e\u5e93 # \u81ea\u5b9a\u4e49\u6570\u636e\u8868 # \u63d2\u4ef6\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u7684\u6570\u636e\u8868\uff0c\u53ea\u9700\u8981\u5728\u6839\u76ee\u5f55\u4e0b\u521b\u5efamodels.py\u6587\u4ef6\uff0c\u4f7f\u7528Django ORM\u6807\u51c6\u5199\u6cd5\u5373\u53ef\u3002 \u63d2\u4ef6\u6570\u636e\u5e93\u7248\u672c\u66f4\u65b0\u4e5f\u662f\u9075\u5faaDjango\u7684\u539f\u5219\uff0c\u5f00\u53d1\u8005\u9700\u8981\u81ea\u884c\u8fd0\u884c makemigrations migrate\u4f1a\u5728\u52a0\u8f7d\u63d2\u4ef6\u524d\u81ea\u52a8\u8fd0\u884c models.py from django.db import models from arkid.core.translation import gettext_default as _ from django.apps import AppConfig app_label = \"com_longgui_case\" class CaseApp ( AppConfig ): name = app_label class CaseModel ( models . Model ): class Meta : app_label = app_label nickname = models . CharField ( verbose_name = _ ( 'nickname' , '\u6635\u79f0' ), max_length = 128 ) \u63d0\u793a \u5728models.py\u4e2d\u4e00\u5b9a\u8981\u58f0\u660eAppConfig\uff0c \u5728\u521b\u5efaModel\u65f6\u4e5f\u9700\u8981\u58f0\u660e\u5176app_label makemigrations command: python manage.py makemigrations {app_label} \u6269\u5c55\u5185\u6838\u6570\u636e\u8868 # \u5728arkid.core.models\u4e2d\u5b9a\u4e49\u7684\u6570\u636e\u8868\uff0c\u51e1\u662f\u7ee7\u627f\u81ea ExtendModel \u7c7b\u7684\uff0c\u90fd\u662f\u9ed8\u8ba4\u53ef\u4ee5\u8fdb\u884c\u76f4\u63a5\u6269\u5c55\u7684model\u3002 \u5efa\u8bae\u6269\u5c55\u7684model\u7c7b\u6709\uff1a arkid.core.models.Tenant arkid.core.models.User arkid.core.models.UserGroup arkid.core.models.App arkid.core.models.AppGroup \u5728\u63d2\u4ef6\u4e2d\uff0c\u5b9a\u4e49\u4e00\u4e2amodel\uff0c\u5176\u5916\u952e\u4e3a\u4ee5\u4e0a\u8fd9\u4e9b\u7c7b\u5373\u53ef\u3002\u4e3a\u4e86\u65b9\u4fbf\u6b64\u64cd\u4f5c\uff0c\u5728 arkid.core.models \u4e2d\u5df2\u7ecf\u5b9a\u4e49\u597d\u4e86\u8fd9\u4e9b\u62bd\u8c61\u7c7b\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u5373\u53ef\u3002 arkid.core.expand.TenantExpandAbstract arkid.core.expand.UserExpandAbstract arkid.core.expand.UserGroupExpandAbstract arkid.core.expand.AppExpandAbstract arkid.core.expand.AppGroupExpandAbstract \u5b9a\u4e49\u597dmodel\u540e\uff0c\u9700\u8981\u8c03\u7528 arkid.core.extension.Extension.register_extend_field \u6ce8\u518c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u67e5\u8be2\uff0c\u4fdd\u5b58\uff0c\u5220\u9664\u64cd\u4f5c \u67e5\u8be2 : {model}.expand_objects \u65b0\u5efa\u6216\u4fee\u6539 : {model}.save() \u5220\u9664 : {model}.delete() models.py from django.db import models from arkid.core.expand import create_expand_abstract_model from arkid.core.translation import gettext_default as _ from django.apps import AppConfig from arkid.core.models import UserExpandAbstract app_label = \"com_longgui_case\" class LongguiCaseAppConfig ( AppConfig ): name = app_label class CaseUser ( UserExpandAbstract ): class Meta : app_label = app_label nickname = models . CharField ( verbose_name = _ ( 'nickname' , '\u6635\u79f0' ), max_length = 128 ) __init__.py from arkid.core import extension from arkid.core.translation import gettext_default as _ from arkid.core.models import User from .models import CaseUser from typing import List , Optional from pydantic import Field package = 'com.longgui.case' UserSchema = extension . create_extension_schema ( 'UserSchema' , package , fields = [ ( 'username' , str , Field ()), ( 'nickname' , Optional [ str ], Field ()), ] ) class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_extend_field ( CaseUser , 'nickname' ) self . register_api ( '/test/' , 'POST' , self . post_handler , tenant_path = True ) self . register_api ( '/test/' , 'GET' , self . get_handler , response = List [ UserSchema ], tenant_path = True ) def post_handler ( self , request , tenant_id : str , data : UserSchema ): tenant = request . tenant user = User () user . tenant = tenant user . username = data . username user . nickname = data . nickname user . save () def get_handler ( self , request , tenant_id : str , ): users = User . expand_objects . filter ( tenant = request . tenant ) . all () return list ( users ) extension = CaseExtension ( package = package , description = \"\" , version = '1.0' , labels = 'case' , homepage = 'https://www.longguikeji.com' , logo = '' , author = 'wely' , )","title":"\u6570\u636e\u5e93"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%95%B0%E6%8D%AE%E5%BA%93/#_1","text":"","title":"\u6570\u636e\u5e93"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%95%B0%E6%8D%AE%E5%BA%93/#_2","text":"\u63d2\u4ef6\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u7684\u6570\u636e\u8868\uff0c\u53ea\u9700\u8981\u5728\u6839\u76ee\u5f55\u4e0b\u521b\u5efamodels.py\u6587\u4ef6\uff0c\u4f7f\u7528Django ORM\u6807\u51c6\u5199\u6cd5\u5373\u53ef\u3002 \u63d2\u4ef6\u6570\u636e\u5e93\u7248\u672c\u66f4\u65b0\u4e5f\u662f\u9075\u5faaDjango\u7684\u539f\u5219\uff0c\u5f00\u53d1\u8005\u9700\u8981\u81ea\u884c\u8fd0\u884c makemigrations migrate\u4f1a\u5728\u52a0\u8f7d\u63d2\u4ef6\u524d\u81ea\u52a8\u8fd0\u884c models.py from django.db import models from arkid.core.translation import gettext_default as _ from django.apps import AppConfig app_label = \"com_longgui_case\" class CaseApp ( AppConfig ): name = app_label class CaseModel ( models . Model ): class Meta : app_label = app_label nickname = models . CharField ( verbose_name = _ ( 'nickname' , '\u6635\u79f0' ), max_length = 128 ) \u63d0\u793a \u5728models.py\u4e2d\u4e00\u5b9a\u8981\u58f0\u660eAppConfig\uff0c \u5728\u521b\u5efaModel\u65f6\u4e5f\u9700\u8981\u58f0\u660e\u5176app_label makemigrations command: python manage.py makemigrations {app_label}","title":"\u81ea\u5b9a\u4e49\u6570\u636e\u8868"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%95%B0%E6%8D%AE%E5%BA%93/#_3","text":"\u5728arkid.core.models\u4e2d\u5b9a\u4e49\u7684\u6570\u636e\u8868\uff0c\u51e1\u662f\u7ee7\u627f\u81ea ExtendModel \u7c7b\u7684\uff0c\u90fd\u662f\u9ed8\u8ba4\u53ef\u4ee5\u8fdb\u884c\u76f4\u63a5\u6269\u5c55\u7684model\u3002 \u5efa\u8bae\u6269\u5c55\u7684model\u7c7b\u6709\uff1a arkid.core.models.Tenant arkid.core.models.User arkid.core.models.UserGroup arkid.core.models.App arkid.core.models.AppGroup \u5728\u63d2\u4ef6\u4e2d\uff0c\u5b9a\u4e49\u4e00\u4e2amodel\uff0c\u5176\u5916\u952e\u4e3a\u4ee5\u4e0a\u8fd9\u4e9b\u7c7b\u5373\u53ef\u3002\u4e3a\u4e86\u65b9\u4fbf\u6b64\u64cd\u4f5c\uff0c\u5728 arkid.core.models \u4e2d\u5df2\u7ecf\u5b9a\u4e49\u597d\u4e86\u8fd9\u4e9b\u62bd\u8c61\u7c7b\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u5373\u53ef\u3002 arkid.core.expand.TenantExpandAbstract arkid.core.expand.UserExpandAbstract arkid.core.expand.UserGroupExpandAbstract arkid.core.expand.AppExpandAbstract arkid.core.expand.AppGroupExpandAbstract \u5b9a\u4e49\u597dmodel\u540e\uff0c\u9700\u8981\u8c03\u7528 arkid.core.extension.Extension.register_extend_field \u6ce8\u518c\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u67e5\u8be2\uff0c\u4fdd\u5b58\uff0c\u5220\u9664\u64cd\u4f5c \u67e5\u8be2 : {model}.expand_objects \u65b0\u5efa\u6216\u4fee\u6539 : {model}.save() \u5220\u9664 : {model}.delete() models.py from django.db import models from arkid.core.expand import create_expand_abstract_model from arkid.core.translation import gettext_default as _ from django.apps import AppConfig from arkid.core.models import UserExpandAbstract app_label = \"com_longgui_case\" class LongguiCaseAppConfig ( AppConfig ): name = app_label class CaseUser ( UserExpandAbstract ): class Meta : app_label = app_label nickname = models . CharField ( verbose_name = _ ( 'nickname' , '\u6635\u79f0' ), max_length = 128 ) __init__.py from arkid.core import extension from arkid.core.translation import gettext_default as _ from arkid.core.models import User from .models import CaseUser from typing import List , Optional from pydantic import Field package = 'com.longgui.case' UserSchema = extension . create_extension_schema ( 'UserSchema' , package , fields = [ ( 'username' , str , Field ()), ( 'nickname' , Optional [ str ], Field ()), ] ) class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_extend_field ( CaseUser , 'nickname' ) self . register_api ( '/test/' , 'POST' , self . post_handler , tenant_path = True ) self . register_api ( '/test/' , 'GET' , self . get_handler , response = List [ UserSchema ], tenant_path = True ) def post_handler ( self , request , tenant_id : str , data : UserSchema ): tenant = request . tenant user = User () user . tenant = tenant user . username = data . username user . nickname = data . nickname user . save () def get_handler ( self , request , tenant_id : str , ): users = User . expand_objects . filter ( tenant = request . tenant ) . all () return list ( users ) extension = CaseExtension ( package = package , description = \"\" , version = '1.0' , labels = 'case' , homepage = 'https://www.longguikeji.com' , logo = '' , author = 'wely' , )","title":"\u6269\u5c55\u5185\u6838\u6570\u636e\u8868"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%96%87%E6%A1%A3/","text":"\u6587\u6863 # ArkID\u4f7f\u7528\u7684\u662f mkdocs \u4f5c\u4e3a\u9ed8\u8ba4\u6587\u6863, \u4f7f\u7528 mkdocs-material \u4e3a\u4e3b\u9898 \u5728ArkID\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c mkdocs serve \u8bbf\u95ee http://localhost:8000 \u5373\u53ef \u63d2\u4ef6\u6587\u6863 # \u63d2\u4ef6\u7684\u6587\u6863\u53ea\u9700\u8981\u5728\u63d2\u4ef6\u7684\u6839\u76ee\u5f55\u4e0b\u6dfb\u52a0markdown\u6587\u4ef6\u5373\u53ef\u81ea\u52a8\u52a0\u8f7d\u5230\u6587\u6863\u4e2d\uff0c\u663e\u793a\u5728 \u7cfb\u7edf\u63d2\u4ef6 \u76ee\u5f55\u4e0b \u63a8\u8350\u9ed8\u8ba4\u4f7f\u7528 index.md","title":"\u6587\u6863"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%96%87%E6%A1%A3/#_1","text":"ArkID\u4f7f\u7528\u7684\u662f mkdocs \u4f5c\u4e3a\u9ed8\u8ba4\u6587\u6863, \u4f7f\u7528 mkdocs-material \u4e3a\u4e3b\u9898 \u5728ArkID\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c mkdocs serve \u8bbf\u95ee http://localhost:8000 \u5373\u53ef","title":"\u6587\u6863"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E6%96%87%E6%A1%A3/#_2","text":"\u63d2\u4ef6\u7684\u6587\u6863\u53ea\u9700\u8981\u5728\u63d2\u4ef6\u7684\u6839\u76ee\u5f55\u4e0b\u6dfb\u52a0markdown\u6587\u4ef6\u5373\u53ef\u81ea\u52a8\u52a0\u8f7d\u5230\u6587\u6863\u4e2d\uff0c\u663e\u793a\u5728 \u7cfb\u7edf\u63d2\u4ef6 \u76ee\u5f55\u4e0b \u63a8\u8350\u9ed8\u8ba4\u4f7f\u7528 index.md","title":"\u63d2\u4ef6\u6587\u6863"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/","text":"\u914d\u7f6e # \u6839\u76ee\u5f55\u6587\u4ef6\u914d\u7f6e # \u5728\u63d2\u4ef6\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u9700\u8981config.toml\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u57fa\u672c\u5185\u5bb9\u5982\u4e0b\uff1a config.toml package = 'com.longgui.case' name = \"\u793a\u4f8b\u63d2\u4ef6\" version = '1.0' labels = 'case' homepage = 'https://www.company.com' logo = '' author = 'case@company.com' \u8be5\u6587\u4ef6\u8d77\u5230\u4e0e extension.__init__ \u51fd\u6570\u4e00\u6837\u7684\u4f5c\u7528. \u5728\u63d2\u4ef6\u4e0a\u4f20\u5230\u63d2\u4ef6\u5546\u5e97\u65f6\uff0c\u63d2\u4ef6\u5546\u5e97\u4e5f\u4f1a\u901a\u8fc7\u8be5\u914d\u7f6e\u6587\u4ef6\u83b7\u53d6\u63d2\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u6570\u636e\u5e93\u914d\u7f6e # \u5185\u6838\u4e3a\u4e86\u65b9\u4fbf\u5bf9\u63d2\u4ef6\u7684\u7ba1\u7406\uff0c\u81ea\u5b9a\u4e49\u4e86\u4e09\u79cd\u63d2\u4ef6\u7684\u914d\u7f6e\u5f62\u5f0f\u3002 \u5e76\u4e3a\u8fd9\u4e9b\u914d\u7f6e\u751f\u6210\u5bf9\u5e94\u7684Schema\u4ee5\u4f7f\u5f97\u5404\u4e2a\u4e0e\u63d2\u4ef6\u914d\u7f6e\u76f8\u5173\u7684API\u80fd\u52a8\u6001\u9002\u5e94\u63d2\u4ef6\u7684\u589e\u5220\u3002 \u63d2\u4ef6\u914d\u7f6e(profile) # \u5b9a\u4e49\u5728 arkid.extension.models.Extension \u4e2d \u4e0e\u63d2\u4ef6\u81ea\u8eab\u4e00\u5bf9\u4e00\u7684\u914d\u7f6e\uff0cjson\u683c\u5f0f \u4f7f\u7528 arkid.core.extension.Extension.register_profile_schema \u6ce8\u518c\u5176Schema profile\u7684\u589e\u5220\u6539\u67e5\u901a\u8fc7 self.model \u76f4\u63a5\u5b8c\u6210 \u79df\u6237\u914d\u7f6e(settings) # \u5b9a\u4e49\u5728 arkid.extension.models.TenantExtension \u4e2d \u5728\u6bcf\u4e2a\u79df\u6237\u4e0b\u6bcf\u4e2a\u63d2\u4ef6\u53ea\u6709\u4e00\u4e2asettings\u7684\u914d\u7f6e\uff0cjson\u683c\u5f0f \u4f7f\u7528 arkid.core.extension.Extension.register_settings_schema \u6ce8\u518c\u5176Schema settings\u7684\u589e\u5220\u6539\u67e5\u901a\u8fc7\uff1a self.get_tenant_settings self.update_or_create_settings \u8fd0\u884c\u65f6\u914d\u7f6e(config) # \u5b9a\u4e49\u5728 arkid.extension.models.TenantExtensionConfig \u4e2d \u6bcf\u4e2a\u79df\u6237\u4e0b\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u6709\u591a\u4e2aconfig\uff0cjson\u683c\u5f0f \u4f7f\u7528 arkid.core.extension.Extension.register_config_schema \u6ce8\u518c\u5176Schema \u4f7f\u7528 arkid.core.extension.Extension.register_composite_config_schema \u6ce8\u518c\u6709\u5b50\u79cd\u7c7b\u7684Schema config\u7684\u589e\u5220\u6539\u67e5\u901a\u8fc7: self.get_tenant_configs self.get_config_by_id self.create_tenant_config self.update_tenant_config self.delete_tenant_config \u6ce8\u610f \u63d2\u4ef6\u7684Schema\u90fd\u5e94\u8be5\u8c03\u7528 arkid.core.extension.create_extension_schema \u65b9\u6cd5\u6765\u5b8c\u6210 \u793a\u4f8b ... package = 'com.longgui.case' Profile = create_extension_schema ( 'Profile' , package , fields = [ ( 'name' , str , Field ()) ] ) Settings = create_extension_schema ( 'Settings' , package , fields = [ ( 'name' , str , Field ()) ] ) Config = create_extension_schema ( 'Config' , package , fields = [ ( 'name' , str , Field ()) ] ) class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_profile_schema ( Profile ) self . register_settings_schema ( Settings ) self . register_config_schema ( Config ) self . register_composite_config_schema ( Config , 'type_name' ) ... arkid.extension.models # ArkStoreCategory ( BaseModel ) django-model # ArkStoreCategory(id, is_del, is_active, updated, created, arkstore_id, arkstore_name, arkstore_parent_id, arkstore_type) arkstore_id : IntegerField django-field nullable # ArkStoreID arkstore_name : CharField blank django-field nullable # ArkStore\u540d\u79f0 arkstore_parent_id : IntegerField django-field nullable # ArkStoreParentID arkstore_type : CharField django-field # \u7c7b\u522b created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 Extension ( BaseModel ) django-model # Extension(id, is_del, updated, created, type, labels, package, ext_dir, name, version, is_active, profile, is_allow_use_platform_config, category_id) category_id : IntegerField django-field nullable # ArkStore\u5206\u7c7bID created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 ext_dir : CharField django-field # \u5b8c\u6574\u8def\u5f84\u540d id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u542f\u52a8 is_allow_use_platform_config : BooleanField django-field # \u662f\u5426\u5141\u8bb8\u79df\u6237\u4f7f\u7528\u5e73\u53f0\u914d\u7f6e is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 labels : JSONField blank django-field # Labels name : CharField django-field # \u540d\u79f0 package : CharField django-field # \u6807\u8bc6 profile : JSONField blank django-field # Setup Profile type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 version : CharField django-field # \u7248\u672c TenantExtension ( BaseModel ) django-model # TenantExtension(id, is_del, updated, created, tenant, extension, settings, is_active, is_rented, use_platform_config) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u4f7f\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_rented : BooleanField django-field # \u662f\u5426\u5df2\u79df\u8d41 settings : JSONField blank django-field # Tenant Settings tenant : ForeignKey django-field # \u79df\u6237 updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 use_platform_config : BooleanField django-field # \u662f\u5426\u4f7f\u7528\u5e73\u53f0\u914d\u7f6e TenantExtensionConfig ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4","title":"\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#_1","text":"","title":"\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#_2","text":"\u5728\u63d2\u4ef6\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u9700\u8981config.toml\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u57fa\u672c\u5185\u5bb9\u5982\u4e0b\uff1a config.toml package = 'com.longgui.case' name = \"\u793a\u4f8b\u63d2\u4ef6\" version = '1.0' labels = 'case' homepage = 'https://www.company.com' logo = '' author = 'case@company.com' \u8be5\u6587\u4ef6\u8d77\u5230\u4e0e extension.__init__ \u51fd\u6570\u4e00\u6837\u7684\u4f5c\u7528. \u5728\u63d2\u4ef6\u4e0a\u4f20\u5230\u63d2\u4ef6\u5546\u5e97\u65f6\uff0c\u63d2\u4ef6\u5546\u5e97\u4e5f\u4f1a\u901a\u8fc7\u8be5\u914d\u7f6e\u6587\u4ef6\u83b7\u53d6\u63d2\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u3002","title":"\u6839\u76ee\u5f55\u6587\u4ef6\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#_3","text":"\u5185\u6838\u4e3a\u4e86\u65b9\u4fbf\u5bf9\u63d2\u4ef6\u7684\u7ba1\u7406\uff0c\u81ea\u5b9a\u4e49\u4e86\u4e09\u79cd\u63d2\u4ef6\u7684\u914d\u7f6e\u5f62\u5f0f\u3002 \u5e76\u4e3a\u8fd9\u4e9b\u914d\u7f6e\u751f\u6210\u5bf9\u5e94\u7684Schema\u4ee5\u4f7f\u5f97\u5404\u4e2a\u4e0e\u63d2\u4ef6\u914d\u7f6e\u76f8\u5173\u7684API\u80fd\u52a8\u6001\u9002\u5e94\u63d2\u4ef6\u7684\u589e\u5220\u3002","title":"\u6570\u636e\u5e93\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#profile","text":"\u5b9a\u4e49\u5728 arkid.extension.models.Extension \u4e2d \u4e0e\u63d2\u4ef6\u81ea\u8eab\u4e00\u5bf9\u4e00\u7684\u914d\u7f6e\uff0cjson\u683c\u5f0f \u4f7f\u7528 arkid.core.extension.Extension.register_profile_schema \u6ce8\u518c\u5176Schema profile\u7684\u589e\u5220\u6539\u67e5\u901a\u8fc7 self.model \u76f4\u63a5\u5b8c\u6210","title":"\u63d2\u4ef6\u914d\u7f6e(profile)"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#settings","text":"\u5b9a\u4e49\u5728 arkid.extension.models.TenantExtension \u4e2d \u5728\u6bcf\u4e2a\u79df\u6237\u4e0b\u6bcf\u4e2a\u63d2\u4ef6\u53ea\u6709\u4e00\u4e2asettings\u7684\u914d\u7f6e\uff0cjson\u683c\u5f0f \u4f7f\u7528 arkid.core.extension.Extension.register_settings_schema \u6ce8\u518c\u5176Schema settings\u7684\u589e\u5220\u6539\u67e5\u901a\u8fc7\uff1a self.get_tenant_settings self.update_or_create_settings","title":"\u79df\u6237\u914d\u7f6e(settings)"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#config","text":"\u5b9a\u4e49\u5728 arkid.extension.models.TenantExtensionConfig \u4e2d \u6bcf\u4e2a\u79df\u6237\u4e0b\u6bcf\u4e2a\u63d2\u4ef6\u90fd\u6709\u591a\u4e2aconfig\uff0cjson\u683c\u5f0f \u4f7f\u7528 arkid.core.extension.Extension.register_config_schema \u6ce8\u518c\u5176Schema \u4f7f\u7528 arkid.core.extension.Extension.register_composite_config_schema \u6ce8\u518c\u6709\u5b50\u79cd\u7c7b\u7684Schema config\u7684\u589e\u5220\u6539\u67e5\u901a\u8fc7: self.get_tenant_configs self.get_config_by_id self.create_tenant_config self.update_tenant_config self.delete_tenant_config \u6ce8\u610f \u63d2\u4ef6\u7684Schema\u90fd\u5e94\u8be5\u8c03\u7528 arkid.core.extension.create_extension_schema \u65b9\u6cd5\u6765\u5b8c\u6210 \u793a\u4f8b ... package = 'com.longgui.case' Profile = create_extension_schema ( 'Profile' , package , fields = [ ( 'name' , str , Field ()) ] ) Settings = create_extension_schema ( 'Settings' , package , fields = [ ( 'name' , str , Field ()) ] ) Config = create_extension_schema ( 'Config' , package , fields = [ ( 'name' , str , Field ()) ] ) class CaseExtension ( extension . Extension ): def load ( self ): super () . load () self . register_profile_schema ( Profile ) self . register_settings_schema ( Settings ) self . register_config_schema ( Config ) self . register_composite_config_schema ( Config , 'type_name' ) ...","title":"\u8fd0\u884c\u65f6\u914d\u7f6e(config)"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models","text":"","title":"models"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory","text":"ArkStoreCategory(id, is_del, is_active, updated, created, arkstore_id, arkstore_name, arkstore_parent_id, arkstore_type)","title":"ArkStoreCategory"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.arkstore_id","text":"ArkStoreID","title":"arkstore_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.arkstore_name","text":"ArkStore\u540d\u79f0","title":"arkstore_name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.arkstore_parent_id","text":"ArkStoreParentID","title":"arkstore_parent_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.arkstore_type","text":"\u7c7b\u522b","title":"arkstore_type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.ArkStoreCategory.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension","text":"Extension(id, is_del, updated, created, type, labels, package, ext_dir, name, version, is_active, profile, is_allow_use_platform_config, category_id)","title":"Extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.category_id","text":"ArkStore\u5206\u7c7bID","title":"category_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.ext_dir","text":"\u5b8c\u6574\u8def\u5f84\u540d","title":"ext_dir"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.is_active","text":"\u662f\u5426\u542f\u52a8","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.is_allow_use_platform_config","text":"\u662f\u5426\u5141\u8bb8\u79df\u6237\u4f7f\u7528\u5e73\u53f0\u914d\u7f6e","title":"is_allow_use_platform_config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.labels","text":"Labels","title":"labels"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.package","text":"\u6807\u8bc6","title":"package"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.profile","text":"Setup Profile","title":"profile"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.Extension.version","text":"\u7248\u672c","title":"version"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension","text":"TenantExtension(id, is_del, updated, created, tenant, extension, settings, is_active, is_rented, use_platform_config)","title":"TenantExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.is_active","text":"\u662f\u5426\u4f7f\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.is_rented","text":"\u662f\u5426\u5df2\u79df\u8d41","title":"is_rented"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.settings","text":"Tenant Settings","title":"settings"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtension.use_platform_config","text":"\u662f\u5426\u4f7f\u7528\u5e73\u53f0\u914d\u7f6e","title":"use_platform_config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type)","title":"TenantExtensionConfig"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%85%8D%E7%BD%AE/#arkid.extension.models.TenantExtensionConfig.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%94%99%E8%AF%AF/","text":"\u9519\u8bef # API\u63a5\u53e3\u9700\u8981\u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u8c03\u7528 self.error \u65b9\u6cd5 \u63d2\u4ef6\u5f00\u53d1\u8005\u9700\u8981\u7edf\u4e00\u7f16\u5199\u81ea\u5df1\u7684error.py\u6587\u4ef6\uff0c\u4f7f\u7528\u679a\u4e3e\u53c2\u6570\u5c01\u88c5\u63d2\u4ef6\u4f1a\u4f7f\u7528\u7684\u9519\u8bef\u7801\u548c\u9519\u8bef\u6d88\u606f \u5728\u9700\u8981\u8fd4\u56de\u9519\u8bef\u7684\u5730\u65b9\u7edf\u4e00\uff0c\u8c03\u7528 self.error \u4f20\u5165\u9700\u8981\u63d0\u793a\u7684\u5177\u4f53\u679a\u4e3e\u5bf9\u8c61\uff0c\u8be5\u65b9\u6cd5\u56de\u8fd4\u56de\u5c01\u88c5\u597d\u7684\u9519\u8bef\u6d88\u606f\u5b57\u5178 error.py from enum import Enum from arkid.core.translation import gettext_default as _ class ErrorCode ( Enum ): USERNAME_PASSWORD_MISMATCH = ( '10001-1' , _ ( 'username or password not correct' , '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef' )) CONTACT_MANAGER = ( '10001-5' , _ ( 'contact manager' , '\u53d1\u751f\u4e86\u610f\u5916\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u4eba\u5458' )) USERNAME_EMPTY = ( '10001-6' , _ ( 'username empty' , '\u7528\u6237\u540d\u4e3a\u7a7a' )) ALL_USER_FLAG_LACK_FIELD = ( '10001-7' , _ ( 'fill in at least one user ID' , '\u6240\u6709\u7528\u6237\u6807\u8bc6\u81f3\u5c11\u586b\u4e00\u4e2a' )) FIELD_USER_EXISTS = ( '10001-8' , _ ( 'fill in at least one user ID' , ' {field} \u5b57\u6bb5\u548c\u5df2\u7ecf\u6709\u7684\u7528\u6237\u91cd\u590d' )) PASSWORD_STRENGTH_LACK = ( '10001-9' , _ ( 'password strength lack' , ' \u5bc6\u7801\u5f3a\u5ea6\u4e0d\u591f' )) TWO_TIME_PASSWORD_MISMATCH = ( '10001-10' , _ ( 'two time password mismatch' , '\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u540c' )) OLD_PASSWORD_ERROR = ( '10001-10' , _ ( 'old password error' , '\u65e7\u5bc6\u7801\u4e0d\u5339\u914d' )) .... return self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH ) .... \u5982\u679c\u6b63\u5e38\u8fd4\u56de\u503c\uff0c\u5219\u8c03\u7528 self.success \u6765\u8fd4\u56de .... def api_function ( self . request ): .... return self . success ({ 'key' : value }) ....","title":"\u9519\u8bef"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%20%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/%E9%94%99%E8%AF%AF/#_1","text":"API\u63a5\u53e3\u9700\u8981\u8fd4\u56de\u9519\u8bef\u65f6\uff0c\u8c03\u7528 self.error \u65b9\u6cd5 \u63d2\u4ef6\u5f00\u53d1\u8005\u9700\u8981\u7edf\u4e00\u7f16\u5199\u81ea\u5df1\u7684error.py\u6587\u4ef6\uff0c\u4f7f\u7528\u679a\u4e3e\u53c2\u6570\u5c01\u88c5\u63d2\u4ef6\u4f1a\u4f7f\u7528\u7684\u9519\u8bef\u7801\u548c\u9519\u8bef\u6d88\u606f \u5728\u9700\u8981\u8fd4\u56de\u9519\u8bef\u7684\u5730\u65b9\u7edf\u4e00\uff0c\u8c03\u7528 self.error \u4f20\u5165\u9700\u8981\u63d0\u793a\u7684\u5177\u4f53\u679a\u4e3e\u5bf9\u8c61\uff0c\u8be5\u65b9\u6cd5\u56de\u8fd4\u56de\u5c01\u88c5\u597d\u7684\u9519\u8bef\u6d88\u606f\u5b57\u5178 error.py from enum import Enum from arkid.core.translation import gettext_default as _ class ErrorCode ( Enum ): USERNAME_PASSWORD_MISMATCH = ( '10001-1' , _ ( 'username or password not correct' , '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef' )) CONTACT_MANAGER = ( '10001-5' , _ ( 'contact manager' , '\u53d1\u751f\u4e86\u610f\u5916\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u4eba\u5458' )) USERNAME_EMPTY = ( '10001-6' , _ ( 'username empty' , '\u7528\u6237\u540d\u4e3a\u7a7a' )) ALL_USER_FLAG_LACK_FIELD = ( '10001-7' , _ ( 'fill in at least one user ID' , '\u6240\u6709\u7528\u6237\u6807\u8bc6\u81f3\u5c11\u586b\u4e00\u4e2a' )) FIELD_USER_EXISTS = ( '10001-8' , _ ( 'fill in at least one user ID' , ' {field} \u5b57\u6bb5\u548c\u5df2\u7ecf\u6709\u7684\u7528\u6237\u91cd\u590d' )) PASSWORD_STRENGTH_LACK = ( '10001-9' , _ ( 'password strength lack' , ' \u5bc6\u7801\u5f3a\u5ea6\u4e0d\u591f' )) TWO_TIME_PASSWORD_MISMATCH = ( '10001-10' , _ ( 'two time password mismatch' , '\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u540c' )) OLD_PASSWORD_ERROR = ( '10001-10' , _ ( 'old password error' , '\u65e7\u5bc6\u7801\u4e0d\u5339\u914d' )) .... return self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH ) .... \u5982\u679c\u6b63\u5e38\u8fd4\u56de\u503c\uff0c\u5219\u8c03\u7528 self.success \u6765\u8fd4\u56de .... def api_function ( self . request ): .... return self . success ({ 'key' : value }) ....","title":"\u9519\u8bef"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%20%E6%A6%82%E8%BF%B0/","text":"\u6982\u8ff0 # \u4ece\u529f\u80fd\u5c42\u9762\uff0c\u5bf9ArkID\u7684\u6240\u6709\u63d2\u4ef6\u8fdb\u884c\u4e86\u5206\u7c7b\uff0c\u5e76\u521b\u5efa\u4e86\u5404\u81ea\u57fa\u7c7b\u3002\u4e00\u65b9\u9762\u65b9\u4fbf\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u76f8\u5173\u63d2\u4ef6\u65f6\u53ea\u9700\u8981\u4e86\u89e3\u5404\u4e2a\u57fa\u7c7b\uff0c\u5b9e\u73b0\u76f8\u5173\u63a5\u53e3\u51fd\u6570\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u63d2\u4ef6\u5206\u7c7b\u7ba1\u7406\uff0c\u66f4\u65b9\u4fbf\u7528\u6237\u67e5\u627e\u4f7f\u7528\u3002 \u6240\u4ee5\uff0c\u6bcf\u4e00\u7c7b\u63d2\u4ef6\u57fa\u672c\u5206\u4e3a\uff1a \u529f\u80fd\u4ecb\u7ecd \u5b9e\u73b0\u601d\u8def \u62bd\u8c61\u65b9\u6cd5 \u57fa\u7c7b\u5b9a\u4e49 \u793a\u4f8b","title":"\u6982\u8ff0"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%20%E6%A6%82%E8%BF%B0/#_1","text":"\u4ece\u529f\u80fd\u5c42\u9762\uff0c\u5bf9ArkID\u7684\u6240\u6709\u63d2\u4ef6\u8fdb\u884c\u4e86\u5206\u7c7b\uff0c\u5e76\u521b\u5efa\u4e86\u5404\u81ea\u57fa\u7c7b\u3002\u4e00\u65b9\u9762\u65b9\u4fbf\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u76f8\u5173\u63d2\u4ef6\u65f6\u53ea\u9700\u8981\u4e86\u89e3\u5404\u4e2a\u57fa\u7c7b\uff0c\u5b9e\u73b0\u76f8\u5173\u63a5\u53e3\u51fd\u6570\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u63d2\u4ef6\u5206\u7c7b\u7ba1\u7406\uff0c\u66f4\u65b9\u4fbf\u7528\u6237\u67e5\u627e\u4f7f\u7528\u3002 \u6240\u4ee5\uff0c\u6bcf\u4e00\u7c7b\u63d2\u4ef6\u57fa\u672c\u5206\u4e3a\uff1a \u529f\u80fd\u4ecb\u7ecd \u5b9e\u73b0\u601d\u8def \u62bd\u8c61\u65b9\u6cd5 \u57fa\u7c7b\u5b9a\u4e49 \u793a\u4f8b","title":"\u6982\u8ff0"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/","text":"\u529f\u80fd\u4ecb\u7ecd # \u591a\u8bed\u8a00\u5305\u63d2\u4ef6\u5b9e\u73b0\u5411arkid\u6ce8\u518c\u8bed\u8a00\u7ffb\u8bd1\u6570\u636e\u529f\u80fd\uff0c\u5f00\u53d1\u8005\u4ec5\u9700\u63d0\u4f9b\u7ffb\u8bd1\u5b8c\u6210\u540e\u7684\u5b57\u5178\u548c\u5bf9\u5e94\u8bed\u8a00\u540d\u79f0\u5373\u53ef\u5b8c\u6210\u591a\u8bed\u8a00\u56fd\u9645\u5316\u7684\u914d\u7f6e\u529f\u80fd\u3002 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u591a\u8bed\u8a00\u5305\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u591a\u8bed\u8a00\u63d2\u4ef6\u57fa\u7c7b\u5e76\u91cd\u8f7dlanguage_type\u4e0elanguage_data\u4e24\u4e2a\u51fd\u6570\u5373\u53ef\uff0c\u5e73\u53f0\u4f1a\u5c06\u63d2\u4ef6\u4e2d\u6570\u636e\u6574\u5408\u8fdb\u5e73\u53f0\u7ffb\u8bd1\u6570\u636e\uff0c\u901a\u8fc7openapi\u63cf\u8ff0\u5206\u53d1\u81f3\u524d\u7aef\uff0c\u524d\u7aef\u9875\u9762\u5373\u53ef\u83b7\u53d6\u5bf9\u5e94\u6570\u636e\u4ee5\u5b8c\u6210\u56fd\u9645\u5316\u529f\u80fd\u3002 \u6ce8\u610f: \u4e00\u4e2a\u8bed\u8a00\u5305\u63d2\u4ef6\u4ec5\u652f\u6301\u4e00\u79cd\u8bed\u8a00\u7ffb\u8bd1\u6570\u636e\uff0c\u540c\u65f6\u4f18\u5148\u7ea7\u4e3a \u6570\u636e\u5e93\u81ea\u5b9a\u4e49\u7ffb\u8bd1\u6570\u636e > \u63d2\u4ef6\u7ffb\u8bd1\u6570\u636e > \u5e73\u53f0\u81ea\u5e26\u7ffb\u8bd1\u6570\u636e sequenceDiagram participant U as \u5ba2\u6237\u7aef participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u591a\u8bed\u8a00\u5305\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u8bed\u8a00\u5305 U->>C: \u8bf7\u6c42openAPI\u63cf\u8ff0\u6570\u636e C->>C: \u6574\u7406\u7ffb\u8bd1\u6570\u636e\uff0c\u4f9d\u6b21\u53e0\u52a0\u5e73\u53f0\u7ffb\u8bd1\u3001\u63d2\u4ef6\u7ffb\u8bd1\u3001\u79df\u6237\u81ea\u5b9a\u4e49\u7ffb\u8bd1 C->>U: \u6574\u7406\u5b8c\u6210\u7684\u7ffb\u8bd1\u6570\u636e \u793a\u4f8b\u5982\u4e0b\uff1a class TranslationZhExtension ( LanguageExtension ): def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" } \u62bd\u8c61\u51fd\u6570 # language_type language_data \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.language.LanguageExtension ( Extension ) # Source code in arkid/core/extension/language.py class LanguageExtension ( Extension ): TYPE = \"language\" @property def type ( self ): return LanguageExtension . TYPE def load ( self ): super () . load () self . load_language_data ( language_type = self . language_type (), data = self . language_data () ) def load_language_data ( self , data , language_type = _ ( \"\u7b80\u4f53\u4e2d\u6587\" )): \"\"\"\u52a0\u8f7d\u8bed\u8a00\u5305 Args: data (dict): \u7ffb\u8bd1\u6570\u636e language_type (str, optional): \u8bed\u8a00\u540d\u79f0. Defaults to _(\"\u7b80\u4f53\u4e2d\u6587\"). \"\"\" self . language_type = language_type self . extension_data = data extension = self . model try : language_data , _ = LanguageData . active_objects . get_or_create ( extension = extension ) language_data . extension_data = self . extension_data language_data . name = self . language_type language_data . save () except Exception as err : logger . error ( err ) self . refresh_lang_maps () @abstractmethod def language_type ( self ) -> str : \"\"\" \u8bed\u8a00\u7c7b\u578b Returns: str: \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 \"\"\" return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) @abstractmethod def language_data ( self ) -> dict : \"\"\"\u7ffb\u8bd1\u6570\u636e Returns: dict: \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 \"\"\" return {} def refresh_lang_maps ( self ): \"\"\"\u5237\u65b0\u8bed\u8a00\u5305 \"\"\" core_translation . lang_maps = core_translation . reset_lang_maps () language_data ( self ) # \u7ffb\u8bd1\u6570\u636e Returns: Type Description dict \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 Source code in arkid/core/extension/language.py @abstractmethod def language_data ( self ) -> dict : \"\"\"\u7ffb\u8bd1\u6570\u636e Returns: dict: \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 \"\"\" return {} language_type ( self ) # \u8bed\u8a00\u7c7b\u578b Returns: Type Description str \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 Source code in arkid/core/extension/language.py @abstractmethod def language_type ( self ) -> str : \"\"\" \u8bed\u8a00\u7c7b\u578b Returns: str: \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 \"\"\" return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/language.py def load ( self ): super () . load () self . load_language_data ( language_type = self . language_type (), data = self . language_data () ) load_language_data ( self , data , language_type = '\u7b80\u4f53\u4e2d\u6587' ) # \u52a0\u8f7d\u8bed\u8a00\u5305 Parameters: Name Type Description Default data dict \u7ffb\u8bd1\u6570\u636e required language_type str \u8bed\u8a00\u540d\u79f0. Defaults to _(\"\u7b80\u4f53\u4e2d\u6587\"). '\u7b80\u4f53\u4e2d\u6587' Source code in arkid/core/extension/language.py def load_language_data ( self , data , language_type = _ ( \"\u7b80\u4f53\u4e2d\u6587\" )): \"\"\"\u52a0\u8f7d\u8bed\u8a00\u5305 Args: data (dict): \u7ffb\u8bd1\u6570\u636e language_type (str, optional): \u8bed\u8a00\u540d\u79f0. Defaults to _(\"\u7b80\u4f53\u4e2d\u6587\"). \"\"\" self . language_type = language_type self . extension_data = data extension = self . model try : language_data , _ = LanguageData . active_objects . get_or_create ( extension = extension ) language_data . extension_data = self . extension_data language_data . name = self . language_type language_data . save () except Exception as err : logger . error ( err ) self . refresh_lang_maps () refresh_lang_maps ( self ) # \u5237\u65b0\u8bed\u8a00\u5305 Source code in arkid/core/extension/language.py def refresh_lang_maps ( self ): \"\"\"\u5237\u65b0\u8bed\u8a00\u5305 \"\"\" core_translation . lang_maps = core_translation . reset_lang_maps () \u793a\u4f8b # extension_root.com_longgui_language_zh.TranslationZhExtension ( LanguageExtension ) # Source code in extension_root/com_longgui_language_zh/__init__.py class TranslationZhExtension ( LanguageExtension ): def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" } language_data ( self ) # \u7ffb\u8bd1\u6570\u636e Returns: Type Description dict \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 Source code in extension_root/com_longgui_language_zh/__init__.py def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" } language_type ( self ) # \u8bed\u8a00\u7c7b\u578b Returns: Type Description str \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 Source code in extension_root/com_longgui_language_zh/__init__.py def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" )","title":"\u591a\u8bed\u8a00\u5305"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#_1","text":"\u591a\u8bed\u8a00\u5305\u63d2\u4ef6\u5b9e\u73b0\u5411arkid\u6ce8\u518c\u8bed\u8a00\u7ffb\u8bd1\u6570\u636e\u529f\u80fd\uff0c\u5f00\u53d1\u8005\u4ec5\u9700\u63d0\u4f9b\u7ffb\u8bd1\u5b8c\u6210\u540e\u7684\u5b57\u5178\u548c\u5bf9\u5e94\u8bed\u8a00\u540d\u79f0\u5373\u53ef\u5b8c\u6210\u591a\u8bed\u8a00\u56fd\u9645\u5316\u7684\u914d\u7f6e\u529f\u80fd\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#_2","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u591a\u8bed\u8a00\u5305\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u591a\u8bed\u8a00\u63d2\u4ef6\u57fa\u7c7b\u5e76\u91cd\u8f7dlanguage_type\u4e0elanguage_data\u4e24\u4e2a\u51fd\u6570\u5373\u53ef\uff0c\u5e73\u53f0\u4f1a\u5c06\u63d2\u4ef6\u4e2d\u6570\u636e\u6574\u5408\u8fdb\u5e73\u53f0\u7ffb\u8bd1\u6570\u636e\uff0c\u901a\u8fc7openapi\u63cf\u8ff0\u5206\u53d1\u81f3\u524d\u7aef\uff0c\u524d\u7aef\u9875\u9762\u5373\u53ef\u83b7\u53d6\u5bf9\u5e94\u6570\u636e\u4ee5\u5b8c\u6210\u56fd\u9645\u5316\u529f\u80fd\u3002 \u6ce8\u610f: \u4e00\u4e2a\u8bed\u8a00\u5305\u63d2\u4ef6\u4ec5\u652f\u6301\u4e00\u79cd\u8bed\u8a00\u7ffb\u8bd1\u6570\u636e\uff0c\u540c\u65f6\u4f18\u5148\u7ea7\u4e3a \u6570\u636e\u5e93\u81ea\u5b9a\u4e49\u7ffb\u8bd1\u6570\u636e > \u63d2\u4ef6\u7ffb\u8bd1\u6570\u636e > \u5e73\u53f0\u81ea\u5e26\u7ffb\u8bd1\u6570\u636e sequenceDiagram participant U as \u5ba2\u6237\u7aef participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u591a\u8bed\u8a00\u5305\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u8bed\u8a00\u5305 U->>C: \u8bf7\u6c42openAPI\u63cf\u8ff0\u6570\u636e C->>C: \u6574\u7406\u7ffb\u8bd1\u6570\u636e\uff0c\u4f9d\u6b21\u53e0\u52a0\u5e73\u53f0\u7ffb\u8bd1\u3001\u63d2\u4ef6\u7ffb\u8bd1\u3001\u79df\u6237\u81ea\u5b9a\u4e49\u7ffb\u8bd1 C->>U: \u6574\u7406\u5b8c\u6210\u7684\u7ffb\u8bd1\u6570\u636e \u793a\u4f8b\u5982\u4e0b\uff1a class TranslationZhExtension ( LanguageExtension ): def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" }","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#_3","text":"language_type language_data","title":"\u62bd\u8c61\u51fd\u6570"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#arkid.core.extension.language.LanguageExtension","text":"Source code in arkid/core/extension/language.py class LanguageExtension ( Extension ): TYPE = \"language\" @property def type ( self ): return LanguageExtension . TYPE def load ( self ): super () . load () self . load_language_data ( language_type = self . language_type (), data = self . language_data () ) def load_language_data ( self , data , language_type = _ ( \"\u7b80\u4f53\u4e2d\u6587\" )): \"\"\"\u52a0\u8f7d\u8bed\u8a00\u5305 Args: data (dict): \u7ffb\u8bd1\u6570\u636e language_type (str, optional): \u8bed\u8a00\u540d\u79f0. Defaults to _(\"\u7b80\u4f53\u4e2d\u6587\"). \"\"\" self . language_type = language_type self . extension_data = data extension = self . model try : language_data , _ = LanguageData . active_objects . get_or_create ( extension = extension ) language_data . extension_data = self . extension_data language_data . name = self . language_type language_data . save () except Exception as err : logger . error ( err ) self . refresh_lang_maps () @abstractmethod def language_type ( self ) -> str : \"\"\" \u8bed\u8a00\u7c7b\u578b Returns: str: \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 \"\"\" return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) @abstractmethod def language_data ( self ) -> dict : \"\"\"\u7ffb\u8bd1\u6570\u636e Returns: dict: \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 \"\"\" return {} def refresh_lang_maps ( self ): \"\"\"\u5237\u65b0\u8bed\u8a00\u5305 \"\"\" core_translation . lang_maps = core_translation . reset_lang_maps ()","title":"LanguageExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#arkid.core.extension.language.LanguageExtension.language_data","text":"\u7ffb\u8bd1\u6570\u636e Returns: Type Description dict \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 Source code in arkid/core/extension/language.py @abstractmethod def language_data ( self ) -> dict : \"\"\"\u7ffb\u8bd1\u6570\u636e Returns: dict: \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 \"\"\" return {}","title":"language_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#arkid.core.extension.language.LanguageExtension.language_type","text":"\u8bed\u8a00\u7c7b\u578b Returns: Type Description str \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 Source code in arkid/core/extension/language.py @abstractmethod def language_type ( self ) -> str : \"\"\" \u8bed\u8a00\u7c7b\u578b Returns: str: \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 \"\"\" return _ ( \"\u7b80\u4f53\u4e2d\u6587\" )","title":"language_type()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#arkid.core.extension.language.LanguageExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/language.py def load ( self ): super () . load () self . load_language_data ( language_type = self . language_type (), data = self . language_data () )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#arkid.core.extension.language.LanguageExtension.load_language_data","text":"\u52a0\u8f7d\u8bed\u8a00\u5305 Parameters: Name Type Description Default data dict \u7ffb\u8bd1\u6570\u636e required language_type str \u8bed\u8a00\u540d\u79f0. Defaults to _(\"\u7b80\u4f53\u4e2d\u6587\"). '\u7b80\u4f53\u4e2d\u6587' Source code in arkid/core/extension/language.py def load_language_data ( self , data , language_type = _ ( \"\u7b80\u4f53\u4e2d\u6587\" )): \"\"\"\u52a0\u8f7d\u8bed\u8a00\u5305 Args: data (dict): \u7ffb\u8bd1\u6570\u636e language_type (str, optional): \u8bed\u8a00\u540d\u79f0. Defaults to _(\"\u7b80\u4f53\u4e2d\u6587\"). \"\"\" self . language_type = language_type self . extension_data = data extension = self . model try : language_data , _ = LanguageData . active_objects . get_or_create ( extension = extension ) language_data . extension_data = self . extension_data language_data . name = self . language_type language_data . save () except Exception as err : logger . error ( err ) self . refresh_lang_maps ()","title":"load_language_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#arkid.core.extension.language.LanguageExtension.refresh_lang_maps","text":"\u5237\u65b0\u8bed\u8a00\u5305 Source code in arkid/core/extension/language.py def refresh_lang_maps ( self ): \"\"\"\u5237\u65b0\u8bed\u8a00\u5305 \"\"\" core_translation . lang_maps = core_translation . reset_lang_maps ()","title":"refresh_lang_maps()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#extension_root.com_longgui_language_zh.TranslationZhExtension","text":"Source code in extension_root/com_longgui_language_zh/__init__.py class TranslationZhExtension ( LanguageExtension ): def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" }","title":"TranslationZhExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#extension_root.com_longgui_language_zh.TranslationZhExtension.language_data","text":"\u7ffb\u8bd1\u6570\u636e Returns: Type Description dict \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 Source code in extension_root/com_longgui_language_zh/__init__.py def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" }","title":"language_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8C%85/#extension_root.com_longgui_language_zh.TranslationZhExtension.language_type","text":"\u8bed\u8a00\u7c7b\u578b Returns: Type Description str \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 Source code in extension_root/com_longgui_language_zh/__init__.py def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" )","title":"language_type()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/","text":"\u529f\u80fd\u4ecb\u7ecd # \u5ba1\u6279\u7cfb\u7edf\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\uff0c\u63d2\u4ef6\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u903b\u8f91\u4e2d\uff0c\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7cfb\u7edf\uff0c\u7b2c\u4e09\u65b9\u7cfb\u7edf\u5728\u5904\u7406\u5b8c\u5ba1\u6279\u8bf7\u6c42\u540e\uff0c\u53ef\u4ee5\u5c06\u5904\u7406\u7ed3\u679c\u53d1\u9001\u56de\u6765 \u5b9e\u73b0\u601d\u8def # \u9996\u5148\u521b\u5efa\u5ba1\u6279\u52a8\u4f5c\uff0c\u6307\u5b9a\u63a5\u53e3Path, method\u548c\u8d1f\u8d23\u5904\u7406\u7684\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6 \u5728\u4e2d\u95f4\u4ef6 arkid.core.approve_request_middleware \u4e2d\u6839\u636e\u626b\u63cf\u5ba1\u6279\u52a8\u4f5c\uff0c\u62e6\u622aHTTP Request\uff0c \u5982\u679c\u67d0\u4e2a\u5ba1\u6279\u52a8\u4f5c\u6ca1\u6709\u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\uff0c\u5219\u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\uff0c\u5206\u53d1 CREATE_APPROVE_REQUEST \u4e8b\u4ef6\uff0c\u5c06HTTP Request\u5b58\u50a8\u5728\u5ba1\u6279\u8bf7\u6c42\u4e2d, \u4e2d\u65adHTTP Request \u5982\u679c\u67d0\u4e2a\u5ba1\u6279\u52a8\u4f5c\u5df2\u7ecf\u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\uff0c\u5224\u65ad\u8be5\u5ba1\u6279\u8bf7\u6c42\u72b6\u6001\uff0c\u5982\u679c\u72b6\u6001\u4e3a\u901a\u8fc7\uff0c\u7ee7\u7eed\u6267\u884cHTTP Request\uff0c\u5982\u679c\u72b6\u6001\u4e3a\u62d2\u7edd\uff0c\u4e2d\u65adHTTP Request \u5728\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u4e2d\u76d1\u542c CREATE_APPROVE_REQUEST \u4e8b\u4ef6\uff0c\u901a\u8fc7 create_approve_request \u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u5176\u4ed6\u7b2c\u4e09\u65b9\u7cfb\u7edf\u5904\u7406 \u5176\u4ed6\u7b2c\u4e09\u65b9\u5ba1\u6279\u7cfb\u7edf\u5904\u7406\u5b8c\u5ba1\u6279\u8bf7\u6c42\u540e\uff0c\u53ef\u4ee5\u5c06\u5ba1\u6279\u7ed3\u679c\u901a\u8fc7\u63a5\u53e3\u8fd4\u56de \u540c\u610f \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/pass/ method: PUT \u5904\u7406\u51fd\u6570\uff1apass_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: pass_approve_request \u62d2\u7edd \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/deny/' method: PUT \u5904\u7406\u51fd\u6570\uff1adeny_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: deny_approve_request \u62bd\u8c61\u65b9\u6cd5 # create_approve_request deny_approve_request pass_approve_request \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.approve_system.ApproveSystemExtension ( Extension ) # Source code in arkid/core/extension/approve_system.py class ApproveSystemExtension ( Extension ): TYPE = \"approve_system\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ApproveSystemExtension . TYPE def load ( self ): self . listen_event ( core_event . CREATE_APPROVE_REQUEST , self . create_approve_request ) self . pass_path = self . register_api ( f '/approve_requests/ {{ request_id }} /pass/' , 'PUT' , self . pass_approve_request_handler , response = ApproveRequestOut , ) self . deny_path = self . register_api ( f '/approve_requests/ {{ request_id }} /deny/' , 'PUT' , self . deny_approve_request_handler , response = ApproveRequestOut , ) super () . load () @abstractmethod def create_approve_request ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 \"\"\" pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def pass_approve_request_handler ( self , request , request_id ): approve_request = ApproveRequest . valid_objects . get ( id = request_id ) self . pass_approve_request ( request , approve_request ) approve_request . status = 'pass' approve_request . save () return ErrorDict ( ErrorCode . OK ) @abstractmethod def pass_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def deny_approve_request_handler ( self , request , request_id ): approve_request = ApproveRequest . valid_objects . get ( id = request_id ) self . deny_approve_request ( request , approve_request ) approve_request . status = 'deny' approve_request . save () return ErrorDict ( ErrorCode . OK ) @abstractmethod def deny_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass def create_tenant_config ( self , tenant , config , name , type ): tenant_config = super () . create_tenant_config ( tenant , config , name , type ) tenant_config . config [ \"pass_request_url\" ] = self . pass_path tenant_config . config [ \"deny_request_url\" ] = self . deny_path tenant_config . save () return tenant_config def register_approve_system_schema ( self , schema , system_type ): self . register_config_schema ( schema , self . package + '_' + system_type ) self . register_composite_config_schema ( schema , system_type , exclude = [ 'extension' ] ) composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/approve_system.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 create_approve_request ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 required Source code in arkid/core/extension/approve_system.py @abstractmethod def create_approve_request ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 \"\"\" pass create_tenant_config ( self , tenant , config , name , type ) # \u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 Source code in arkid/core/extension/approve_system.py def create_tenant_config ( self , tenant , config , name , type ): tenant_config = super () . create_tenant_config ( tenant , config , name , type ) tenant_config . config [ \"pass_request_url\" ] = self . pass_path tenant_config . config [ \"deny_request_url\" ] = self . deny_path tenant_config . save () return tenant_config deny_approve_request ( self , request , approve_request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in arkid/core/extension/approve_system.py @abstractmethod def deny_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/approve_system.py def load ( self ): self . listen_event ( core_event . CREATE_APPROVE_REQUEST , self . create_approve_request ) self . pass_path = self . register_api ( f '/approve_requests/ {{ request_id }} /pass/' , 'PUT' , self . pass_approve_request_handler , response = ApproveRequestOut , ) self . deny_path = self . register_api ( f '/approve_requests/ {{ request_id }} /deny/' , 'PUT' , self . deny_approve_request_handler , response = ApproveRequestOut , ) super () . load () pass_approve_request ( self , request , approve_request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in arkid/core/extension/approve_system.py @abstractmethod def pass_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass \u793a\u4f8b # extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension ( ApproveSystemExtension ) # Source code in extension_root/com_longgui_approve_system_arkid/__init__.py class ApproveSystemArkIDExtension ( ApproveSystemExtension ): def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router ) @operation ( List [ ApproveRequestListItemOut ], roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) @paginate ( CustomPagination ) def list_tenant_approve_requests ( self , request , tenant_id : str , is_approved : str = '' ): package = 'com.longgui.approve.system.arkid' requests = ApproveRequest . valid_objects . filter ( tenant = request . tenant , action__extension__package = package ) if is_approved == 'true' : requests = requests . exclude ( status = \"wait\" ) elif is_approved == 'false' : requests = requests . filter ( status = \"wait\" ) return requests def create_approve_request ( self , event , ** kwargs ): pass def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' ) def deny_approve_request ( self , request , approve_request ): pass create_approve_request ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def create_approve_request ( self , event , ** kwargs ): pass deny_approve_request ( self , request , approve_request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def deny_approve_request ( self , request , approve_request ): pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router ) pass_approve_request ( self , request , approve_request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' )","title":"\u5ba1\u6279\u7cfb\u7edf"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#_1","text":"\u5ba1\u6279\u7cfb\u7edf\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\uff0c\u63d2\u4ef6\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u5904\u7406\u5ba1\u6279\u8bf7\u6c42\u903b\u8f91\u4e2d\uff0c\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u7cfb\u7edf\uff0c\u7b2c\u4e09\u65b9\u7cfb\u7edf\u5728\u5904\u7406\u5b8c\u5ba1\u6279\u8bf7\u6c42\u540e\uff0c\u53ef\u4ee5\u5c06\u5904\u7406\u7ed3\u679c\u53d1\u9001\u56de\u6765","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#_2","text":"\u9996\u5148\u521b\u5efa\u5ba1\u6279\u52a8\u4f5c\uff0c\u6307\u5b9a\u63a5\u53e3Path, method\u548c\u8d1f\u8d23\u5904\u7406\u7684\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6 \u5728\u4e2d\u95f4\u4ef6 arkid.core.approve_request_middleware \u4e2d\u6839\u636e\u626b\u63cf\u5ba1\u6279\u52a8\u4f5c\uff0c\u62e6\u622aHTTP Request\uff0c \u5982\u679c\u67d0\u4e2a\u5ba1\u6279\u52a8\u4f5c\u6ca1\u6709\u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\uff0c\u5219\u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\uff0c\u5206\u53d1 CREATE_APPROVE_REQUEST \u4e8b\u4ef6\uff0c\u5c06HTTP Request\u5b58\u50a8\u5728\u5ba1\u6279\u8bf7\u6c42\u4e2d, \u4e2d\u65adHTTP Request \u5982\u679c\u67d0\u4e2a\u5ba1\u6279\u52a8\u4f5c\u5df2\u7ecf\u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\uff0c\u5224\u65ad\u8be5\u5ba1\u6279\u8bf7\u6c42\u72b6\u6001\uff0c\u5982\u679c\u72b6\u6001\u4e3a\u901a\u8fc7\uff0c\u7ee7\u7eed\u6267\u884cHTTP Request\uff0c\u5982\u679c\u72b6\u6001\u4e3a\u62d2\u7edd\uff0c\u4e2d\u65adHTTP Request \u5728\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u4e2d\u76d1\u542c CREATE_APPROVE_REQUEST \u4e8b\u4ef6\uff0c\u901a\u8fc7 create_approve_request \u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u5176\u4ed6\u7b2c\u4e09\u65b9\u7cfb\u7edf\u5904\u7406 \u5176\u4ed6\u7b2c\u4e09\u65b9\u5ba1\u6279\u7cfb\u7edf\u5904\u7406\u5b8c\u5ba1\u6279\u8bf7\u6c42\u540e\uff0c\u53ef\u4ee5\u5c06\u5ba1\u6279\u7ed3\u679c\u901a\u8fc7\u63a5\u53e3\u8fd4\u56de \u540c\u610f \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/pass/ method: PUT \u5904\u7406\u51fd\u6570\uff1apass_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: pass_approve_request \u62d2\u7edd \u5ba1\u6279\u8bf7\u6c42 \u63a5\u53e3 path\uff1a/approve_requests/{{request_id}}/deny/' method: PUT \u5904\u7406\u51fd\u6570\uff1adeny_approve_request_handler \u9700\u8981\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5: deny_approve_request","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#_3","text":"create_approve_request deny_approve_request pass_approve_request","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension","text":"Source code in arkid/core/extension/approve_system.py class ApproveSystemExtension ( Extension ): TYPE = \"approve_system\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ApproveSystemExtension . TYPE def load ( self ): self . listen_event ( core_event . CREATE_APPROVE_REQUEST , self . create_approve_request ) self . pass_path = self . register_api ( f '/approve_requests/ {{ request_id }} /pass/' , 'PUT' , self . pass_approve_request_handler , response = ApproveRequestOut , ) self . deny_path = self . register_api ( f '/approve_requests/ {{ request_id }} /deny/' , 'PUT' , self . deny_approve_request_handler , response = ApproveRequestOut , ) super () . load () @abstractmethod def create_approve_request ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 \"\"\" pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def pass_approve_request_handler ( self , request , request_id ): approve_request = ApproveRequest . valid_objects . get ( id = request_id ) self . pass_approve_request ( request , approve_request ) approve_request . status = 'pass' approve_request . save () return ErrorDict ( ErrorCode . OK ) @abstractmethod def pass_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def deny_approve_request_handler ( self , request , request_id ): approve_request = ApproveRequest . valid_objects . get ( id = request_id ) self . deny_approve_request ( request , approve_request ) approve_request . status = 'deny' approve_request . save () return ErrorDict ( ErrorCode . OK ) @abstractmethod def deny_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass def create_tenant_config ( self , tenant , config , name , type ): tenant_config = super () . create_tenant_config ( tenant , config , name , type ) tenant_config . config [ \"pass_request_url\" ] = self . pass_path tenant_config . config [ \"deny_request_url\" ] = self . deny_path tenant_config . save () return tenant_config def register_approve_system_schema ( self , schema , system_type ): self . register_config_schema ( schema , self . package + '_' + system_type ) self . register_composite_config_schema ( schema , system_type , exclude = [ 'extension' ] )","title":"ApproveSystemExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/approve_system.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.create_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 required Source code in arkid/core/extension/approve_system.py @abstractmethod def create_approve_request ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 \"\"\" pass","title":"create_approve_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.create_tenant_config","text":"\u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 Source code in arkid/core/extension/approve_system.py def create_tenant_config ( self , tenant , config , name , type ): tenant_config = super () . create_tenant_config ( tenant , config , name , type ) tenant_config . config [ \"pass_request_url\" ] = self . pass_path tenant_config . config [ \"deny_request_url\" ] = self . deny_path tenant_config . save () return tenant_config","title":"create_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.deny_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in arkid/core/extension/approve_system.py @abstractmethod def deny_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass","title":"deny_approve_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/approve_system.py def load ( self ): self . listen_event ( core_event . CREATE_APPROVE_REQUEST , self . create_approve_request ) self . pass_path = self . register_api ( f '/approve_requests/ {{ request_id }} /pass/' , 'PUT' , self . pass_approve_request_handler , response = ApproveRequestOut , ) self . deny_path = self . register_api ( f '/approve_requests/ {{ request_id }} /deny/' , 'PUT' , self . deny_approve_request_handler , response = ApproveRequestOut , ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#arkid.core.extension.approve_system.ApproveSystemExtension.pass_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in arkid/core/extension/approve_system.py @abstractmethod def pass_approve_request ( self , request , approve_request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (django.http.HttpRequest): HTTP \u8bf7\u6c42 approve_request (arkid.core.models.ApproveRequest): \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 \"\"\" pass","title":"pass_approve_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension","text":"Source code in extension_root/com_longgui_approve_system_arkid/__init__.py class ApproveSystemArkIDExtension ( ApproveSystemExtension ): def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router ) @operation ( List [ ApproveRequestListItemOut ], roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) @paginate ( CustomPagination ) def list_tenant_approve_requests ( self , request , tenant_id : str , is_approved : str = '' ): package = 'com.longgui.approve.system.arkid' requests = ApproveRequest . valid_objects . filter ( tenant = request . tenant , action__extension__package = package ) if is_approved == 'true' : requests = requests . exclude ( status = \"wait\" ) elif is_approved == 'false' : requests = requests . filter ( status = \"wait\" ) return requests def create_approve_request ( self , event , ** kwargs ): pass def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' ) def deny_approve_request ( self , request , approve_request ): pass","title":"ApproveSystemArkIDExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.create_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def create_approve_request ( self , event , ** kwargs ): pass","title":"create_approve_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.deny_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def deny_approve_request ( self , request , approve_request ): pass","title":"deny_approve_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%AE%A1%E6%89%B9%E7%B3%BB%E7%BB%9F/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.pass_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' )","title":"pass_approve_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/","text":"\u529f\u80fd\u4ecb\u7ecd # \u5e94\u7528\u534f\u8bae\uff0c\u5176\u5b83\u7c7b\u578b\u7684\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u534f\u8bae\u57fa\u7c7b\u7684\u65b9\u5f0f\uff0c\u83b7\u5f97\u57fa\u7c7b\u7684\u65b9\u6cd5\uff0c\u65b9\u4fbf\u63d2\u4ef6\u8f7d\u5165 \u5b9e\u73b0\u601d\u8def # \u7b2c\u4e00\u6b65\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7c7b\uff0c\u7ee7\u627fAppProtocolExtension\u8fd9\u4e2a\u57fa\u7c7b \u7b2c\u4e8c\u6b65\uff0c\u8981\u91cd\u8f7d\u57fa\u7c7b\u7684 load \u65b9\u6cd5 \u9700\u8981\u5c06\u5e94\u7528\u7684schema\u4f7f\u7528 register_app_protocol_schema \u65b9\u6cd5\u52a0\u8f7d\u8fdb\u53bb \u53ef\u9009\uff0c\u5982\u679c\u5e94\u7528\u9700\u8981\u4f7f\u7528\u7531\u57fa\u7c7b\u5b9e\u73b0\u7684\u5e94\u7528\u5165\u53e3\u8ba4\u8bc1\u65b9\u6cd5\uff0c\u9700\u8981\u8c03\u7528 register_enter_view \u65b9\u6cd5 \u7b2c\u4e09\u6b65\uff0c\u5b9e\u73b0\u57fa\u7c7b\u4e2d\u89c4\u5b9a\u7684\u62bd\u8c61\u65b9\u6cd5 \u62bd\u8c61\u65b9\u6cd5 # create_app update_app delete_app \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.app_protocol.AppProtocolExtension ( Extension ) # Source code in arkid/core/extension/app_protocol.py class AppProtocolExtension ( Extension ): TYPE = \"app_protocol\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'app_type' composite_model = App @property def type ( self ): return AppProtocolExtension . TYPE def load ( self ): super () . load () self . listen_event ( core_event . CREATE_APP_CONFIG , self . create_app ) self . listen_event ( core_event . UPDATE_APP_CONFIG , self . update_app ) self . listen_event ( core_event . DELETE_APP , self . delete_app ) def register_app_protocol_schema ( self , schema , app_type ): \"\"\" \u6ce8\u518c\u5e94\u7528\u7684schema Params: schema: schema app_type: \u5e94\u7528\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + app_type ) self . register_composite_config_schema ( schema , app_type , exclude = [ 'secret' ]) @abstractmethod def create_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass @abstractmethod def update_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass @abstractmethod def delete_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass def register_enter_view ( self , view : View , path : str , url_name : str , type : list , tenant_urls : bool = True ): ''' \u6ce8\u518c\u7edf\u4e00\u7684\u5165\u53e3\u51fd\u6570\uff0c\u65b9\u4fbf\u68c0\u6d4b Params: view: str \u76ee\u6807View\u7684as_view()\uff0c\u4f8b\u5982:AuthorizationView.as_view() path: str \u9700\u8981\u8df3\u8f6c\u7684\u8def\u5f84\uff0c\u4f8b\u5982:r\"app/(?P<app_id>[\\w-]+)/oauth/authorize/$ url_name: str \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0, \u4f8b\u5982:authorize type: list \u4e00\u4e2a\u5f53\u524d\u63d2\u4ef6\u7684\u7c7b\u578blist, \u4f8b\u5982:['OIDC', 'OAuth2'] tenant_urls: bool \u662f\u5426\u6ce8\u518c\u4e3a\u79df\u6237url Return: response: \u51fd\u6570\u6267\u884c\u7ed3\u679c ''' # \u5165\u53e3\u51fd\u6570 class EnterView ( View ): def get ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) def get_login_url ( self , request , alert ): from arkid.config import get_app_config full_path = request . get_full_path () next_uri = urllib . parse . quote ( full_path ) host = get_app_config () . get_frontend_host () tenant = request . tenant if not tenant : return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' if tenant . is_platform_tenant and tenant . id . hex not in request . get_full_path () and \\ str ( tenant . id ) not in request . get_full_path (): return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' token = request . GET . get ( 'token' , '' ) if not token : tenant_expand = Tenant . expand_objects . get ( id = tenant . id ) if tenant_expand . get ( 'login_url' ): return f \" { tenant_expand [ 'login_url' ] } ?tenant_id= { tenant . id } &next= { next_uri } \" backend_host = get_app_config () . get_host () backend_login_url = '/api/v1/login' return f \" { backend_host }{ backend_login_url } ?tenant_id= { tenant . id } &next= { next_uri } \" # if tenant.slug: # host =get_app_config().get_slug_frontend_host(tenant.slug) # return f'{host}{LOGIN_URL}?&next={next_uri}' # else: # return f'{host}{LOGIN_URL}?tenant_id={tenant.id}&next={next_uri}' if tenant . slug : host = get_app_config () . get_slug_frontend_host ( tenant . slug ) return f ' { host }{ LOGIN_URL } ?alert= { alert } &next= { next_uri } ' else : return f ' { host }{ LOGIN_URL } ?tenant_id= { tenant . id } &alert= { alert } &next= { next_uri } ' def post ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) # \u83b7\u53d6\u8fdb\u5165\u7684\u8def\u7531 entry_url = [ re_path ( path , EnterView . as_view (), name = url_name )] # \u6ce8\u518c\u5165\u53e3\u8def\u7531 self . register_routers ( entry_url , tenant_urls ) composite_model ( BaseModel , ExpandModel ) django-model # App(id, is_del, is_active, updated, created, tenant, name, url, logo, description, type, secret, config, package, entry_permission, arkstore_category_id, arkstore_app_id) Source code in arkid/core/extension/app_protocol.py class App ( BaseModel , ExpandModel ): class Meta ( object ): verbose_name = _ ( \"APP\" , \"\u5e94\u7528\" ) verbose_name_plural = _ ( \"APP\" , \"\u5e94\u7528\" ) tenant = models . ForeignKey ( 'Tenant' , blank = False , on_delete = models . PROTECT ) name = models . CharField ( max_length = 128 , verbose_name = _ ( 'name' , '\u540d\u79f0' )) url = models . CharField ( max_length = 1024 , null = True , blank = True , verbose_name = _ ( 'url' , '\u5730\u5740' )) logo = models . CharField ( max_length = 1024 , blank = True , null = True , default = '' , verbose_name = _ ( 'logo' , '\u56fe\u6807' ) ) description = models . TextField ( blank = True , null = True , verbose_name = _ ( 'description' , '\u63cf\u8ff0' ) ) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( 'type' , '\u7c7b\u578b' )) secret = models . CharField ( max_length = 255 , blank = True , null = True , default = '' , verbose_name = _ ( 'secret' , '\u5bc6\u94a5' ), ) config = models . OneToOneField ( TenantExtensionConfig , blank = True , null = True , default = None , on_delete = models . PROTECT , ) package = models . CharField ( max_length = 128 , blank = True , null = True , default = '' , verbose_name = _ ( 'package' , '\u5305\u540d' ), ) entry_permission = models . ForeignKey ( 'SystemPermission' , blank = True , null = True , default = None , on_delete = models . PROTECT ) arkstore_category_id = models . IntegerField ( default = None , null = True , verbose_name = _ ( 'ArkStore\u5206\u7c7bID' )) arkstore_app_id = models . CharField ( max_length = 1024 , blank = True , null = True , default = None , verbose_name = _ ( 'Arkstore app id' , '\u65b9\u821f\u5546\u5e97\u5e94\u7528\u6807\u8bc6' ) ) def __str__ ( self ) -> str : return f 'Tenant: { self . tenant . name } , App: { self . name } ' arkstore_app_id : CharField blank django-field nullable # Arkstore app id arkstore_category_id : IntegerField django-field nullable # ArkStore\u5206\u7c7bID config : OneToOneField blank django-field nullable # config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 description : TextField blank django-field nullable # description entry_permission : ForeignKey blank django-field nullable # entry permission id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 logo : CharField blank django-field nullable # logo name : CharField django-field # name package : CharField blank django-field nullable # package secret : CharField blank django-field nullable # secret tenant : ForeignKey django-field # tenant type : CharField django-field # type updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 url : CharField blank django-field nullable # url create_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in arkid/core/extension/app_protocol.py @abstractmethod def create_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass delete_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in arkid/core/extension/app_protocol.py @abstractmethod def delete_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/app_protocol.py def load ( self ): super () . load () self . listen_event ( core_event . CREATE_APP_CONFIG , self . create_app ) self . listen_event ( core_event . UPDATE_APP_CONFIG , self . update_app ) self . listen_event ( core_event . DELETE_APP , self . delete_app ) register_app_protocol_schema ( self , schema , app_type ) # \u6ce8\u518c\u5e94\u7528\u7684schema Parameters: Name Type Description Default schema schema required app_type \u5e94\u7528\u7c7b\u578b required Source code in arkid/core/extension/app_protocol.py def register_app_protocol_schema ( self , schema , app_type ): \"\"\" \u6ce8\u518c\u5e94\u7528\u7684schema Params: schema: schema app_type: \u5e94\u7528\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + app_type ) self . register_composite_config_schema ( schema , app_type , exclude = [ 'secret' ]) register_enter_view ( self , view , path , url_name , type , tenant_urls = True ) # \u6ce8\u518c\u7edf\u4e00\u7684\u5165\u53e3\u51fd\u6570\uff0c\u65b9\u4fbf\u68c0\u6d4b Parameters: Name Type Description Default view View str \u76ee\u6807View\u7684as_view()\uff0c\u4f8b\u5982:AuthorizationView.as_view() required path str str \u9700\u8981\u8df3\u8f6c\u7684\u8def\u5f84\uff0c\u4f8b\u5982:r\"app/(?P [\\w-]+)/oauth/authorize/$ required url_name str str \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0, \u4f8b\u5982:authorize required type list list \u4e00\u4e2a\u5f53\u524d\u63d2\u4ef6\u7684\u7c7b\u578blist, \u4f8b\u5982:['OIDC', 'OAuth2'] required tenant_urls bool bool \u662f\u5426\u6ce8\u518c\u4e3a\u79df\u6237url True Returns: Type Description response \u51fd\u6570\u6267\u884c\u7ed3\u679c Source code in arkid/core/extension/app_protocol.py def register_enter_view ( self , view : View , path : str , url_name : str , type : list , tenant_urls : bool = True ): ''' \u6ce8\u518c\u7edf\u4e00\u7684\u5165\u53e3\u51fd\u6570\uff0c\u65b9\u4fbf\u68c0\u6d4b Params: view: str \u76ee\u6807View\u7684as_view()\uff0c\u4f8b\u5982:AuthorizationView.as_view() path: str \u9700\u8981\u8df3\u8f6c\u7684\u8def\u5f84\uff0c\u4f8b\u5982:r\"app/(?P<app_id>[\\w-]+)/oauth/authorize/$ url_name: str \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0, \u4f8b\u5982:authorize type: list \u4e00\u4e2a\u5f53\u524d\u63d2\u4ef6\u7684\u7c7b\u578blist, \u4f8b\u5982:['OIDC', 'OAuth2'] tenant_urls: bool \u662f\u5426\u6ce8\u518c\u4e3a\u79df\u6237url Return: response: \u51fd\u6570\u6267\u884c\u7ed3\u679c ''' # \u5165\u53e3\u51fd\u6570 class EnterView ( View ): def get ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) def get_login_url ( self , request , alert ): from arkid.config import get_app_config full_path = request . get_full_path () next_uri = urllib . parse . quote ( full_path ) host = get_app_config () . get_frontend_host () tenant = request . tenant if not tenant : return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' if tenant . is_platform_tenant and tenant . id . hex not in request . get_full_path () and \\ str ( tenant . id ) not in request . get_full_path (): return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' token = request . GET . get ( 'token' , '' ) if not token : tenant_expand = Tenant . expand_objects . get ( id = tenant . id ) if tenant_expand . get ( 'login_url' ): return f \" { tenant_expand [ 'login_url' ] } ?tenant_id= { tenant . id } &next= { next_uri } \" backend_host = get_app_config () . get_host () backend_login_url = '/api/v1/login' return f \" { backend_host }{ backend_login_url } ?tenant_id= { tenant . id } &next= { next_uri } \" # if tenant.slug: # host =get_app_config().get_slug_frontend_host(tenant.slug) # return f'{host}{LOGIN_URL}?&next={next_uri}' # else: # return f'{host}{LOGIN_URL}?tenant_id={tenant.id}&next={next_uri}' if tenant . slug : host = get_app_config () . get_slug_frontend_host ( tenant . slug ) return f ' { host }{ LOGIN_URL } ?alert= { alert } &next= { next_uri } ' else : return f ' { host }{ LOGIN_URL } ?tenant_id= { tenant . id } &alert= { alert } &next= { next_uri } ' def post ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) # \u83b7\u53d6\u8fdb\u5165\u7684\u8def\u7531 entry_url = [ re_path ( path , EnterView . as_view (), name = url_name )] # \u6ce8\u518c\u5165\u53e3\u8def\u7531 self . register_routers ( entry_url , tenant_urls ) update_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in arkid/core/extension/app_protocol.py @abstractmethod def update_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass \u793a\u4f8b # extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension ( AppProtocolExtension ) # Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py class OAuth2ServerExtension ( AppProtocolExtension ): def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load () def load_urls ( self ): self . register_routers ( urls , True ) def load_auth_view ( self ): # \u52a0\u8f7d\u8ba4\u8bc1view auth_view = AuthorizationView . as_view () auth_path = r \"app/(?P<app_id>[\\w-]+)/oauth/authorize/$\" url_name = \"authorize\" type = [ 'OIDC' , 'OAuth2' ] self . register_enter_view ( auth_view , auth_path , url_name , type ) def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True ) def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False ) def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization create_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True ) delete_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load () update_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False ) update_app_data ( self , event , config , is_create ) # \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True update_url_data ( self , tenant_id , config , obj ) # \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization","title":"\u5e94\u7528\u534f\u8bae"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#_1","text":"\u5e94\u7528\u534f\u8bae\uff0c\u5176\u5b83\u7c7b\u578b\u7684\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u534f\u8bae\u57fa\u7c7b\u7684\u65b9\u5f0f\uff0c\u83b7\u5f97\u57fa\u7c7b\u7684\u65b9\u6cd5\uff0c\u65b9\u4fbf\u63d2\u4ef6\u8f7d\u5165","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#_2","text":"\u7b2c\u4e00\u6b65\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7c7b\uff0c\u7ee7\u627fAppProtocolExtension\u8fd9\u4e2a\u57fa\u7c7b \u7b2c\u4e8c\u6b65\uff0c\u8981\u91cd\u8f7d\u57fa\u7c7b\u7684 load \u65b9\u6cd5 \u9700\u8981\u5c06\u5e94\u7528\u7684schema\u4f7f\u7528 register_app_protocol_schema \u65b9\u6cd5\u52a0\u8f7d\u8fdb\u53bb \u53ef\u9009\uff0c\u5982\u679c\u5e94\u7528\u9700\u8981\u4f7f\u7528\u7531\u57fa\u7c7b\u5b9e\u73b0\u7684\u5e94\u7528\u5165\u53e3\u8ba4\u8bc1\u65b9\u6cd5\uff0c\u9700\u8981\u8c03\u7528 register_enter_view \u65b9\u6cd5 \u7b2c\u4e09\u6b65\uff0c\u5b9e\u73b0\u57fa\u7c7b\u4e2d\u89c4\u5b9a\u7684\u62bd\u8c61\u65b9\u6cd5","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#_3","text":"create_app update_app delete_app","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension","text":"Source code in arkid/core/extension/app_protocol.py class AppProtocolExtension ( Extension ): TYPE = \"app_protocol\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'app_type' composite_model = App @property def type ( self ): return AppProtocolExtension . TYPE def load ( self ): super () . load () self . listen_event ( core_event . CREATE_APP_CONFIG , self . create_app ) self . listen_event ( core_event . UPDATE_APP_CONFIG , self . update_app ) self . listen_event ( core_event . DELETE_APP , self . delete_app ) def register_app_protocol_schema ( self , schema , app_type ): \"\"\" \u6ce8\u518c\u5e94\u7528\u7684schema Params: schema: schema app_type: \u5e94\u7528\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + app_type ) self . register_composite_config_schema ( schema , app_type , exclude = [ 'secret' ]) @abstractmethod def create_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass @abstractmethod def update_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass @abstractmethod def delete_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass def register_enter_view ( self , view : View , path : str , url_name : str , type : list , tenant_urls : bool = True ): ''' \u6ce8\u518c\u7edf\u4e00\u7684\u5165\u53e3\u51fd\u6570\uff0c\u65b9\u4fbf\u68c0\u6d4b Params: view: str \u76ee\u6807View\u7684as_view()\uff0c\u4f8b\u5982:AuthorizationView.as_view() path: str \u9700\u8981\u8df3\u8f6c\u7684\u8def\u5f84\uff0c\u4f8b\u5982:r\"app/(?P<app_id>[\\w-]+)/oauth/authorize/$ url_name: str \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0, \u4f8b\u5982:authorize type: list \u4e00\u4e2a\u5f53\u524d\u63d2\u4ef6\u7684\u7c7b\u578blist, \u4f8b\u5982:['OIDC', 'OAuth2'] tenant_urls: bool \u662f\u5426\u6ce8\u518c\u4e3a\u79df\u6237url Return: response: \u51fd\u6570\u6267\u884c\u7ed3\u679c ''' # \u5165\u53e3\u51fd\u6570 class EnterView ( View ): def get ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) def get_login_url ( self , request , alert ): from arkid.config import get_app_config full_path = request . get_full_path () next_uri = urllib . parse . quote ( full_path ) host = get_app_config () . get_frontend_host () tenant = request . tenant if not tenant : return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' if tenant . is_platform_tenant and tenant . id . hex not in request . get_full_path () and \\ str ( tenant . id ) not in request . get_full_path (): return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' token = request . GET . get ( 'token' , '' ) if not token : tenant_expand = Tenant . expand_objects . get ( id = tenant . id ) if tenant_expand . get ( 'login_url' ): return f \" { tenant_expand [ 'login_url' ] } ?tenant_id= { tenant . id } &next= { next_uri } \" backend_host = get_app_config () . get_host () backend_login_url = '/api/v1/login' return f \" { backend_host }{ backend_login_url } ?tenant_id= { tenant . id } &next= { next_uri } \" # if tenant.slug: # host =get_app_config().get_slug_frontend_host(tenant.slug) # return f'{host}{LOGIN_URL}?&next={next_uri}' # else: # return f'{host}{LOGIN_URL}?tenant_id={tenant.id}&next={next_uri}' if tenant . slug : host = get_app_config () . get_slug_frontend_host ( tenant . slug ) return f ' { host }{ LOGIN_URL } ?alert= { alert } &next= { next_uri } ' else : return f ' { host }{ LOGIN_URL } ?tenant_id= { tenant . id } &alert= { alert } &next= { next_uri } ' def post ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) # \u83b7\u53d6\u8fdb\u5165\u7684\u8def\u7531 entry_url = [ re_path ( path , EnterView . as_view (), name = url_name )] # \u6ce8\u518c\u5165\u53e3\u8def\u7531 self . register_routers ( entry_url , tenant_urls )","title":"AppProtocolExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model","text":"App(id, is_del, is_active, updated, created, tenant, name, url, logo, description, type, secret, config, package, entry_permission, arkstore_category_id, arkstore_app_id) Source code in arkid/core/extension/app_protocol.py class App ( BaseModel , ExpandModel ): class Meta ( object ): verbose_name = _ ( \"APP\" , \"\u5e94\u7528\" ) verbose_name_plural = _ ( \"APP\" , \"\u5e94\u7528\" ) tenant = models . ForeignKey ( 'Tenant' , blank = False , on_delete = models . PROTECT ) name = models . CharField ( max_length = 128 , verbose_name = _ ( 'name' , '\u540d\u79f0' )) url = models . CharField ( max_length = 1024 , null = True , blank = True , verbose_name = _ ( 'url' , '\u5730\u5740' )) logo = models . CharField ( max_length = 1024 , blank = True , null = True , default = '' , verbose_name = _ ( 'logo' , '\u56fe\u6807' ) ) description = models . TextField ( blank = True , null = True , verbose_name = _ ( 'description' , '\u63cf\u8ff0' ) ) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( 'type' , '\u7c7b\u578b' )) secret = models . CharField ( max_length = 255 , blank = True , null = True , default = '' , verbose_name = _ ( 'secret' , '\u5bc6\u94a5' ), ) config = models . OneToOneField ( TenantExtensionConfig , blank = True , null = True , default = None , on_delete = models . PROTECT , ) package = models . CharField ( max_length = 128 , blank = True , null = True , default = '' , verbose_name = _ ( 'package' , '\u5305\u540d' ), ) entry_permission = models . ForeignKey ( 'SystemPermission' , blank = True , null = True , default = None , on_delete = models . PROTECT ) arkstore_category_id = models . IntegerField ( default = None , null = True , verbose_name = _ ( 'ArkStore\u5206\u7c7bID' )) arkstore_app_id = models . CharField ( max_length = 1024 , blank = True , null = True , default = None , verbose_name = _ ( 'Arkstore app id' , '\u65b9\u821f\u5546\u5e97\u5e94\u7528\u6807\u8bc6' ) ) def __str__ ( self ) -> str : return f 'Tenant: { self . tenant . name } , App: { self . name } '","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.arkstore_app_id","text":"Arkstore app id","title":"arkstore_app_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.arkstore_category_id","text":"ArkStore\u5206\u7c7bID","title":"arkstore_category_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.config","text":"config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.description","text":"description","title":"description"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.entry_permission","text":"entry permission","title":"entry_permission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.logo","text":"logo","title":"logo"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.package","text":"package","title":"package"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.secret","text":"secret","title":"secret"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.type","text":"type","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.composite_model.url","text":"url","title":"url"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.create_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in arkid/core/extension/app_protocol.py @abstractmethod def create_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass","title":"create_app()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.delete_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in arkid/core/extension/app_protocol.py @abstractmethod def delete_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass","title":"delete_app()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/app_protocol.py def load ( self ): super () . load () self . listen_event ( core_event . CREATE_APP_CONFIG , self . create_app ) self . listen_event ( core_event . UPDATE_APP_CONFIG , self . update_app ) self . listen_event ( core_event . DELETE_APP , self . delete_app )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.register_app_protocol_schema","text":"\u6ce8\u518c\u5e94\u7528\u7684schema Parameters: Name Type Description Default schema schema required app_type \u5e94\u7528\u7c7b\u578b required Source code in arkid/core/extension/app_protocol.py def register_app_protocol_schema ( self , schema , app_type ): \"\"\" \u6ce8\u518c\u5e94\u7528\u7684schema Params: schema: schema app_type: \u5e94\u7528\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + app_type ) self . register_composite_config_schema ( schema , app_type , exclude = [ 'secret' ])","title":"register_app_protocol_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.register_enter_view","text":"\u6ce8\u518c\u7edf\u4e00\u7684\u5165\u53e3\u51fd\u6570\uff0c\u65b9\u4fbf\u68c0\u6d4b Parameters: Name Type Description Default view View str \u76ee\u6807View\u7684as_view()\uff0c\u4f8b\u5982:AuthorizationView.as_view() required path str str \u9700\u8981\u8df3\u8f6c\u7684\u8def\u5f84\uff0c\u4f8b\u5982:r\"app/(?P [\\w-]+)/oauth/authorize/$ required url_name str str \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0, \u4f8b\u5982:authorize required type list list \u4e00\u4e2a\u5f53\u524d\u63d2\u4ef6\u7684\u7c7b\u578blist, \u4f8b\u5982:['OIDC', 'OAuth2'] required tenant_urls bool bool \u662f\u5426\u6ce8\u518c\u4e3a\u79df\u6237url True Returns: Type Description response \u51fd\u6570\u6267\u884c\u7ed3\u679c Source code in arkid/core/extension/app_protocol.py def register_enter_view ( self , view : View , path : str , url_name : str , type : list , tenant_urls : bool = True ): ''' \u6ce8\u518c\u7edf\u4e00\u7684\u5165\u53e3\u51fd\u6570\uff0c\u65b9\u4fbf\u68c0\u6d4b Params: view: str \u76ee\u6807View\u7684as_view()\uff0c\u4f8b\u5982:AuthorizationView.as_view() path: str \u9700\u8981\u8df3\u8f6c\u7684\u8def\u5f84\uff0c\u4f8b\u5982:r\"app/(?P<app_id>[\\w-]+)/oauth/authorize/$ url_name: str \u6ce8\u518c\u7684\u8def\u5f84\u540d\u79f0, \u4f8b\u5982:authorize type: list \u4e00\u4e2a\u5f53\u524d\u63d2\u4ef6\u7684\u7c7b\u578blist, \u4f8b\u5982:['OIDC', 'OAuth2'] tenant_urls: bool \u662f\u5426\u6ce8\u518c\u4e3a\u79df\u6237url Return: response: \u51fd\u6570\u6267\u884c\u7ed3\u679c ''' # \u5165\u53e3\u51fd\u6570 class EnterView ( View ): def get ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) def get_login_url ( self , request , alert ): from arkid.config import get_app_config full_path = request . get_full_path () next_uri = urllib . parse . quote ( full_path ) host = get_app_config () . get_frontend_host () tenant = request . tenant if not tenant : return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' if tenant . is_platform_tenant and tenant . id . hex not in request . get_full_path () and \\ str ( tenant . id ) not in request . get_full_path (): return f ' { host }{ LOGIN_URL } ?tenant_id=&next= { next_uri } ' token = request . GET . get ( 'token' , '' ) if not token : tenant_expand = Tenant . expand_objects . get ( id = tenant . id ) if tenant_expand . get ( 'login_url' ): return f \" { tenant_expand [ 'login_url' ] } ?tenant_id= { tenant . id } &next= { next_uri } \" backend_host = get_app_config () . get_host () backend_login_url = '/api/v1/login' return f \" { backend_host }{ backend_login_url } ?tenant_id= { tenant . id } &next= { next_uri } \" # if tenant.slug: # host =get_app_config().get_slug_frontend_host(tenant.slug) # return f'{host}{LOGIN_URL}?&next={next_uri}' # else: # return f'{host}{LOGIN_URL}?tenant_id={tenant.id}&next={next_uri}' if tenant . slug : host = get_app_config () . get_slug_frontend_host ( tenant . slug ) return f ' { host }{ LOGIN_URL } ?alert= { alert } &next= { next_uri } ' else : return f ' { host }{ LOGIN_URL } ?tenant_id= { tenant . id } &alert= { alert } &next= { next_uri } ' def post ( self , request , ** kwargs ): from arkid.core.perm.permission_data import PermissionData permissiondata = PermissionData () result , alert = permissiondata . check_app_entry_permission ( request , type , kwargs ) if result : return view ( request ) else : url = self . get_login_url ( request , alert ) return HttpResponseRedirect ( url ) # \u83b7\u53d6\u8fdb\u5165\u7684\u8def\u7531 entry_url = [ re_path ( path , EnterView . as_view (), name = url_name )] # \u6ce8\u518c\u5165\u53e3\u8def\u7531 self . register_routers ( entry_url , tenant_urls )","title":"register_enter_view()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#arkid.core.extension.app_protocol.AppProtocolExtension.update_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in arkid/core/extension/app_protocol.py @abstractmethod def update_app ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Params: event: \u4e8b\u4ef6\u53c2\u6570 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: bool: \u662f\u5426\u6210\u529f\u6267\u884c \"\"\" pass","title":"update_app()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension","text":"Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py class OAuth2ServerExtension ( AppProtocolExtension ): def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load () def load_urls ( self ): self . register_routers ( urls , True ) def load_auth_view ( self ): # \u52a0\u8f7d\u8ba4\u8bc1view auth_view = AuthorizationView . as_view () auth_path = r \"app/(?P<app_id>[\\w-]+)/oauth/authorize/$\" url_name = \"authorize\" type = [ 'OIDC' , 'OAuth2' ] self . register_enter_view ( auth_view , auth_path , url_name , type ) def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True ) def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False ) def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization","title":"OAuth2ServerExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.create_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True )","title":"create_app()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.delete_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True","title":"delete_app()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.update_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False )","title":"update_app()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.update_app_data","text":"\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True","title":"update_app_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.update_url_data","text":"\u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization","title":"update_url_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/","text":"\u529f\u80fd\u4ecb\u7ecd # \u6388\u6743\u89c4\u5219\uff0c\u4f5c\u4e3a\u7cfb\u7edf\u5df2\u6709\u8ba4\u8bc1\u65b9\u5f0f\u7684\u8865\u5145\uff0c\u5b83\u53ef\u4ee5\u652f\u6301\u66f4\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u8d4b\u4e88\u3002 \u53ef\u4ee5\u652f\u6301\u9488\u5bf9\u7528\u6237\u7684\u4e0d\u540c\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u7684\u8d4b\u4e88\uff0c\u4f8b\u5982\u7528\u6237\u540d\u3001\u6635\u79f0\u3001\u6027\u522b\u3001\u624b\u673a\u53f7\u7b49\u3002 \u4e5f\u53ef\u4ee5\u9488\u5bf9\u5206\u7ec4\u7684\u4e0d\u540c\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u7684\u8d4b\u4e88\u3002 \u8fd8\u53ef\u4ee5\u6839\u636e\u5f00\u53d1\u8005\u9700\u8981\uff0c\u901a\u8fc7\u6269\u5c55\u6570\u636e\u5b58\u50a8\u7684\u7ed3\u6784\uff0c\u5b9e\u73b0\u7279\u5b9a\u573a\u666f\u4e0b\u6743\u9650\u7684\u8d4b\u4e88\u3002 \u5b9e\u73b0\u601d\u8def # arkid\u7cfb\u7edf\u5df2\u7ecf\u9ed8\u8ba4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9488\u5bf9\u7528\u6237\u5c5e\u6027\u7684\u6743\u9650\u8d4b\u4e88\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u8fdb\u884c\u53c2\u8003 graph LR A[\u5f00\u59cb] --> B{\u8bbe\u8ba1schema} --> C{\u6ce8\u518c\u524d\u7aef\u9875\u9762}--> D{\u6ce8\u518cschema}--> E{\u5b9e\u73b0\u6388\u6743\u51fd\u6570} --> F[\u7ed3\u675f]; \u4e0b\u9762\u5bf9\u4e8e\u5b9e\u73b0\u601d\u8def\u505a\u4e00\u4e0b\u7b80\u5355\u7684\u4ecb\u7ecd: \u9700\u8981\u5f00\u53d1\u8005\u60f3\u6e05\u695a\u81ea\u5df1\u5f00\u53d1\u63d2\u4ef6\u7684\u9700\u8981\u7b5b\u9009\u7684\u5c5e\u6027\uff0c\u662f\u7528\u6237\u5c5e\u6027\uff0c\u8fd8\u662f\u5206\u7ec4\u5c5e\u6027\uff0c\u6216\u8005\u5176\u5b83\u5c5e\u6027\u3002\u4ee5\u53ca\u9700\u8981\u7b5b\u9009\u90a3\u4e9b\u5e94\u7528\uff0c\u4ee5\u53ca\u90a3\u4e9b\u6743\u9650\u3002 \u8981\u8bbe\u8ba1\u51faschema\uff0c\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7ed3\u6784\u3002\u5982\u679cschema\u4e2d\u6709\u7528\u5230\u4e00\u4e9b\u5e94\u7528\u5217\u8868\uff0c\u6743\u9650\u5217\u8868\uff0c\u7528\u6237\u5217\u8868\u7b49\uff0c\u9700\u8981\u628a\u7528\u5230\u7684\u524d\u7aef\u9875\u9762\uff0c\u4f7f\u7528\u7236\u7c7b\u7684 register_front_pages \u5355\u72ec\u8fdb\u884c\u6ce8\u518c\u3002 \u4e0d\u540c\u7684\u6388\u6743\u89c4\u5219\u4e4b\u95f4\u662f\u901a\u8fc7\u4e0d\u540c\u7684schema\u8fdb\u884c\u5212\u5206\uff0c\u6240\u4ee5\u5f53\u5f00\u53d1\u8005\u8bbe\u8ba1\u5b8cschema\u540e\uff0c\u9700\u8981\u901a\u8fc7 register_impowerrule_schema \uff0c\u8fdb\u884c\u6ce8\u518c\u3002 \u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u6388\u6743\u89c4\u5219\u7684\u9875\u9762\u7eff\u8272Type\u5b57\u6bb5\u5c31\u4f1a\u591a\u4e00\u79cd\u6388\u6743\u89c4\u5219\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u5982\u679c\u6211\u4eec\u9009\u62e9\u4e0d\u540c\u7684\u6388\u6743\u89c4\u5219\uff0c\u7ea2\u8272\u90e8\u5206\u5c31\u4f1a\u5c55\u793a\u51fa\u4e0d\u540c\u7684\u5185\u5bb9\uff0c\u5c55\u793a\u5185\u5bb9\u7531schema\u7ed3\u6784\u51b3\u5b9a\u3002 \u6388\u6743\u89c4\u5219\u7684\u521b\u5efa\u7f16\u8f91\u548c\u5220\u9664\uff0c\u90fd\u662f\u7531arkid\u63d0\u524d\u5904\u7406\u597d\u7684\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5173\u6ce8\u8d4b\u6743\u65b9\u6cd5\u5c31\u53ef\u4ee5\u3002 \u4e0b\u9762\u5bf9\u8d4b\u6743\u65b9\u6cd5\u7684\u4f7f\u7528\u505a\u4e0b\u4ecb\u7ecd: \u9700\u8981\u5f00\u53d1\u8005\u5b9e\u73b0 get_auth_result(event, **kwargs) \u65b9\u6cd5 \u53c2\u6570: \u8fd9\u4e2a\u65b9\u6cd5\u7684 kwargs \uff0c event \u4e24\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 event \u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u4e2d\u5305\u542b\u4e86 data \u548c tenant \u4e24\u4e2a\u5c5e\u6027\uff0c\u5176\u4e2d event.tenant \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u7684\u79df\u6237\uff1b event.data \u53ef\u4ee5\u83b7\u53d6\u5230\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\u3002\u6211\u4eec\u83b7\u53d6data\u91cc\u9762\u7684\u503c data.user \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u7528\u6237\uff1b data.app \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u5e94\u7528\uff0c\u5982\u679c\u8fd9\u4e2a\u5e94\u7528\u662f\u4e00\u4e2aNone\uff0c\u5c31\u8868\u793a\u5e94\u7528\u4e3aarkid\uff0c\u53cd\u4e4b\u5219\u4e3a\u5176\u5b83\u5e94\u7528\uff1b data.arr \u53ef\u4ee5\u83b7\u53d6\u5230\u7528\u6237\u6743\u9650\u6570\u7ec4(0\u62161\u7ec4\u6210\uff0c0\u662f\u6ca1\u6743\u9650\uff0c1\u6709\u6743\u9650\uff0c\u6570\u7ec4\u4e0b\u6807\u548c\u6570\u636e\u5e93\u6743\u9650\u8868\u91cc\u7684sort_id\u662f\u76f8\u540c\u7684)\uff1b data.config \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u6388\u6743\u89c4\u5219 \u4f7f\u7528: \u5f00\u53d1\u8005\u9700\u8981\u6839\u636e\u6388\u6743\u89c4\u5219 event.config \uff0c\u7ed3\u5408 data.user \uff0c\u6839\u636e\u81ea\u8eab\u7684\u9700\u6c42\uff0c\u505a\u7b5b\u9009\u540e\uff0c\u8fd4\u56de\u6709\u6743\u9650\u7684sort_id\u6570\u7ec4 \u62bd\u8c61\u65b9\u6cd5 # get_auth_result(event, **kwargs) \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.impower_rule.ImpowerRuleBaseExtension ( Extension ) # Source code in arkid/core/extension/impower_rule.py class ImpowerRuleBaseExtension ( Extension ): TYPE = 'impower_rule' composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ImpowerRuleBaseExtension . TYPE def load ( self ): super () . load () self . listen_event ( core_event . GET_AUTH_RESULT , self . filter_auth_result ) def get_extensions ( self ): ''' \u83b7\u53d6\u5f53\u524d\u7c7b\u578b\u6240\u6709\u7684\u63d2\u4ef6 ''' return Extension_Obj . active_objects . filter ( package = self . package , type = self . TYPE ) . all () def get_all_config ( self , tenant_id ): ''' \u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e ''' return TenantExtensionConfig . active_objects . filter ( tenant_id = tenant_id , extension__in = self . get_extensions () ) . all () def register_impower_rule_schema ( self , schema , impowerrule_type ): \"\"\" \u6ce8\u518c\u6388\u6743\u89c4\u5219\u7684schema Params: schema: schema impowerrule_type: \u6388\u6743\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + impowerrule_type ) self . register_composite_config_schema ( schema , impowerrule_type , exclude = [ 'extension' ]) def filter_auth_result ( self , event , ** kwargs ): ''' \u7b5b\u9009\u62bd\u8c61\u7ed3\u679c ''' tenant = event . tenant configs = self . get_all_config ( tenant . id ) data = event . data arr = data . get ( 'arr' , []) copy_arr = [ x for x in arr ] result_sort_ids = [] # \u6bcf\u4e00\u4e2a\u6388\u6743\u89c4\u5219\u914d\u7f6e\u5355\u72ec\u9a8c\u8bc1 for config in configs : data [ 'config' ] = config sort_ids = self . get_auth_result ( event , ** kwargs ) if sort_ids : result_sort_ids . extend ( sort_ids ) # \u5bf9\u4e8e\u6388\u6743\u7ed3\u679c\u8fdb\u884c\u5408\u5e76 for index , value in enumerate ( copy_arr ): if int ( value ) == 0 and index in result_sort_ids : copy_arr [ index ] = 1 return copy_arr @abstractmethod def get_auth_result ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u83b7\u53d6\u6743\u9650\u7684\u9274\u5b9a\u7ed3\u679c Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user: \u7528\u6237 app: \u5e94\u7528(\u5982\u679capp\u662fNone\uff0c\u5c31\u8868\u793a\u8fd9\u4e2a\u5e94\u7528\u662farkid) arr: \u6743\u9650\u7ed3\u679c\u6570\u7ec4(\u8fd9\u4e2a\u662f\u5df2\u7ecf\u8d4b\u503c\u8fc7\u5206\u7ec4\u6743\u9650\u7684\u6570\u636e\uff0c\u6709\u6743\u9650\u662f1\uff0c\u6ca1\u6743\u9650\u662f0) config: \u5e94\u7528\u7684\u6388\u6743\u89c4\u5219 tenant: \u79df\u6237 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: arr: sort_id\u6570\u7ec4 \"\"\" pass composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/impower_rule.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 filter_auth_result ( self , event , ** kwargs ) # \u7b5b\u9009\u62bd\u8c61\u7ed3\u679c Source code in arkid/core/extension/impower_rule.py def filter_auth_result ( self , event , ** kwargs ): ''' \u7b5b\u9009\u62bd\u8c61\u7ed3\u679c ''' tenant = event . tenant configs = self . get_all_config ( tenant . id ) data = event . data arr = data . get ( 'arr' , []) copy_arr = [ x for x in arr ] result_sort_ids = [] # \u6bcf\u4e00\u4e2a\u6388\u6743\u89c4\u5219\u914d\u7f6e\u5355\u72ec\u9a8c\u8bc1 for config in configs : data [ 'config' ] = config sort_ids = self . get_auth_result ( event , ** kwargs ) if sort_ids : result_sort_ids . extend ( sort_ids ) # \u5bf9\u4e8e\u6388\u6743\u7ed3\u679c\u8fdb\u884c\u5408\u5e76 for index , value in enumerate ( copy_arr ): if int ( value ) == 0 and index in result_sort_ids : copy_arr [ index ] = 1 return copy_arr get_all_config ( self , tenant_id ) # \u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e Source code in arkid/core/extension/impower_rule.py def get_all_config ( self , tenant_id ): ''' \u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e ''' return TenantExtensionConfig . active_objects . filter ( tenant_id = tenant_id , extension__in = self . get_extensions () ) . all () get_auth_result ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u83b7\u53d6\u6743\u9650\u7684\u9274\u5b9a\u7ed3\u679c Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user: \u7528\u6237 app: \u5e94\u7528(\u5982\u679capp\u662fNone\uff0c\u5c31\u8868\u793a\u8fd9\u4e2a\u5e94\u7528\u662farkid) arr: \u6743\u9650\u7ed3\u679c\u6570\u7ec4(\u8fd9\u4e2a\u662f\u5df2\u7ecf\u8d4b\u503c\u8fc7\u5206\u7ec4\u6743\u9650\u7684\u6570\u636e\uff0c\u6709\u6743\u9650\u662f1\uff0c\u6ca1\u6743\u9650\u662f0) config: \u5e94\u7528\u7684\u6388\u6743\u89c4\u5219 tenant: \u79df\u6237 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description arr sort_id\u6570\u7ec4 Source code in arkid/core/extension/impower_rule.py @abstractmethod def get_auth_result ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u83b7\u53d6\u6743\u9650\u7684\u9274\u5b9a\u7ed3\u679c Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user: \u7528\u6237 app: \u5e94\u7528(\u5982\u679capp\u662fNone\uff0c\u5c31\u8868\u793a\u8fd9\u4e2a\u5e94\u7528\u662farkid) arr: \u6743\u9650\u7ed3\u679c\u6570\u7ec4(\u8fd9\u4e2a\u662f\u5df2\u7ecf\u8d4b\u503c\u8fc7\u5206\u7ec4\u6743\u9650\u7684\u6570\u636e\uff0c\u6709\u6743\u9650\u662f1\uff0c\u6ca1\u6743\u9650\u662f0) config: \u5e94\u7528\u7684\u6388\u6743\u89c4\u5219 tenant: \u79df\u6237 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: arr: sort_id\u6570\u7ec4 \"\"\" pass get_extensions ( self ) # \u83b7\u53d6\u5f53\u524d\u7c7b\u578b\u6240\u6709\u7684\u63d2\u4ef6 Source code in arkid/core/extension/impower_rule.py def get_extensions ( self ): ''' \u83b7\u53d6\u5f53\u524d\u7c7b\u578b\u6240\u6709\u7684\u63d2\u4ef6 ''' return Extension_Obj . active_objects . filter ( package = self . package , type = self . TYPE ) . all () load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/impower_rule.py def load ( self ): super () . load () self . listen_event ( core_event . GET_AUTH_RESULT , self . filter_auth_result ) register_impower_rule_schema ( self , schema , impowerrule_type ) # \u6ce8\u518c\u6388\u6743\u89c4\u5219\u7684schema Parameters: Name Type Description Default schema schema required impowerrule_type \u6388\u6743\u89c4\u5219\u7c7b\u578b required Source code in arkid/core/extension/impower_rule.py def register_impower_rule_schema ( self , schema , impowerrule_type ): \"\"\" \u6ce8\u518c\u6388\u6743\u89c4\u5219\u7684schema Params: schema: schema impowerrule_type: \u6388\u6743\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + impowerrule_type ) self . register_composite_config_schema ( schema , impowerrule_type , exclude = [ 'extension' ]) \u793a\u4f8b # extension_root.com_longgui_impower_rule.ImpowerRuleExtension ( ImpowerRuleBaseExtension ) # Source code in extension_root/com_longgui_impower_rule/__init__.py class ImpowerRuleExtension ( ImpowerRuleBaseExtension ): def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' ) def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page ) def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids get_auth_result ( self , event , ** kwargs ) # \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c Source code in extension_root/com_longgui_impower_rule/__init__.py def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_impower_rule/__init__.py def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' ) load_front_page ( self ) # \u6ce8\u518c\u524d\u7aef\u9875\u9762 Source code in extension_root/com_longgui_impower_rule/__init__.py def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page )","title":"\u6388\u6743\u89c4\u5219"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#_1","text":"\u6388\u6743\u89c4\u5219\uff0c\u4f5c\u4e3a\u7cfb\u7edf\u5df2\u6709\u8ba4\u8bc1\u65b9\u5f0f\u7684\u8865\u5145\uff0c\u5b83\u53ef\u4ee5\u652f\u6301\u66f4\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u8d4b\u4e88\u3002 \u53ef\u4ee5\u652f\u6301\u9488\u5bf9\u7528\u6237\u7684\u4e0d\u540c\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u7684\u8d4b\u4e88\uff0c\u4f8b\u5982\u7528\u6237\u540d\u3001\u6635\u79f0\u3001\u6027\u522b\u3001\u624b\u673a\u53f7\u7b49\u3002 \u4e5f\u53ef\u4ee5\u9488\u5bf9\u5206\u7ec4\u7684\u4e0d\u540c\u5c5e\u6027\u8fdb\u884c\u6743\u9650\u7684\u8d4b\u4e88\u3002 \u8fd8\u53ef\u4ee5\u6839\u636e\u5f00\u53d1\u8005\u9700\u8981\uff0c\u901a\u8fc7\u6269\u5c55\u6570\u636e\u5b58\u50a8\u7684\u7ed3\u6784\uff0c\u5b9e\u73b0\u7279\u5b9a\u573a\u666f\u4e0b\u6743\u9650\u7684\u8d4b\u4e88\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#_2","text":"arkid\u7cfb\u7edf\u5df2\u7ecf\u9ed8\u8ba4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9488\u5bf9\u7528\u6237\u5c5e\u6027\u7684\u6743\u9650\u8d4b\u4e88\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u8fdb\u884c\u53c2\u8003 graph LR A[\u5f00\u59cb] --> B{\u8bbe\u8ba1schema} --> C{\u6ce8\u518c\u524d\u7aef\u9875\u9762}--> D{\u6ce8\u518cschema}--> E{\u5b9e\u73b0\u6388\u6743\u51fd\u6570} --> F[\u7ed3\u675f]; \u4e0b\u9762\u5bf9\u4e8e\u5b9e\u73b0\u601d\u8def\u505a\u4e00\u4e0b\u7b80\u5355\u7684\u4ecb\u7ecd: \u9700\u8981\u5f00\u53d1\u8005\u60f3\u6e05\u695a\u81ea\u5df1\u5f00\u53d1\u63d2\u4ef6\u7684\u9700\u8981\u7b5b\u9009\u7684\u5c5e\u6027\uff0c\u662f\u7528\u6237\u5c5e\u6027\uff0c\u8fd8\u662f\u5206\u7ec4\u5c5e\u6027\uff0c\u6216\u8005\u5176\u5b83\u5c5e\u6027\u3002\u4ee5\u53ca\u9700\u8981\u7b5b\u9009\u90a3\u4e9b\u5e94\u7528\uff0c\u4ee5\u53ca\u90a3\u4e9b\u6743\u9650\u3002 \u8981\u8bbe\u8ba1\u51faschema\uff0c\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7ed3\u6784\u3002\u5982\u679cschema\u4e2d\u6709\u7528\u5230\u4e00\u4e9b\u5e94\u7528\u5217\u8868\uff0c\u6743\u9650\u5217\u8868\uff0c\u7528\u6237\u5217\u8868\u7b49\uff0c\u9700\u8981\u628a\u7528\u5230\u7684\u524d\u7aef\u9875\u9762\uff0c\u4f7f\u7528\u7236\u7c7b\u7684 register_front_pages \u5355\u72ec\u8fdb\u884c\u6ce8\u518c\u3002 \u4e0d\u540c\u7684\u6388\u6743\u89c4\u5219\u4e4b\u95f4\u662f\u901a\u8fc7\u4e0d\u540c\u7684schema\u8fdb\u884c\u5212\u5206\uff0c\u6240\u4ee5\u5f53\u5f00\u53d1\u8005\u8bbe\u8ba1\u5b8cschema\u540e\uff0c\u9700\u8981\u901a\u8fc7 register_impowerrule_schema \uff0c\u8fdb\u884c\u6ce8\u518c\u3002 \u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u6388\u6743\u89c4\u5219\u7684\u9875\u9762\u7eff\u8272Type\u5b57\u6bb5\u5c31\u4f1a\u591a\u4e00\u79cd\u6388\u6743\u89c4\u5219\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u5982\u679c\u6211\u4eec\u9009\u62e9\u4e0d\u540c\u7684\u6388\u6743\u89c4\u5219\uff0c\u7ea2\u8272\u90e8\u5206\u5c31\u4f1a\u5c55\u793a\u51fa\u4e0d\u540c\u7684\u5185\u5bb9\uff0c\u5c55\u793a\u5185\u5bb9\u7531schema\u7ed3\u6784\u51b3\u5b9a\u3002 \u6388\u6743\u89c4\u5219\u7684\u521b\u5efa\u7f16\u8f91\u548c\u5220\u9664\uff0c\u90fd\u662f\u7531arkid\u63d0\u524d\u5904\u7406\u597d\u7684\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5173\u6ce8\u8d4b\u6743\u65b9\u6cd5\u5c31\u53ef\u4ee5\u3002 \u4e0b\u9762\u5bf9\u8d4b\u6743\u65b9\u6cd5\u7684\u4f7f\u7528\u505a\u4e0b\u4ecb\u7ecd: \u9700\u8981\u5f00\u53d1\u8005\u5b9e\u73b0 get_auth_result(event, **kwargs) \u65b9\u6cd5 \u53c2\u6570: \u8fd9\u4e2a\u65b9\u6cd5\u7684 kwargs \uff0c event \u4e24\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 event \u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u4e2d\u5305\u542b\u4e86 data \u548c tenant \u4e24\u4e2a\u5c5e\u6027\uff0c\u5176\u4e2d event.tenant \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u7684\u79df\u6237\uff1b event.data \u53ef\u4ee5\u83b7\u53d6\u5230\u4f20\u9012\u8fc7\u6765\u7684\u6570\u636e\u3002\u6211\u4eec\u83b7\u53d6data\u91cc\u9762\u7684\u503c data.user \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u7528\u6237\uff1b data.app \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u5e94\u7528\uff0c\u5982\u679c\u8fd9\u4e2a\u5e94\u7528\u662f\u4e00\u4e2aNone\uff0c\u5c31\u8868\u793a\u5e94\u7528\u4e3aarkid\uff0c\u53cd\u4e4b\u5219\u4e3a\u5176\u5b83\u5e94\u7528\uff1b data.arr \u53ef\u4ee5\u83b7\u53d6\u5230\u7528\u6237\u6743\u9650\u6570\u7ec4(0\u62161\u7ec4\u6210\uff0c0\u662f\u6ca1\u6743\u9650\uff0c1\u6709\u6743\u9650\uff0c\u6570\u7ec4\u4e0b\u6807\u548c\u6570\u636e\u5e93\u6743\u9650\u8868\u91cc\u7684sort_id\u662f\u76f8\u540c\u7684)\uff1b data.config \u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u6388\u6743\u89c4\u5219 \u4f7f\u7528: \u5f00\u53d1\u8005\u9700\u8981\u6839\u636e\u6388\u6743\u89c4\u5219 event.config \uff0c\u7ed3\u5408 data.user \uff0c\u6839\u636e\u81ea\u8eab\u7684\u9700\u6c42\uff0c\u505a\u7b5b\u9009\u540e\uff0c\u8fd4\u56de\u6709\u6743\u9650\u7684sort_id\u6570\u7ec4","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#_3","text":"get_auth_result(event, **kwargs)","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension","text":"Source code in arkid/core/extension/impower_rule.py class ImpowerRuleBaseExtension ( Extension ): TYPE = 'impower_rule' composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ImpowerRuleBaseExtension . TYPE def load ( self ): super () . load () self . listen_event ( core_event . GET_AUTH_RESULT , self . filter_auth_result ) def get_extensions ( self ): ''' \u83b7\u53d6\u5f53\u524d\u7c7b\u578b\u6240\u6709\u7684\u63d2\u4ef6 ''' return Extension_Obj . active_objects . filter ( package = self . package , type = self . TYPE ) . all () def get_all_config ( self , tenant_id ): ''' \u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e ''' return TenantExtensionConfig . active_objects . filter ( tenant_id = tenant_id , extension__in = self . get_extensions () ) . all () def register_impower_rule_schema ( self , schema , impowerrule_type ): \"\"\" \u6ce8\u518c\u6388\u6743\u89c4\u5219\u7684schema Params: schema: schema impowerrule_type: \u6388\u6743\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + impowerrule_type ) self . register_composite_config_schema ( schema , impowerrule_type , exclude = [ 'extension' ]) def filter_auth_result ( self , event , ** kwargs ): ''' \u7b5b\u9009\u62bd\u8c61\u7ed3\u679c ''' tenant = event . tenant configs = self . get_all_config ( tenant . id ) data = event . data arr = data . get ( 'arr' , []) copy_arr = [ x for x in arr ] result_sort_ids = [] # \u6bcf\u4e00\u4e2a\u6388\u6743\u89c4\u5219\u914d\u7f6e\u5355\u72ec\u9a8c\u8bc1 for config in configs : data [ 'config' ] = config sort_ids = self . get_auth_result ( event , ** kwargs ) if sort_ids : result_sort_ids . extend ( sort_ids ) # \u5bf9\u4e8e\u6388\u6743\u7ed3\u679c\u8fdb\u884c\u5408\u5e76 for index , value in enumerate ( copy_arr ): if int ( value ) == 0 and index in result_sort_ids : copy_arr [ index ] = 1 return copy_arr @abstractmethod def get_auth_result ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u83b7\u53d6\u6743\u9650\u7684\u9274\u5b9a\u7ed3\u679c Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user: \u7528\u6237 app: \u5e94\u7528(\u5982\u679capp\u662fNone\uff0c\u5c31\u8868\u793a\u8fd9\u4e2a\u5e94\u7528\u662farkid) arr: \u6743\u9650\u7ed3\u679c\u6570\u7ec4(\u8fd9\u4e2a\u662f\u5df2\u7ecf\u8d4b\u503c\u8fc7\u5206\u7ec4\u6743\u9650\u7684\u6570\u636e\uff0c\u6709\u6743\u9650\u662f1\uff0c\u6ca1\u6743\u9650\u662f0) config: \u5e94\u7528\u7684\u6388\u6743\u89c4\u5219 tenant: \u79df\u6237 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: arr: sort_id\u6570\u7ec4 \"\"\" pass","title":"ImpowerRuleBaseExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/impower_rule.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.filter_auth_result","text":"\u7b5b\u9009\u62bd\u8c61\u7ed3\u679c Source code in arkid/core/extension/impower_rule.py def filter_auth_result ( self , event , ** kwargs ): ''' \u7b5b\u9009\u62bd\u8c61\u7ed3\u679c ''' tenant = event . tenant configs = self . get_all_config ( tenant . id ) data = event . data arr = data . get ( 'arr' , []) copy_arr = [ x for x in arr ] result_sort_ids = [] # \u6bcf\u4e00\u4e2a\u6388\u6743\u89c4\u5219\u914d\u7f6e\u5355\u72ec\u9a8c\u8bc1 for config in configs : data [ 'config' ] = config sort_ids = self . get_auth_result ( event , ** kwargs ) if sort_ids : result_sort_ids . extend ( sort_ids ) # \u5bf9\u4e8e\u6388\u6743\u7ed3\u679c\u8fdb\u884c\u5408\u5e76 for index , value in enumerate ( copy_arr ): if int ( value ) == 0 and index in result_sort_ids : copy_arr [ index ] = 1 return copy_arr","title":"filter_auth_result()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.get_all_config","text":"\u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e Source code in arkid/core/extension/impower_rule.py def get_all_config ( self , tenant_id ): ''' \u83b7\u53d6\u6240\u6709\u7684\u914d\u7f6e ''' return TenantExtensionConfig . active_objects . filter ( tenant_id = tenant_id , extension__in = self . get_extensions () ) . all ()","title":"get_all_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.get_auth_result","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u83b7\u53d6\u6743\u9650\u7684\u9274\u5b9a\u7ed3\u679c Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user: \u7528\u6237 app: \u5e94\u7528(\u5982\u679capp\u662fNone\uff0c\u5c31\u8868\u793a\u8fd9\u4e2a\u5e94\u7528\u662farkid) arr: \u6743\u9650\u7ed3\u679c\u6570\u7ec4(\u8fd9\u4e2a\u662f\u5df2\u7ecf\u8d4b\u503c\u8fc7\u5206\u7ec4\u6743\u9650\u7684\u6570\u636e\uff0c\u6709\u6743\u9650\u662f1\uff0c\u6ca1\u6743\u9650\u662f0) config: \u5e94\u7528\u7684\u6388\u6743\u89c4\u5219 tenant: \u79df\u6237 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description arr sort_id\u6570\u7ec4 Source code in arkid/core/extension/impower_rule.py @abstractmethod def get_auth_result ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5\uff0c\u83b7\u53d6\u6743\u9650\u7684\u9274\u5b9a\u7ed3\u679c Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user: \u7528\u6237 app: \u5e94\u7528(\u5982\u679capp\u662fNone\uff0c\u5c31\u8868\u793a\u8fd9\u4e2a\u5e94\u7528\u662farkid) arr: \u6743\u9650\u7ed3\u679c\u6570\u7ec4(\u8fd9\u4e2a\u662f\u5df2\u7ecf\u8d4b\u503c\u8fc7\u5206\u7ec4\u6743\u9650\u7684\u6570\u636e\uff0c\u6709\u6743\u9650\u662f1\uff0c\u6ca1\u6743\u9650\u662f0) config: \u5e94\u7528\u7684\u6388\u6743\u89c4\u5219 tenant: \u79df\u6237 kwargs: \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 Return: arr: sort_id\u6570\u7ec4 \"\"\" pass","title":"get_auth_result()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.get_extensions","text":"\u83b7\u53d6\u5f53\u524d\u7c7b\u578b\u6240\u6709\u7684\u63d2\u4ef6 Source code in arkid/core/extension/impower_rule.py def get_extensions ( self ): ''' \u83b7\u53d6\u5f53\u524d\u7c7b\u578b\u6240\u6709\u7684\u63d2\u4ef6 ''' return Extension_Obj . active_objects . filter ( package = self . package , type = self . TYPE ) . all ()","title":"get_extensions()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/impower_rule.py def load ( self ): super () . load () self . listen_event ( core_event . GET_AUTH_RESULT , self . filter_auth_result )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#arkid.core.extension.impower_rule.ImpowerRuleBaseExtension.register_impower_rule_schema","text":"\u6ce8\u518c\u6388\u6743\u89c4\u5219\u7684schema Parameters: Name Type Description Default schema schema required impowerrule_type \u6388\u6743\u89c4\u5219\u7c7b\u578b required Source code in arkid/core/extension/impower_rule.py def register_impower_rule_schema ( self , schema , impowerrule_type ): \"\"\" \u6ce8\u518c\u6388\u6743\u89c4\u5219\u7684schema Params: schema: schema impowerrule_type: \u6388\u6743\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + impowerrule_type ) self . register_composite_config_schema ( schema , impowerrule_type , exclude = [ 'extension' ])","title":"register_impower_rule_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension","text":"Source code in extension_root/com_longgui_impower_rule/__init__.py class ImpowerRuleExtension ( ImpowerRuleBaseExtension ): def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' ) def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page ) def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids","title":"ImpowerRuleExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension.get_auth_result","text":"\u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c Source code in extension_root/com_longgui_impower_rule/__init__.py def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids","title":"get_auth_result()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_impower_rule/__init__.py def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%99/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension.load_front_page","text":"\u6ce8\u518c\u524d\u7aef\u9875\u9762 Source code in extension_root/com_longgui_impower_rule/__init__.py def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page )","title":"load_front_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F/","text":"","title":"\u6570\u636e\u5206\u6790\u7cfb\u7edf"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/","text":"\u6570\u636e\u540c\u6b65 # \u7528\u6237\u6570\u636e\u540c\u6b65 # \u529f\u80fd\u4ecb\u7ecd # \u7528\u6237\u6570\u636e\u540c\u6b65\u4e3b\u8981\u662f\u901a\u8fc7SCIM\u534f\u8bae\u540c\u6b65\u4e0d\u540c\u7cfb\u7edf\u4e4b\u95f4\u7684\u7528\u6237\u548c\u7ec4\u7ec7\uff0c\u91c7\u7528Server/Client\u6a21\u5f0f\uff0cServer\u63d0\u4f9b\u7b26\u5408SCIM\u6807\u51c6\u534f\u8bae\u7684User\uff0cGroup\u7b49\u63a5\u53e3\uff0cClient\u7aef\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6Server\u7aef\u63d0\u4f9b\u7684\u63a5\u53e3\u83b7\u53d6\u6570\u636e \u7ecf\u5178\u7684\u573a\u666f\u6709: AD\u548cArkID\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65 HR\u548cArkID\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65 HR\u548cAD\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65 SCIM\u534f\u8bae\u53c2\u8003 RFC7643 - SCIM: Core Schema RFC7644 - SCIM: Protocol RFC7642 - SCIM: Definitions, Overview, Concepts, and Requirements \u5b9e\u73b0\u601d\u8def # \u9996\u5148\uff0cServer\u7aefSCIM\u534f\u8bae\u76f8\u5173\u7684\u5b9e\u73b0\u5728\u4ee3\u7801 scim_server \u6a21\u5757\u3002 \u5176\u4e2d, \u6bd4\u8f83\u91cd\u8981\u7684\u4e09\u4e2a\u57fa\u7c7b\u4e3a: scim_server.views.view_template.ViewTemplate \u5b50\u7c7b scim_server.views.users_view.UsersViewTemplate \u5904\u7406\u7528\u6237\u76f8\u5173\u7684\u589e\u5220\u6539\u67e5 \u5b50\u7c7b scim_server.views.groups_view.GroupsViewTemplate \u5904\u7406\u7ec4\u7ec7\u76f8\u5173\u7684\u589e\u5220\u6539\u67e5 scim_server.service.provider_adapter_template.ProviderAdapterTemplate scim_server.service.provider_base.ProviderBase SCIM Server\u5904\u7406SCIM\u8bf7\u6c42\u7684\u5927\u6982\u6d41\u7a0b\u4e3a\uff0c ViewTemplate \u63a5\u53d7\u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u53c2\u6570\u8f6c\u6362\u6210\u5bf9\u8c61\u4f20\u9012\u7ed9 ProviderAdapterTemplate \uff0c ProviderAdapterTemplate \u9a8c\u8bc1\u8bf7\u6c42\u53c2\u6570\u5408\u6cd5\u6027\uff0c\u5e76\u8fdb\u4e00\u6b65\u7ec4\u88c5\u8bf7\u6c42\u5bf9\u8c61\uff0c\u6700\u7ec8\u8c03\u7528 ProviderBase \u4e2d\u7684\u65b9\u6cd5\u5904\u7406\u8bf7\u6c42\u5bf9\u8c61\u3002 ScimSyncArkIDExtension \u63d2\u4ef6\u57fa\u7c7b\u7ee7\u627f ProviderBase \uff0c\u5728\u63d2\u4ef6load\u7684\u65f6\u5019\u521b\u5efa UsersView \u548c GroupsView \u5206\u522b\u7ee7\u627f UsersViewTemplate \u548c GroupsViewTemplate \uff0c \u5e76\u6ce8\u518c\u5bf9\u5e94\u7684users_url\u548cgroups_url\uff0c\u81f3\u6b64\u53ea\u9700\u8981\u7ee7\u627fScimSyncArkIDExtension\u63d2\u4ef6\u57fa\u7c7b\u5e76\u8986\u76d6\u4ece ProviderBase \u7ee7\u627f\u7684 query_users , query_groups \u7b49\u65b9\u6cd5\u5373\u53ef\u5b9e\u73b0SCIM Server\u3002 \u521b\u5efaSCIM Server\u914d\u7f6e\u65f6\u8c03\u7528 api.views.scim_sync.create_scim_sync \u63a5\u53e3\u5904\u7406\u51fd\u6570\uff0c\u540c\u65f6\u8fd4\u56deusers_url\u548cgroups_url\u4ee5\u4f9bClient\u7aef\u62c9\u53d6\u6570\u636e Client\u7aef\u901a\u8fc7django_celery_beat\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u9996\u5148\u901a\u8fc7\u8c03\u7528 api.views.scim_sync.create_scim_sync \u63a5\u53e3\u5904\u7406\u51fd\u6570\u521b\u5efaClient\u6a21\u5f0f\u7684\u914d\u7f6e\uff0c\u914d\u7f6e\u53c2\u6570\u9700\u6307\u5b9aScim Server\uff0c\u7528\u4e8e\u4eceSCIM Server\u63d0\u4f9b\u7684users_url\u548cgroups_url\u62c9\u53d6\u6570\u636e\uff0c \u5728\u5904\u7406\u51fd\u6570\u4e2d\u5224\u65ad\u5982\u679c\u662f\u521b\u5efaClient\u6a21\u5f0f\u7684\u914d\u7f6e\uff0c\u5219\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u5c06Client\u6a21\u5f0f\u7684\u914d\u7f6e\u4f20\u9012\u7ed9celery\u5f02\u6b65task\uff1a arkid.core.tasks.sync , \u8fd9\u4e2atask\u6700\u7ec8\u4f1a\u8c03\u7528\u63d2\u4ef6\u57fa\u7c7b\u4e2d\u7684 sync \u65b9\u6cd5\uff0c sync \u65b9\u6cd5\u9996\u5148\u4f1a\u8c03 get_groups_users \u65b9\u6cd5\u83b7\u53d6users\u548cgroups, \u7136\u540e\u5148\u540e\u8c03\u7528 sync_groups \u548c sync_users \u5b9e\u73b0\u540c\u6b65\u903b\u8f91\uff0c\u5177\u4f53\u63d2\u4ef6\u9700\u8981\u8986\u76d6\u8fd9\u4e2a\u4e24\u4e2a\u65b9\u6cd5\u5b9e\u73b0Client\u7aef\u7684\u540c\u6b65\u903b\u8f91 \u62bd\u8c61\u65b9\u6cd5 # Server\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5 # create_user create_group delete_user delete_group replace_user replace_group retrieve_user retrieve_group update_user update_group query_users query_groups Client\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5 # sync_groups sync_users \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.scim_sync.ScimSyncExtension ( Extension , ProviderBase ) # Source code in arkid/core/extension/scim_sync.py class ScimSyncExtension ( Extension , ProviderBase ): TYPE = \"scim_sync\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ScimSyncExtension . TYPE def load ( self ): class UsersView ( UsersViewTemplate ): @property def provider ( this ): return self class GroupsView ( GroupsViewTemplate ): @property def provider ( this ): return self scim_server_urls = [ re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Users(?:/(?P<uuid>[^/]+))?$' , UsersView . as_view (), name = f ' { self . pname } _scim_users' , ), # re_path(r'^Groups/.search$', views.GroupSearchView.as_view(), name='groups-search'), re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Groups(?:/(?P<uuid>[^/]+))?$' , GroupsView . as_view (), name = f ' { self . pname } _scim_groups' , ), ] self . register_routers ( scim_server_urls , True ) super () . load () def register_scim_sync_schema ( self , sync_type , client_schema , server_schema ): schema = create_extension_schema_by_package ( self . package , fields = [ ( \"__root__\" , Union [( client_schema , server_schema )], Field ( discriminator = \"mode\" ), ) ], base_schema = RootSchema , ) self . register_config_schema ( schema , self . package + '_' + sync_type ) self . register_composite_config_schema ( schema , sync_type , exclude = [ 'extension' ]) def sync ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( f \"============= Sync Start With Config: { config } / { config . config } ================\" ) groups , users = self . get_groups_users ( config ) if not groups or not users : return self . sync_groups ( groups , config ) self . sync_users ( users , config ) def get_data ( self , url ): logger . info ( f \"Getting data from { url } \" ) r = requests . get ( url ) if r . status_code == 200 : return r . json () return {} def get_groups_users ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" sync_server_id = config . config . get ( \"sync_server\" , {}) . get ( \"id\" ) server_config = TenantExtensionConfig . active_objects . filter ( id = sync_server_id ) . first () if not server_config : logger . error ( f \"No scim sync server config found: { sync_server_id } \" ) return None , None group_url = server_config . config [ \"group_url\" ] user_url = server_config . config [ \"user_url\" ] groups = self . get_data ( group_url ) . get ( \"Resources\" ) users = self . get_data ( user_url ) . get ( \"Resources\" ) return groups , users @abstractmethod def sync_groups ( self , groups , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass @abstractmethod def sync_users ( self , users , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass def get_current_config ( self , event ): config_id = event . request . POST . get ( 'config_id' ) return self . get_config_by_id ( config_id ) def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name = name , type = type ) if config [ \"mode\" ] == \"server\" : server_host = get_app_config () . get_host () user_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_users' , args = [ tenant . id , config_created . id ], ) group_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_groups' , args = [ tenant . id , config_created . id ], ) config [ \"group_url\" ] = group_url config [ \"user_url\" ] = user_url config_created . config = config config_created . save () return config_created @abstractmethod def create_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def create_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def delete_user ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7528\u6237ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def delete_group ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7ec4\u7ec7ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def replace_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def replace_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def retrieve_user ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def retrieve_group ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def update_user ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def update_group ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" pass @abstractmethod def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" pass composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/scim_sync.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 create_group ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def create_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () create_tenant_config ( self , tenant , config , name , type ) # \u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 Source code in arkid/core/extension/scim_sync.py def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name = name , type = type ) if config [ \"mode\" ] == \"server\" : server_host = get_app_config () . get_host () user_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_users' , args = [ tenant . id , config_created . id ], ) group_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_groups' , args = [ tenant . id , config_created . id ], ) config [ \"group_url\" ] = group_url config [ \"user_url\" ] = user_url config_created . config = config config_created . save () return config_created create_user ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def create_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () delete_group ( self , request , resource_identifier , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7ec4\u7ec7ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def delete_group ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7ec4\u7ec7ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () delete_user ( self , request , resource_identifier , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7528\u6237ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def delete_user ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7528\u6237ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () get_groups_users ( self , config ) # Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py def get_groups_users ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" sync_server_id = config . config . get ( \"sync_server\" , {}) . get ( \"id\" ) server_config = TenantExtensionConfig . active_objects . filter ( id = sync_server_id ) . first () if not server_config : logger . error ( f \"No scim sync server config found: { sync_server_id } \" ) return None , None group_url = server_config . config [ \"group_url\" ] user_url = server_config . config [ \"user_url\" ] groups = self . get_data ( group_url ) . get ( \"Resources\" ) users = self . get_data ( user_url ) . get ( \"Resources\" ) return groups , users load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/scim_sync.py def load ( self ): class UsersView ( UsersViewTemplate ): @property def provider ( this ): return self class GroupsView ( GroupsViewTemplate ): @property def provider ( this ): return self scim_server_urls = [ re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Users(?:/(?P<uuid>[^/]+))?$' , UsersView . as_view (), name = f ' { self . pname } _scim_users' , ), # re_path(r'^Groups/.search$', views.GroupSearchView.as_view(), name='groups-search'), re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Groups(?:/(?P<uuid>[^/]+))?$' , GroupsView . as_view (), name = f ' { self . pname } _scim_groups' , ), ] self . register_routers ( scim_server_urls , True ) super () . load () query_groups ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2Group] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 Source code in arkid/core/extension/scim_sync.py @abstractmethod def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" pass query_users ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2EnterpriseUser] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 Source code in arkid/core/extension/scim_sync.py @abstractmethod def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" pass replace_group ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def replace_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () replace_user ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def replace_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () retrieve_group ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def retrieve_group ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () retrieve_user ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def retrieve_user ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () sync ( self , config ) # Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py def sync ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( f \"============= Sync Start With Config: { config } / { config . config } ================\" ) groups , users = self . get_groups_users ( config ) if not groups or not users : return self . sync_groups ( groups , config ) self . sync_users ( users , config ) sync_groups ( self , groups , config ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default groups List SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py @abstractmethod def sync_groups ( self , groups , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass sync_users ( self , users , config ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default users List SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py @abstractmethod def sync_users ( self , users , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass update_group ( self , request , patch , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def update_group ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () update_user ( self , request , patch , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def update_user ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () \u793a\u4f8b # extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension ( ScimSyncExtension ) # Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py class ScimSyncArkIDExtension ( ScimSyncExtension ): def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load () def _get_arkid_user_attrs ( self , user ): active = user . get ( \"active\" ) if active is None : active = True return { \"username\" : user . get ( \"userName\" , \"\" ), \"is_active\" : active , } def _get_arkid_user ( self , scim_user , tenant ): scim_external_id = scim_user [ \"id\" ] username = scim_user [ \"userName\" ] arkid_user_attrs = self . _get_arkid_user_attrs ( scim_user ) user_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant , \"username\" : username , } arkid_user , _ = User . valid_objects . update_or_create ( defaults = arkid_user_attrs , ** user_lookup ) # \u66f4\u65b0arkid_user\u6240\u5c5e\u7684group arkid_user . user_set . clear () for scim_group in scim_user . get ( \"groups\" , []): scim_group_id = scim_group . get ( \"value\" ) arkid_group = self . scim_arkid_group_map . get ( scim_group_id ) if arkid_group : arkid_user . user_set . add ( arkid_group ) arkid_user . save () return arkid_user def _get_arkid_group ( self , group , scim_arkid_map , tenant ): scim_external_id = group [ \"id\" ] if \"id\" in group else group [ \"value\" ] if scim_external_id not in scim_arkid_map : group_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant } arkid_group , _ = UserGroup . valid_objects . update_or_create ( ** group_lookup ) scim_arkid_map [ scim_external_id ] = arkid_group return arkid_group else : return scim_arkid_map [ scim_external_id ] def _sync_group_attr ( self , arkid_group , scim_group ): arkid_group . name = scim_group . get ( \"displayName\" ) arkid_group . save () def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete () def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete () def _get_scim_user ( self , arkid_user ): attr_map = { \"id\" : \"id\" , \"username\" : \"userName\" , \"is_active\" : \"active\" } scim_user = Core2EnterpriseUser ( userName = '' , groups = []) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_user , arkid_attr ) scim_path = Path . create ( scim_attr ) if ( scim_path . schema_identifier and scim_path . schema_identifier == SchemaIdentifiers . Core2EnterpriseUser ): compose_enterprise_extension ( scim_user , scim_path , value ) else : compose_core2_user ( scim_user , scim_path , value ) # \u751f\u6210\u7528\u6237\u6240\u5728\u7684\u7ec4 parent_groups = arkid_user . user_set . filter ( is_del = 0 ) for grp in parent_groups : scim_group = ScimUserGroup () scim_group . value = grp . id scim_group . display = grp . name scim_user . groups . append ( scim_group ) return scim_user def _get_scim_group ( self , arkid_group ): members = UserGroup . valid_objects . filter ( parent = arkid_group ) attr_map = { \"id\" : \"id\" , \"name\" : \"displayName\" } scim_group = Core2Group ( displayName = '' ) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_group , arkid_attr ) scim_path = Path . create ( scim_attr ) compose_core2_group ( scim_group , scim_path , value ) for item in members : member = Member () member . value = item . id scim_group . members . append ( member ) return scim_group def _get_all_scim_users ( self , tenant ): scim_users = [] arkid_users = User . valid_objects . filter ( tenant = tenant ) for arkid_user in arkid_users : scim_user = self . _get_scim_user ( arkid_user ) scim_users . append ( scim_user ) return scim_users def _get_all_scim_groups ( self , tenant ): scim_groups = [] arkid_groups = UserGroup . valid_objects . filter ( tenant = tenant ) for arkid_group in arkid_groups : scim_group = self . _get_scim_group ( arkid_group ) scim_groups . append ( scim_group ) return scim_groups def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException () def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException () create_group ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () create_user ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () delete_group ( self , request , resource_identifier , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7ec4\u7ec7ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () delete_user ( self , request , resource_identifier , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7528\u6237ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load () query_groups ( self , request , parameters , correlation_identifier ) # \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2Group] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups query_users ( self , request , parameters , correlation_identifier ) # \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2EnterpriseUser] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users replace_group ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () replace_user ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () retrieve_group ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException () retrieve_user ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException () sync_groups ( self , groups , config ) # \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Parameters: Name Type Description Default groups List SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete () sync_users ( self , users , config ) # \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Parameters: Name Type Description Default users List SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete () update_group ( self , request , patch , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException () update_user ( self , request , patch , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException () \u6743\u9650\u6570\u636e\u540c\u6b65 #","title":"\u6570\u636e\u540c\u6b65"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_1","text":"","title":"\u6570\u636e\u540c\u6b65"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_2","text":"","title":"\u7528\u6237\u6570\u636e\u540c\u6b65"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_3","text":"\u7528\u6237\u6570\u636e\u540c\u6b65\u4e3b\u8981\u662f\u901a\u8fc7SCIM\u534f\u8bae\u540c\u6b65\u4e0d\u540c\u7cfb\u7edf\u4e4b\u95f4\u7684\u7528\u6237\u548c\u7ec4\u7ec7\uff0c\u91c7\u7528Server/Client\u6a21\u5f0f\uff0cServer\u63d0\u4f9b\u7b26\u5408SCIM\u6807\u51c6\u534f\u8bae\u7684User\uff0cGroup\u7b49\u63a5\u53e3\uff0cClient\u7aef\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6Server\u7aef\u63d0\u4f9b\u7684\u63a5\u53e3\u83b7\u53d6\u6570\u636e \u7ecf\u5178\u7684\u573a\u666f\u6709: AD\u548cArkID\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65 HR\u548cArkID\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65 HR\u548cAD\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65 SCIM\u534f\u8bae\u53c2\u8003 RFC7643 - SCIM: Core Schema RFC7644 - SCIM: Protocol RFC7642 - SCIM: Definitions, Overview, Concepts, and Requirements","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_4","text":"\u9996\u5148\uff0cServer\u7aefSCIM\u534f\u8bae\u76f8\u5173\u7684\u5b9e\u73b0\u5728\u4ee3\u7801 scim_server \u6a21\u5757\u3002 \u5176\u4e2d, \u6bd4\u8f83\u91cd\u8981\u7684\u4e09\u4e2a\u57fa\u7c7b\u4e3a: scim_server.views.view_template.ViewTemplate \u5b50\u7c7b scim_server.views.users_view.UsersViewTemplate \u5904\u7406\u7528\u6237\u76f8\u5173\u7684\u589e\u5220\u6539\u67e5 \u5b50\u7c7b scim_server.views.groups_view.GroupsViewTemplate \u5904\u7406\u7ec4\u7ec7\u76f8\u5173\u7684\u589e\u5220\u6539\u67e5 scim_server.service.provider_adapter_template.ProviderAdapterTemplate scim_server.service.provider_base.ProviderBase SCIM Server\u5904\u7406SCIM\u8bf7\u6c42\u7684\u5927\u6982\u6d41\u7a0b\u4e3a\uff0c ViewTemplate \u63a5\u53d7\u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u53c2\u6570\u8f6c\u6362\u6210\u5bf9\u8c61\u4f20\u9012\u7ed9 ProviderAdapterTemplate \uff0c ProviderAdapterTemplate \u9a8c\u8bc1\u8bf7\u6c42\u53c2\u6570\u5408\u6cd5\u6027\uff0c\u5e76\u8fdb\u4e00\u6b65\u7ec4\u88c5\u8bf7\u6c42\u5bf9\u8c61\uff0c\u6700\u7ec8\u8c03\u7528 ProviderBase \u4e2d\u7684\u65b9\u6cd5\u5904\u7406\u8bf7\u6c42\u5bf9\u8c61\u3002 ScimSyncArkIDExtension \u63d2\u4ef6\u57fa\u7c7b\u7ee7\u627f ProviderBase \uff0c\u5728\u63d2\u4ef6load\u7684\u65f6\u5019\u521b\u5efa UsersView \u548c GroupsView \u5206\u522b\u7ee7\u627f UsersViewTemplate \u548c GroupsViewTemplate \uff0c \u5e76\u6ce8\u518c\u5bf9\u5e94\u7684users_url\u548cgroups_url\uff0c\u81f3\u6b64\u53ea\u9700\u8981\u7ee7\u627fScimSyncArkIDExtension\u63d2\u4ef6\u57fa\u7c7b\u5e76\u8986\u76d6\u4ece ProviderBase \u7ee7\u627f\u7684 query_users , query_groups \u7b49\u65b9\u6cd5\u5373\u53ef\u5b9e\u73b0SCIM Server\u3002 \u521b\u5efaSCIM Server\u914d\u7f6e\u65f6\u8c03\u7528 api.views.scim_sync.create_scim_sync \u63a5\u53e3\u5904\u7406\u51fd\u6570\uff0c\u540c\u65f6\u8fd4\u56deusers_url\u548cgroups_url\u4ee5\u4f9bClient\u7aef\u62c9\u53d6\u6570\u636e Client\u7aef\u901a\u8fc7django_celery_beat\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u9996\u5148\u901a\u8fc7\u8c03\u7528 api.views.scim_sync.create_scim_sync \u63a5\u53e3\u5904\u7406\u51fd\u6570\u521b\u5efaClient\u6a21\u5f0f\u7684\u914d\u7f6e\uff0c\u914d\u7f6e\u53c2\u6570\u9700\u6307\u5b9aScim Server\uff0c\u7528\u4e8e\u4eceSCIM Server\u63d0\u4f9b\u7684users_url\u548cgroups_url\u62c9\u53d6\u6570\u636e\uff0c \u5728\u5904\u7406\u51fd\u6570\u4e2d\u5224\u65ad\u5982\u679c\u662f\u521b\u5efaClient\u6a21\u5f0f\u7684\u914d\u7f6e\uff0c\u5219\u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u5c06Client\u6a21\u5f0f\u7684\u914d\u7f6e\u4f20\u9012\u7ed9celery\u5f02\u6b65task\uff1a arkid.core.tasks.sync , \u8fd9\u4e2atask\u6700\u7ec8\u4f1a\u8c03\u7528\u63d2\u4ef6\u57fa\u7c7b\u4e2d\u7684 sync \u65b9\u6cd5\uff0c sync \u65b9\u6cd5\u9996\u5148\u4f1a\u8c03 get_groups_users \u65b9\u6cd5\u83b7\u53d6users\u548cgroups, \u7136\u540e\u5148\u540e\u8c03\u7528 sync_groups \u548c sync_users \u5b9e\u73b0\u540c\u6b65\u903b\u8f91\uff0c\u5177\u4f53\u63d2\u4ef6\u9700\u8981\u8986\u76d6\u8fd9\u4e2a\u4e24\u4e2a\u65b9\u6cd5\u5b9e\u73b0Client\u7aef\u7684\u540c\u6b65\u903b\u8f91","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_5","text":"","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#server","text":"create_user create_group delete_user delete_group replace_user replace_group retrieve_user retrieve_group update_user update_group query_users query_groups","title":"Server\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#client","text":"sync_groups sync_users","title":"Client\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_6","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension","text":"Source code in arkid/core/extension/scim_sync.py class ScimSyncExtension ( Extension , ProviderBase ): TYPE = \"scim_sync\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ScimSyncExtension . TYPE def load ( self ): class UsersView ( UsersViewTemplate ): @property def provider ( this ): return self class GroupsView ( GroupsViewTemplate ): @property def provider ( this ): return self scim_server_urls = [ re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Users(?:/(?P<uuid>[^/]+))?$' , UsersView . as_view (), name = f ' { self . pname } _scim_users' , ), # re_path(r'^Groups/.search$', views.GroupSearchView.as_view(), name='groups-search'), re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Groups(?:/(?P<uuid>[^/]+))?$' , GroupsView . as_view (), name = f ' { self . pname } _scim_groups' , ), ] self . register_routers ( scim_server_urls , True ) super () . load () def register_scim_sync_schema ( self , sync_type , client_schema , server_schema ): schema = create_extension_schema_by_package ( self . package , fields = [ ( \"__root__\" , Union [( client_schema , server_schema )], Field ( discriminator = \"mode\" ), ) ], base_schema = RootSchema , ) self . register_config_schema ( schema , self . package + '_' + sync_type ) self . register_composite_config_schema ( schema , sync_type , exclude = [ 'extension' ]) def sync ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( f \"============= Sync Start With Config: { config } / { config . config } ================\" ) groups , users = self . get_groups_users ( config ) if not groups or not users : return self . sync_groups ( groups , config ) self . sync_users ( users , config ) def get_data ( self , url ): logger . info ( f \"Getting data from { url } \" ) r = requests . get ( url ) if r . status_code == 200 : return r . json () return {} def get_groups_users ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" sync_server_id = config . config . get ( \"sync_server\" , {}) . get ( \"id\" ) server_config = TenantExtensionConfig . active_objects . filter ( id = sync_server_id ) . first () if not server_config : logger . error ( f \"No scim sync server config found: { sync_server_id } \" ) return None , None group_url = server_config . config [ \"group_url\" ] user_url = server_config . config [ \"user_url\" ] groups = self . get_data ( group_url ) . get ( \"Resources\" ) users = self . get_data ( user_url ) . get ( \"Resources\" ) return groups , users @abstractmethod def sync_groups ( self , groups , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass @abstractmethod def sync_users ( self , users , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass def get_current_config ( self , event ): config_id = event . request . POST . get ( 'config_id' ) return self . get_config_by_id ( config_id ) def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name = name , type = type ) if config [ \"mode\" ] == \"server\" : server_host = get_app_config () . get_host () user_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_users' , args = [ tenant . id , config_created . id ], ) group_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_groups' , args = [ tenant . id , config_created . id ], ) config [ \"group_url\" ] = group_url config [ \"user_url\" ] = user_url config_created . config = config config_created . save () return config_created @abstractmethod def create_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def create_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def delete_user ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7528\u6237ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def delete_group ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7ec4\u7ec7ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def replace_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def replace_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def retrieve_user ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def retrieve_group ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def update_user ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def update_group ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException () @abstractmethod def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" pass @abstractmethod def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" pass","title":"ScimSyncExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/scim_sync.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.create_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def create_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"create_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.create_tenant_config","text":"\u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 Source code in arkid/core/extension/scim_sync.py def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name = name , type = type ) if config [ \"mode\" ] == \"server\" : server_host = get_app_config () . get_host () user_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_users' , args = [ tenant . id , config_created . id ], ) group_url = server_host + reverse ( f 'api: { self . pname } _tenant: { self . pname } _scim_groups' , args = [ tenant . id , config_created . id ], ) config [ \"group_url\" ] = group_url config [ \"user_url\" ] = user_url config_created . config = config config_created . save () return config_created","title":"create_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.create_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def create_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"create_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.delete_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7ec4\u7ec7ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def delete_group ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7ec4\u7ec7ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"delete_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.delete_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7528\u6237ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def delete_user ( self , request , resource_identifier , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource_identifier (str): \u7528\u6237ID correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"delete_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.get_groups_users","text":"Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py def get_groups_users ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" sync_server_id = config . config . get ( \"sync_server\" , {}) . get ( \"id\" ) server_config = TenantExtensionConfig . active_objects . filter ( id = sync_server_id ) . first () if not server_config : logger . error ( f \"No scim sync server config found: { sync_server_id } \" ) return None , None group_url = server_config . config [ \"group_url\" ] user_url = server_config . config [ \"user_url\" ] groups = self . get_data ( group_url ) . get ( \"Resources\" ) users = self . get_data ( user_url ) . get ( \"Resources\" ) return groups , users","title":"get_groups_users()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/scim_sync.py def load ( self ): class UsersView ( UsersViewTemplate ): @property def provider ( this ): return self class GroupsView ( GroupsViewTemplate ): @property def provider ( this ): return self scim_server_urls = [ re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Users(?:/(?P<uuid>[^/]+))?$' , UsersView . as_view (), name = f ' { self . pname } _scim_users' , ), # re_path(r'^Groups/.search$', views.GroupSearchView.as_view(), name='groups-search'), re_path ( rf '^scim/ { self . pname } /(?P<config_id>[\\w-]+)/Groups(?:/(?P<uuid>[^/]+))?$' , GroupsView . as_view (), name = f ' { self . pname } _scim_groups' , ), ] self . register_routers ( scim_server_urls , True ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.query_groups","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2Group] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 Source code in arkid/core/extension/scim_sync.py @abstractmethod def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" pass","title":"query_groups()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.query_users","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2EnterpriseUser] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 Source code in arkid/core/extension/scim_sync.py @abstractmethod def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" pass","title":"query_users()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.replace_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def replace_group ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_group.Core2Group): SCIM\u7ec4\u7ec7\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"replace_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.replace_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def replace_user ( self , request , resource , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 resource (scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser): SCIM\u7528\u6237\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"replace_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.retrieve_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def retrieve_group ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"retrieve_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.retrieve_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def retrieve_user ( self , request , parameters , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters): Retrieve\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"retrieve_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.sync","text":"Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py def sync ( self , config ): \"\"\" Args: config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( f \"============= Sync Start With Config: { config } / { config . config } ================\" ) groups , users = self . get_groups_users ( config ) if not groups or not users : return self . sync_groups ( groups , config ) self . sync_users ( users , config )","title":"sync()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.sync_groups","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default groups List SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py @abstractmethod def sync_groups ( self , groups , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass","title":"sync_groups()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.sync_users","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default users List SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in arkid/core/extension/scim_sync.py @abstractmethod def sync_users ( self , users , config ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" pass","title":"sync_users()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.update_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def update_group ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"update_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#arkid.core.extension.scim_sync.ScimSyncExtension.update_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in arkid/core/extension/scim_sync.py @abstractmethod def update_user ( self , request , patch , correlation_identifier ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HttpRequest): Django \u8bf7\u6c42 patch (scim_server.service.patch.Patch): Patch\u53c2\u6570\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 \"\"\" raise NotImplementedException ()","title":"update_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_7","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension","text":"Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py class ScimSyncArkIDExtension ( ScimSyncExtension ): def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load () def _get_arkid_user_attrs ( self , user ): active = user . get ( \"active\" ) if active is None : active = True return { \"username\" : user . get ( \"userName\" , \"\" ), \"is_active\" : active , } def _get_arkid_user ( self , scim_user , tenant ): scim_external_id = scim_user [ \"id\" ] username = scim_user [ \"userName\" ] arkid_user_attrs = self . _get_arkid_user_attrs ( scim_user ) user_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant , \"username\" : username , } arkid_user , _ = User . valid_objects . update_or_create ( defaults = arkid_user_attrs , ** user_lookup ) # \u66f4\u65b0arkid_user\u6240\u5c5e\u7684group arkid_user . user_set . clear () for scim_group in scim_user . get ( \"groups\" , []): scim_group_id = scim_group . get ( \"value\" ) arkid_group = self . scim_arkid_group_map . get ( scim_group_id ) if arkid_group : arkid_user . user_set . add ( arkid_group ) arkid_user . save () return arkid_user def _get_arkid_group ( self , group , scim_arkid_map , tenant ): scim_external_id = group [ \"id\" ] if \"id\" in group else group [ \"value\" ] if scim_external_id not in scim_arkid_map : group_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant } arkid_group , _ = UserGroup . valid_objects . update_or_create ( ** group_lookup ) scim_arkid_map [ scim_external_id ] = arkid_group return arkid_group else : return scim_arkid_map [ scim_external_id ] def _sync_group_attr ( self , arkid_group , scim_group ): arkid_group . name = scim_group . get ( \"displayName\" ) arkid_group . save () def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete () def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete () def _get_scim_user ( self , arkid_user ): attr_map = { \"id\" : \"id\" , \"username\" : \"userName\" , \"is_active\" : \"active\" } scim_user = Core2EnterpriseUser ( userName = '' , groups = []) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_user , arkid_attr ) scim_path = Path . create ( scim_attr ) if ( scim_path . schema_identifier and scim_path . schema_identifier == SchemaIdentifiers . Core2EnterpriseUser ): compose_enterprise_extension ( scim_user , scim_path , value ) else : compose_core2_user ( scim_user , scim_path , value ) # \u751f\u6210\u7528\u6237\u6240\u5728\u7684\u7ec4 parent_groups = arkid_user . user_set . filter ( is_del = 0 ) for grp in parent_groups : scim_group = ScimUserGroup () scim_group . value = grp . id scim_group . display = grp . name scim_user . groups . append ( scim_group ) return scim_user def _get_scim_group ( self , arkid_group ): members = UserGroup . valid_objects . filter ( parent = arkid_group ) attr_map = { \"id\" : \"id\" , \"name\" : \"displayName\" } scim_group = Core2Group ( displayName = '' ) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_group , arkid_attr ) scim_path = Path . create ( scim_attr ) compose_core2_group ( scim_group , scim_path , value ) for item in members : member = Member () member . value = item . id scim_group . members . append ( member ) return scim_group def _get_all_scim_users ( self , tenant ): scim_users = [] arkid_users = User . valid_objects . filter ( tenant = tenant ) for arkid_user in arkid_users : scim_user = self . _get_scim_user ( arkid_user ) scim_users . append ( scim_user ) return scim_users def _get_all_scim_groups ( self , tenant ): scim_groups = [] arkid_groups = UserGroup . valid_objects . filter ( tenant = tenant ) for arkid_group in arkid_groups : scim_group = self . _get_scim_group ( arkid_group ) scim_groups . append ( scim_group ) return scim_groups def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException () def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"ScimSyncArkIDExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.create_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"create_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.create_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"create_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.delete_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7ec4\u7ec7ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException ()","title":"delete_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.delete_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7528\u6237ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException ()","title":"delete_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.query_groups","text":"\u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2Group] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups","title":"query_groups()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.query_users","text":"\u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2EnterpriseUser] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users","title":"query_users()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.replace_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"replace_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.replace_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"replace_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.retrieve_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException ()","title":"retrieve_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.retrieve_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException ()","title":"retrieve_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.sync_groups","text":"\u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Parameters: Name Type Description Default groups List SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete ()","title":"sync_groups()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.sync_users","text":"\u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Parameters: Name Type Description Default users List SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete ()","title":"sync_users()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.update_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"update_group()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.update_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"update_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/#_8","text":"","title":"\u6743\u9650\u6570\u636e\u540c\u6b65"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/","text":"\u529f\u80fd\u4ecb\u7ecd # \u6d88\u606f\u4e2d\u95f4\u4ef6\u63d2\u4ef6\u7528\u4e8e\u5e73\u53f0\u5f15\u5165\u6d88\u606f\u4e2d\u95f4\u4ef6\uff08\u5982Artemis,kafka\u7b49\uff09\u4e0e\u7b2c\u4e09\u65b9\u7cfb\u7edf\u8fdb\u884c\u6d88\u606f\u901a\u4fe1\uff08\u5982\u901a\u77e5\u6570\u636e\uff09 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u6d88\u606f\u4e2d\u95f4\u4ef6\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u6d88\u606f\u4e2d\u95f4\u4ef6\u63d2\u4ef6\u57fa\u7c7b\u5e76\u5b8c\u6210\u6570\u636e\u5199\u5165\u8fc7\u7a0b\uff0c\u5e73\u53f0\u5df2\u63d0\u4f9b\u6d88\u606f\u5b58\u50a8\u6a21\u578b\uff08\u53ef\u6269\u5c55\uff09,\u4e14\u5728\u57fa\u7c7b\u4e2d\u63d0\u4f9b\u6d88\u606f\u5b58\u50a8\u65b9\u6cd5\uff1a \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.message.MessageExtension ( Extension ) # Source code in arkid/core/extension/message.py class MessageExtension ( Extension ): TYPE = \"message\" @property def type ( self ): return MessageExtension . TYPE def load ( self ): super () . load () def save_message ( self , tenant : Tenant , user : User , source : TenantExtensionConfig , title : str , content : str , ** kwargs ): \"\"\"\u4fdd\u5b58\u6d88\u606f Args: tenant (Tenant): \u79df\u6237 user (User): \u7528\u6237 source (TenantExtensionConfig): \u6765\u6e90 title (str): \u6807\u9898 content (str): \u5185\u5bb9 \"\"\" try : message = Message ( tenant = tenant , user = user , source = source , title = title , content = content ) message . save () except Exception as err : logger . error ( err ) return False , ErrorCode . MESSAGE_SAVE_FAILED return True , None load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/message.py def load ( self ): super () . load () save_message ( self , tenant , user , source , title , content , ** kwargs ) # \u4fdd\u5b58\u6d88\u606f Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required user User \u7528\u6237 required source TenantExtensionConfig \u6765\u6e90 required title str \u6807\u9898 required content str \u5185\u5bb9 required Source code in arkid/core/extension/message.py def save_message ( self , tenant : Tenant , user : User , source : TenantExtensionConfig , title : str , content : str , ** kwargs ): \"\"\"\u4fdd\u5b58\u6d88\u606f Args: tenant (Tenant): \u79df\u6237 user (User): \u7528\u6237 source (TenantExtensionConfig): \u6765\u6e90 title (str): \u6807\u9898 content (str): \u5185\u5bb9 \"\"\" try : message = Message ( tenant = tenant , user = user , source = source , title = title , content = content ) message . save () except Exception as err : logger . error ( err ) return False , ErrorCode . MESSAGE_SAVE_FAILED return True , None","title":"\u6d88\u606f\u4e2d\u95f4\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/#_1","text":"\u6d88\u606f\u4e2d\u95f4\u4ef6\u63d2\u4ef6\u7528\u4e8e\u5e73\u53f0\u5f15\u5165\u6d88\u606f\u4e2d\u95f4\u4ef6\uff08\u5982Artemis,kafka\u7b49\uff09\u4e0e\u7b2c\u4e09\u65b9\u7cfb\u7edf\u8fdb\u884c\u6d88\u606f\u901a\u4fe1\uff08\u5982\u901a\u77e5\u6570\u636e\uff09","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/#_2","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u6d88\u606f\u4e2d\u95f4\u4ef6\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u6d88\u606f\u4e2d\u95f4\u4ef6\u63d2\u4ef6\u57fa\u7c7b\u5e76\u5b8c\u6210\u6570\u636e\u5199\u5165\u8fc7\u7a0b\uff0c\u5e73\u53f0\u5df2\u63d0\u4f9b\u6d88\u606f\u5b58\u50a8\u6a21\u578b\uff08\u53ef\u6269\u5c55\uff09,\u4e14\u5728\u57fa\u7c7b\u4e2d\u63d0\u4f9b\u6d88\u606f\u5b58\u50a8\u65b9\u6cd5\uff1a","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/#_3","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/#arkid.core.extension.message.MessageExtension","text":"Source code in arkid/core/extension/message.py class MessageExtension ( Extension ): TYPE = \"message\" @property def type ( self ): return MessageExtension . TYPE def load ( self ): super () . load () def save_message ( self , tenant : Tenant , user : User , source : TenantExtensionConfig , title : str , content : str , ** kwargs ): \"\"\"\u4fdd\u5b58\u6d88\u606f Args: tenant (Tenant): \u79df\u6237 user (User): \u7528\u6237 source (TenantExtensionConfig): \u6765\u6e90 title (str): \u6807\u9898 content (str): \u5185\u5bb9 \"\"\" try : message = Message ( tenant = tenant , user = user , source = source , title = title , content = content ) message . save () except Exception as err : logger . error ( err ) return False , ErrorCode . MESSAGE_SAVE_FAILED return True , None","title":"MessageExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/#arkid.core.extension.message.MessageExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/message.py def load ( self ): super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/#arkid.core.extension.message.MessageExtension.save_message","text":"\u4fdd\u5b58\u6d88\u606f Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required user User \u7528\u6237 required source TenantExtensionConfig \u6765\u6e90 required title str \u6807\u9898 required content str \u5185\u5bb9 required Source code in arkid/core/extension/message.py def save_message ( self , tenant : Tenant , user : User , source : TenantExtensionConfig , title : str , content : str , ** kwargs ): \"\"\"\u4fdd\u5b58\u6d88\u606f Args: tenant (Tenant): \u79df\u6237 user (User): \u7528\u6237 source (TenantExtensionConfig): \u6765\u6e90 title (str): \u6807\u9898 content (str): \u5185\u5bb9 \"\"\" try : message = Message ( tenant = tenant , user = user , source = source , title = title , content = content ) message . save () except Exception as err : logger . error ( err ) return False , ErrorCode . MESSAGE_SAVE_FAILED return True , None","title":"save_message()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/","text":"\u529f\u80fd\u4ecb\u7ecd # \u77ed\u4fe1\u63d2\u4ef6\u62bd\u8c61\u5904\u7406\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\u5982\u624b\u673a\u9a8c\u8bc1\u7801/\u901a\u77e5\u7b49\u77ed\u4fe1\u53d1\u9001\u9700\u6c42\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u901a\u8fc7\u91cd\u8f7d\u51fd\u6570\u65b9\u5f0f\u63a5\u5165\u5404\u5927\u5382\u5546\u63d0\u4f9b\u7684\u77ed\u4fe1\u670d\u52a1 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u77ed\u4fe1\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u77ed\u4fe1\u63d2\u4ef6\u57fa\u7c7b\u5e76\u91cd\u8f7dsend_sms\u51fd\u6570\u5373\u53ef\uff0c\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a sequenceDiagram participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u77ed\u4fe1\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u76d1\u542c\u77ed\u4fe1\u4e8b\u4ef6 rect rgb(191, 223, 255) C->>B: \u53d1\u51fa\u53d1\u9001\u77ed\u4fe1\u4e8b\u4ef6(SEND_SMS) B->>C: \u76f8\u5e94\u4e8b\u4ef6\u5e76\u6839\u636e\u81ea\u8eab\u914d\u7f6e\u53d1\u9001\u77ed\u4fe1\uff0c\u8fd4\u56de\u7ed3\u679c\uff08\u6210\u529f/\u5931\u8d25\uff09 end \u62bd\u8c61\u51fd\u6570 # send_sms \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.sms.SmsExtension ( Extension ) # Source code in arkid/core/extension/sms.py class SmsExtension ( Extension ): TYPE = \"sms\" @property def type ( self ): return SmsExtension . TYPE def load ( self ): self . listen_event ( SEND_SMS , self . event_send_sms ) super () . load () def event_send_sms ( self , event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1\u65f6\u95f4 Args: event (Event): \u4e8b\u4ef6 \u4e8b\u4ef6\u6570\u636e\uff08event.data\uff09\u7ed3\u6784\u8bf4\u660e: ``` json { \"config_id\": \"xxxx\", # \u5fc5\u4f20\uff0c\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eID \"mobile\": \"xxxx\", # \u5fc5\u4f20\uff0c\u7535\u8bdd\u53f7\u7801 \"code\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u9a8c\u8bc1\u7801 \"areacode\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u533a\u53f7 \"username\": \"xxxx\" # \u975e\u5fc5\u4f20\uff0c\u7528\u6237\u540d ... } ``` Returns: \u53d1\u9001\u77ed\u4fe1\u7ed3\u679c \"\"\" if event . packages == self . package or self . package in event . packages : return self . send_sms ( event , ** kwargs ) @abstractmethod def send_sms ( self , event : Event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1 Args: event (Event): \u4e8b\u4ef6 \"\"\" pass event_send_sms ( self , event , ** kwargs ) # \u53d1\u9001\u77ed\u4fe1\u65f6\u95f4 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required \u4e8b\u4ef6\u6570\u636e\uff08event.data\uff09\u7ed3\u6784\u8bf4\u660e: { \"config_id\" : \"xxxx\" , # \u5fc5\u4f20\uff0c\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eID \"mobile\" : \"xxxx\" , # \u5fc5\u4f20\uff0c\u7535\u8bdd\u53f7\u7801 \"code\" : \"xxxx\" , # \u975e\u5fc5\u4f20\uff0c\u9a8c\u8bc1\u7801 \"areacode\" : \"xxxx\" , # \u975e\u5fc5\u4f20\uff0c\u533a\u53f7 \"username\" : \"xxxx\" # \u975e\u5fc5\u4f20\uff0c\u7528\u6237\u540d ... } Returns: Type Description \u53d1\u9001\u77ed\u4fe1\u7ed3\u679c Source code in arkid/core/extension/sms.py def event_send_sms ( self , event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1\u65f6\u95f4 Args: event (Event): \u4e8b\u4ef6 \u4e8b\u4ef6\u6570\u636e\uff08event.data\uff09\u7ed3\u6784\u8bf4\u660e: ``` json { \"config_id\": \"xxxx\", # \u5fc5\u4f20\uff0c\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eID \"mobile\": \"xxxx\", # \u5fc5\u4f20\uff0c\u7535\u8bdd\u53f7\u7801 \"code\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u9a8c\u8bc1\u7801 \"areacode\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u533a\u53f7 \"username\": \"xxxx\" # \u975e\u5fc5\u4f20\uff0c\u7528\u6237\u540d ... } ``` Returns: \u53d1\u9001\u77ed\u4fe1\u7ed3\u679c \"\"\" if event . packages == self . package or self . package in event . packages : return self . send_sms ( event , ** kwargs ) load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/sms.py def load ( self ): self . listen_event ( SEND_SMS , self . event_send_sms ) super () . load () send_sms ( self , event , ** kwargs ) # \u53d1\u9001\u77ed\u4fe1 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in arkid/core/extension/sms.py @abstractmethod def send_sms ( self , event : Event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1 Args: event (Event): \u4e8b\u4ef6 \"\"\" pass \u793a\u4f8b # extension_root.com_longgui_sms_aliyun.AliyunSMSExtension ( SmsExtension ) # Source code in extension_root/com_longgui_sms_aliyun/__init__.py class AliyunSMSExtension ( SmsExtension ): def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load () def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map () load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_sms_aliyun/__init__.py def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load () send_sms ( self , event , ** kwargs ) # \u53d1\u9001\u77ed\u4fe1 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_sms_aliyun/__init__.py def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map ()","title":"\u77ed\u4fe1"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#_1","text":"\u77ed\u4fe1\u63d2\u4ef6\u62bd\u8c61\u5904\u7406\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\u5982\u624b\u673a\u9a8c\u8bc1\u7801/\u901a\u77e5\u7b49\u77ed\u4fe1\u53d1\u9001\u9700\u6c42\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u901a\u8fc7\u91cd\u8f7d\u51fd\u6570\u65b9\u5f0f\u63a5\u5165\u5404\u5927\u5382\u5546\u63d0\u4f9b\u7684\u77ed\u4fe1\u670d\u52a1","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#_2","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u77ed\u4fe1\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u77ed\u4fe1\u63d2\u4ef6\u57fa\u7c7b\u5e76\u91cd\u8f7dsend_sms\u51fd\u6570\u5373\u53ef\uff0c\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a sequenceDiagram participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u77ed\u4fe1\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u76d1\u542c\u77ed\u4fe1\u4e8b\u4ef6 rect rgb(191, 223, 255) C->>B: \u53d1\u51fa\u53d1\u9001\u77ed\u4fe1\u4e8b\u4ef6(SEND_SMS) B->>C: \u76f8\u5e94\u4e8b\u4ef6\u5e76\u6839\u636e\u81ea\u8eab\u914d\u7f6e\u53d1\u9001\u77ed\u4fe1\uff0c\u8fd4\u56de\u7ed3\u679c\uff08\u6210\u529f/\u5931\u8d25\uff09 end","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#_3","text":"send_sms","title":"\u62bd\u8c61\u51fd\u6570"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#arkid.core.extension.sms.SmsExtension","text":"Source code in arkid/core/extension/sms.py class SmsExtension ( Extension ): TYPE = \"sms\" @property def type ( self ): return SmsExtension . TYPE def load ( self ): self . listen_event ( SEND_SMS , self . event_send_sms ) super () . load () def event_send_sms ( self , event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1\u65f6\u95f4 Args: event (Event): \u4e8b\u4ef6 \u4e8b\u4ef6\u6570\u636e\uff08event.data\uff09\u7ed3\u6784\u8bf4\u660e: ``` json { \"config_id\": \"xxxx\", # \u5fc5\u4f20\uff0c\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eID \"mobile\": \"xxxx\", # \u5fc5\u4f20\uff0c\u7535\u8bdd\u53f7\u7801 \"code\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u9a8c\u8bc1\u7801 \"areacode\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u533a\u53f7 \"username\": \"xxxx\" # \u975e\u5fc5\u4f20\uff0c\u7528\u6237\u540d ... } ``` Returns: \u53d1\u9001\u77ed\u4fe1\u7ed3\u679c \"\"\" if event . packages == self . package or self . package in event . packages : return self . send_sms ( event , ** kwargs ) @abstractmethod def send_sms ( self , event : Event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1 Args: event (Event): \u4e8b\u4ef6 \"\"\" pass","title":"SmsExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#arkid.core.extension.sms.SmsExtension.event_send_sms","text":"\u53d1\u9001\u77ed\u4fe1\u65f6\u95f4 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required \u4e8b\u4ef6\u6570\u636e\uff08event.data\uff09\u7ed3\u6784\u8bf4\u660e: { \"config_id\" : \"xxxx\" , # \u5fc5\u4f20\uff0c\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eID \"mobile\" : \"xxxx\" , # \u5fc5\u4f20\uff0c\u7535\u8bdd\u53f7\u7801 \"code\" : \"xxxx\" , # \u975e\u5fc5\u4f20\uff0c\u9a8c\u8bc1\u7801 \"areacode\" : \"xxxx\" , # \u975e\u5fc5\u4f20\uff0c\u533a\u53f7 \"username\" : \"xxxx\" # \u975e\u5fc5\u4f20\uff0c\u7528\u6237\u540d ... } Returns: Type Description \u53d1\u9001\u77ed\u4fe1\u7ed3\u679c Source code in arkid/core/extension/sms.py def event_send_sms ( self , event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1\u65f6\u95f4 Args: event (Event): \u4e8b\u4ef6 \u4e8b\u4ef6\u6570\u636e\uff08event.data\uff09\u7ed3\u6784\u8bf4\u660e: ``` json { \"config_id\": \"xxxx\", # \u5fc5\u4f20\uff0c\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eID \"mobile\": \"xxxx\", # \u5fc5\u4f20\uff0c\u7535\u8bdd\u53f7\u7801 \"code\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u9a8c\u8bc1\u7801 \"areacode\": \"xxxx\", # \u975e\u5fc5\u4f20\uff0c\u533a\u53f7 \"username\": \"xxxx\" # \u975e\u5fc5\u4f20\uff0c\u7528\u6237\u540d ... } ``` Returns: \u53d1\u9001\u77ed\u4fe1\u7ed3\u679c \"\"\" if event . packages == self . package or self . package in event . packages : return self . send_sms ( event , ** kwargs )","title":"event_send_sms()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#arkid.core.extension.sms.SmsExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/sms.py def load ( self ): self . listen_event ( SEND_SMS , self . event_send_sms ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#arkid.core.extension.sms.SmsExtension.send_sms","text":"\u53d1\u9001\u77ed\u4fe1 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in arkid/core/extension/sms.py @abstractmethod def send_sms ( self , event : Event , ** kwargs ): \"\"\" \u53d1\u9001\u77ed\u4fe1 Args: event (Event): \u4e8b\u4ef6 \"\"\" pass","title":"send_sms()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#extension_root.com_longgui_sms_aliyun.AliyunSMSExtension","text":"Source code in extension_root/com_longgui_sms_aliyun/__init__.py class AliyunSMSExtension ( SmsExtension ): def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load () def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map ()","title":"AliyunSMSExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#extension_root.com_longgui_sms_aliyun.AliyunSMSExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_sms_aliyun/__init__.py def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%9F%AD%E4%BF%A1/#extension_root.com_longgui_sms_aliyun.AliyunSMSExtension.send_sms","text":"\u53d1\u9001\u77ed\u4fe1 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_sms_aliyun/__init__.py def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map ()","title":"send_sms()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/","text":"\u529f\u80fd\u4ecb\u7ecd # \u7b2c\u4e09\u65b9\u767b\u5f55\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7528\u5176\u5b83IDP\u7cfb\u7edf\u8d26\u53f7\u767b\u5f55\uff0c\u5e76\u4e0eArkID\u7684\u8d26\u53f7\u8fdb\u884c\u7ed1\u5b9a\u7684\u8fc7\u7a0b\u3002 \u7ecf\u5178\u7684\u6709\uff1a\u5fae\u4fe1\u767b\u5f55\uff0c\u9489\u9489\u767b\u5f55\uff0c\u98de\u4e66\u767b\u5f55\u7b49\u7b49\u3002 \u5b9e\u73b0\u601d\u8def # \u7531\u4e8e\u5927\u90e8\u5206\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u65b9\u6848\u90fd\u662f\u57fa\u4e8eOAuth2\u534f\u8bae\u7684\u884d\u751f\u54c1\uff0c\u56e0\u6b64\u4e09\u65b9\u8ba4\u8bc1\u7684\u6d41\u7a0b\u4ee5OAuth2\u4e3a\u53c2\u8003\u3002 \u9996\u5148,\u5728\u767b\u5f55\u9875\u9762\u521b\u5efa\u4e00\u4e2a\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684\u5165\u53e3\uff0c\u751f\u6210\u8be5\u5165\u53e3\u9700\u8981: \u56fe\u6807: get_img_url \u7b2c\u4e09\u65b9\u767b\u5f55\u8bf7\u6c42 arkid.core.extension.extrnal_idp.ExternalIdpExtension.login , \u8be5\u8bf7\u6c42\u4f1a\u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531 get_authorize_url \u63d0\u4f9b \u5f53\u7528\u6237\u70b9\u51fb\u56fe\u6807\u7684\u65f6\u5019\uff0c\u53d1\u8d77\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8bf7\u6c42\u540e\uff0c \u4f1a\u56de\u8c03\u5230 arkid.core.extension.extrnal_idp.ExternalIdpExtension.callback \u63a5\u53e3\uff0c\u5e76\u643a\u5e26code \u5728CallBack\u4e2d\uff0c\u7528code\u8c03\u7528 get_ext_token_by_code \u65b9\u6cd5\uff0c\u83b7\u53d6access_token\uff0c \u7136\u540e\u901a\u8fc7access_token\u8c03\u7528 get_user_info_by_ext_token \u65b9\u6cd5\u83b7\u53d6\u7528\u6237\u4fe1\u606f \u5982\u679c\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684ext_id\u6ca1\u6709\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u524d\u7aef\u4f1a\u8df3\u8f6c\u5230\u7ed1\u5b9a\u9875\u9762\uff0c\u8c03\u7528 arkid.core.extension.external_idp.ExternalIdpExtension.bind \u63a5\u53e3, \u8be5\u63a5\u53e3\u4f1a\u8c03\u7528 bind_arkid_user \u65b9\u6cd5\u7ed1\u5b9aext_id\u5230ArkID\u7528\u6237 \u5982\u679c\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684ext_id\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u8c03\u7528 get_arkid_user \u65b9\u6cd5\u83b7\u53d6\u5df2\u7ecf\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \u81f3\u6b64\u5373\u5b8c\u6210\u767b\u5f55 \u62bd\u8c61\u65b9\u6cd5 # get_img_url get_authorize_url get_ext_token_by_code get_user_info_by_ext_token get_arkid_user \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.external_idp.ExternalIdpExtension ( Extension ) # Source code in arkid/core/extension/external_idp.py class ExternalIdpExtension ( Extension ): TYPE = \"external_idp\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ExternalIdpExtension . TYPE def load ( self ): urls = [ re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/login$' , self . login , name = f ' { self . pname } _login' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/callback$' , self . callback , name = f ' { self . pname } _callback' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/bind$' , self . bind , name = f ' { self . pname } _bind' , ), ] self . register_routers ( urls , False ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . add_idp_login_buttons ) self . listen_event ( core_event . ACCOUNT_UNBIND , self . account_unbind ) super () . load () @abstractmethod def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, callback_url (str): \u7531ArkID\u63d0\u4f9b\u7684\u56de\u8c03\u5730\u5740 next_url (str): \u524d\u7aef\u4f20\u6765\u7684\u8df3\u8f6c\u5730\u5740 Returns: str: \u7b2c\u4e09\u65b9\u767b\u5f55\u63d0\u4f9b\u7684\u8ba4\u8bc1URL \"\"\" pass def login ( self , request , config_id ): \"\"\" \u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531get_authorize_url\u63d0\u4f9b \"\"\" config = self . get_config_by_id ( config_id ) if not config : return JsonResponse ({ \"error_msg\" : \"\u6ca1\u6709\u627e\u5230\u767b\u5f55\u914d\u7f6e\" }) callback_url = config . config . get ( \"callback_url\" ) # callback_url = callback_url.replace( # \"localhost:8000\", \"xxxx.vaiwan.com\" # ) # \u5185\u7f51\u7a7f\u900f\u6d4b\u8bd5\u7528 next_url = request . GET . get ( \"next\" , None ) if next_url is not None : next_url = \"?next=\" + next_url else : next_url = \"\" url = self . get_authorize_url ( config , callback_url , next_url ) return HttpResponseRedirect ( url ) @abstractmethod def get_ext_token ( self , config , code ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e Returns: str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684token \"\"\" pass @abstractmethod def get_ext_user_info ( self , config , code , token ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code token (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684token Returns: dict: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f \"\"\" pass @abstractmethod def get_arkid_user ( self , ext_id ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: ext_id (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: ArkID\u7528\u6237 \"\"\" pass def get_arkid_token ( self , ext_id , ext_name , ext_icon , config ): arkid_user = self . get_arkid_user ( ext_id ) if arkid_user : from arkid.core.models import ExpiringToken et = ExpiringToken . objects . filter ( user = arkid_user ) . first () if et and et . expired ( config . tenant ) is False : token = et . token else : token = refresh_token ( arkid_user ) context = { \"token\" : token } else : context = { \"token\" : \"\" , \"ext_id\" : ext_id , \"ext_name\" : ext_name , \"ext_icon\" : ext_icon , \"tenant_id\" : config . tenant . id . hex , \"bind\" : config . config . get ( 'bind_url' ), } return context @abstractmethod def get_auth_code_from_request ( self , request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HTTPRequest): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: str: \u6388\u6743\u7801 \"\"\" pass def callback ( self , request , config_id ): \"\"\" \u62ff\u5230\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684code\uff0c\u8c03\u7528get_ext_token_by_code\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684token\uff0c \u8c03\u7528get_user_info_by_ext_token\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f\uff0c \u62ff\u5230ext_id\u540e\uff0c\u5224\u65ad\u8be5ext_id\u662f\u5426\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u5982\u679c\u7ed1\u5b9a\u76f4\u63a5\u8fd4\u56de\u7ed1\u5b9a\u7528\u6237\u7684Token\uff0c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u7ed1\u5b9a\u9875\u9762 \"\"\" code = self . get_auth_code_from_request ( request ) next_url = request . GET . get ( \"next\" , '' ) config = self . get_config_by_id ( config_id ) frontend_host = ( get_app_config () . get_frontend_host () . replace ( 'http://' , '' ) . replace ( 'https://' , '' ) ) # if next_url and ( # \"third_part_callback\" not in next_url or frontend_host not in next_url # ): # return JsonResponse({'error_msg': '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762'}) if next_url and ( frontend_host not in next_url ): return JsonResponse ({ 'error_msg' : '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762' }) if code : try : ext_token = self . get_ext_token ( config , code ) ext_id , ext_name , ext_icon , ext_info = self . get_ext_user_info ( config , code , ext_token ) except Exception as e : logger . error ( e ) return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u5931\u6548\" , \"code\" : [ \"invalid\" ]}) else : return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u4e22\u5931\" , \"code\" : [ \"required\" ]}) context = self . get_arkid_token ( ext_id , ext_name , ext_icon , config ) query_string = urlencode ( context ) if next_url : url = f \" { next_url } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) else : frontend_host = get_app_config () . get_frontend_host () frontend_callback = f ' { frontend_host } /third_part_callback' url = f \" { frontend_callback } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) @abstractmethod def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u7b2c\u4e09\u65b9\u767b\u5f55\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): ArkID\u7684\u7528\u6237 data (dict) request\u6570\u636e Returns: {\"token\":xxx}: \u8fd4\u56detoken \"\"\" pass @csrf_exempt def bind ( self , request , config_id ): \"\"\" \u5904\u7406\u7b2c\u4e09\u65b9\u8eab\u4efd\u6e90\u8fd4\u56de\u7684user_id\u548cArkID\u7684user\u4e4b\u95f4\u7684\u7ed1\u5b9a \"\"\" from urllib.parse import unquote from arkid.core.event import SAVE_FILE , dispatch_event , Event from arkid.extension.models import Extension ext_id = request . POST . get ( \"ext_id\" ) user = verify_token ( request ) if not user : return JsonResponse ({ \"error_msg\" : \"Token\u9a8c\u8bc1\u5931\u8d25\" , \"code\" : [ \"token invalid\" ]}) ext_icon = request . POST . get ( 'ext_icon' , '' ) ext_name = request . POST . get ( 'ext_name' , '' ) config = self . get_config_by_id ( config_id ) extension = Extension . active_objects . filter ( type = \"storage\" ) . first () if ext_name : ext_name = unquote ( ext_name ) request . POST [ 'ext_name' ] = ext_name if ext_icon : data = { 'fileurl' : ext_icon } responses = dispatch_event ( Event ( tag = SAVE_FILE , tenant = config . tenant , request = request , packages = extension . package , data = data )) useless , ( fileinfo , extension ) = responses [ 0 ] request . POST [ 'ext_icon' ] = fileinfo self . bind_arkid_user ( ext_id , user , request . POST ) # token = refresh_token(user) # data = {\"token\": token} data = {} return JsonResponse ( self . success ()) @abstractmethod def get_img_url ( self ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Returns: url str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae\u7684\u56fe\u6807 \"\"\" pass def register_external_idp_schema ( self , idp_type , schema ): self . register_config_schema ( schema , self . package + '_' + idp_type ) self . register_composite_config_schema ( schema , idp_type , exclude = [ 'extension' ]) def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name , type ) server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created def update_tenant_config ( self , id , config , name , type ): super () . update_tenant_config ( id , config , name , type ) config_created = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created def add_idp_login_buttons ( self , event , ** kwargs ): logger . info ( f ' { self . package } add idp login buttons start' ) data = {} configs = self . get_tenant_configs ( event . tenant ) for config in configs : img_url , redirect_url = self . get_img_and_redirect_url ( config ) if img_url and redirect_url : buttons = [{ \"img\" : img_url , \"redirect\" : { \"url\" : redirect_url }, \"tooltip\" : config . name }] data [ config . id . hex ] = { \"login\" : { 'extend' : { \"buttons\" : buttons }}} logger . info ( f ' { self . package } add idp login buttions end' ) return data def account_unbind ( self , event , ** kwargs ): ''' \u5728\u8d26\u6237\u89e3\u7ed1\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5 Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user_id: \u7528\u6237id ''' data = event . data pass @abstractmethod def get_img_and_redirect_url ( self , config ): \"\"\" \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, Returns: tuple: \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') \"\"\" pass composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/external_idp.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 account_unbind ( self , event , ** kwargs ) # \u5728\u8d26\u6237\u89e3\u7ed1\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user_id: \u7528\u6237id required Source code in arkid/core/extension/external_idp.py def account_unbind ( self , event , ** kwargs ): ''' \u5728\u8d26\u6237\u89e3\u7ed1\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5 Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user_id: \u7528\u6237id ''' data = event . data pass bind ( self , request , config_id ) # \u5904\u7406\u7b2c\u4e09\u65b9\u8eab\u4efd\u6e90\u8fd4\u56de\u7684user_id\u548cArkID\u7684user\u4e4b\u95f4\u7684\u7ed1\u5b9a Source code in arkid/core/extension/external_idp.py @csrf_exempt def bind ( self , request , config_id ): \"\"\" \u5904\u7406\u7b2c\u4e09\u65b9\u8eab\u4efd\u6e90\u8fd4\u56de\u7684user_id\u548cArkID\u7684user\u4e4b\u95f4\u7684\u7ed1\u5b9a \"\"\" from urllib.parse import unquote from arkid.core.event import SAVE_FILE , dispatch_event , Event from arkid.extension.models import Extension ext_id = request . POST . get ( \"ext_id\" ) user = verify_token ( request ) if not user : return JsonResponse ({ \"error_msg\" : \"Token\u9a8c\u8bc1\u5931\u8d25\" , \"code\" : [ \"token invalid\" ]}) ext_icon = request . POST . get ( 'ext_icon' , '' ) ext_name = request . POST . get ( 'ext_name' , '' ) config = self . get_config_by_id ( config_id ) extension = Extension . active_objects . filter ( type = \"storage\" ) . first () if ext_name : ext_name = unquote ( ext_name ) request . POST [ 'ext_name' ] = ext_name if ext_icon : data = { 'fileurl' : ext_icon } responses = dispatch_event ( Event ( tag = SAVE_FILE , tenant = config . tenant , request = request , packages = extension . package , data = data )) useless , ( fileinfo , extension ) = responses [ 0 ] request . POST [ 'ext_icon' ] = fileinfo self . bind_arkid_user ( ext_id , user , request . POST ) # token = refresh_token(user) # data = {\"token\": token} data = {} return JsonResponse ( self . success ()) bind_arkid_user ( self , ext_id , user , data ) # Parameters: Name Type Description Default ext_id str \u7b2c\u4e09\u65b9\u767b\u5f55\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required user arkid.core.models.User ArkID\u7684\u7528\u6237 required Returns: Type Description {\"token\" xxx}: \u8fd4\u56detoken Source code in arkid/core/extension/external_idp.py @abstractmethod def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u7b2c\u4e09\u65b9\u767b\u5f55\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): ArkID\u7684\u7528\u6237 data (dict) request\u6570\u636e Returns: {\"token\":xxx}: \u8fd4\u56detoken \"\"\" pass callback ( self , request , config_id ) # \u62ff\u5230\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684code\uff0c\u8c03\u7528get_ext_token_by_code\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684token\uff0c \u8c03\u7528get_user_info_by_ext_token\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f\uff0c \u62ff\u5230ext_id\u540e\uff0c\u5224\u65ad\u8be5ext_id\u662f\u5426\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u5982\u679c\u7ed1\u5b9a\u76f4\u63a5\u8fd4\u56de\u7ed1\u5b9a\u7528\u6237\u7684Token\uff0c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u7ed1\u5b9a\u9875\u9762 Source code in arkid/core/extension/external_idp.py def callback ( self , request , config_id ): \"\"\" \u62ff\u5230\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684code\uff0c\u8c03\u7528get_ext_token_by_code\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684token\uff0c \u8c03\u7528get_user_info_by_ext_token\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f\uff0c \u62ff\u5230ext_id\u540e\uff0c\u5224\u65ad\u8be5ext_id\u662f\u5426\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u5982\u679c\u7ed1\u5b9a\u76f4\u63a5\u8fd4\u56de\u7ed1\u5b9a\u7528\u6237\u7684Token\uff0c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u7ed1\u5b9a\u9875\u9762 \"\"\" code = self . get_auth_code_from_request ( request ) next_url = request . GET . get ( \"next\" , '' ) config = self . get_config_by_id ( config_id ) frontend_host = ( get_app_config () . get_frontend_host () . replace ( 'http://' , '' ) . replace ( 'https://' , '' ) ) # if next_url and ( # \"third_part_callback\" not in next_url or frontend_host not in next_url # ): # return JsonResponse({'error_msg': '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762'}) if next_url and ( frontend_host not in next_url ): return JsonResponse ({ 'error_msg' : '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762' }) if code : try : ext_token = self . get_ext_token ( config , code ) ext_id , ext_name , ext_icon , ext_info = self . get_ext_user_info ( config , code , ext_token ) except Exception as e : logger . error ( e ) return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u5931\u6548\" , \"code\" : [ \"invalid\" ]}) else : return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u4e22\u5931\" , \"code\" : [ \"required\" ]}) context = self . get_arkid_token ( ext_id , ext_name , ext_icon , config ) query_string = urlencode ( context ) if next_url : url = f \" { next_url } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) else : frontend_host = get_app_config () . get_frontend_host () frontend_callback = f ' { frontend_host } /third_part_callback' url = f \" { frontend_callback } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) create_tenant_config ( self , tenant , config , name , type ) # \u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 Source code in arkid/core/extension/external_idp.py def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name , type ) server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created get_arkid_user ( self , ext_id ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default ext_id str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description arkid.core.models.User ArkID\u7528\u6237 Source code in arkid/core/extension/external_idp.py @abstractmethod def get_arkid_user ( self , ext_id ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: ext_id (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: ArkID\u7528\u6237 \"\"\" pass get_auth_code_from_request ( self , request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HTTPRequest \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description str \u6388\u6743\u7801 Source code in arkid/core/extension/external_idp.py @abstractmethod def get_auth_code_from_request ( self , request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HTTPRequest): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: str: \u6388\u6743\u7801 \"\"\" pass get_authorize_url ( self , config , callback_url , next_url ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required callback_url str \u7531ArkID\u63d0\u4f9b\u7684\u56de\u8c03\u5730\u5740 required next_url str \u524d\u7aef\u4f20\u6765\u7684\u8df3\u8f6c\u5730\u5740 required Returns: Type Description str \u7b2c\u4e09\u65b9\u767b\u5f55\u63d0\u4f9b\u7684\u8ba4\u8bc1URL Source code in arkid/core/extension/external_idp.py @abstractmethod def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, callback_url (str): \u7531ArkID\u63d0\u4f9b\u7684\u56de\u8c03\u5730\u5740 next_url (str): \u524d\u7aef\u4f20\u6765\u7684\u8df3\u8f6c\u5730\u5740 Returns: str: \u7b2c\u4e09\u65b9\u767b\u5f55\u63d0\u4f9b\u7684\u8ba4\u8bc1URL \"\"\" pass get_ext_token ( self , config , code ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default code str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code required config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Returns: Type Description str \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684token Source code in arkid/core/extension/external_idp.py @abstractmethod def get_ext_token ( self , config , code ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e Returns: str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684token \"\"\" pass get_ext_user_info ( self , config , code , token ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code required token str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684token required Returns: Type Description dict \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f Source code in arkid/core/extension/external_idp.py @abstractmethod def get_ext_user_info ( self , config , code , token ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code token (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684token Returns: dict: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f \"\"\" pass get_img_and_redirect_url ( self , config ) # \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required Returns: Type Description tuple \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') Source code in arkid/core/extension/external_idp.py @abstractmethod def get_img_and_redirect_url ( self , config ): \"\"\" \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, Returns: tuple: \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') \"\"\" pass get_img_url ( self ) # \u62bd\u8c61\u65b9\u6cd5 Returns: Type Description url str \u8fd4\u56de\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae\u7684\u56fe\u6807 Source code in arkid/core/extension/external_idp.py @abstractmethod def get_img_url ( self ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Returns: url str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae\u7684\u56fe\u6807 \"\"\" pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/external_idp.py def load ( self ): urls = [ re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/login$' , self . login , name = f ' { self . pname } _login' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/callback$' , self . callback , name = f ' { self . pname } _callback' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/bind$' , self . bind , name = f ' { self . pname } _bind' , ), ] self . register_routers ( urls , False ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . add_idp_login_buttons ) self . listen_event ( core_event . ACCOUNT_UNBIND , self . account_unbind ) super () . load () login ( self , request , config_id ) # \u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531get_authorize_url\u63d0\u4f9b Source code in arkid/core/extension/external_idp.py def login ( self , request , config_id ): \"\"\" \u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531get_authorize_url\u63d0\u4f9b \"\"\" config = self . get_config_by_id ( config_id ) if not config : return JsonResponse ({ \"error_msg\" : \"\u6ca1\u6709\u627e\u5230\u767b\u5f55\u914d\u7f6e\" }) callback_url = config . config . get ( \"callback_url\" ) # callback_url = callback_url.replace( # \"localhost:8000\", \"xxxx.vaiwan.com\" # ) # \u5185\u7f51\u7a7f\u900f\u6d4b\u8bd5\u7528 next_url = request . GET . get ( \"next\" , None ) if next_url is not None : next_url = \"?next=\" + next_url else : next_url = \"\" url = self . get_authorize_url ( config , callback_url , next_url ) return HttpResponseRedirect ( url ) update_tenant_config ( self , id , config , name , type ) # \u66f4\u65b0\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default id str config_id required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description bool \u66f4\u65b0\u6210\u529fTrue\uff0c\u6ca1\u6709\u627e\u5230\u8be5\u914d\u7f6e\u8fd4\u56deFalse Source code in arkid/core/extension/external_idp.py def update_tenant_config ( self , id , config , name , type ): super () . update_tenant_config ( id , config , name , type ) config_created = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created \u793a\u4f8b # extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension ( ExternalIdpExtension ) # Source code in extension_root/com_longgui_external_idp_github/__init__.py class ExternalIdpGithubExtension ( ExternalIdpExtension ): def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema ) def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ] def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save () def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" ) bind_arkid_user ( self , ext_id , user , data ) # Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required user arkid.core.models.User \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 required Source code in extension_root/com_longgui_external_idp_github/__init__.py def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save () get_arkid_user ( self , ext_id ) # Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description arkid.core.models.User \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None get_auth_code_from_request ( self , request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HTTPRequest \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description str \u6388\u6743\u7801 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code get_authorize_url ( self , config , callback_url , next_url ) # Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required redirect_uri str \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 required Returns: Type Description str \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url get_ext_token ( self , config , code ) # Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required Returns: Type Description str \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ] get_ext_user_info ( self , config , code , token ) # Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required token str Github\u8fd4\u56de\u7684access_token required Returns: Type Description tuple \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response get_img_and_redirect_url ( self , config ) # \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required Returns: Type Description tuple \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" ) get_img_url ( self ) # \u8fd4\u56deGithub\u7684\u56fe\u6807URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_external_idp_github/__init__.py def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema )","title":"\u7b2c\u4e09\u65b9\u767b\u5f55"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#_1","text":"\u7b2c\u4e09\u65b9\u767b\u5f55\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7528\u5176\u5b83IDP\u7cfb\u7edf\u8d26\u53f7\u767b\u5f55\uff0c\u5e76\u4e0eArkID\u7684\u8d26\u53f7\u8fdb\u884c\u7ed1\u5b9a\u7684\u8fc7\u7a0b\u3002 \u7ecf\u5178\u7684\u6709\uff1a\u5fae\u4fe1\u767b\u5f55\uff0c\u9489\u9489\u767b\u5f55\uff0c\u98de\u4e66\u767b\u5f55\u7b49\u7b49\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#_2","text":"\u7531\u4e8e\u5927\u90e8\u5206\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u65b9\u6848\u90fd\u662f\u57fa\u4e8eOAuth2\u534f\u8bae\u7684\u884d\u751f\u54c1\uff0c\u56e0\u6b64\u4e09\u65b9\u8ba4\u8bc1\u7684\u6d41\u7a0b\u4ee5OAuth2\u4e3a\u53c2\u8003\u3002 \u9996\u5148,\u5728\u767b\u5f55\u9875\u9762\u521b\u5efa\u4e00\u4e2a\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684\u5165\u53e3\uff0c\u751f\u6210\u8be5\u5165\u53e3\u9700\u8981: \u56fe\u6807: get_img_url \u7b2c\u4e09\u65b9\u767b\u5f55\u8bf7\u6c42 arkid.core.extension.extrnal_idp.ExternalIdpExtension.login , \u8be5\u8bf7\u6c42\u4f1a\u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531 get_authorize_url \u63d0\u4f9b \u5f53\u7528\u6237\u70b9\u51fb\u56fe\u6807\u7684\u65f6\u5019\uff0c\u53d1\u8d77\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8bf7\u6c42\u540e\uff0c \u4f1a\u56de\u8c03\u5230 arkid.core.extension.extrnal_idp.ExternalIdpExtension.callback \u63a5\u53e3\uff0c\u5e76\u643a\u5e26code \u5728CallBack\u4e2d\uff0c\u7528code\u8c03\u7528 get_ext_token_by_code \u65b9\u6cd5\uff0c\u83b7\u53d6access_token\uff0c \u7136\u540e\u901a\u8fc7access_token\u8c03\u7528 get_user_info_by_ext_token \u65b9\u6cd5\u83b7\u53d6\u7528\u6237\u4fe1\u606f \u5982\u679c\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684ext_id\u6ca1\u6709\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u524d\u7aef\u4f1a\u8df3\u8f6c\u5230\u7ed1\u5b9a\u9875\u9762\uff0c\u8c03\u7528 arkid.core.extension.external_idp.ExternalIdpExtension.bind \u63a5\u53e3, \u8be5\u63a5\u53e3\u4f1a\u8c03\u7528 bind_arkid_user \u65b9\u6cd5\u7ed1\u5b9aext_id\u5230ArkID\u7528\u6237 \u5982\u679c\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684ext_id\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u8c03\u7528 get_arkid_user \u65b9\u6cd5\u83b7\u53d6\u5df2\u7ecf\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \u81f3\u6b64\u5373\u5b8c\u6210\u767b\u5f55","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#_3","text":"get_img_url get_authorize_url get_ext_token_by_code get_user_info_by_ext_token get_arkid_user","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension","text":"Source code in arkid/core/extension/external_idp.py class ExternalIdpExtension ( Extension ): TYPE = \"external_idp\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return ExternalIdpExtension . TYPE def load ( self ): urls = [ re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/login$' , self . login , name = f ' { self . pname } _login' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/callback$' , self . callback , name = f ' { self . pname } _callback' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/bind$' , self . bind , name = f ' { self . pname } _bind' , ), ] self . register_routers ( urls , False ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . add_idp_login_buttons ) self . listen_event ( core_event . ACCOUNT_UNBIND , self . account_unbind ) super () . load () @abstractmethod def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, callback_url (str): \u7531ArkID\u63d0\u4f9b\u7684\u56de\u8c03\u5730\u5740 next_url (str): \u524d\u7aef\u4f20\u6765\u7684\u8df3\u8f6c\u5730\u5740 Returns: str: \u7b2c\u4e09\u65b9\u767b\u5f55\u63d0\u4f9b\u7684\u8ba4\u8bc1URL \"\"\" pass def login ( self , request , config_id ): \"\"\" \u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531get_authorize_url\u63d0\u4f9b \"\"\" config = self . get_config_by_id ( config_id ) if not config : return JsonResponse ({ \"error_msg\" : \"\u6ca1\u6709\u627e\u5230\u767b\u5f55\u914d\u7f6e\" }) callback_url = config . config . get ( \"callback_url\" ) # callback_url = callback_url.replace( # \"localhost:8000\", \"xxxx.vaiwan.com\" # ) # \u5185\u7f51\u7a7f\u900f\u6d4b\u8bd5\u7528 next_url = request . GET . get ( \"next\" , None ) if next_url is not None : next_url = \"?next=\" + next_url else : next_url = \"\" url = self . get_authorize_url ( config , callback_url , next_url ) return HttpResponseRedirect ( url ) @abstractmethod def get_ext_token ( self , config , code ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e Returns: str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684token \"\"\" pass @abstractmethod def get_ext_user_info ( self , config , code , token ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code token (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684token Returns: dict: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f \"\"\" pass @abstractmethod def get_arkid_user ( self , ext_id ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: ext_id (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: ArkID\u7528\u6237 \"\"\" pass def get_arkid_token ( self , ext_id , ext_name , ext_icon , config ): arkid_user = self . get_arkid_user ( ext_id ) if arkid_user : from arkid.core.models import ExpiringToken et = ExpiringToken . objects . filter ( user = arkid_user ) . first () if et and et . expired ( config . tenant ) is False : token = et . token else : token = refresh_token ( arkid_user ) context = { \"token\" : token } else : context = { \"token\" : \"\" , \"ext_id\" : ext_id , \"ext_name\" : ext_name , \"ext_icon\" : ext_icon , \"tenant_id\" : config . tenant . id . hex , \"bind\" : config . config . get ( 'bind_url' ), } return context @abstractmethod def get_auth_code_from_request ( self , request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HTTPRequest): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: str: \u6388\u6743\u7801 \"\"\" pass def callback ( self , request , config_id ): \"\"\" \u62ff\u5230\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684code\uff0c\u8c03\u7528get_ext_token_by_code\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684token\uff0c \u8c03\u7528get_user_info_by_ext_token\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f\uff0c \u62ff\u5230ext_id\u540e\uff0c\u5224\u65ad\u8be5ext_id\u662f\u5426\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u5982\u679c\u7ed1\u5b9a\u76f4\u63a5\u8fd4\u56de\u7ed1\u5b9a\u7528\u6237\u7684Token\uff0c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u7ed1\u5b9a\u9875\u9762 \"\"\" code = self . get_auth_code_from_request ( request ) next_url = request . GET . get ( \"next\" , '' ) config = self . get_config_by_id ( config_id ) frontend_host = ( get_app_config () . get_frontend_host () . replace ( 'http://' , '' ) . replace ( 'https://' , '' ) ) # if next_url and ( # \"third_part_callback\" not in next_url or frontend_host not in next_url # ): # return JsonResponse({'error_msg': '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762'}) if next_url and ( frontend_host not in next_url ): return JsonResponse ({ 'error_msg' : '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762' }) if code : try : ext_token = self . get_ext_token ( config , code ) ext_id , ext_name , ext_icon , ext_info = self . get_ext_user_info ( config , code , ext_token ) except Exception as e : logger . error ( e ) return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u5931\u6548\" , \"code\" : [ \"invalid\" ]}) else : return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u4e22\u5931\" , \"code\" : [ \"required\" ]}) context = self . get_arkid_token ( ext_id , ext_name , ext_icon , config ) query_string = urlencode ( context ) if next_url : url = f \" { next_url } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) else : frontend_host = get_app_config () . get_frontend_host () frontend_callback = f ' { frontend_host } /third_part_callback' url = f \" { frontend_callback } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) @abstractmethod def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u7b2c\u4e09\u65b9\u767b\u5f55\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): ArkID\u7684\u7528\u6237 data (dict) request\u6570\u636e Returns: {\"token\":xxx}: \u8fd4\u56detoken \"\"\" pass @csrf_exempt def bind ( self , request , config_id ): \"\"\" \u5904\u7406\u7b2c\u4e09\u65b9\u8eab\u4efd\u6e90\u8fd4\u56de\u7684user_id\u548cArkID\u7684user\u4e4b\u95f4\u7684\u7ed1\u5b9a \"\"\" from urllib.parse import unquote from arkid.core.event import SAVE_FILE , dispatch_event , Event from arkid.extension.models import Extension ext_id = request . POST . get ( \"ext_id\" ) user = verify_token ( request ) if not user : return JsonResponse ({ \"error_msg\" : \"Token\u9a8c\u8bc1\u5931\u8d25\" , \"code\" : [ \"token invalid\" ]}) ext_icon = request . POST . get ( 'ext_icon' , '' ) ext_name = request . POST . get ( 'ext_name' , '' ) config = self . get_config_by_id ( config_id ) extension = Extension . active_objects . filter ( type = \"storage\" ) . first () if ext_name : ext_name = unquote ( ext_name ) request . POST [ 'ext_name' ] = ext_name if ext_icon : data = { 'fileurl' : ext_icon } responses = dispatch_event ( Event ( tag = SAVE_FILE , tenant = config . tenant , request = request , packages = extension . package , data = data )) useless , ( fileinfo , extension ) = responses [ 0 ] request . POST [ 'ext_icon' ] = fileinfo self . bind_arkid_user ( ext_id , user , request . POST ) # token = refresh_token(user) # data = {\"token\": token} data = {} return JsonResponse ( self . success ()) @abstractmethod def get_img_url ( self ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Returns: url str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae\u7684\u56fe\u6807 \"\"\" pass def register_external_idp_schema ( self , idp_type , schema ): self . register_config_schema ( schema , self . package + '_' + idp_type ) self . register_composite_config_schema ( schema , idp_type , exclude = [ 'extension' ]) def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name , type ) server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created def update_tenant_config ( self , id , config , name , type ): super () . update_tenant_config ( id , config , name , type ) config_created = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created def add_idp_login_buttons ( self , event , ** kwargs ): logger . info ( f ' { self . package } add idp login buttons start' ) data = {} configs = self . get_tenant_configs ( event . tenant ) for config in configs : img_url , redirect_url = self . get_img_and_redirect_url ( config ) if img_url and redirect_url : buttons = [{ \"img\" : img_url , \"redirect\" : { \"url\" : redirect_url }, \"tooltip\" : config . name }] data [ config . id . hex ] = { \"login\" : { 'extend' : { \"buttons\" : buttons }}} logger . info ( f ' { self . package } add idp login buttions end' ) return data def account_unbind ( self , event , ** kwargs ): ''' \u5728\u8d26\u6237\u89e3\u7ed1\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5 Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user_id: \u7528\u6237id ''' data = event . data pass @abstractmethod def get_img_and_redirect_url ( self , config ): \"\"\" \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, Returns: tuple: \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') \"\"\" pass","title":"ExternalIdpExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/external_idp.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.account_unbind","text":"\u5728\u8d26\u6237\u89e3\u7ed1\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user_id: \u7528\u6237id required Source code in arkid/core/extension/external_idp.py def account_unbind ( self , event , ** kwargs ): ''' \u5728\u8d26\u6237\u89e3\u7ed1\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5 Params: event: \u4e8b\u4ef6\u53c2\u6570 data: \u6570\u636e user_id: \u7528\u6237id ''' data = event . data pass","title":"account_unbind()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.bind","text":"\u5904\u7406\u7b2c\u4e09\u65b9\u8eab\u4efd\u6e90\u8fd4\u56de\u7684user_id\u548cArkID\u7684user\u4e4b\u95f4\u7684\u7ed1\u5b9a Source code in arkid/core/extension/external_idp.py @csrf_exempt def bind ( self , request , config_id ): \"\"\" \u5904\u7406\u7b2c\u4e09\u65b9\u8eab\u4efd\u6e90\u8fd4\u56de\u7684user_id\u548cArkID\u7684user\u4e4b\u95f4\u7684\u7ed1\u5b9a \"\"\" from urllib.parse import unquote from arkid.core.event import SAVE_FILE , dispatch_event , Event from arkid.extension.models import Extension ext_id = request . POST . get ( \"ext_id\" ) user = verify_token ( request ) if not user : return JsonResponse ({ \"error_msg\" : \"Token\u9a8c\u8bc1\u5931\u8d25\" , \"code\" : [ \"token invalid\" ]}) ext_icon = request . POST . get ( 'ext_icon' , '' ) ext_name = request . POST . get ( 'ext_name' , '' ) config = self . get_config_by_id ( config_id ) extension = Extension . active_objects . filter ( type = \"storage\" ) . first () if ext_name : ext_name = unquote ( ext_name ) request . POST [ 'ext_name' ] = ext_name if ext_icon : data = { 'fileurl' : ext_icon } responses = dispatch_event ( Event ( tag = SAVE_FILE , tenant = config . tenant , request = request , packages = extension . package , data = data )) useless , ( fileinfo , extension ) = responses [ 0 ] request . POST [ 'ext_icon' ] = fileinfo self . bind_arkid_user ( ext_id , user , request . POST ) # token = refresh_token(user) # data = {\"token\": token} data = {} return JsonResponse ( self . success ())","title":"bind()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.bind_arkid_user","text":"Parameters: Name Type Description Default ext_id str \u7b2c\u4e09\u65b9\u767b\u5f55\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required user arkid.core.models.User ArkID\u7684\u7528\u6237 required Returns: Type Description {\"token\" xxx}: \u8fd4\u56detoken Source code in arkid/core/extension/external_idp.py @abstractmethod def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u7b2c\u4e09\u65b9\u767b\u5f55\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): ArkID\u7684\u7528\u6237 data (dict) request\u6570\u636e Returns: {\"token\":xxx}: \u8fd4\u56detoken \"\"\" pass","title":"bind_arkid_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.callback","text":"\u62ff\u5230\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684code\uff0c\u8c03\u7528get_ext_token_by_code\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684token\uff0c \u8c03\u7528get_user_info_by_ext_token\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f\uff0c \u62ff\u5230ext_id\u540e\uff0c\u5224\u65ad\u8be5ext_id\u662f\u5426\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u5982\u679c\u7ed1\u5b9a\u76f4\u63a5\u8fd4\u56de\u7ed1\u5b9a\u7528\u6237\u7684Token\uff0c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u7ed1\u5b9a\u9875\u9762 Source code in arkid/core/extension/external_idp.py def callback ( self , request , config_id ): \"\"\" \u62ff\u5230\u8bf7\u6c42\u4e2d\u643a\u5e26\u7684code\uff0c\u8c03\u7528get_ext_token_by_code\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u7684token\uff0c \u8c03\u7528get_user_info_by_ext_token\u83b7\u53d6\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f\uff0c \u62ff\u5230ext_id\u540e\uff0c\u5224\u65ad\u8be5ext_id\u662f\u5426\u5df2\u7ecf\u548cArkID\u4e2d\u7684\u7528\u6237\u7ed1\u5b9a\uff0c\u5982\u679c\u7ed1\u5b9a\u76f4\u63a5\u8fd4\u56de\u7ed1\u5b9a\u7528\u6237\u7684Token\uff0c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u7ed1\u5b9a\u9875\u9762 \"\"\" code = self . get_auth_code_from_request ( request ) next_url = request . GET . get ( \"next\" , '' ) config = self . get_config_by_id ( config_id ) frontend_host = ( get_app_config () . get_frontend_host () . replace ( 'http://' , '' ) . replace ( 'https://' , '' ) ) # if next_url and ( # \"third_part_callback\" not in next_url or frontend_host not in next_url # ): # return JsonResponse({'error_msg': '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762'}) if next_url and ( frontend_host not in next_url ): return JsonResponse ({ 'error_msg' : '\u9519\u8bef\u7684\u8df3\u8f6c\u9875\u9762' }) if code : try : ext_token = self . get_ext_token ( config , code ) ext_id , ext_name , ext_icon , ext_info = self . get_ext_user_info ( config , code , ext_token ) except Exception as e : logger . error ( e ) return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u5931\u6548\" , \"code\" : [ \"invalid\" ]}) else : return JsonResponse ({ \"error_msg\" : \"\u6388\u6743\u7801\u4e22\u5931\" , \"code\" : [ \"required\" ]}) context = self . get_arkid_token ( ext_id , ext_name , ext_icon , config ) query_string = urlencode ( context ) if next_url : url = f \" { next_url } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url ) else : frontend_host = get_app_config () . get_frontend_host () frontend_callback = f ' { frontend_host } /third_part_callback' url = f \" { frontend_callback } ? { query_string } \" url = unquote ( url ) return HttpResponseRedirect ( url )","title":"callback()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.create_tenant_config","text":"\u521b\u5efa\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default tenant Tenant \u79df\u6237 required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description TenantExtensionConfig \u521b\u5efa\u7684\u5bf9\u8c61 Source code in arkid/core/extension/external_idp.py def create_tenant_config ( self , tenant , config , name , type ): config_created = super () . create_tenant_config ( tenant , config , name , type ) server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created","title":"create_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_arkid_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default ext_id str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description arkid.core.models.User ArkID\u7528\u6237 Source code in arkid/core/extension/external_idp.py @abstractmethod def get_arkid_user ( self , ext_id ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: ext_id (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: ArkID\u7528\u6237 \"\"\" pass","title":"get_arkid_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_auth_code_from_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HTTPRequest \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description str \u6388\u6743\u7801 Source code in arkid/core/extension/external_idp.py @abstractmethod def get_auth_code_from_request ( self , request ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: request (HTTPRequest): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 Returns: str: \u6388\u6743\u7801 \"\"\" pass","title":"get_auth_code_from_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_authorize_url","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required callback_url str \u7531ArkID\u63d0\u4f9b\u7684\u56de\u8c03\u5730\u5740 required next_url str \u524d\u7aef\u4f20\u6765\u7684\u8df3\u8f6c\u5730\u5740 required Returns: Type Description str \u7b2c\u4e09\u65b9\u767b\u5f55\u63d0\u4f9b\u7684\u8ba4\u8bc1URL Source code in arkid/core/extension/external_idp.py @abstractmethod def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, callback_url (str): \u7531ArkID\u63d0\u4f9b\u7684\u56de\u8c03\u5730\u5740 next_url (str): \u524d\u7aef\u4f20\u6765\u7684\u8df3\u8f6c\u5730\u5740 Returns: str: \u7b2c\u4e09\u65b9\u767b\u5f55\u63d0\u4f9b\u7684\u8ba4\u8bc1URL \"\"\" pass","title":"get_authorize_url()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_ext_token","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default code str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code required config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Returns: Type Description str \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684token Source code in arkid/core/extension/external_idp.py @abstractmethod def get_ext_token ( self , config , code ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e Returns: str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684token \"\"\" pass","title":"get_ext_token()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_ext_user_info","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code required token str \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684token required Returns: Type Description dict \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f Source code in arkid/core/extension/external_idp.py @abstractmethod def get_ext_user_info ( self , config , code , token ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684code token (str): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684token Returns: dict: \u8fd4\u56de\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684\u7528\u6237\u4fe1\u606f \"\"\" pass","title":"get_ext_user_info()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_img_and_redirect_url","text":"\u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required Returns: Type Description tuple \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') Source code in arkid/core/extension/external_idp.py @abstractmethod def get_img_and_redirect_url ( self , config ): \"\"\" \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Args: config (arkid.extension.models.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, Returns: tuple: \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') \"\"\" pass","title":"get_img_and_redirect_url()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.get_img_url","text":"\u62bd\u8c61\u65b9\u6cd5 Returns: Type Description url str \u8fd4\u56de\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae\u7684\u56fe\u6807 Source code in arkid/core/extension/external_idp.py @abstractmethod def get_img_url ( self ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Returns: url str: \u8fd4\u56de\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae\u7684\u56fe\u6807 \"\"\" pass","title":"get_img_url()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/external_idp.py def load ( self ): urls = [ re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/login$' , self . login , name = f ' { self . pname } _login' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/callback$' , self . callback , name = f ' { self . pname } _callback' , ), re_path ( rf '^idp/ { self . pname } /(?P<config_id>[\\w-]+)/bind$' , self . bind , name = f ' { self . pname } _bind' , ), ] self . register_routers ( urls , False ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . add_idp_login_buttons ) self . listen_event ( core_event . ACCOUNT_UNBIND , self . account_unbind ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.login","text":"\u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531get_authorize_url\u63d0\u4f9b Source code in arkid/core/extension/external_idp.py def login ( self , request , config_id ): \"\"\" \u91cd\u5b9a\u5411\u5230\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u5165\u53e3\u5730\u5740, \u8be5\u5165\u53e3\u5730\u5740\u7531get_authorize_url\u63d0\u4f9b \"\"\" config = self . get_config_by_id ( config_id ) if not config : return JsonResponse ({ \"error_msg\" : \"\u6ca1\u6709\u627e\u5230\u767b\u5f55\u914d\u7f6e\" }) callback_url = config . config . get ( \"callback_url\" ) # callback_url = callback_url.replace( # \"localhost:8000\", \"xxxx.vaiwan.com\" # ) # \u5185\u7f51\u7a7f\u900f\u6d4b\u8bd5\u7528 next_url = request . GET . get ( \"next\" , None ) if next_url is not None : next_url = \"?next=\" + next_url else : next_url = \"\" url = self . get_authorize_url ( config , callback_url , next_url ) return HttpResponseRedirect ( url )","title":"login()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#arkid.core.extension.external_idp.ExternalIdpExtension.update_tenant_config","text":"\u66f4\u65b0\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default id str config_id required config dict config required name str \u8fd0\u884c\u65f6\u914d\u7f6e\u540d\u5b57 required type str \u914d\u7f6e\u7c7b\u578b required Returns: Type Description bool \u66f4\u65b0\u6210\u529fTrue\uff0c\u6ca1\u6709\u627e\u5230\u8be5\u914d\u7f6e\u8fd4\u56deFalse Source code in arkid/core/extension/external_idp.py def update_tenant_config ( self , id , config , name , type ): super () . update_tenant_config ( id , config , name , type ) config_created = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () server_host = get_app_config () . get_host () login_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _login' , args = [ config_created . id ], ) callback_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _callback' , args = [ config_created . id ], ) bind_url = server_host + reverse ( f 'api: { self . pname } : { self . pname } _bind' , args = [ config_created . id ], ) img_url = self . get_img_url () config [ \"login_url\" ] = login_url config [ \"callback_url\" ] = callback_url config [ \"bind_url\" ] = bind_url config [ \"img_url\" ] = img_url config_created . config = config config_created . save () return config_created","title":"update_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension","text":"Source code in extension_root/com_longgui_external_idp_github/__init__.py class ExternalIdpGithubExtension ( ExternalIdpExtension ): def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema ) def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ] def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save () def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" )","title":"ExternalIdpGithubExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.bind_arkid_user","text":"Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required user arkid.core.models.User \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 required Source code in extension_root/com_longgui_external_idp_github/__init__.py def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save ()","title":"bind_arkid_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_arkid_user","text":"Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description arkid.core.models.User \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None","title":"get_arkid_user()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_auth_code_from_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HTTPRequest \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description str \u6388\u6743\u7801 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code","title":"get_auth_code_from_request()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_authorize_url","text":"Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required redirect_uri str \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 required Returns: Type Description str \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url","title":"get_authorize_url()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_ext_token","text":"Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required Returns: Type Description str \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ]","title":"get_ext_token()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_ext_user_info","text":"Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required token str Github\u8fd4\u56de\u7684access_token required Returns: Type Description tuple \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response","title":"get_ext_user_info()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_img_and_redirect_url","text":"\u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required Returns: Type Description tuple \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" )","title":"get_img_and_redirect_url()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_img_url","text":"\u8fd4\u56deGithub\u7684\u56fe\u6807URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL","title":"get_img_url()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_external_idp_github/__init__.py def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/","text":"\u529f\u80fd\u4ecb\u7ecd # \u7f13\u5b58\u63d2\u4ef6\u4e3a\u5e73\u53f0\u63d0\u4f9b\u7f13\u5b58\u529f\u80fd\uff0c\u5373\u5f00\u53d1\u8005\u5728\u9700\u8981\u7f13\u5b58\u652f\u6301\u65f6\u901a\u8fc7\u7f13\u5b58\u63d2\u4ef6\u5f15\u5165\u5982redis\u7b49\u7f13\u5b58\u6570\u636e\u5e93\u5e76\u4f7f\u7528\u5b83\u4eec\u5b8c\u6210\u7f13\u5b58\u4e8b\u52a1\u3002 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u7f13\u5b58\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u7f13\u5b58\u63d2\u4ef6\u57fa\u7c7b\u5e76\u91cd\u8f7dget/set\u51fd\u6570\u5373\u53ef\uff0c\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a sequenceDiagram participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u7f13\u5b58\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u76d1\u542c\u7f13\u5b58\u4e8b\u4ef6 rect rgb(191, 223, 255) C->>B: \u53d1\u51fa\u8bbe\u7f6e/\u83b7\u53d6\u7f13\u5b58\u4e8b\u4ef6(CACHE_SET/CACHE_GET) B->>C: \u54cd\u5e94\u4e8b\u4ef6\u5e76\u6839\u636e\u81ea\u8eab\u914d\u7f6e\u64cd\u4f5c\u7f13\u5b58\uff0c\u8fd4\u56de\u7ed3\u679c\uff08\u6210\u529f/\u5931\u8d25,\u83b7\u53d6\u6570\u636e\uff09 end \u7f13\u5b58\u4f7f\u7528\u65b9\u6cd5 # \u793a\u4f8b\u5982\u4e0b\uff1a from arkid.common import cache #\u5f15\u5165\u5e73\u53f0\u7f13\u5b58 cache . set ( tenant , key , value , expired ) # \u53c2\u6570\u4f9d\u6b21\u4e3a\uff1a\u79df\u6237\uff0c\u7f13\u5b58KEY, \u7f13\u5b58VALUE, \u8fc7\u671f\u65f6\u95f4 cache . get ( tenant , key ) #\u53c2\u6570\u4f9d\u6b21\u4e3a\uff1a\u79df\u6237\uff0c\u7f13\u5b58KEY \u62bd\u8c61\u51fd\u6570 # get set \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.cache.CacheExtension ( Extension ) # Source code in arkid/core/extension/cache.py class CacheExtension ( Extension ): TYPE = \"cache\" @property def type ( self ): return CacheExtension . TYPE def load ( self ): super () . load () self . listen_event ( CACHE_GET , self . event_cache_get ) self . listen_event ( CACHE_SET , self . event_cache_set ) def event_cache_get ( self , event , ** kwargs ): try : return self . get ( event . tenant , ** event . data ) except Exception as err : logger . error ( err ) def event_cache_set ( self , event , ** kwargs ): try : return self . set ( tenant = event . tenant , ** event . data ) except Exception as err : logger . error ( err ) @abstractmethod def get ( self , tenant , key : str , ** kwargs ): \"\"\"\u8bfb\u53d6 Args: tenant:\u79df\u6237 key: \u5b58\u50a8\u540d\u79f0 \"\"\" pass @abstractmethod def set ( self , tenant , key : str , value : any , ** kwargs ) -> bool : \"\"\"\u5b58\u50a8 Args: key (str): \u5b58\u50a8\u540d\u79f0 tenant (Tenant): \u79df\u6237 value:\u503c \"\"\" pass get ( self , tenant , key , ** kwargs ) # \u8bfb\u53d6 Parameters: Name Type Description Default tenant \u79df\u6237 required key str \u5b58\u50a8\u540d\u79f0 required Source code in arkid/core/extension/cache.py @abstractmethod def get ( self , tenant , key : str , ** kwargs ): \"\"\"\u8bfb\u53d6 Args: tenant:\u79df\u6237 key: \u5b58\u50a8\u540d\u79f0 \"\"\" pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/cache.py def load ( self ): super () . load () self . listen_event ( CACHE_GET , self . event_cache_get ) self . listen_event ( CACHE_SET , self . event_cache_set ) set ( self , tenant , key , value , ** kwargs ) # \u5b58\u50a8 Parameters: Name Type Description Default key str \u5b58\u50a8\u540d\u79f0 required tenant Tenant \u79df\u6237 required value <built-in function any> \u503c required Source code in arkid/core/extension/cache.py @abstractmethod def set ( self , tenant , key : str , value : any , ** kwargs ) -> bool : \"\"\"\u5b58\u50a8 Args: key (str): \u5b58\u50a8\u540d\u79f0 tenant (Tenant): \u79df\u6237 value:\u503c \"\"\" pass","title":"\u7f13\u5b58"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#_1","text":"\u7f13\u5b58\u63d2\u4ef6\u4e3a\u5e73\u53f0\u63d0\u4f9b\u7f13\u5b58\u529f\u80fd\uff0c\u5373\u5f00\u53d1\u8005\u5728\u9700\u8981\u7f13\u5b58\u652f\u6301\u65f6\u901a\u8fc7\u7f13\u5b58\u63d2\u4ef6\u5f15\u5165\u5982redis\u7b49\u7f13\u5b58\u6570\u636e\u5e93\u5e76\u4f7f\u7528\u5b83\u4eec\u5b8c\u6210\u7f13\u5b58\u4e8b\u52a1\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#_2","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u7f13\u5b58\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627f\u7f13\u5b58\u63d2\u4ef6\u57fa\u7c7b\u5e76\u91cd\u8f7dget/set\u51fd\u6570\u5373\u53ef\uff0c\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a sequenceDiagram participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u7f13\u5b58\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u76d1\u542c\u7f13\u5b58\u4e8b\u4ef6 rect rgb(191, 223, 255) C->>B: \u53d1\u51fa\u8bbe\u7f6e/\u83b7\u53d6\u7f13\u5b58\u4e8b\u4ef6(CACHE_SET/CACHE_GET) B->>C: \u54cd\u5e94\u4e8b\u4ef6\u5e76\u6839\u636e\u81ea\u8eab\u914d\u7f6e\u64cd\u4f5c\u7f13\u5b58\uff0c\u8fd4\u56de\u7ed3\u679c\uff08\u6210\u529f/\u5931\u8d25,\u83b7\u53d6\u6570\u636e\uff09 end","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#_3","text":"\u793a\u4f8b\u5982\u4e0b\uff1a from arkid.common import cache #\u5f15\u5165\u5e73\u53f0\u7f13\u5b58 cache . set ( tenant , key , value , expired ) # \u53c2\u6570\u4f9d\u6b21\u4e3a\uff1a\u79df\u6237\uff0c\u7f13\u5b58KEY, \u7f13\u5b58VALUE, \u8fc7\u671f\u65f6\u95f4 cache . get ( tenant , key ) #\u53c2\u6570\u4f9d\u6b21\u4e3a\uff1a\u79df\u6237\uff0c\u7f13\u5b58KEY","title":"\u7f13\u5b58\u4f7f\u7528\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#_4","text":"get set","title":"\u62bd\u8c61\u51fd\u6570"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#_5","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#arkid.core.extension.cache.CacheExtension","text":"Source code in arkid/core/extension/cache.py class CacheExtension ( Extension ): TYPE = \"cache\" @property def type ( self ): return CacheExtension . TYPE def load ( self ): super () . load () self . listen_event ( CACHE_GET , self . event_cache_get ) self . listen_event ( CACHE_SET , self . event_cache_set ) def event_cache_get ( self , event , ** kwargs ): try : return self . get ( event . tenant , ** event . data ) except Exception as err : logger . error ( err ) def event_cache_set ( self , event , ** kwargs ): try : return self . set ( tenant = event . tenant , ** event . data ) except Exception as err : logger . error ( err ) @abstractmethod def get ( self , tenant , key : str , ** kwargs ): \"\"\"\u8bfb\u53d6 Args: tenant:\u79df\u6237 key: \u5b58\u50a8\u540d\u79f0 \"\"\" pass @abstractmethod def set ( self , tenant , key : str , value : any , ** kwargs ) -> bool : \"\"\"\u5b58\u50a8 Args: key (str): \u5b58\u50a8\u540d\u79f0 tenant (Tenant): \u79df\u6237 value:\u503c \"\"\" pass","title":"CacheExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#arkid.core.extension.cache.CacheExtension.get","text":"\u8bfb\u53d6 Parameters: Name Type Description Default tenant \u79df\u6237 required key str \u5b58\u50a8\u540d\u79f0 required Source code in arkid/core/extension/cache.py @abstractmethod def get ( self , tenant , key : str , ** kwargs ): \"\"\"\u8bfb\u53d6 Args: tenant:\u79df\u6237 key: \u5b58\u50a8\u540d\u79f0 \"\"\" pass","title":"get()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#arkid.core.extension.cache.CacheExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/cache.py def load ( self ): super () . load () self . listen_event ( CACHE_GET , self . event_cache_get ) self . listen_event ( CACHE_SET , self . event_cache_set )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E7%BC%93%E5%AD%98/#arkid.core.extension.cache.CacheExtension.set","text":"\u5b58\u50a8 Parameters: Name Type Description Default key str \u5b58\u50a8\u540d\u79f0 required tenant Tenant \u79df\u6237 required value <built-in function any> \u503c required Source code in arkid/core/extension/cache.py @abstractmethod def set ( self , tenant , key : str , value : any , ** kwargs ) -> bool : \"\"\"\u5b58\u50a8 Args: key (str): \u5b58\u50a8\u540d\u79f0 tenant (Tenant): \u79df\u6237 value:\u503c \"\"\" pass","title":"set()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/","text":"\u529f\u80fd\u4ecb\u7ecd # \u5728\u663e\u793aArkID\u767b\u5f55\u9875\u9762(\u5bc6\u7801\u3001\u624b\u673a\u7b49)\u4e4b\u524d\uff0c\u7cfb\u7edf\u4f1a\u904d\u5386\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6(\u6bd4\u5982keberos)\u63d0\u4f9b\u7684 authenticate \u65b9\u6cd5\uff0c\u5982\u679c\u5176\u4e2d\u67d0\u4e2a\u63d2\u4ef6\u8ba4\u8bc1\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7acb\u5373\u767b\u5f55ArkID \u5b9e\u73b0\u601d\u8def # \u8fdb\u5165ArkID\u7cfb\u7edf\u4e4b\u524d\u4f1a\u8c03\u7528 /api/v1/login/ \u63a5\u53e3\uff0c\u5728\u8fd9\u4e2a\u63a5\u53e3\u7684\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u7528URL Query Params\u548c /api/v1/login_process/ \u4f5c\u4e3a\u53c2\u6570\u6e32\u67d3 templates/login_enter.html \u6a21\u677f\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\uff0c\u6d4f\u89c8\u5668\u6267\u884c\u6a21\u677f\u4e2d\u7684javascript\u4ee3\u7801\uff0c \u5224\u65adURL Query Parmas \u4e2d\u662f\u5426\u6709token\uff0c \u5982\u679c\u6709\uff0c\u4fdd\u5b58\u5230localStorage\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53d6localStorage\u4e2d\u7684token\uff0c\u6700\u540e\uff0c\u91cd\u5b9a\u5411\u6d4f\u89c8\u5668\u5230 /api/v1/login_process \u5e76\u5e26\u4e0atoken\u548cURL Query Parmas\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570 \u8fdb\u5165 /api/v1/login_process/ \u63a5\u53e3\u7684\u5904\u7406\u51fd\u6570\u540e\uff0c\u4f1a\u5224\u65ad\u67e5\u8be2\u53c2\u6570\u4e2d\u662f\u5426\u6709token\uff0c\u5982\u679c\u6709token\uff0c\u9a8c\u8bc1token\u6709\u6548\u540e\uff0c\u5982\u679c\u67e5\u8be2\u53c2\u6570\u4e2d\u6709next, \u76f4\u63a5\u91cd\u5b9a\u5411\u5230next\u6307\u5411\u7684URL\uff0c\u5982\u679c\u6ca1\u6709\u5219\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u767b\u5f55\u9875\uff1b\u5982\u679c\u6ca1\u6709token\u6216\u8005token\u5931\u6548\uff0c \u90a3\u4e48\u5206\u53d1AUTO_LOGIN\u4e8b\u4ef6\uff0c\u5e76\u904d\u5386\u4e8b\u4ef6\u5206\u53d1\u8fd4\u56de\u7ed3\u679c\uff0c\u5982\u679c\u5176\u4e2d\u67d0\u4e2a\u81ea\u52a8\u8ba4\u8bc1\u63d2\u4ef6\u8ba4\u8bc1\u6210\u529f\u5e76\u8fd4\u56deuser\uff0c\u90a3\u4e48\u5237\u65b0\u8be5\u7528\u6237token\uff0c\u5e26\u4e0atoken\u91cd\u5b9a\u5411\u5230 /api/v1/login/ \uff0c\u5982\u679c\u6240\u6709\u7684\u81ea\u52a8\u8ba4\u8bc1\u63d2\u4ef6\u90fd\u8ba4\u8bc1\u5931\u8d25\uff0c\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u767b\u5f55\u9875 \u62bd\u8c61\u65b9\u6cd5 # authenticate \u63d0\u793a authenticate \u8ba4\u8bc1\u6210\u529f\u5e94\u8be5\u8fd4\u56deuser, \u5982\u679c\u5931\u8d25\u8fd4\u56deNone\uff0c\u5982\u679c\u7c7b\u4f3ckerberos\u8ba4\u8bc1\u9700\u8981\u4e24\u6b21\u8fdb\u5165authenticate\uff0c\u7b2c\u4e00\u6b21\u5e94\u8be5\u8fdb\u5165\u5e94\u8be5\u8fd4\u56deHttpResponse \u72b6\u6001\u7801\u4e3a401 \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.auto_auth.AutoAuthExtension ( Extension ) # Source code in arkid/core/extension/auto_auth.py class AutoAuthExtension ( Extension ): TYPE = \"auto_auth\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AutoAuthExtension . TYPE def load ( self ): self . listen_event ( core_event . AUTO_LOGIN , self . authenticate ) super () . load () @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u81ea\u52a8\u8ba4\u8bc1\u4e8b\u4ef6 Returns: Union[arkid.core.models.User, django.http.HttpResponse, None]: \u81ea\u52a8\u8ba4\u8bc1\u8fd4\u56de\u7ed3\u679c \"\"\" pass def register_auto_auth_schema ( self , schema , auto_auth_type ): self . register_config_schema ( schema , self . package + '_' + auto_auth_type ) self . register_composite_config_schema ( schema , auto_auth_type , exclude = [ 'extension' ] ) composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/auto_auth.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 authenticate ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u81ea\u52a8\u8ba4\u8bc1\u4e8b\u4ef6 required Returns: Type Description Union[arkid.core.models.User, django.http.HttpResponse, None] \u81ea\u52a8\u8ba4\u8bc1\u8fd4\u56de\u7ed3\u679c Source code in arkid/core/extension/auto_auth.py @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u81ea\u52a8\u8ba4\u8bc1\u4e8b\u4ef6 Returns: Union[arkid.core.models.User, django.http.HttpResponse, None]: \u81ea\u52a8\u8ba4\u8bc1\u8fd4\u56de\u7ed3\u679c \"\"\" pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/auto_auth.py def load ( self ): self . listen_event ( core_event . AUTO_LOGIN , self . authenticate ) super () . load ()","title":"\u81ea\u52a8\u8ba4\u8bc1"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#_1","text":"\u5728\u663e\u793aArkID\u767b\u5f55\u9875\u9762(\u5bc6\u7801\u3001\u624b\u673a\u7b49)\u4e4b\u524d\uff0c\u7cfb\u7edf\u4f1a\u904d\u5386\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6(\u6bd4\u5982keberos)\u63d0\u4f9b\u7684 authenticate \u65b9\u6cd5\uff0c\u5982\u679c\u5176\u4e2d\u67d0\u4e2a\u63d2\u4ef6\u8ba4\u8bc1\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7acb\u5373\u767b\u5f55ArkID","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#_2","text":"\u8fdb\u5165ArkID\u7cfb\u7edf\u4e4b\u524d\u4f1a\u8c03\u7528 /api/v1/login/ \u63a5\u53e3\uff0c\u5728\u8fd9\u4e2a\u63a5\u53e3\u7684\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u7528URL Query Params\u548c /api/v1/login_process/ \u4f5c\u4e3a\u53c2\u6570\u6e32\u67d3 templates/login_enter.html \u6a21\u677f\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\uff0c\u6d4f\u89c8\u5668\u6267\u884c\u6a21\u677f\u4e2d\u7684javascript\u4ee3\u7801\uff0c \u5224\u65adURL Query Parmas \u4e2d\u662f\u5426\u6709token\uff0c \u5982\u679c\u6709\uff0c\u4fdd\u5b58\u5230localStorage\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53d6localStorage\u4e2d\u7684token\uff0c\u6700\u540e\uff0c\u91cd\u5b9a\u5411\u6d4f\u89c8\u5668\u5230 /api/v1/login_process \u5e76\u5e26\u4e0atoken\u548cURL Query Parmas\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570 \u8fdb\u5165 /api/v1/login_process/ \u63a5\u53e3\u7684\u5904\u7406\u51fd\u6570\u540e\uff0c\u4f1a\u5224\u65ad\u67e5\u8be2\u53c2\u6570\u4e2d\u662f\u5426\u6709token\uff0c\u5982\u679c\u6709token\uff0c\u9a8c\u8bc1token\u6709\u6548\u540e\uff0c\u5982\u679c\u67e5\u8be2\u53c2\u6570\u4e2d\u6709next, \u76f4\u63a5\u91cd\u5b9a\u5411\u5230next\u6307\u5411\u7684URL\uff0c\u5982\u679c\u6ca1\u6709\u5219\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u767b\u5f55\u9875\uff1b\u5982\u679c\u6ca1\u6709token\u6216\u8005token\u5931\u6548\uff0c \u90a3\u4e48\u5206\u53d1AUTO_LOGIN\u4e8b\u4ef6\uff0c\u5e76\u904d\u5386\u4e8b\u4ef6\u5206\u53d1\u8fd4\u56de\u7ed3\u679c\uff0c\u5982\u679c\u5176\u4e2d\u67d0\u4e2a\u81ea\u52a8\u8ba4\u8bc1\u63d2\u4ef6\u8ba4\u8bc1\u6210\u529f\u5e76\u8fd4\u56deuser\uff0c\u90a3\u4e48\u5237\u65b0\u8be5\u7528\u6237token\uff0c\u5e26\u4e0atoken\u91cd\u5b9a\u5411\u5230 /api/v1/login/ \uff0c\u5982\u679c\u6240\u6709\u7684\u81ea\u52a8\u8ba4\u8bc1\u63d2\u4ef6\u90fd\u8ba4\u8bc1\u5931\u8d25\uff0c\u91cd\u5b9a\u5411\u5230\u524d\u7aef\u767b\u5f55\u9875","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#_3","text":"authenticate \u63d0\u793a authenticate \u8ba4\u8bc1\u6210\u529f\u5e94\u8be5\u8fd4\u56deuser, \u5982\u679c\u5931\u8d25\u8fd4\u56deNone\uff0c\u5982\u679c\u7c7b\u4f3ckerberos\u8ba4\u8bc1\u9700\u8981\u4e24\u6b21\u8fdb\u5165authenticate\uff0c\u7b2c\u4e00\u6b21\u5e94\u8be5\u8fdb\u5165\u5e94\u8be5\u8fd4\u56deHttpResponse \u72b6\u6001\u7801\u4e3a401","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension","text":"Source code in arkid/core/extension/auto_auth.py class AutoAuthExtension ( Extension ): TYPE = \"auto_auth\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AutoAuthExtension . TYPE def load ( self ): self . listen_event ( core_event . AUTO_LOGIN , self . authenticate ) super () . load () @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u81ea\u52a8\u8ba4\u8bc1\u4e8b\u4ef6 Returns: Union[arkid.core.models.User, django.http.HttpResponse, None]: \u81ea\u52a8\u8ba4\u8bc1\u8fd4\u56de\u7ed3\u679c \"\"\" pass def register_auto_auth_schema ( self , schema , auto_auth_type ): self . register_config_schema ( schema , self . package + '_' + auto_auth_type ) self . register_composite_config_schema ( schema , auto_auth_type , exclude = [ 'extension' ] )","title":"AutoAuthExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/auto_auth.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.authenticate","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u81ea\u52a8\u8ba4\u8bc1\u4e8b\u4ef6 required Returns: Type Description Union[arkid.core.models.User, django.http.HttpResponse, None] \u81ea\u52a8\u8ba4\u8bc1\u8fd4\u56de\u7ed3\u679c Source code in arkid/core/extension/auto_auth.py @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u81ea\u52a8\u8ba4\u8bc1\u4e8b\u4ef6 Returns: Union[arkid.core.models.User, django.http.HttpResponse, None]: \u81ea\u52a8\u8ba4\u8bc1\u8fd4\u56de\u7ed3\u679c \"\"\" pass","title":"authenticate()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81/#arkid.core.extension.auto_auth.AutoAuthExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/auto_auth.py def load ( self ): self . listen_event ( core_event . AUTO_LOGIN , self . authenticate ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/","text":"\u529f\u80fd\u4ecb\u7ecd # \u8ba4\u8bc1\u56e0\u7d20\uff1a\u5305\u542b\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff0c\u7528\u6237\u540d\u5bc6\u7801\uff0c\u56fe\u5f62\u9a8c\u8bc1\u7801\u7b49\u5177\u6709\u8ba4\u8bc1\u6216\u534f\u52a9\u8ba4\u8bc1\u529f\u80fd\u7684\u4e00\u7cfb\u5217\u63d2\u4ef6\uff0c\u7528\u4e8e\u9274\u522b\u7528\u6237\u8eab\u4efd\u6216\u8005\u63d0\u9ad8\u7cfb\u7edf\u5b89\u5168\u6027\u3002 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u521b\u5efa\u65b0\u7684\u8ba4\u8bc1\u56e0\u7d20\u65f6\uff0c\u9700\u7ee7\u627fAuthFactorExtension\u57fa\u7c7b\u5e76\u5b9e\u73b0\u6240\u6709\u62bd\u8c61\u65b9\u6cd5\uff0c\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a sequenceDiagram participant U as \u5ba2\u6237\u7aef participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u76d1\u542c\u81ea\u5b9a\u4e49\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\uff0c\u6ce8\u518c\uff0c\u91cd\u7f6e\u5bc6\u7801\uff0c\u76d1\u542c\u6838\u5fc3\u4e8b\u4ef6CREATE_LOGIN_PAGE_AUTH_FACTOR U->>C: \u8bf7\u6c42\u83b7\u53d6\u767b\u9646\u9875\u9762 C->>B: \u89e6\u53d1CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 B->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6839\u636e\u8fd0\u884c\u65f6\u914d\u7f6e\u751f\u6210login_pages C->>U: \u6e32\u67d3\u767b\u5f55\u9875\u9762 U->>C: \u8f93\u5165\u7528\u6237\u51ed\u8bc1\uff0c\u70b9\u51fb\u6309\u94ae\uff0c\u8fdb\u5165\u8ba4\u8bc1/\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u6d41\u7a0b C->>B: \u89e6\u53d1\u8ba4\u8bc1\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u4e8b\u4ef6 B->>C: \u54cd\u5e94\u8ba4\u8bc1\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u4e8b\u4ef6\uff0c\u5b8c\u6210\u5bf9\u5e94\u8fc7\u7a0b\uff0c\u8fd4\u56de\u7ed3\u679c C->>U: \u8fd4\u56de\u6267\u884c\u7ed3\u679c \u62bd\u8c61\u65b9\u6cd5 # authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.auth_factor.AuthFactorExtension ( Extension ) # Source code in arkid/core/extension/auth_factor.py class AuthFactorExtension ( Extension ): TYPE = \"auth_factor\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AuthFactorExtension . TYPE LOGIN = 'login' REGISTER = 'register' RESET_PASSWORD = 'password' def register_user_key_fields ( self , ** fields ): \"\"\"\u6ce8\u518c\u7528\u6237\u6a21\u578b\u5b57\u6bb5 \"\"\" User . register_key_field ( ** fields ) def load ( self ): super () . load () self . listen_events () self . register_auth_manage_page () def register_auth_factor_schema ( self , schema , auth_factor_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u56e0\u7d20\u8fd0\u884c\u65f6\u914d\u7f6eschema Args: schema (Schema): schema\u63cf\u8ff0 auth_factor_type (str): \u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_factor_type ) self . register_composite_config_schema ( schema , auth_factor_type , exclude = [ 'extension' ]) def start_authenticate ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u8ba4\u8bc1\u4e8b\u4ef6: \u8ba4\u8bc1\u524d\u904d\u5386\u8ba4\u8bc1\u89c4\u5219\uff0c\u5982\u901a\u8fc7\u6240\u6709\u89c4\u5219\u5219\u6267\u884c\u8ba4\u8bc1\u89c4\u7a0b Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . BEFORE_AUTH , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return self . authenticate ( event , ** kwargs ) @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 \"\"\" pass def auth_success ( self , user , event , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u6210\u529f\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u6210\u529f\u4e8b\u4ef6\uff0c\u5982\u6838\u5fc3\u5224\u5b9a\u4e8b\u4ef6\u65e0\u5f02\u5e38\uff08\u65e0\u5176\u4ed6\u63d2\u4ef6\u6216\u673a\u5236\u8ba4\u4e3a\u7ed3\u679c\u4e3a\u5931\u8d25\uff09\u5219\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\u540e\u7684\u7528\u6237 Args: user (User): \u7528\u6237 event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . AUTH_SUCCESS , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config , \"user\" : user })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return user def auth_failed ( self , event , data , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u5931\u8d25\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u5931\u8d25\u4e8b\u4ef6\uff0c\u6253\u7834\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd4\u56de\u62a5\u9519\u4fe1\u606f Args: event (_type_): \u8ba4\u8bc1\u4e8b\u4ef6 data (_type_): \u7ed3\u679c\u63cf\u8ff0 \"\"\" config = self . get_current_config ( event ) dispatch_event ( Event ( tag = core_event . AUTH_FAIL , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex , \"data\" : data })) core_event . remove_event_id ( event ) core_event . break_event_loop ( data ) @abstractmethod def register ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u6ce8\u518c\u4e8b\u4ef6 Args: event (Event): \u6ce8\u518c\u4e8b\u4ef6 \"\"\" pass @abstractmethod def reset_password ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Args: event (Event): \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 \"\"\" pass def create_response ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1aCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u767b\u9646\u9875\u9762schema\u63cf\u8ff0 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 Returns: dict: \u7ec4\u88c5\u597d\u7684\u767b\u9646\u9875\u9762\u5143\u7d20\uff08\u975e\u6700\u7ec8\u7ed3\u6784\uff09 \"\"\" logger . info ( f ' { self . package } create_response start' ) self . data = {} configs = self . get_tenant_configs ( event . tenant ) for config in configs : config_data = { self . LOGIN : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . REGISTER : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . RESET_PASSWORD : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, } if config . config . get ( \"login_enabled\" , True ): self . create_login_page ( event , config , config_data ) if config . config . get ( \"register_enabled\" , True ): self . create_register_page ( event , config , config_data ) if config . config . get ( \"reset_password_enabled\" , True ): self . create_password_page ( event , config , config_data ) self . create_other_page ( event , config , config_data ) self . data [ config . id . hex ] = config_data logger . info ( self . data ) logger . info ( f ' { self . package } create_response end' ) return self . data def add_page_form ( self , config , page_name , label , items , config_data , submit_url = None , submit_label = None ): \"\"\"\u5411config_data\u4e2d\u6dfb\u52a0\u8868\u5355\u5143\u7d20 Args: config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e page_name (str): \u9875\u9762\u540d\u79f0 label (str): \u6807\u7b7e items (list): \u9875\u9762\u5143\u7d20\u63cf\u8ff0\u5217\u8868 config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e submit_url (str, optional): \u8868\u5355\u63d0\u4ea4\u5730\u5740. Defaults to None. submit_label (str, optional): \u8868\u5355\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e. Defaults to None. \"\"\" default = { \"login\" : ( \"\u767b\u5f55\" , f \"/api/v1/tenant/tenant_id/auth/?event_tag= { self . auth_event_tag } \" ), \"register\" : ( \"\u6ce8\u518c\" , f \"/api/v1/tenant/tenant_id/register/?event_tag= { self . register_event_tag } \" ), \"password\" : ( \"\u91cd\u7f6e\u5bc6\u7801\" , f \"/api/v1/tenant/tenant_id/reset_password/?event_tag= { self . password_event_tag } \" ), } if not submit_label : submit_label , useless = default . get ( page_name ) if not submit_url : useless , submit_url = default . get ( page_name ) items . append ({ \"type\" : \"hidden\" , \"name\" : \"config_id\" , \"value\" : config . id }) config_data [ page_name ][ 'forms' ] . append ({ 'label' : label , 'items' : items , 'submit' : { 'label' : submit_label , 'title' : submit_label , 'http' : { 'url' : submit_url , 'method' : \"post\" }} }) def add_page_bottoms ( self , page_name , bottoms ): self . data [ page_name ][ 'bottoms' ] . append ( bottoms ) def add_page_extend ( self , page_name , buttons , title = None ): if not self . data [ page_name ] . get ( 'extend' ): self . data [ page_name ][ 'extend' ] = {} self . data [ page_name ][ 'extend' ][ 'title' ] = title self . data [ page_name ][ 'extend' ][ 'buttons' ] . append ( buttons ) @abstractmethod def create_login_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass @abstractmethod def create_register_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass @abstractmethod def create_password_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass @abstractmethod def create_other_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass def register_auth_manage_page ( self ): \"\"\" \u5411\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u6dfb\u52a0\u9875\u9762 \"\"\" from api.v1.pages.mine.auth_manage import page as auth_manage_page pages = self . create_auth_manage_page () if not pages : return if not isinstance ( pages , list ): pages = [ pages ] for page in pages : self . register_front_pages ( page ) auth_manage_page . add_pages ( page ) @abstractmethod def create_auth_manage_page ( self ): \"\"\"\u62bd\u8c61\u65b9\u6cd5: \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 \"\"\" pass @abstractmethod def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 \"\"\" pass @abstractmethod def fix_login_page ( self , event , ** kwargs ): \"\"\"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Args: event: AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 \"\"\" pass def get_current_config ( self , event ): \"\"\"\u83b7\u53d6\u4e8b\u4ef6\u6307\u5411\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Args: event (Event): \u4e8b\u4ef6 Returns: TenantExtensionConfig: \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" config_id = event . request . POST . get ( 'config_id' ) return self . get_config_by_id ( config_id ) def listen_events ( self ): \"\"\"\u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . auth_event_tag = self . register_event ( 'auth' , '\u8ba4\u8bc1' ) self . listen_event ( self . auth_event_tag , self . start_authenticate ) self . register_event_tag = self . register_event ( 'register' , '\u6ce8\u518c' ) self . listen_event ( self . register_event_tag , self . register ) self . password_event_tag = self . register_event ( 'password' , '\u91cd\u7f6e\u5bc6\u7801' ) self . listen_event ( self . password_event_tag , self . reset_password ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . create_response ) self . listen_event ( core_event . AUTHRULE_CHECK_AUTH_DATA , self . check_auth_data ) self . listen_event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , self . fix_login_page ) composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/auth_factor.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 add_page_form ( self , config , page_name , label , items , config_data , submit_url = None , submit_label = None ) # \u5411config_data\u4e2d\u6dfb\u52a0\u8868\u5355\u5143\u7d20 Parameters: Name Type Description Default config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required page_name str \u9875\u9762\u540d\u79f0 required label str \u6807\u7b7e required items list \u9875\u9762\u5143\u7d20\u63cf\u8ff0\u5217\u8868 required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required submit_url str \u8868\u5355\u63d0\u4ea4\u5730\u5740. Defaults to None. None submit_label str \u8868\u5355\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e. Defaults to None. None Source code in arkid/core/extension/auth_factor.py def add_page_form ( self , config , page_name , label , items , config_data , submit_url = None , submit_label = None ): \"\"\"\u5411config_data\u4e2d\u6dfb\u52a0\u8868\u5355\u5143\u7d20 Args: config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e page_name (str): \u9875\u9762\u540d\u79f0 label (str): \u6807\u7b7e items (list): \u9875\u9762\u5143\u7d20\u63cf\u8ff0\u5217\u8868 config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e submit_url (str, optional): \u8868\u5355\u63d0\u4ea4\u5730\u5740. Defaults to None. submit_label (str, optional): \u8868\u5355\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e. Defaults to None. \"\"\" default = { \"login\" : ( \"\u767b\u5f55\" , f \"/api/v1/tenant/tenant_id/auth/?event_tag= { self . auth_event_tag } \" ), \"register\" : ( \"\u6ce8\u518c\" , f \"/api/v1/tenant/tenant_id/register/?event_tag= { self . register_event_tag } \" ), \"password\" : ( \"\u91cd\u7f6e\u5bc6\u7801\" , f \"/api/v1/tenant/tenant_id/reset_password/?event_tag= { self . password_event_tag } \" ), } if not submit_label : submit_label , useless = default . get ( page_name ) if not submit_url : useless , submit_url = default . get ( page_name ) items . append ({ \"type\" : \"hidden\" , \"name\" : \"config_id\" , \"value\" : config . id }) config_data [ page_name ][ 'forms' ] . append ({ 'label' : label , 'items' : items , 'submit' : { 'label' : submit_label , 'title' : submit_label , 'http' : { 'url' : submit_url , 'method' : \"post\" }} }) auth_failed ( self , event , data , ** kwargs ) # \u5c01\u88c5\u8ba4\u8bc1\u5931\u8d25\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u5931\u8d25\u4e8b\u4ef6\uff0c\u6253\u7834\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd4\u56de\u62a5\u9519\u4fe1\u606f Parameters: Name Type Description Default event _type_ \u8ba4\u8bc1\u4e8b\u4ef6 required data _type_ \u7ed3\u679c\u63cf\u8ff0 required Source code in arkid/core/extension/auth_factor.py def auth_failed ( self , event , data , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u5931\u8d25\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u5931\u8d25\u4e8b\u4ef6\uff0c\u6253\u7834\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd4\u56de\u62a5\u9519\u4fe1\u606f Args: event (_type_): \u8ba4\u8bc1\u4e8b\u4ef6 data (_type_): \u7ed3\u679c\u63cf\u8ff0 \"\"\" config = self . get_current_config ( event ) dispatch_event ( Event ( tag = core_event . AUTH_FAIL , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex , \"data\" : data })) core_event . remove_event_id ( event ) core_event . break_event_loop ( data ) auth_success ( self , user , event , ** kwargs ) # \u5c01\u88c5\u8ba4\u8bc1\u6210\u529f\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u6210\u529f\u4e8b\u4ef6\uff0c\u5982\u6838\u5fc3\u5224\u5b9a\u4e8b\u4ef6\u65e0\u5f02\u5e38\uff08\u65e0\u5176\u4ed6\u63d2\u4ef6\u6216\u673a\u5236\u8ba4\u4e3a\u7ed3\u679c\u4e3a\u5931\u8d25\uff09\u5219\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\u540e\u7684\u7528\u6237 Parameters: Name Type Description Default user User \u7528\u6237 required event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Returns: Type Description Optional[User,None] \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 Source code in arkid/core/extension/auth_factor.py def auth_success ( self , user , event , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u6210\u529f\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u6210\u529f\u4e8b\u4ef6\uff0c\u5982\u6838\u5fc3\u5224\u5b9a\u4e8b\u4ef6\u65e0\u5f02\u5e38\uff08\u65e0\u5176\u4ed6\u63d2\u4ef6\u6216\u673a\u5236\u8ba4\u4e3a\u7ed3\u679c\u4e3a\u5931\u8d25\uff09\u5219\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\u540e\u7684\u7528\u6237 Args: user (User): \u7528\u6237 event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . AUTH_SUCCESS , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config , \"user\" : user })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return user authenticate ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 \"\"\" pass check_auth_data ( self , event , ** kwargs ) # \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 \"\"\" pass create_auth_manage_page ( self ) # \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_auth_manage_page ( self ): \"\"\"\u62bd\u8c61\u65b9\u6cd5: \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 \"\"\" pass create_login_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_login_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass create_other_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_other_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass create_password_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_password_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass create_register_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_register_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass create_response ( self , event , ** kwargs ) # \u54cd\u5e94\u4e8b\u4ef6\uff1aCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u767b\u9646\u9875\u9762schema\u63cf\u8ff0 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required Returns: Type Description dict \u7ec4\u88c5\u597d\u7684\u767b\u9646\u9875\u9762\u5143\u7d20\uff08\u975e\u6700\u7ec8\u7ed3\u6784\uff09 Source code in arkid/core/extension/auth_factor.py def create_response ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1aCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u767b\u9646\u9875\u9762schema\u63cf\u8ff0 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 Returns: dict: \u7ec4\u88c5\u597d\u7684\u767b\u9646\u9875\u9762\u5143\u7d20\uff08\u975e\u6700\u7ec8\u7ed3\u6784\uff09 \"\"\" logger . info ( f ' { self . package } create_response start' ) self . data = {} configs = self . get_tenant_configs ( event . tenant ) for config in configs : config_data = { self . LOGIN : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . REGISTER : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . RESET_PASSWORD : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, } if config . config . get ( \"login_enabled\" , True ): self . create_login_page ( event , config , config_data ) if config . config . get ( \"register_enabled\" , True ): self . create_register_page ( event , config , config_data ) if config . config . get ( \"reset_password_enabled\" , True ): self . create_password_page ( event , config , config_data ) self . create_other_page ( event , config , config_data ) self . data [ config . id . hex ] = config_data logger . info ( self . data ) logger . info ( f ' { self . package } create_response end' ) return self . data fix_login_page ( self , event , ** kwargs ) # \u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def fix_login_page ( self , event , ** kwargs ): \"\"\"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Args: event: AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 \"\"\" pass get_current_config ( self , event ) # \u83b7\u53d6\u4e8b\u4ef6\u6307\u5411\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Returns: Type Description TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e Source code in arkid/core/extension/auth_factor.py def get_current_config ( self , event ): \"\"\"\u83b7\u53d6\u4e8b\u4ef6\u6307\u5411\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Args: event (Event): \u4e8b\u4ef6 Returns: TenantExtensionConfig: \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" config_id = event . request . POST . get ( 'config_id' ) return self . get_config_by_id ( config_id ) listen_events ( self ) # \u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6 Source code in arkid/core/extension/auth_factor.py def listen_events ( self ): \"\"\"\u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . auth_event_tag = self . register_event ( 'auth' , '\u8ba4\u8bc1' ) self . listen_event ( self . auth_event_tag , self . start_authenticate ) self . register_event_tag = self . register_event ( 'register' , '\u6ce8\u518c' ) self . listen_event ( self . register_event_tag , self . register ) self . password_event_tag = self . register_event ( 'password' , '\u91cd\u7f6e\u5bc6\u7801' ) self . listen_event ( self . password_event_tag , self . reset_password ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . create_response ) self . listen_event ( core_event . AUTHRULE_CHECK_AUTH_DATA , self . check_auth_data ) self . listen_event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , self . fix_login_page ) load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/auth_factor.py def load ( self ): super () . load () self . listen_events () self . register_auth_manage_page () register ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u6ce8\u518c\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u6ce8\u518c\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def register ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u6ce8\u518c\u4e8b\u4ef6 Args: event (Event): \u6ce8\u518c\u4e8b\u4ef6 \"\"\" pass register_auth_factor_schema ( self , schema , auth_factor_type ) # \u6ce8\u518c\u8ba4\u8bc1\u56e0\u7d20\u8fd0\u884c\u65f6\u914d\u7f6eschema Parameters: Name Type Description Default schema Schema schema\u63cf\u8ff0 required auth_factor_type str \u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b required Source code in arkid/core/extension/auth_factor.py def register_auth_factor_schema ( self , schema , auth_factor_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u56e0\u7d20\u8fd0\u884c\u65f6\u914d\u7f6eschema Args: schema (Schema): schema\u63cf\u8ff0 auth_factor_type (str): \u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_factor_type ) self . register_composite_config_schema ( schema , auth_factor_type , exclude = [ 'extension' ]) register_auth_manage_page ( self ) # \u5411\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u6dfb\u52a0\u9875\u9762 Source code in arkid/core/extension/auth_factor.py def register_auth_manage_page ( self ): \"\"\" \u5411\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u6dfb\u52a0\u9875\u9762 \"\"\" from api.v1.pages.mine.auth_manage import page as auth_manage_page pages = self . create_auth_manage_page () if not pages : return if not isinstance ( pages , list ): pages = [ pages ] for page in pages : self . register_front_pages ( page ) auth_manage_page . add_pages ( page ) register_user_key_fields ( self , ** fields ) # \u6ce8\u518c\u7528\u6237\u6a21\u578b\u5b57\u6bb5 Source code in arkid/core/extension/auth_factor.py def register_user_key_fields ( self , ** fields ): \"\"\"\u6ce8\u518c\u7528\u6237\u6a21\u578b\u5b57\u6bb5 \"\"\" User . register_key_field ( ** fields ) reset_password ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def reset_password ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Args: event (Event): \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 \"\"\" pass start_authenticate ( self , event , ** kwargs ) # \u54cd\u5e94\u8ba4\u8bc1\u4e8b\u4ef6: \u8ba4\u8bc1\u524d\u904d\u5386\u8ba4\u8bc1\u89c4\u5219\uff0c\u5982\u901a\u8fc7\u6240\u6709\u89c4\u5219\u5219\u6267\u884c\u8ba4\u8bc1\u89c4\u7a0b Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Returns: Type Description Optional[User,None] \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 Source code in arkid/core/extension/auth_factor.py def start_authenticate ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u8ba4\u8bc1\u4e8b\u4ef6: \u8ba4\u8bc1\u524d\u904d\u5386\u8ba4\u8bc1\u89c4\u5219\uff0c\u5982\u901a\u8fc7\u6240\u6709\u89c4\u5219\u5219\u6267\u884c\u8ba4\u8bc1\u89c4\u7a0b Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . BEFORE_AUTH , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return self . authenticate ( event , ** kwargs ) \u793a\u4f8b # extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension ( AuthFactorExtension ) # \u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py class MobileAuthFactorExtension ( AuthFactorExtension ): \"\"\"\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 \"\"\" def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code ) def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg )) @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR ) def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data ) def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' ) @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED ) @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success () @operation ( MineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def mine_mobile ( self , request , tenant_id : str ): user = request . user user_expand = User . expand_objects . filter ( id = user . id ) . first () config = self . get_tenant_configs ( request . tenant ) . first () if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) return self . success ( data = { \"current_mobile\" : user_expand . get ( \"mobile\" , None ), \"mobile\" : \"\" , \"code\" : \"\" , \"config_id\" : config . id . hex , }, ) authenticate ( self , event , ** kwargs ) # \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg )) check_auth_data ( self , event , ** kwargs ) # \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_auth_data ( self , event , ** kwargs ): pass check_mobile_exists ( self , mobile , tenant ) # \u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default mobile str \u624b\u673a\u53f7 required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None check_username_exists ( self , username , tenant ) # \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default username str \u7528\u6237\u540d required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None create_auth_manage_page ( self ) # \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages create_extension_config_schema ( self ) # \u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' ) create_login_page ( self , event , config , config_data ) # \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data ) create_other_page ( self , event , config , config_data ) # \u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass create_password_page ( self , event , config , config_data ) # \u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data ) create_register_page ( self , event , config , config_data ) # \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data ) fix_login_page ( self , event , ** kwargs ) # \u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def fix_login_page ( self , event , ** kwargs ): pass load ( self ) # \u52a0\u8f7d\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code ) register ( self , event , ** kwargs ) # \u6ce8\u518c\u7528\u6237 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user reset_password ( self , event , ** kwargs ) # \u91cd\u7f6e\u5bc6\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR ) send_sms_code ( self , request , tenant_id , config_id , data ) # \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED ) update_mine_mobile ( self , request , tenant_id , data ) # \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success () extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension ( AuthFactorExtension ) # Source code in extension_root/com_longgui_auth_factor_password/__init__.py class PasswordAuthFactorExtension ( AuthFactorExtension ): def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event ) def create_tenant_event ( self , event , ** kwargs ): tenant = event . tenant config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def reset_user_password ( self , request , tenant_id : str , id : str , data : RestUserPasswordIn ): user = User . active_objects . get ( id = id ) password = data . password user . password = make_password ( password ) user . save () return self . success () def get_user_key_fields ( self , request ): data = [{ 'key' : key , 'name' : value } for key , value in User . key_fields . items ()] return data def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH )) @transaction . atomic () def register ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config = self . get_current_config ( event ) ret , message = self . check_password_complexity ( password , config ) if not ret : return self . error ( ErrorCode . PASSWORD_STRENGTH_LACK ) register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] if not register_fields : fields = [ 'username' ] if username is None : self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_EMPTY )) else : fields = [ k for k in register_fields if request . POST . get ( k ) is not None ] if not fields : self . auth_failed ( event , data = self . error ( ErrorCode . ALL_USER_FLAG_LACK_FIELD )) for field in fields : user = self . _get_register_user ( tenant , field , request . POST . get ( field )) if user : self . auth_failed ( event , data = self . error ( ErrorCode . FIELD_USER_EXISTS , field = field )) # user = User.objects.create(tenant=tenant) user = User ( tenant = tenant ) for k in fields : if request . POST . get ( k ): setattr ( user , k , request . POST . get ( k )) user . password = make_password ( password ) user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): pass def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): pass def create_other_page ( self , event , config , config_data ): pass def check_password_complexity ( self , pwd , config ): if not pwd : return False , 'No password provide' if config : regular = config . config . get ( 'regular' ) title = config . config . get ( 'title' ) if re . match ( regular , pwd ): return True , None else : return False , title return True , None def _get_register_user ( self , tenant , field_name , field_value ): user = None if field_name in ( 'username' , 'email' ): user = User . active_objects . filter ( ** { field_name : field_value }) . first () else : # \u83b7\u53d6\u521a\u6ce8\u518c\u7684\u7528\u6237 user = User . expand_objects . filter ( ** { field_name : field_value }) . first () return user def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR ) authenticate ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH )) check_auth_data ( self , event , ** kwargs ) # \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def check_auth_data ( self , event , ** kwargs ): pass create_auth_manage_page ( self ) # \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page create_login_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data ) create_other_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_other_page ( self , event , config , config_data ): pass create_password_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_password_page ( self , event , config , config_data ): pass create_register_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data ) fix_login_page ( self , event , ** kwargs ) # \u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def fix_login_page ( self , event , ** kwargs ): pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event ) reset_password ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def reset_password ( self , event , ** kwargs ): pass update_mine_password ( self , request , tenant_id , data ) # \u66f4\u6539\u5bc6\u7801 Source code in extension_root/com_longgui_auth_factor_password/__init__.py @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR )","title":"\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#_1","text":"\u8ba4\u8bc1\u56e0\u7d20\uff1a\u5305\u542b\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff0c\u7528\u6237\u540d\u5bc6\u7801\uff0c\u56fe\u5f62\u9a8c\u8bc1\u7801\u7b49\u5177\u6709\u8ba4\u8bc1\u6216\u534f\u52a9\u8ba4\u8bc1\u529f\u80fd\u7684\u4e00\u7cfb\u5217\u63d2\u4ef6\uff0c\u7528\u4e8e\u9274\u522b\u7528\u6237\u8eab\u4efd\u6216\u8005\u63d0\u9ad8\u7cfb\u7edf\u5b89\u5168\u6027\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#_2","text":"\u5f00\u53d1\u8005\u5728\u521b\u5efa\u65b0\u7684\u8ba4\u8bc1\u56e0\u7d20\u65f6\uff0c\u9700\u7ee7\u627fAuthFactorExtension\u57fa\u7c7b\u5e76\u5b9e\u73b0\u6240\u6709\u62bd\u8c61\u65b9\u6cd5\uff0c\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a sequenceDiagram participant U as \u5ba2\u6237\u7aef participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u6ce8\u518c\u76d1\u542c\u81ea\u5b9a\u4e49\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\uff0c\u6ce8\u518c\uff0c\u91cd\u7f6e\u5bc6\u7801\uff0c\u76d1\u542c\u6838\u5fc3\u4e8b\u4ef6CREATE_LOGIN_PAGE_AUTH_FACTOR U->>C: \u8bf7\u6c42\u83b7\u53d6\u767b\u9646\u9875\u9762 C->>B: \u89e6\u53d1CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 B->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6839\u636e\u8fd0\u884c\u65f6\u914d\u7f6e\u751f\u6210login_pages C->>U: \u6e32\u67d3\u767b\u5f55\u9875\u9762 U->>C: \u8f93\u5165\u7528\u6237\u51ed\u8bc1\uff0c\u70b9\u51fb\u6309\u94ae\uff0c\u8fdb\u5165\u8ba4\u8bc1/\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u6d41\u7a0b C->>B: \u89e6\u53d1\u8ba4\u8bc1\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u4e8b\u4ef6 B->>C: \u54cd\u5e94\u8ba4\u8bc1\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u4e8b\u4ef6\uff0c\u5b8c\u6210\u5bf9\u5e94\u8fc7\u7a0b\uff0c\u8fd4\u56de\u7ed3\u679c C->>U: \u8fd4\u56de\u6267\u884c\u7ed3\u679c","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#_3","text":"authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension","text":"Source code in arkid/core/extension/auth_factor.py class AuthFactorExtension ( Extension ): TYPE = \"auth_factor\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AuthFactorExtension . TYPE LOGIN = 'login' REGISTER = 'register' RESET_PASSWORD = 'password' def register_user_key_fields ( self , ** fields ): \"\"\"\u6ce8\u518c\u7528\u6237\u6a21\u578b\u5b57\u6bb5 \"\"\" User . register_key_field ( ** fields ) def load ( self ): super () . load () self . listen_events () self . register_auth_manage_page () def register_auth_factor_schema ( self , schema , auth_factor_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u56e0\u7d20\u8fd0\u884c\u65f6\u914d\u7f6eschema Args: schema (Schema): schema\u63cf\u8ff0 auth_factor_type (str): \u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_factor_type ) self . register_composite_config_schema ( schema , auth_factor_type , exclude = [ 'extension' ]) def start_authenticate ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u8ba4\u8bc1\u4e8b\u4ef6: \u8ba4\u8bc1\u524d\u904d\u5386\u8ba4\u8bc1\u89c4\u5219\uff0c\u5982\u901a\u8fc7\u6240\u6709\u89c4\u5219\u5219\u6267\u884c\u8ba4\u8bc1\u89c4\u7a0b Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . BEFORE_AUTH , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return self . authenticate ( event , ** kwargs ) @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 \"\"\" pass def auth_success ( self , user , event , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u6210\u529f\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u6210\u529f\u4e8b\u4ef6\uff0c\u5982\u6838\u5fc3\u5224\u5b9a\u4e8b\u4ef6\u65e0\u5f02\u5e38\uff08\u65e0\u5176\u4ed6\u63d2\u4ef6\u6216\u673a\u5236\u8ba4\u4e3a\u7ed3\u679c\u4e3a\u5931\u8d25\uff09\u5219\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\u540e\u7684\u7528\u6237 Args: user (User): \u7528\u6237 event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . AUTH_SUCCESS , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config , \"user\" : user })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return user def auth_failed ( self , event , data , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u5931\u8d25\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u5931\u8d25\u4e8b\u4ef6\uff0c\u6253\u7834\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd4\u56de\u62a5\u9519\u4fe1\u606f Args: event (_type_): \u8ba4\u8bc1\u4e8b\u4ef6 data (_type_): \u7ed3\u679c\u63cf\u8ff0 \"\"\" config = self . get_current_config ( event ) dispatch_event ( Event ( tag = core_event . AUTH_FAIL , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex , \"data\" : data })) core_event . remove_event_id ( event ) core_event . break_event_loop ( data ) @abstractmethod def register ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u6ce8\u518c\u4e8b\u4ef6 Args: event (Event): \u6ce8\u518c\u4e8b\u4ef6 \"\"\" pass @abstractmethod def reset_password ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Args: event (Event): \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 \"\"\" pass def create_response ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1aCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u767b\u9646\u9875\u9762schema\u63cf\u8ff0 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 Returns: dict: \u7ec4\u88c5\u597d\u7684\u767b\u9646\u9875\u9762\u5143\u7d20\uff08\u975e\u6700\u7ec8\u7ed3\u6784\uff09 \"\"\" logger . info ( f ' { self . package } create_response start' ) self . data = {} configs = self . get_tenant_configs ( event . tenant ) for config in configs : config_data = { self . LOGIN : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . REGISTER : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . RESET_PASSWORD : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, } if config . config . get ( \"login_enabled\" , True ): self . create_login_page ( event , config , config_data ) if config . config . get ( \"register_enabled\" , True ): self . create_register_page ( event , config , config_data ) if config . config . get ( \"reset_password_enabled\" , True ): self . create_password_page ( event , config , config_data ) self . create_other_page ( event , config , config_data ) self . data [ config . id . hex ] = config_data logger . info ( self . data ) logger . info ( f ' { self . package } create_response end' ) return self . data def add_page_form ( self , config , page_name , label , items , config_data , submit_url = None , submit_label = None ): \"\"\"\u5411config_data\u4e2d\u6dfb\u52a0\u8868\u5355\u5143\u7d20 Args: config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e page_name (str): \u9875\u9762\u540d\u79f0 label (str): \u6807\u7b7e items (list): \u9875\u9762\u5143\u7d20\u63cf\u8ff0\u5217\u8868 config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e submit_url (str, optional): \u8868\u5355\u63d0\u4ea4\u5730\u5740. Defaults to None. submit_label (str, optional): \u8868\u5355\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e. Defaults to None. \"\"\" default = { \"login\" : ( \"\u767b\u5f55\" , f \"/api/v1/tenant/tenant_id/auth/?event_tag= { self . auth_event_tag } \" ), \"register\" : ( \"\u6ce8\u518c\" , f \"/api/v1/tenant/tenant_id/register/?event_tag= { self . register_event_tag } \" ), \"password\" : ( \"\u91cd\u7f6e\u5bc6\u7801\" , f \"/api/v1/tenant/tenant_id/reset_password/?event_tag= { self . password_event_tag } \" ), } if not submit_label : submit_label , useless = default . get ( page_name ) if not submit_url : useless , submit_url = default . get ( page_name ) items . append ({ \"type\" : \"hidden\" , \"name\" : \"config_id\" , \"value\" : config . id }) config_data [ page_name ][ 'forms' ] . append ({ 'label' : label , 'items' : items , 'submit' : { 'label' : submit_label , 'title' : submit_label , 'http' : { 'url' : submit_url , 'method' : \"post\" }} }) def add_page_bottoms ( self , page_name , bottoms ): self . data [ page_name ][ 'bottoms' ] . append ( bottoms ) def add_page_extend ( self , page_name , buttons , title = None ): if not self . data [ page_name ] . get ( 'extend' ): self . data [ page_name ][ 'extend' ] = {} self . data [ page_name ][ 'extend' ][ 'title' ] = title self . data [ page_name ][ 'extend' ][ 'buttons' ] . append ( buttons ) @abstractmethod def create_login_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass @abstractmethod def create_register_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass @abstractmethod def create_password_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass @abstractmethod def create_other_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass def register_auth_manage_page ( self ): \"\"\" \u5411\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u6dfb\u52a0\u9875\u9762 \"\"\" from api.v1.pages.mine.auth_manage import page as auth_manage_page pages = self . create_auth_manage_page () if not pages : return if not isinstance ( pages , list ): pages = [ pages ] for page in pages : self . register_front_pages ( page ) auth_manage_page . add_pages ( page ) @abstractmethod def create_auth_manage_page ( self ): \"\"\"\u62bd\u8c61\u65b9\u6cd5: \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 \"\"\" pass @abstractmethod def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 \"\"\" pass @abstractmethod def fix_login_page ( self , event , ** kwargs ): \"\"\"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Args: event: AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 \"\"\" pass def get_current_config ( self , event ): \"\"\"\u83b7\u53d6\u4e8b\u4ef6\u6307\u5411\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Args: event (Event): \u4e8b\u4ef6 Returns: TenantExtensionConfig: \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" config_id = event . request . POST . get ( 'config_id' ) return self . get_config_by_id ( config_id ) def listen_events ( self ): \"\"\"\u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . auth_event_tag = self . register_event ( 'auth' , '\u8ba4\u8bc1' ) self . listen_event ( self . auth_event_tag , self . start_authenticate ) self . register_event_tag = self . register_event ( 'register' , '\u6ce8\u518c' ) self . listen_event ( self . register_event_tag , self . register ) self . password_event_tag = self . register_event ( 'password' , '\u91cd\u7f6e\u5bc6\u7801' ) self . listen_event ( self . password_event_tag , self . reset_password ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . create_response ) self . listen_event ( core_event . AUTHRULE_CHECK_AUTH_DATA , self . check_auth_data ) self . listen_event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , self . fix_login_page )","title":"AuthFactorExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/auth_factor.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.add_page_form","text":"\u5411config_data\u4e2d\u6dfb\u52a0\u8868\u5355\u5143\u7d20 Parameters: Name Type Description Default config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required page_name str \u9875\u9762\u540d\u79f0 required label str \u6807\u7b7e required items list \u9875\u9762\u5143\u7d20\u63cf\u8ff0\u5217\u8868 required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required submit_url str \u8868\u5355\u63d0\u4ea4\u5730\u5740. Defaults to None. None submit_label str \u8868\u5355\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e. Defaults to None. None Source code in arkid/core/extension/auth_factor.py def add_page_form ( self , config , page_name , label , items , config_data , submit_url = None , submit_label = None ): \"\"\"\u5411config_data\u4e2d\u6dfb\u52a0\u8868\u5355\u5143\u7d20 Args: config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e page_name (str): \u9875\u9762\u540d\u79f0 label (str): \u6807\u7b7e items (list): \u9875\u9762\u5143\u7d20\u63cf\u8ff0\u5217\u8868 config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e submit_url (str, optional): \u8868\u5355\u63d0\u4ea4\u5730\u5740. Defaults to None. submit_label (str, optional): \u8868\u5355\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e. Defaults to None. \"\"\" default = { \"login\" : ( \"\u767b\u5f55\" , f \"/api/v1/tenant/tenant_id/auth/?event_tag= { self . auth_event_tag } \" ), \"register\" : ( \"\u6ce8\u518c\" , f \"/api/v1/tenant/tenant_id/register/?event_tag= { self . register_event_tag } \" ), \"password\" : ( \"\u91cd\u7f6e\u5bc6\u7801\" , f \"/api/v1/tenant/tenant_id/reset_password/?event_tag= { self . password_event_tag } \" ), } if not submit_label : submit_label , useless = default . get ( page_name ) if not submit_url : useless , submit_url = default . get ( page_name ) items . append ({ \"type\" : \"hidden\" , \"name\" : \"config_id\" , \"value\" : config . id }) config_data [ page_name ][ 'forms' ] . append ({ 'label' : label , 'items' : items , 'submit' : { 'label' : submit_label , 'title' : submit_label , 'http' : { 'url' : submit_url , 'method' : \"post\" }} })","title":"add_page_form()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.auth_failed","text":"\u5c01\u88c5\u8ba4\u8bc1\u5931\u8d25\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u5931\u8d25\u4e8b\u4ef6\uff0c\u6253\u7834\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd4\u56de\u62a5\u9519\u4fe1\u606f Parameters: Name Type Description Default event _type_ \u8ba4\u8bc1\u4e8b\u4ef6 required data _type_ \u7ed3\u679c\u63cf\u8ff0 required Source code in arkid/core/extension/auth_factor.py def auth_failed ( self , event , data , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u5931\u8d25\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u5931\u8d25\u4e8b\u4ef6\uff0c\u6253\u7834\u4e8b\u4ef6\u5faa\u73af\uff0c\u8fd4\u56de\u62a5\u9519\u4fe1\u606f Args: event (_type_): \u8ba4\u8bc1\u4e8b\u4ef6 data (_type_): \u7ed3\u679c\u63cf\u8ff0 \"\"\" config = self . get_current_config ( event ) dispatch_event ( Event ( tag = core_event . AUTH_FAIL , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex , \"data\" : data })) core_event . remove_event_id ( event ) core_event . break_event_loop ( data )","title":"auth_failed()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.auth_success","text":"\u5c01\u88c5\u8ba4\u8bc1\u6210\u529f\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u6210\u529f\u4e8b\u4ef6\uff0c\u5982\u6838\u5fc3\u5224\u5b9a\u4e8b\u4ef6\u65e0\u5f02\u5e38\uff08\u65e0\u5176\u4ed6\u63d2\u4ef6\u6216\u673a\u5236\u8ba4\u4e3a\u7ed3\u679c\u4e3a\u5931\u8d25\uff09\u5219\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\u540e\u7684\u7528\u6237 Parameters: Name Type Description Default user User \u7528\u6237 required event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Returns: Type Description Optional[User,None] \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 Source code in arkid/core/extension/auth_factor.py def auth_success ( self , user , event , ** kwargs ): \"\"\"\u5c01\u88c5\u8ba4\u8bc1\u6210\u529f\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u89e6\u53d1\u8ba4\u8bc1\u6210\u529f\u4e8b\u4ef6\uff0c\u5982\u6838\u5fc3\u5224\u5b9a\u4e8b\u4ef6\u65e0\u5f02\u5e38\uff08\u65e0\u5176\u4ed6\u63d2\u4ef6\u6216\u673a\u5236\u8ba4\u4e3a\u7ed3\u679c\u4e3a\u5931\u8d25\uff09\u5219\u8fd4\u56de\u8ba4\u8bc1\u6210\u529f\u540e\u7684\u7528\u6237 Args: user (User): \u7528\u6237 event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . AUTH_SUCCESS , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config , \"user\" : user })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return user","title":"auth_success()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.authenticate","text":"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def authenticate ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 \"\"\" pass","title":"authenticate()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.check_auth_data","text":"\u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 \"\"\" pass","title":"check_auth_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.create_auth_manage_page","text":"\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_auth_manage_page ( self ): \"\"\"\u62bd\u8c61\u65b9\u6cd5: \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 \"\"\" pass","title":"create_auth_manage_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.create_login_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_login_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass","title":"create_login_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.create_other_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_other_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass","title":"create_other_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.create_password_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_password_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass","title":"create_password_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.create_register_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in arkid/core/extension/auth_factor.py @abstractmethod def create_register_page ( self , event , config , config_data ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e config_data (dict): \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e \"\"\" pass","title":"create_register_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.create_response","text":"\u54cd\u5e94\u4e8b\u4ef6\uff1aCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u767b\u9646\u9875\u9762schema\u63cf\u8ff0 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required Returns: Type Description dict \u7ec4\u88c5\u597d\u7684\u767b\u9646\u9875\u9762\u5143\u7d20\uff08\u975e\u6700\u7ec8\u7ed3\u6784\uff09 Source code in arkid/core/extension/auth_factor.py def create_response ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1aCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u767b\u9646\u9875\u9762schema\u63cf\u8ff0 Args: event (Event): CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 Returns: dict: \u7ec4\u88c5\u597d\u7684\u767b\u9646\u9875\u9762\u5143\u7d20\uff08\u975e\u6700\u7ec8\u7ed3\u6784\uff09 \"\"\" logger . info ( f ' { self . package } create_response start' ) self . data = {} configs = self . get_tenant_configs ( event . tenant ) for config in configs : config_data = { self . LOGIN : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . REGISTER : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, self . RESET_PASSWORD : { 'forms' :[], 'bottoms' :[], 'extend' :{}, }, } if config . config . get ( \"login_enabled\" , True ): self . create_login_page ( event , config , config_data ) if config . config . get ( \"register_enabled\" , True ): self . create_register_page ( event , config , config_data ) if config . config . get ( \"reset_password_enabled\" , True ): self . create_password_page ( event , config , config_data ) self . create_other_page ( event , config , config_data ) self . data [ config . id . hex ] = config_data logger . info ( self . data ) logger . info ( f ' { self . package } create_response end' ) return self . data","title":"create_response()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.fix_login_page","text":"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def fix_login_page ( self , event , ** kwargs ): \"\"\"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Args: event: AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 \"\"\" pass","title":"fix_login_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.get_current_config","text":"\u83b7\u53d6\u4e8b\u4ef6\u6307\u5411\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Returns: Type Description TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e Source code in arkid/core/extension/auth_factor.py def get_current_config ( self , event ): \"\"\"\u83b7\u53d6\u4e8b\u4ef6\u6307\u5411\u7684\u8fd0\u884c\u65f6\u914d\u7f6e Args: event (Event): \u4e8b\u4ef6 Returns: TenantExtensionConfig: \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" config_id = event . request . POST . get ( 'config_id' ) return self . get_config_by_id ( config_id )","title":"get_current_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.listen_events","text":"\u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6 Source code in arkid/core/extension/auth_factor.py def listen_events ( self ): \"\"\"\u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . auth_event_tag = self . register_event ( 'auth' , '\u8ba4\u8bc1' ) self . listen_event ( self . auth_event_tag , self . start_authenticate ) self . register_event_tag = self . register_event ( 'register' , '\u6ce8\u518c' ) self . listen_event ( self . register_event_tag , self . register ) self . password_event_tag = self . register_event ( 'password' , '\u91cd\u7f6e\u5bc6\u7801' ) self . listen_event ( self . password_event_tag , self . reset_password ) self . listen_event ( core_event . CREATE_LOGIN_PAGE_AUTH_FACTOR , self . create_response ) self . listen_event ( core_event . AUTHRULE_CHECK_AUTH_DATA , self . check_auth_data ) self . listen_event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , self . fix_login_page )","title":"listen_events()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/auth_factor.py def load ( self ): super () . load () self . listen_events () self . register_auth_manage_page ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.register","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u6ce8\u518c\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u6ce8\u518c\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def register ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u6ce8\u518c\u4e8b\u4ef6 Args: event (Event): \u6ce8\u518c\u4e8b\u4ef6 \"\"\" pass","title":"register()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.register_auth_factor_schema","text":"\u6ce8\u518c\u8ba4\u8bc1\u56e0\u7d20\u8fd0\u884c\u65f6\u914d\u7f6eschema Parameters: Name Type Description Default schema Schema schema\u63cf\u8ff0 required auth_factor_type str \u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b required Source code in arkid/core/extension/auth_factor.py def register_auth_factor_schema ( self , schema , auth_factor_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u56e0\u7d20\u8fd0\u884c\u65f6\u914d\u7f6eschema Args: schema (Schema): schema\u63cf\u8ff0 auth_factor_type (str): \u8ba4\u8bc1\u56e0\u7d20\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_factor_type ) self . register_composite_config_schema ( schema , auth_factor_type , exclude = [ 'extension' ])","title":"register_auth_factor_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.register_auth_manage_page","text":"\u5411\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u6dfb\u52a0\u9875\u9762 Source code in arkid/core/extension/auth_factor.py def register_auth_manage_page ( self ): \"\"\" \u5411\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u6dfb\u52a0\u9875\u9762 \"\"\" from api.v1.pages.mine.auth_manage import page as auth_manage_page pages = self . create_auth_manage_page () if not pages : return if not isinstance ( pages , list ): pages = [ pages ] for page in pages : self . register_front_pages ( page ) auth_manage_page . add_pages ( page )","title":"register_auth_manage_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.register_user_key_fields","text":"\u6ce8\u518c\u7528\u6237\u6a21\u578b\u5b57\u6bb5 Source code in arkid/core/extension/auth_factor.py def register_user_key_fields ( self , ** fields ): \"\"\"\u6ce8\u518c\u7528\u6237\u6a21\u578b\u5b57\u6bb5 \"\"\" User . register_key_field ( ** fields )","title":"register_user_key_fields()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.reset_password","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_factor.py @abstractmethod def reset_password ( self , event , ** kwargs ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Args: event (Event): \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 \"\"\" pass","title":"reset_password()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#arkid.core.extension.auth_factor.AuthFactorExtension.start_authenticate","text":"\u54cd\u5e94\u8ba4\u8bc1\u4e8b\u4ef6: \u8ba4\u8bc1\u524d\u904d\u5386\u8ba4\u8bc1\u89c4\u5219\uff0c\u5982\u901a\u8fc7\u6240\u6709\u89c4\u5219\u5219\u6267\u884c\u8ba4\u8bc1\u89c4\u7a0b Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Returns: Type Description Optional[User,None] \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 Source code in arkid/core/extension/auth_factor.py def start_authenticate ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u8ba4\u8bc1\u4e8b\u4ef6: \u8ba4\u8bc1\u524d\u904d\u5386\u8ba4\u8bc1\u89c4\u5219\uff0c\u5982\u901a\u8fc7\u6240\u6709\u89c4\u5219\u5219\u6267\u884c\u8ba4\u8bc1\u89c4\u7a0b Args: event (Event): \u8ba4\u8bc1\u4e8b\u4ef6 Returns: Optional[User,None]: \u5982\u8ba4\u8bc1\u6210\u529f\u5219\u8fd4\u56deuser\u5bf9\u8c61\uff0c\u5982\u8ba4\u8bc1\u5931\u8d25\u8df3\u51fa\u4e8b\u4ef6\u5faa\u73af\u62a5\u9519 \"\"\" config = self . get_current_config ( event ) responses = dispatch_event ( Event ( tag = core_event . BEFORE_AUTH , tenant = event . tenant , request = event . request , data = { \"auth_factor_config_id\" : config . id . hex })) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return self . auth_failed ( event , data ) return self . authenticate ( event , ** kwargs )","title":"start_authenticate()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension","text":"\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py class MobileAuthFactorExtension ( AuthFactorExtension ): \"\"\"\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 \"\"\" def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code ) def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg )) @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR ) def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data ) def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' ) @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED ) @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success () @operation ( MineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def mine_mobile ( self , request , tenant_id : str ): user = request . user user_expand = User . expand_objects . filter ( id = user . id ) . first () config = self . get_tenant_configs ( request . tenant ) . first () if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) return self . success ( data = { \"current_mobile\" : user_expand . get ( \"mobile\" , None ), \"mobile\" : \"\" , \"code\" : \"\" , \"config_id\" : config . id . hex , }, )","title":"MobileAuthFactorExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.authenticate","text":"\u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg ))","title":"authenticate()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.check_auth_data","text":"\u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_auth_data ( self , event , ** kwargs ): pass","title":"check_auth_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.check_mobile_exists","text":"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default mobile str \u624b\u673a\u53f7 required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None","title":"check_mobile_exists()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.check_username_exists","text":"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default username str \u7528\u6237\u540d required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None","title":"check_username_exists()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_auth_manage_page","text":"\u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages","title":"create_auth_manage_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_extension_config_schema","text":"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' )","title":"create_extension_config_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_login_page","text":"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data )","title":"create_login_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_other_page","text":"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass","title":"create_other_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_password_page","text":"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data )","title":"create_password_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_register_page","text":"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data )","title":"create_register_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.fix_login_page","text":"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def fix_login_page ( self , event , ** kwargs ): pass","title":"fix_login_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.load","text":"\u52a0\u8f7d\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.register","text":"\u6ce8\u518c\u7528\u6237 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user","title":"register()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.reset_password","text":"\u91cd\u7f6e\u5bc6\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR )","title":"reset_password()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.send_sms_code","text":"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED )","title":"send_sms_code()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.update_mine_mobile","text":"\u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success ()","title":"update_mine_mobile()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension","text":"Source code in extension_root/com_longgui_auth_factor_password/__init__.py class PasswordAuthFactorExtension ( AuthFactorExtension ): def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event ) def create_tenant_event ( self , event , ** kwargs ): tenant = event . tenant config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def reset_user_password ( self , request , tenant_id : str , id : str , data : RestUserPasswordIn ): user = User . active_objects . get ( id = id ) password = data . password user . password = make_password ( password ) user . save () return self . success () def get_user_key_fields ( self , request ): data = [{ 'key' : key , 'name' : value } for key , value in User . key_fields . items ()] return data def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH )) @transaction . atomic () def register ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config = self . get_current_config ( event ) ret , message = self . check_password_complexity ( password , config ) if not ret : return self . error ( ErrorCode . PASSWORD_STRENGTH_LACK ) register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] if not register_fields : fields = [ 'username' ] if username is None : self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_EMPTY )) else : fields = [ k for k in register_fields if request . POST . get ( k ) is not None ] if not fields : self . auth_failed ( event , data = self . error ( ErrorCode . ALL_USER_FLAG_LACK_FIELD )) for field in fields : user = self . _get_register_user ( tenant , field , request . POST . get ( field )) if user : self . auth_failed ( event , data = self . error ( ErrorCode . FIELD_USER_EXISTS , field = field )) # user = User.objects.create(tenant=tenant) user = User ( tenant = tenant ) for k in fields : if request . POST . get ( k ): setattr ( user , k , request . POST . get ( k )) user . password = make_password ( password ) user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): pass def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): pass def create_other_page ( self , event , config , config_data ): pass def check_password_complexity ( self , pwd , config ): if not pwd : return False , 'No password provide' if config : regular = config . config . get ( 'regular' ) title = config . config . get ( 'title' ) if re . match ( regular , pwd ): return True , None else : return False , title return True , None def _get_register_user ( self , tenant , field_name , field_value ): user = None if field_name in ( 'username' , 'email' ): user = User . active_objects . filter ( ** { field_name : field_value }) . first () else : # \u83b7\u53d6\u521a\u6ce8\u518c\u7684\u7528\u6237 user = User . expand_objects . filter ( ** { field_name : field_value }) . first () return user def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR )","title":"PasswordAuthFactorExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.authenticate","text":"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH ))","title":"authenticate()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.check_auth_data","text":"\u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def check_auth_data ( self , event , ** kwargs ): pass","title":"check_auth_data()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_auth_manage_page","text":"\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page","title":"create_auth_manage_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_login_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data )","title":"create_login_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_other_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_other_page ( self , event , config , config_data ): pass","title":"create_other_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_password_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_password_page ( self , event , config , config_data ): pass","title":"create_password_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_register_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data )","title":"create_register_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.fix_login_page","text":"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def fix_login_page ( self , event , ** kwargs ): pass","title":"fix_login_page()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.reset_password","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def reset_password ( self , event , ** kwargs ): pass","title":"reset_password()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E5%9B%A0%E7%B4%A0/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.update_mine_password","text":"\u66f4\u6539\u5bc6\u7801 Source code in extension_root/com_longgui_auth_factor_password/__init__.py @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR )","title":"update_mine_password()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/","text":"\u529f\u80fd\u4ecb\u7ecd # \u8ba4\u8bc1\u89c4\u5219\u4e3a\u4e00\u7cfb\u5217\u8ba4\u8bc1\u56e0\u7d20\u7684\u6269\u5145\uff0c\u4e32\u8054\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u5b9e\u73b0\u8ba4\u8bc1\u56e0\u7d20\u95f4\u7684\u534f\u4f5c\uff0c\u4ee5\u5b8c\u6210\u590d\u6742\u7684\u8ba4\u8bc1\u8fc7\u7a0b \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u8ba4\u8bc1\u89c4\u5219\u63d2\u4ef6\u65f6\uff0c\u9700\u7ee7\u627fAuthRuleExtension\u57fa\u7c7b\u5e76\u91cd\u8f7dcheck_rule\u62bd\u8c61\u65b9\u6cd5\uff0c\u76d1\u542c\u7cfb\u7edf\u4e8b\u4ef6\u5e76\u4ee5\u4e8b\u4ef6\u673a\u5236\u4e32\u8054\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5176\u57fa\u7840\u6d41\u7a0b\u5982\u4e0b\uff1a sequenceDiagram participant U as \u5ba2\u6237\u7aef participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u8ba4\u8bc1\u89c4\u5219\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u76d1\u542cCREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 U->>C: \u8bf7\u6c42\u83b7\u53d6\u767b\u9646\u9875\u9762 C->>B: \u89e6\u53d1CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 B->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de C->>U: \u6e32\u67d3\u767b\u5f55\u9875\u9762 \u62bd\u8c61\u51fd\u6570 # check_rule \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.auth_rule.AuthRuleExtension ( Extension ) # Source code in arkid/core/extension/auth_rule.py class AuthRuleExtension ( Extension ): TYPE = \"auth_rule\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AuthRuleExtension . TYPE def load ( self ): super () . load () self . listen_events () def check_rules ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6: CREATE_LOGIN_PAGE_RULES\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 \"\"\" for config in self . get_tenant_configs ( event . tenant ): self . check_rule ( event , config ) @abstractmethod def check_rule ( self , event , config ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 config (TenantExtensionConfig): \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass def register_auth_rule_schema ( self , schema , auth_rule_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u89c4\u5219\u8fd0\u884c\u65f6schema Args: schema (Schema): schema\u63cf\u8ff0 auth_rule_type (str): \u8ba4\u8bc1\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_rule_type ) self . register_composite_config_schema ( schema , auth_rule_type , exclude = [ 'extension' ]) def listen_events ( self ): \"\"\"\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . listen_event ( CREATE_LOGIN_PAGE_RULES , self . check_rules ) composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/auth_rule.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 check_rule ( self , event , config ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required config TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e required Source code in arkid/core/extension/auth_rule.py @abstractmethod def check_rule ( self , event , config ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 config (TenantExtensionConfig): \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass check_rules ( self , event , ** kwargs ) # \u54cd\u5e94\u4e8b\u4ef6: CREATE_LOGIN_PAGE_RULES\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_rule.py def check_rules ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6: CREATE_LOGIN_PAGE_RULES\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 \"\"\" for config in self . get_tenant_configs ( event . tenant ): self . check_rule ( event , config ) listen_events ( self ) # \u76d1\u542c\u4e8b\u4ef6 Source code in arkid/core/extension/auth_rule.py def listen_events ( self ): \"\"\"\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . listen_event ( CREATE_LOGIN_PAGE_RULES , self . check_rules ) load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/auth_rule.py def load ( self ): super () . load () self . listen_events () register_auth_rule_schema ( self , schema , auth_rule_type ) # \u6ce8\u518c\u8ba4\u8bc1\u89c4\u5219\u8fd0\u884c\u65f6schema Parameters: Name Type Description Default schema Schema schema\u63cf\u8ff0 required auth_rule_type str \u8ba4\u8bc1\u89c4\u5219\u7c7b\u578b required Source code in arkid/core/extension/auth_rule.py def register_auth_rule_schema ( self , schema , auth_rule_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u89c4\u5219\u8fd0\u884c\u65f6schema Args: schema (Schema): schema\u63cf\u8ff0 auth_rule_type (str): \u8ba4\u8bc1\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_rule_type ) self . register_composite_config_schema ( schema , auth_rule_type , exclude = [ 'extension' ]) \u793a\u4f8b # extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension ( AuthRuleExtension ) # Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py class AuthRuleRetryTimesExtension ( AuthRuleExtension ): def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" ) def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) ) def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 ) def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id ))) def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \" def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \" def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" ) auth_fail ( self , event , ** kwargs ) # \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Parameters: Name Type Description Default event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True before_auth ( self , event , ** kwargs ) # \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Parameters: Name Type Description Default event \u4e8b\u4ef6 required Returns: Type Description tuple(bool,dict) \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None check_refresh_status ( self , tenant , host , config_id ) # \u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description bool \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id ))) check_retry_times ( self , tenant , host , config_id , limited = 3 ) # \u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required limited int \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. 3 Returns: Type Description bool \u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited check_rule ( self , event , config ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required config TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) ) create_extension_config_schema ( self ) # \u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" ) gen_key ( self , host , config_id ) # \u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \" gen_refresh_key ( self , host , config_id ) # \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \" load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" ) set_refresh_status ( self , tenant , host , config_id ) # \u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 )","title":"\u8ba4\u8bc1\u89c4\u5219"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#_1","text":"\u8ba4\u8bc1\u89c4\u5219\u4e3a\u4e00\u7cfb\u5217\u8ba4\u8bc1\u56e0\u7d20\u7684\u6269\u5145\uff0c\u4e32\u8054\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u5b9e\u73b0\u8ba4\u8bc1\u56e0\u7d20\u95f4\u7684\u534f\u4f5c\uff0c\u4ee5\u5b8c\u6210\u590d\u6742\u7684\u8ba4\u8bc1\u8fc7\u7a0b","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#_2","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u8ba4\u8bc1\u89c4\u5219\u63d2\u4ef6\u65f6\uff0c\u9700\u7ee7\u627fAuthRuleExtension\u57fa\u7c7b\u5e76\u91cd\u8f7dcheck_rule\u62bd\u8c61\u65b9\u6cd5\uff0c\u76d1\u542c\u7cfb\u7edf\u4e8b\u4ef6\u5e76\u4ee5\u4e8b\u4ef6\u673a\u5236\u4e32\u8054\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5176\u57fa\u7840\u6d41\u7a0b\u5982\u4e0b\uff1a sequenceDiagram participant U as \u5ba2\u6237\u7aef participant C as \u5e73\u53f0\u6838\u5fc3 participant B as \u8ba4\u8bc1\u89c4\u5219\u63d2\u4ef6 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u76d1\u542cCREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 U->>C: \u8bf7\u6c42\u83b7\u53d6\u767b\u9646\u9875\u9762 C->>B: \u89e6\u53d1CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 B->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de C->>U: \u6e32\u67d3\u767b\u5f55\u9875\u9762","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#_3","text":"check_rule","title":"\u62bd\u8c61\u51fd\u6570"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension","text":"Source code in arkid/core/extension/auth_rule.py class AuthRuleExtension ( Extension ): TYPE = \"auth_rule\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AuthRuleExtension . TYPE def load ( self ): super () . load () self . listen_events () def check_rules ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6: CREATE_LOGIN_PAGE_RULES\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 \"\"\" for config in self . get_tenant_configs ( event . tenant ): self . check_rule ( event , config ) @abstractmethod def check_rule ( self , event , config ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 config (TenantExtensionConfig): \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass def register_auth_rule_schema ( self , schema , auth_rule_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u89c4\u5219\u8fd0\u884c\u65f6schema Args: schema (Schema): schema\u63cf\u8ff0 auth_rule_type (str): \u8ba4\u8bc1\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_rule_type ) self . register_composite_config_schema ( schema , auth_rule_type , exclude = [ 'extension' ]) def listen_events ( self ): \"\"\"\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . listen_event ( CREATE_LOGIN_PAGE_RULES , self . check_rules )","title":"AuthRuleExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/auth_rule.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.check_rule","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required config TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e required Source code in arkid/core/extension/auth_rule.py @abstractmethod def check_rule ( self , event , config ): \"\"\"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 config (TenantExtensionConfig): \u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass","title":"check_rule()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.check_rules","text":"\u54cd\u5e94\u4e8b\u4ef6: CREATE_LOGIN_PAGE_RULES\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required Source code in arkid/core/extension/auth_rule.py def check_rules ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6: CREATE_LOGIN_PAGE_RULES\uff0c\u904d\u5386\u6240\u6709\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u6821\u9a8c\u662f\u5426\u901a\u8fc7\u89c4\u5219\u5e76\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c Args: event (Event): CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 \"\"\" for config in self . get_tenant_configs ( event . tenant ): self . check_rule ( event , config )","title":"check_rules()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.listen_events","text":"\u76d1\u542c\u4e8b\u4ef6 Source code in arkid/core/extension/auth_rule.py def listen_events ( self ): \"\"\"\u76d1\u542c\u4e8b\u4ef6 \"\"\" self . listen_event ( CREATE_LOGIN_PAGE_RULES , self . check_rules )","title":"listen_events()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/auth_rule.py def load ( self ): super () . load () self . listen_events ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#arkid.core.extension.auth_rule.AuthRuleExtension.register_auth_rule_schema","text":"\u6ce8\u518c\u8ba4\u8bc1\u89c4\u5219\u8fd0\u884c\u65f6schema Parameters: Name Type Description Default schema Schema schema\u63cf\u8ff0 required auth_rule_type str \u8ba4\u8bc1\u89c4\u5219\u7c7b\u578b required Source code in arkid/core/extension/auth_rule.py def register_auth_rule_schema ( self , schema , auth_rule_type ): \"\"\"\u6ce8\u518c\u8ba4\u8bc1\u89c4\u5219\u8fd0\u884c\u65f6schema Args: schema (Schema): schema\u63cf\u8ff0 auth_rule_type (str): \u8ba4\u8bc1\u89c4\u5219\u7c7b\u578b \"\"\" self . register_config_schema ( schema , self . package + '_' + auth_rule_type ) self . register_composite_config_schema ( schema , auth_rule_type , exclude = [ 'extension' ])","title":"register_auth_rule_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension","text":"Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py class AuthRuleRetryTimesExtension ( AuthRuleExtension ): def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" ) def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) ) def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 ) def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id ))) def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \" def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \" def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" )","title":"AuthRuleRetryTimesExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.auth_fail","text":"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Parameters: Name Type Description Default event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True","title":"auth_fail()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.before_auth","text":"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Parameters: Name Type Description Default event \u4e8b\u4ef6 required Returns: Type Description tuple(bool,dict) \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None","title":"before_auth()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.check_refresh_status","text":"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description bool \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id )))","title":"check_refresh_status()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.check_retry_times","text":"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required limited int \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. 3 Returns: Type Description bool \u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited","title":"check_retry_times()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.check_rule","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required config TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) )","title":"check_rule()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.create_extension_config_schema","text":"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" )","title":"create_extension_config_schema()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.gen_key","text":"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \"","title":"gen_key()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.gen_refresh_key","text":"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \"","title":"gen_refresh_key()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.set_refresh_status","text":"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 )","title":"set_refresh_status()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","text":"\u529f\u80fd\u4ecb\u7ecd # \u8d26\u6237\u751f\u547d\u5468\u671f\uff0c\u7528\u4e8e\u5904\u7406\u8d26\u6237\u521b\u5efa\uff0c\u53d8\u66f4\uff0c\u7981\u7528\u7b49\u8fc7\u7a0b\u4e2d\u8d26\u6237\u5c5e\u6027\u76f8\u5173\u7684\u903b\u8f91\uff0c\u63d2\u4ef6\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7075\u6d3b\u5730\u6dfb\u52a0\u81ea\u5df1\u7684\u903b\u8f91 \u5b9e\u73b0\u601d\u8def # ArkID\u6838\u5fc3\u63d0\u4f9b\u63a5\u53e3\u521b\u5efa\u548c\u66f4\u65b0\u751f\u547d\u5468\u671f\u7684\u5b9a\u65f6\u4efb\u52a1: arkid.core.tasks.tasks.account_life_periodic_task \u5b9a\u65f6\u4efb\u52a1 account_life_periodic_task \u8fd0\u884c\u65f6\u4f1a\u53d1\u9001 ACCOUNT_LIFE_PERIODIC_TASK \u4e8b\u4ef6 \u63d2\u4ef6\u57fa\u7c7b\u4e2d\u4f1a\u76d1\u542c\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u5728\u4e8b\u4ef6\u5904\u7406\u51fd\u6570 periodic_task_event_handler \u4e2d\u8c03\u7528\u62bd\u8c61\u65b9\u6cd5 periodic_task \u5177\u4f53\u63d2\u4ef6\u4e2d\u8986\u76d6\u62bd\u8c61\u65b9\u6cd5 periodic_task \u5b9e\u73b0\u5177\u4f53\u7684\u903b\u8f91 \u62bd\u8c61\u65b9\u6cd5 # periodic_task \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.account_life.AccountLifeExtension ( Extension ) # Source code in arkid/core/extension/account_life.py class AccountLifeExtension ( Extension ): TYPE = \"account_life\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AccountLifeExtension . TYPE def load ( self ): super () . load () self . listen_event ( core_event . ACCOUNT_LIFE_PERIODIC_TASK , self . periodic_task_event_handler ) @abstractmethod def periodic_task ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" pass def periodic_task_event_handler ( self , event , ** kwargs ): self . periodic_task ( event , ** kwargs ) def register_account_life_schema ( self , schema , config_type ): self . register_config_schema ( schema , self . package + '_' + config_type ) self . register_composite_config_schema ( schema , config_type , exclude = [ 'extension' ] ) composite_model ( BaseModel ) django-model # TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/account_life.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' )) config : JSONField blank django-field # Runtime Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : ForeignKey django-field # \u63d2\u4ef6 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # \u540d\u79f0 tenant : ForeignKey django-field # \u79df\u6237 type : CharField django-field # \u7c7b\u578b updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/account_life.py def load ( self ): super () . load () self . listen_event ( core_event . ACCOUNT_LIFE_PERIODIC_TASK , self . periodic_task_event_handler ) periodic_task ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 required Source code in arkid/core/extension/account_life.py @abstractmethod def periodic_task ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" pass \u793a\u4f8b # extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension ( AccountLifeExtension ) # Source code in extension_root/com_longgui_account_life_arkid/__init__.py class AccountLifeArkIDExtension ( AccountLifeExtension ): def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" ) def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline () create_tenant_config ( self , tenant , config , name , type ) # \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" ) periodic_task ( self , event , ** kwargs ) # \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Parameters: Name Type Description Default event arkid.core.event.Event \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_account_life_arkid/__init__.py def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline () update_tenant_config ( self , id , config , name , type ) # \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig","title":"\u8d26\u6237\u751f\u547d\u5468\u671f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_1","text":"\u8d26\u6237\u751f\u547d\u5468\u671f\uff0c\u7528\u4e8e\u5904\u7406\u8d26\u6237\u521b\u5efa\uff0c\u53d8\u66f4\uff0c\u7981\u7528\u7b49\u8fc7\u7a0b\u4e2d\u8d26\u6237\u5c5e\u6027\u76f8\u5173\u7684\u903b\u8f91\uff0c\u63d2\u4ef6\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7075\u6d3b\u5730\u6dfb\u52a0\u81ea\u5df1\u7684\u903b\u8f91","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_2","text":"ArkID\u6838\u5fc3\u63d0\u4f9b\u63a5\u53e3\u521b\u5efa\u548c\u66f4\u65b0\u751f\u547d\u5468\u671f\u7684\u5b9a\u65f6\u4efb\u52a1: arkid.core.tasks.tasks.account_life_periodic_task \u5b9a\u65f6\u4efb\u52a1 account_life_periodic_task \u8fd0\u884c\u65f6\u4f1a\u53d1\u9001 ACCOUNT_LIFE_PERIODIC_TASK \u4e8b\u4ef6 \u63d2\u4ef6\u57fa\u7c7b\u4e2d\u4f1a\u76d1\u542c\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u5728\u4e8b\u4ef6\u5904\u7406\u51fd\u6570 periodic_task_event_handler \u4e2d\u8c03\u7528\u62bd\u8c61\u65b9\u6cd5 periodic_task \u5177\u4f53\u63d2\u4ef6\u4e2d\u8986\u76d6\u62bd\u8c61\u65b9\u6cd5 periodic_task \u5b9e\u73b0\u5177\u4f53\u7684\u903b\u8f91","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_3","text":"periodic_task","title":"\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension","text":"Source code in arkid/core/extension/account_life.py class AccountLifeExtension ( Extension ): TYPE = \"account_life\" composite_schema_map = {} created_composite_schema_list = [] composite_key = 'type' composite_model = TenantExtensionConfig @property def type ( self ): return AccountLifeExtension . TYPE def load ( self ): super () . load () self . listen_event ( core_event . ACCOUNT_LIFE_PERIODIC_TASK , self . periodic_task_event_handler ) @abstractmethod def periodic_task ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" pass def periodic_task_event_handler ( self , event , ** kwargs ): self . periodic_task ( event , ** kwargs ) def register_account_life_schema ( self , schema , config_type ): self . register_config_schema ( schema , self . package + '_' + config_type ) self . register_composite_config_schema ( schema , config_type , exclude = [ 'extension' ] )","title":"AccountLifeExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model","text":"TenantExtensionConfig(id, is_del, is_active, updated, created, tenant, extension, config, name, type) Source code in arkid/core/extension/account_life.py class TenantExtensionConfig ( BaseModel ): class Meta ( object ): verbose_name = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) verbose_name_plural = _ ( \"\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\" ) tenant = models . ForeignKey ( 'core.Tenant' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u79df\u6237' )) extension = models . ForeignKey ( 'Extension' , blank = False , on_delete = models . PROTECT , verbose_name = _ ( '\u63d2\u4ef6' )) config = models . JSONField ( blank = True , default = dict , verbose_name = _ ( 'Runtime Config' , '\u8fd0\u884c\u65f6\u914d\u7f6e' )) name = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u540d\u79f0' )) type = models . CharField ( max_length = 128 , default = '' , verbose_name = _ ( '\u7c7b\u578b' ))","title":"composite_model"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.config","text":"Runtime Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.extension","text":"\u63d2\u4ef6","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.name","text":"\u540d\u79f0","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.type","text":"\u7c7b\u578b","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.composite_model.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/account_life.py def load ( self ): super () . load () self . listen_event ( core_event . ACCOUNT_LIFE_PERIODIC_TASK , self . periodic_task_event_handler )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#arkid.core.extension.account_life.AccountLifeExtension.periodic_task","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 required Source code in arkid/core/extension/account_life.py @abstractmethod def periodic_task ( self , event , ** kwargs ): \"\"\" \u62bd\u8c61\u65b9\u6cd5 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" pass","title":"periodic_task()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension","text":"Source code in extension_root/com_longgui_account_life_arkid/__init__.py class AccountLifeArkIDExtension ( AccountLifeExtension ): def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" ) def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline ()","title":"AccountLifeArkIDExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.create_tenant_config","text":"\u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created","title":"create_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.periodic_task","text":"\u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Parameters: Name Type Description Default event arkid.core.event.Event \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_account_life_arkid/__init__.py def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline ()","title":"periodic_task()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E8%B4%A6%E6%88%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.update_tenant_config","text":"\u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig","title":"update_tenant_config()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/","text":"\u529f\u80fd\u4ecb\u7ecd # \u9759\u6001\u5b58\u50a8\u63d2\u4ef6\u5b9e\u73b0\u5411arkid\u589e\u52a0\u9759\u6001\u6587\u4ef6\uff08\u5982\u56fe\u7247\uff0c\u8bc1\u4e66\u7b49\uff09\u4e0a\u4f20\u7684\u80fd\u529b\uff0c\u5f00\u53d1\u8005\u4ec5\u9700\u7ee7\u627f\u57fa\u7c7b\u5e76\u91cd\u8f7d\u5bf9\u5e94\u62bd\u8c61\u65b9\u6cd5\u5373\u53ef\u3002 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u9759\u6001\u5b58\u50a8\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627fStorageExtension\u57fa\u7c7b\uff0c\u5e76\u91cd\u8f7dsave_file\u7b49\u62bd\u8c61\u51fd\u6570\u5373\u53ef\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a class LocalStorageExtension ( StorageExtension ): def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , ) super () . load () def save_file ( self , file , f_key , * args , ** kwargs ): extension = self . model storage_path = extension . profile . get ( 'storage_path' , './storage/' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks (): fp . write ( chunk ) def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , './storage/' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs \u6587\u4ef6\u5b58\u50a8\u4e0e\u8bfb\u53d6\u793a\u4f8b\u5982\u4e0b\uff1a tenant = request . tenant data = { \"file\" : file , } extension = Extension . active_objects . filter ( type = \"storage\" ) . first () # \u5b58\u50a8\u6587\u4ef6\u4e8b\u4ef6 responses = dispatch_event ( Event ( tag = SAVE_FILE , tenant = tenant , request = request , packages = extension . package , data = data )) if not responses : return ErrorDict ( ErrorCode . STORAGE_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if not data : return ErrorDict ( ErrorCode . STORAGE_FAILED ) #\u8bfb\u53d6\u6587\u4ef6\u4e8b\u4ef6 t_responses = dispatch_event ( Event ( tag = READ_FILE , tenant = tenant , packages = extension . package , data = { \"url\" : data })) if not t_responses : return ErrorDict ( ErrorCode . STORAGE_NOT_EXISTS ) useless , ( data , extension ) = t_responses [ 0 ] if not data : print ( \"\u8bfb\u53d6\u5931\u8d25\" ) \u62bd\u8c61\u51fd\u6570 # save_file resolve read \u57fa\u7c7b\u5b9a\u4e49 # arkid.core.extension.storage.StorageExtension ( Extension ) # Source code in arkid/core/extension/storage.py class StorageExtension ( Extension ): TYPE = \"storage\" @property def type ( self ): return StorageExtension . TYPE def load ( self ): super () . load () self . listen_event ( SAVE_FILE , self . event_save_file ) self . listen_event ( READ_FILE , self . event_read_file ) def event_save_file ( self , event , ** kwargs ): tenant = event . tenant file = event . data . get ( 'file' , None ) fileurl = event . data . get ( 'fileurl' , None ) if fileurl : import requests response = requests . get ( fileurl , stream = True ) f_key = self . generate_key ( 'temp.jpg' ) self . save_file ( None , f_key , response , event ) else : f_key = self . generate_key ( file . name ) self . save_file ( file , f_key , event ) return self . resolve ( f_key , tenant , None , event ) def event_read_file ( self , event , ** kwargs ): file_url = event . data [ \"url\" ] return self . read ( tenant_id = event . tenant . id , file_url = file_url , ** kwargs ) @abstractmethod def save_file ( self , file , f_key : str , response = None , ** kwargs ): \"\"\"\u4fdd\u5b58\u6587\u4ef6 Args: file (File): \u6587\u4ef6\u5bf9\u8c61 f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 \"\"\" pass @abstractmethod def resolve ( self , f_key : str , tenant , ** kwargs ): \"\"\"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Args: f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 tenant (Tenant): \u79df\u6237 \"\"\" pass @abstractmethod def read ( self , file_url : str , ** kwargs ): \"\"\"\u901a\u8fc7\u6587\u4ef6\u94fe\u63a5\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: file_url (str): \u6587\u4ef6\u94fe\u63a5 \"\"\" pass def generate_key ( self , file_name : str ): \"\"\"\u751f\u6210\u5b58\u50a8\u6587\u4ef6\u540d Args: file_name (str): \u539f\u59cb\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6\u540e\u7f00 Returns: str: \u6587\u4ef6\u540d \"\"\" key = ' {} . {} ' . format ( uuid . uuid4 () . hex , file_name . split ( '.' )[ - 1 ], ) return key generate_key ( self , file_name ) # \u751f\u6210\u5b58\u50a8\u6587\u4ef6\u540d Parameters: Name Type Description Default file_name str \u539f\u59cb\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6\u540e\u7f00 required Returns: Type Description str \u6587\u4ef6\u540d Source code in arkid/core/extension/storage.py def generate_key ( self , file_name : str ): \"\"\"\u751f\u6210\u5b58\u50a8\u6587\u4ef6\u540d Args: file_name (str): \u539f\u59cb\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6\u540e\u7f00 Returns: str: \u6587\u4ef6\u540d \"\"\" key = ' {} . {} ' . format ( uuid . uuid4 () . hex , file_name . split ( '.' )[ - 1 ], ) return key load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/storage.py def load ( self ): super () . load () self . listen_event ( SAVE_FILE , self . event_save_file ) self . listen_event ( READ_FILE , self . event_read_file ) read ( self , file_url , ** kwargs ) # \u901a\u8fc7\u6587\u4ef6\u94fe\u63a5\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Parameters: Name Type Description Default file_url str \u6587\u4ef6\u94fe\u63a5 required Source code in arkid/core/extension/storage.py @abstractmethod def read ( self , file_url : str , ** kwargs ): \"\"\"\u901a\u8fc7\u6587\u4ef6\u94fe\u63a5\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: file_url (str): \u6587\u4ef6\u94fe\u63a5 \"\"\" pass resolve ( self , f_key , tenant , ** kwargs ) # \u751f\u6210\u6587\u4ef6\u94fe\u63a5 Parameters: Name Type Description Default f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required tenant Tenant \u79df\u6237 required Source code in arkid/core/extension/storage.py @abstractmethod def resolve ( self , f_key : str , tenant , ** kwargs ): \"\"\"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Args: f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 tenant (Tenant): \u79df\u6237 \"\"\" pass save_file ( self , file , f_key , response = None , ** kwargs ) # \u4fdd\u5b58\u6587\u4ef6 Parameters: Name Type Description Default file File \u6587\u4ef6\u5bf9\u8c61 required f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required Source code in arkid/core/extension/storage.py @abstractmethod def save_file ( self , file , f_key : str , response = None , ** kwargs ): \"\"\"\u4fdd\u5b58\u6587\u4ef6 Args: file (File): \u6587\u4ef6\u5bf9\u8c61 f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 \"\"\" pass \u793a\u4f8b # extension_root.com_longgui_storage_local.LocalStorageExtension ( StorageExtension ) # Source code in extension_root/com_longgui_storage_local/__init__.py class LocalStorageExtension ( StorageExtension ): def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load () def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk ) def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs get_file ( self , request , tenant_id , file_name ) # \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 Source code in extension_root/com_longgui_storage_local/__init__.py def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_storage_local/__init__.py def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load () read ( self , tenant_id , file_url , ** kwargs ) # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e Parameters: Name Type Description Default tenant_id str \u79df\u6237ID required file_url str \u6587\u4ef6\u94fe\u63a5 required Returns: Type Description bytes \u6587\u4ef6\u6570\u636e Source code in extension_root/com_longgui_storage_local/__init__.py def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs resolve ( self , f_key , tenant , * args , ** kwargs ) # \u751f\u6210\u6587\u4ef6\u94fe\u63a5 Parameters: Name Type Description Default f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required tenant Tenant \u79df\u6237 required Source code in extension_root/com_longgui_storage_local/__init__.py def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' save_file ( self , file , f_key , response = None , * args , ** kwargs ) # \u4fdd\u5b58\u6587\u4ef6 Parameters: Name Type Description Default file File \u6587\u4ef6\u5bf9\u8c61 required f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required Source code in extension_root/com_longgui_storage_local/__init__.py def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk )","title":"\u9759\u6001\u5b58\u50a8"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#_1","text":"\u9759\u6001\u5b58\u50a8\u63d2\u4ef6\u5b9e\u73b0\u5411arkid\u589e\u52a0\u9759\u6001\u6587\u4ef6\uff08\u5982\u56fe\u7247\uff0c\u8bc1\u4e66\u7b49\uff09\u4e0a\u4f20\u7684\u80fd\u529b\uff0c\u5f00\u53d1\u8005\u4ec5\u9700\u7ee7\u627f\u57fa\u7c7b\u5e76\u91cd\u8f7d\u5bf9\u5e94\u62bd\u8c61\u65b9\u6cd5\u5373\u53ef\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#_2","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u9759\u6001\u5b58\u50a8\u63d2\u4ef6\u65f6\uff0c\u4ec5\u9700\u7ee7\u627fStorageExtension\u57fa\u7c7b\uff0c\u5e76\u91cd\u8f7dsave_file\u7b49\u62bd\u8c61\u51fd\u6570\u5373\u53ef\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a class LocalStorageExtension ( StorageExtension ): def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , ) super () . load () def save_file ( self , file , f_key , * args , ** kwargs ): extension = self . model storage_path = extension . profile . get ( 'storage_path' , './storage/' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks (): fp . write ( chunk ) def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , './storage/' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs \u6587\u4ef6\u5b58\u50a8\u4e0e\u8bfb\u53d6\u793a\u4f8b\u5982\u4e0b\uff1a tenant = request . tenant data = { \"file\" : file , } extension = Extension . active_objects . filter ( type = \"storage\" ) . first () # \u5b58\u50a8\u6587\u4ef6\u4e8b\u4ef6 responses = dispatch_event ( Event ( tag = SAVE_FILE , tenant = tenant , request = request , packages = extension . package , data = data )) if not responses : return ErrorDict ( ErrorCode . STORAGE_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if not data : return ErrorDict ( ErrorCode . STORAGE_FAILED ) #\u8bfb\u53d6\u6587\u4ef6\u4e8b\u4ef6 t_responses = dispatch_event ( Event ( tag = READ_FILE , tenant = tenant , packages = extension . package , data = { \"url\" : data })) if not t_responses : return ErrorDict ( ErrorCode . STORAGE_NOT_EXISTS ) useless , ( data , extension ) = t_responses [ 0 ] if not data : print ( \"\u8bfb\u53d6\u5931\u8d25\" )","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#_3","text":"save_file resolve read","title":"\u62bd\u8c61\u51fd\u6570"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#_4","text":"","title":"\u57fa\u7c7b\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#arkid.core.extension.storage.StorageExtension","text":"Source code in arkid/core/extension/storage.py class StorageExtension ( Extension ): TYPE = \"storage\" @property def type ( self ): return StorageExtension . TYPE def load ( self ): super () . load () self . listen_event ( SAVE_FILE , self . event_save_file ) self . listen_event ( READ_FILE , self . event_read_file ) def event_save_file ( self , event , ** kwargs ): tenant = event . tenant file = event . data . get ( 'file' , None ) fileurl = event . data . get ( 'fileurl' , None ) if fileurl : import requests response = requests . get ( fileurl , stream = True ) f_key = self . generate_key ( 'temp.jpg' ) self . save_file ( None , f_key , response , event ) else : f_key = self . generate_key ( file . name ) self . save_file ( file , f_key , event ) return self . resolve ( f_key , tenant , None , event ) def event_read_file ( self , event , ** kwargs ): file_url = event . data [ \"url\" ] return self . read ( tenant_id = event . tenant . id , file_url = file_url , ** kwargs ) @abstractmethod def save_file ( self , file , f_key : str , response = None , ** kwargs ): \"\"\"\u4fdd\u5b58\u6587\u4ef6 Args: file (File): \u6587\u4ef6\u5bf9\u8c61 f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 \"\"\" pass @abstractmethod def resolve ( self , f_key : str , tenant , ** kwargs ): \"\"\"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Args: f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 tenant (Tenant): \u79df\u6237 \"\"\" pass @abstractmethod def read ( self , file_url : str , ** kwargs ): \"\"\"\u901a\u8fc7\u6587\u4ef6\u94fe\u63a5\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: file_url (str): \u6587\u4ef6\u94fe\u63a5 \"\"\" pass def generate_key ( self , file_name : str ): \"\"\"\u751f\u6210\u5b58\u50a8\u6587\u4ef6\u540d Args: file_name (str): \u539f\u59cb\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6\u540e\u7f00 Returns: str: \u6587\u4ef6\u540d \"\"\" key = ' {} . {} ' . format ( uuid . uuid4 () . hex , file_name . split ( '.' )[ - 1 ], ) return key","title":"StorageExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#arkid.core.extension.storage.StorageExtension.generate_key","text":"\u751f\u6210\u5b58\u50a8\u6587\u4ef6\u540d Parameters: Name Type Description Default file_name str \u539f\u59cb\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6\u540e\u7f00 required Returns: Type Description str \u6587\u4ef6\u540d Source code in arkid/core/extension/storage.py def generate_key ( self , file_name : str ): \"\"\"\u751f\u6210\u5b58\u50a8\u6587\u4ef6\u540d Args: file_name (str): \u539f\u59cb\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6\u540e\u7f00 Returns: str: \u6587\u4ef6\u540d \"\"\" key = ' {} . {} ' . format ( uuid . uuid4 () . hex , file_name . split ( '.' )[ - 1 ], ) return key","title":"generate_key()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#arkid.core.extension.storage.StorageExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in arkid/core/extension/storage.py def load ( self ): super () . load () self . listen_event ( SAVE_FILE , self . event_save_file ) self . listen_event ( READ_FILE , self . event_read_file )","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#arkid.core.extension.storage.StorageExtension.read","text":"\u901a\u8fc7\u6587\u4ef6\u94fe\u63a5\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Parameters: Name Type Description Default file_url str \u6587\u4ef6\u94fe\u63a5 required Source code in arkid/core/extension/storage.py @abstractmethod def read ( self , file_url : str , ** kwargs ): \"\"\"\u901a\u8fc7\u6587\u4ef6\u94fe\u63a5\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: file_url (str): \u6587\u4ef6\u94fe\u63a5 \"\"\" pass","title":"read()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#arkid.core.extension.storage.StorageExtension.resolve","text":"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Parameters: Name Type Description Default f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required tenant Tenant \u79df\u6237 required Source code in arkid/core/extension/storage.py @abstractmethod def resolve ( self , f_key : str , tenant , ** kwargs ): \"\"\"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Args: f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 tenant (Tenant): \u79df\u6237 \"\"\" pass","title":"resolve()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#arkid.core.extension.storage.StorageExtension.save_file","text":"\u4fdd\u5b58\u6587\u4ef6 Parameters: Name Type Description Default file File \u6587\u4ef6\u5bf9\u8c61 required f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required Source code in arkid/core/extension/storage.py @abstractmethod def save_file ( self , file , f_key : str , response = None , ** kwargs ): \"\"\"\u4fdd\u5b58\u6587\u4ef6 Args: file (File): \u6587\u4ef6\u5bf9\u8c61 f_key (str): \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 \"\"\" pass","title":"save_file()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#_5","text":"","title":"\u793a\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#extension_root.com_longgui_storage_local.LocalStorageExtension","text":"Source code in extension_root/com_longgui_storage_local/__init__.py class LocalStorageExtension ( StorageExtension ): def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load () def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk ) def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs","title":"LocalStorageExtension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#extension_root.com_longgui_storage_local.LocalStorageExtension.get_file","text":"\u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 Source code in extension_root/com_longgui_storage_local/__init__.py def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) )","title":"get_file()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#extension_root.com_longgui_storage_local.LocalStorageExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_storage_local/__init__.py def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load ()","title":"load()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#extension_root.com_longgui_storage_local.LocalStorageExtension.read","text":"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Parameters: Name Type Description Default tenant_id str \u79df\u6237ID required file_url str \u6587\u4ef6\u94fe\u63a5 required Returns: Type Description bytes \u6587\u4ef6\u6570\u636e Source code in extension_root/com_longgui_storage_local/__init__.py def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs","title":"read()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#extension_root.com_longgui_storage_local.LocalStorageExtension.resolve","text":"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Parameters: Name Type Description Default f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required tenant Tenant \u79df\u6237 required Source code in extension_root/com_longgui_storage_local/__init__.py def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } '","title":"resolve()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8/#extension_root.com_longgui_storage_local.LocalStorageExtension.save_file","text":"\u4fdd\u5b58\u6587\u4ef6 Parameters: Name Type Description Default file File \u6587\u4ef6\u5bf9\u8c61 required f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required Source code in extension_root/com_longgui_storage_local/__init__.py def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk )","title":"save_file()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%A1%B5%E9%9D%A2%E4%B8%BB%E9%A2%98/","text":"\u9875\u9762\u4e3b\u9898 # \u6ce8\u610f \u9875\u9762\u66f4\u6362\u4e3b\u9898\u529f\u80fd\u6548\u679c\u8fd8\u672a\u4ee4\u4eba\u6ee1\u610f, \u8bf7\u8c28\u614e\u4f7f\u7528 \u8be5\u6a21\u5757\u524d\u7aef\u5de5\u4f5c\u4eba\u5458\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u6d4b\u8bd5\u4e2d, \u8bf7\u8010\u5fc3\u7b49\u5f85, \u9884\u8ba1\u672c\u6708\u5c55\u793a\u5b8c\u6574\u6548\u679c \u4f7f\u7528\u6307\u5357 # \u79df\u6237\u7ba1\u7406\u5458\u53ef\u4ee5\u5728 \u79df\u6237\u7ba1\u7406 => \u4e3b\u9898\u8bbe\u7f6e \u9875\u9762\u8fdb\u884c\u4e3b\u9898\u7684\u6dfb\u52a0\u548c\u5220\u9664\uff0c\u5728\u521b\u5efa\u6dfb\u52a0\u4e3b\u9898\u65f6\uff0c\u4f1a\u586b\u5165\u4f18\u5148\u7ea7\u53c2\u6570\uff0c\u524d\u7aef\u8bfb\u53d6\u65f6\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u7684\u987a\u5e8f\u8fdb\u884c\u54cd\u5e94\u3002\u5982\u66f4\u65b0\u6216\u5220\u9664\u4e3b\u9898\uff0c\u9700\u5c06\u9875\u9762\u5237\u65b0\u540e\u624d\u4f1a\u770b\u5230\u524d\u7aef\u9875\u9762\u4e3b\u9898\u7684\u53d8\u5316\u3002 \u4e3b\u9898\u8bbe\u7f6e\u5217\u8868\u793a\u610f\u56fe\uff1a \u6548\u679c\u9884\u89c8 # \u4e0b\u9762\u5c06\u9644\u52a0\u51e0\u5f20\u524d\u7aef\u754c\u9762\u7684\u4e3b\u9898\u54cd\u5e94\u6548\u679c\uff0c\u5177\u4f53\u6548\u679c\u4ee5\u5f00\u53d1\u6d4b\u8bd5\u53d1\u5e03\u540e\u4e3a\u51c6\u3002 sketchy\u4e3b\u9898\uff1a darkly\u4e3b\u9898\uff1a \u5f00\u53d1\u6307\u5357 # \u7531\u4e8e\u524d\u7aef\u5f00\u53d1\u4f9d\u8d56Bootstrap\u6846\u67b6\uff0c\u6240\u4ee5\u9009\u7528\u4e86 bootswatch \u4f5c\u4e3a\u4e3b\u9898\u8bbe\u7f6e\u548c\u5f00\u53d1\u7684\u53c2\u8003\u3002 \u4e3b\u9898\u63d2\u4ef6\u548c\u6837\u5f0f\u6587\u4ef6\u7684\u5f00\u53d1\u53ef\u4ee5\u53c2\u8003\u8be5\u7f51\u5740\u4e2d\u7684\u4e3b\u9898\u6587\u4ef6\uff0c\u4ee5\u4e0a\u4e3b\u9898\u5747\u6765\u81ea\u8be5\u4e3b\u9898\u7f51\u7ad9\u3002 \u8be5\u7f51\u7ad9\u7684\u4e3b\u9898\u3002\u540e\u7eed\u5c06\u5728\u8be5\u6587\u6863\u4e2d\u53d1\u5e03\u4e00\u4e9b\u5f00\u53d1\u6837\u5f0f\u6587\u4ef6\u7684\u7ec6\u8282\u548c\u6ce8\u610f\u4e8b\u9879\u3002","title":"\u9875\u9762\u4e3b\u9898"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%A1%B5%E9%9D%A2%E4%B8%BB%E9%A2%98/#_1","text":"\u6ce8\u610f \u9875\u9762\u66f4\u6362\u4e3b\u9898\u529f\u80fd\u6548\u679c\u8fd8\u672a\u4ee4\u4eba\u6ee1\u610f, \u8bf7\u8c28\u614e\u4f7f\u7528 \u8be5\u6a21\u5757\u524d\u7aef\u5de5\u4f5c\u4eba\u5458\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u6d4b\u8bd5\u4e2d, \u8bf7\u8010\u5fc3\u7b49\u5f85, \u9884\u8ba1\u672c\u6708\u5c55\u793a\u5b8c\u6574\u6548\u679c","title":"\u9875\u9762\u4e3b\u9898"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%A1%B5%E9%9D%A2%E4%B8%BB%E9%A2%98/#_2","text":"\u79df\u6237\u7ba1\u7406\u5458\u53ef\u4ee5\u5728 \u79df\u6237\u7ba1\u7406 => \u4e3b\u9898\u8bbe\u7f6e \u9875\u9762\u8fdb\u884c\u4e3b\u9898\u7684\u6dfb\u52a0\u548c\u5220\u9664\uff0c\u5728\u521b\u5efa\u6dfb\u52a0\u4e3b\u9898\u65f6\uff0c\u4f1a\u586b\u5165\u4f18\u5148\u7ea7\u53c2\u6570\uff0c\u524d\u7aef\u8bfb\u53d6\u65f6\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u7684\u987a\u5e8f\u8fdb\u884c\u54cd\u5e94\u3002\u5982\u66f4\u65b0\u6216\u5220\u9664\u4e3b\u9898\uff0c\u9700\u5c06\u9875\u9762\u5237\u65b0\u540e\u624d\u4f1a\u770b\u5230\u524d\u7aef\u9875\u9762\u4e3b\u9898\u7684\u53d8\u5316\u3002 \u4e3b\u9898\u8bbe\u7f6e\u5217\u8868\u793a\u610f\u56fe\uff1a","title":"\u4f7f\u7528\u6307\u5357"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%A1%B5%E9%9D%A2%E4%B8%BB%E9%A2%98/#_3","text":"\u4e0b\u9762\u5c06\u9644\u52a0\u51e0\u5f20\u524d\u7aef\u754c\u9762\u7684\u4e3b\u9898\u54cd\u5e94\u6548\u679c\uff0c\u5177\u4f53\u6548\u679c\u4ee5\u5f00\u53d1\u6d4b\u8bd5\u53d1\u5e03\u540e\u4e3a\u51c6\u3002 sketchy\u4e3b\u9898\uff1a darkly\u4e3b\u9898\uff1a","title":"\u6548\u679c\u9884\u89c8"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/%E9%A1%B5%E9%9D%A2%E4%B8%BB%E9%A2%98/#_4","text":"\u7531\u4e8e\u524d\u7aef\u5f00\u53d1\u4f9d\u8d56Bootstrap\u6846\u67b6\uff0c\u6240\u4ee5\u9009\u7528\u4e86 bootswatch \u4f5c\u4e3a\u4e3b\u9898\u8bbe\u7f6e\u548c\u5f00\u53d1\u7684\u53c2\u8003\u3002 \u4e3b\u9898\u63d2\u4ef6\u548c\u6837\u5f0f\u6587\u4ef6\u7684\u5f00\u53d1\u53ef\u4ee5\u53c2\u8003\u8be5\u7f51\u5740\u4e2d\u7684\u4e3b\u9898\u6587\u4ef6\uff0c\u4ee5\u4e0a\u4e3b\u9898\u5747\u6765\u81ea\u8be5\u4e3b\u9898\u7f51\u7ad9\u3002 \u8be5\u7f51\u7ad9\u7684\u4e3b\u9898\u3002\u540e\u7eed\u5c06\u5728\u8be5\u6587\u6863\u4e2d\u53d1\u5e03\u4e00\u4e9b\u5f00\u53d1\u6837\u5f0f\u6587\u4ef6\u7684\u7ec6\u8282\u548c\u6ce8\u610f\u4e8b\u9879\u3002","title":"\u5f00\u53d1\u6307\u5357"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%8F%91%E5%B8%83/%20%E6%B5%8B%E8%AF%95/","text":"","title":" \u6d4b\u8bd5"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/%20%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%8F%91%E5%B8%83/%E5%8F%91%E5%B8%83/","text":"","title":"\u53d1\u5e03"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/","text":"\u5185\u6838API # API # arkid.core.api # \u901a\u7528 OpenAPI Schema # arkid.core.schema # RootSchema ( Schema ) pydantic-model # __setattr__ ( self , item , value ) special # Implement setattr(self, name, value). dict ( self , ** kwargs ) # Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. \u524d\u7aef\u9875\u9762 # arkid.core.pages # CardsPage ( SelectPage ) # \u5361\u7247\u5217\u8868 ChartPage ( FrontPage ) # \u56fe\u8868\u9875\u9762 DescriptionPage ( FrontPage ) # \u63cf\u8ff0\u9875\u9762 FormPage ( FrontPage ) # \u8868\u5355\u9875\u9762 FrontPage ( DeepSN ) # \u524d\u7aef\u9875\u9762\u914d\u7f6e\u7c7b Examples: >>> from arkid.core import pages >>> from arkid.core.translation import gettext_default as _ >>> >>> # \u7533\u660e\u4e00\u4e2a\u9875\u9762 >>> page = pages . FrontPage ( >>> tag = \"user_list\" , >>> name = \"user_list\" , >>> page_type = pages . FrontPageType . TABLE_PAGE , >>> init_action = pages . FrontAction ( >>> path = '/api/v1/tenant/ {tenant_id} /users/' , >>> method = pages . FrontActionMethod . GET >>> ) >>> ) >>> # \u6dfb\u52a0\u5c40\u90e8\u52a8\u4f5c >>> page . add_local_action ( >>> [ >>> pages . FrontAction ( >>> name = _ ( \"\u7f16\u8f91\" ), >>> page = user_edit_page , >>> icon = \"icon-edit\" , >>> action_type = pages . FrontActionType . OPEN_ACTION >>> ), >>> ... >>> ] >>> ) >>> # \u6dfb\u52a0\u5168\u5c40\u52a8\u4f5c >>> page . add_global_action ( >>> [ >>> pages . FrontAction ( >>> name = \"\u521b\u5efa\" , >>> page = user_create_page , >>> icon = \"icon-create\" , >>> action_type = pages . FrontActionType . OPEN_ACTION >>> ) >>> ] >>> ) __init__ ( self , name , tag = None , tag_pre = None , type =< FrontPageType . TABLE_PAGE : 'table' > , * args , ** kwargs ) special # \u521d\u59cb\u5316\u51fd\u6570 Parameters: Name Type Description Default name str \u9875\u9762\u540d\u79f0 required page_type FrontPageType \u9875\u9762\u7c7b\u578b required init_action FrontAction|OrderedDict \u521d\u59cb\u5316\u52a8\u4f5c required global_actions list \u5168\u5c40\u52a8\u4f5c required local_actions list \u672c\u5730\u52a8\u4f5c required tag str \u6807\u8bc6. None tag_pre str \u6807\u8bc6\u524d\u7f00. None add_global_actions ( self , actions ) # \u6dfb\u52a0\u5168\u5c40\u52a8\u4f5c Parameters: Name Type Description Default actions FrontAction|OrderedDict \u52a8\u4f5c\u5217\u8868 required add_local_actions ( self , actions ) # \u6dfb\u52a0\u8868\u5355\u52a8\u4f5c Parameters: Name Type Description Default actions FrontAction|OrderedDict \u52a8\u4f5c\u5217\u8868 required add_node_actions ( self , actions ) # \u6dfb\u52a0\u8868\u5355\u52a8\u4f5c Parameters: Name Type Description Default actions FrontAction|OrderedDict \u52a8\u4f5c\u5217\u8868 required add_tag_pre ( self , tag_pre ) # \u6dfb\u52a0\u6807\u8bc6\u524d\u7f00 \u7528\u4e8e\u63d2\u4ef6\u4e2d\u751f\u6210\u9875\u9762\u65f6\u7ed9\u9875\u9762\u7684\u6807\u8bc6\u6dfb\u52a0\u524d\u7f00 Parameters: Name Type Description Default tag_pre str \u524d\u7f00 required FrontPageType ( Enum ) # \u524d\u7aef\u9875\u9762\u7c7b\u578b\u679a\u4e3e\u7c7b Type\u9875\u9762\u7c7b\u578b [\u53ef\u6269\u5c55]: - \u8868\u683c\u578b\u9875\u9762 (table) - \u8868\u5355\u578b\u9875\u9762 (form) - \u63cf\u8ff0\u578b\u9875\u9762 (description) - \u6811\u72b6\u578b\u9875\u9762 (tree) - \u5207\u6362\u578b\u9875\u9762 (tabs)- \u6682\u4e0d\u652f\u6301 - \u5217\u8868\u578b\u9875\u9762 (list)- \u6682\u4e0d\u652f\u6301 - \u5361\u7247\u578b\u9875\u9762 (cards)- \u6682\u4e0d\u652f\u6301 - \u7f51\u683c\u578b\u9875\u9762 (grid)- \u6682\u4e0d\u652f\u6301 - \u6b65\u9aa4\u578b\u9875\u9762 (step)- \u6682\u4e0d\u652f\u6301 GridPage ( FrontPage ) # \u7f51\u683c\u9875\u9762 ListPage ( SelectPage ) # \u5217\u8868\u9875\u9762 SelectPage ( FrontPage ) # \u9009\u62e9\u578b\u9875\u9762 StepPage ( FrontPage ) # \u6b65\u9aa4\u9875\u9762 TablePage ( SelectPage ) # \u8868\u683c\u9875\u9762 TabsPage ( FrontPage ) # \u7f51\u683c\u9875\u9762 TreePage ( SelectPage ) # \u6811\u5f62\u9875\u9762 get_global_pages () # \u83b7\u53d6\u9875\u9762\u5217\u8868 register_front_pages ( pages ) # \u6ce8\u518c\u524d\u7aef\u9875\u9762 Parameters: Name Type Description Default pages List|FrontPage \u524d\u7aef\u9875\u9762 required unregister_front_pages ( pages ) # \u5378\u8f7d\u9875\u9762 Parameters: Name Type Description Default pages List|FrontPage \u524d\u7aef\u9875\u9762 required \u524d\u7aef\u8def\u7531 # arkid.core.routers # FrontRouter ( DeepSN ) # _\u524d\u7aef\u8def\u7531\u7c7b Examples: >>> from arkid.core import routers >>> >>> router = routers . FrontRouter ( >>> path = 'user' , >>> name = '\u7528\u6237\u7ba1\u7406' , >>> icon = 'user' , >>> children = [ >>> routers . FrontRouter ( >>> path = user_list_tag , >>> name = '\u7528\u6237\u7ba1\u7406' , >>> icon = 'user' , >>> page = user_list_tag , >>> ) >>> ], >>> ) __init__ ( self , path , name = None , icon = None , children = None , redirect = None , page = None , url = None , web = True , mobile = False , * args , ** kwargs ) special # \u521d\u59cb\u5316 Parameters: Name Type Description Default path str \u8def\u7531\u8def\u5f84 required name str \u8def\u7531\u540d\u79f0. Defaults to None. None icon str \u56fe\u6807. Defaults to None. None children List \u5b50\u8def\u7531\u5217\u8868. Defaults to None. None redirect str \u8df3\u8f6c\u94fe\u63a5. Defaults to None. None page FrontPage \u9875\u9762. Defaults to None. None url str \u94fe\u63a5\u5730\u5740. Defaults to None. None add_children ( self , child ) # \u6dfb\u52a0\u5b50\u8def\u7531 Parameters: Name Type Description Default child OrderedDict \u5b50\u8def\u7531\u63cf\u8ff0 required change_page_tag ( self , header ) # \u66f4\u6539\u9875\u9762\u6807\u8bc6\uff0c\u4e3b\u8981\u7528\u4e8e\u63d2\u4ef6\u4e2d\u6dfb\u52a0\u6807\u8bc6\u524d\u7f00\u4ee5\u6ce8\u660e\u8be5\u9875\u9762\u6765\u6e90 \u6ce8\u610f\uff1a \u6b64\u5904\u4f1a\u5c06\u5b50\u9875\u9762\u6807\u8bc6\u4e00\u5e76\u66f4\u6539 Parameters: Name Type Description Default header str \u9875\u9762\u6807\u8bc6\u524d\u7f00 required remove_child ( self , child ) # \u79fb\u9664\u5b50\u8def\u7531 Parameters: Name Type Description Default child OrderedDict \u5b50\u8def\u7531\u63cf\u8ff0 required register_front_routers ( routers , primary = None ) # \u6ce8\u518c\u524d\u7aef\u8def\u7531 Parameters: Name Type Description Default routers list \u8def\u7531\u5217\u8868\u6216\u8005\u8def\u7531 required primary str \u4e3b\u8def\u7531. Defaults to ''. None unregister_front_routers ( routers , primary = None ) # \u5378\u8f7d\u524d\u7aef\u8def\u7531 Parameters: Name Type Description Default routers list \u8def\u7531\u5217\u8868\u6216\u8def\u7531 required primary str \u4e3b\u8def\u7531. Defaults to ''. None Token # arkid.core.token # \u8bed\u8a00\u56fd\u9645\u5316 # arkid.core.translation # gettext_default ( id , msg = None , lang = '\u7b80\u4f53\u4e2d\u6587' ) # \u591a\u8bed\u8a00\u9ed8\u8ba4\u65b9\u6cd5 Parameters: Name Type Description Default id str \u6807\u8bc6 required msg str \u8bed\u8a00\u6587\u5b57. Defaults to None. None lang str \u8bed\u8a00\u79cd\u7c7b. Defaults to \"\u7b80\u4f53\u4e2d\u6587\". '\u7b80\u4f53\u4e2d\u6587' Returns: Type Description str id \u6807\u8bc6 \u9519\u8bef\u4ee3\u7801 # arkid.core.error # ErrorCode ( Enum ) # An enumeration.","title":"\u5185\u6838API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#api","text":"","title":"\u5185\u6838API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#api_1","text":"","title":"API"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.api","text":"","title":"api"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#openapi-schema","text":"","title":"\u901a\u7528 OpenAPI Schema"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.schema","text":"","title":"schema"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.schema.RootSchema","text":"","title":"RootSchema"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.schema.RootSchema.__setattr__","text":"Implement setattr(self, name, value).","title":"__setattr__()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.schema.RootSchema.dict","text":"Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.","title":"dict()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#_1","text":"","title":"\u524d\u7aef\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages","text":"","title":"pages"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.CardsPage","text":"\u5361\u7247\u5217\u8868","title":"CardsPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.ChartPage","text":"\u56fe\u8868\u9875\u9762","title":"ChartPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.DescriptionPage","text":"\u63cf\u8ff0\u9875\u9762","title":"DescriptionPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FormPage","text":"\u8868\u5355\u9875\u9762","title":"FormPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPage","text":"\u524d\u7aef\u9875\u9762\u914d\u7f6e\u7c7b Examples: >>> from arkid.core import pages >>> from arkid.core.translation import gettext_default as _ >>> >>> # \u7533\u660e\u4e00\u4e2a\u9875\u9762 >>> page = pages . FrontPage ( >>> tag = \"user_list\" , >>> name = \"user_list\" , >>> page_type = pages . FrontPageType . TABLE_PAGE , >>> init_action = pages . FrontAction ( >>> path = '/api/v1/tenant/ {tenant_id} /users/' , >>> method = pages . FrontActionMethod . GET >>> ) >>> ) >>> # \u6dfb\u52a0\u5c40\u90e8\u52a8\u4f5c >>> page . add_local_action ( >>> [ >>> pages . FrontAction ( >>> name = _ ( \"\u7f16\u8f91\" ), >>> page = user_edit_page , >>> icon = \"icon-edit\" , >>> action_type = pages . FrontActionType . OPEN_ACTION >>> ), >>> ... >>> ] >>> ) >>> # \u6dfb\u52a0\u5168\u5c40\u52a8\u4f5c >>> page . add_global_action ( >>> [ >>> pages . FrontAction ( >>> name = \"\u521b\u5efa\" , >>> page = user_create_page , >>> icon = \"icon-create\" , >>> action_type = pages . FrontActionType . OPEN_ACTION >>> ) >>> ] >>> )","title":"FrontPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPage.__init__","text":"\u521d\u59cb\u5316\u51fd\u6570 Parameters: Name Type Description Default name str \u9875\u9762\u540d\u79f0 required page_type FrontPageType \u9875\u9762\u7c7b\u578b required init_action FrontAction|OrderedDict \u521d\u59cb\u5316\u52a8\u4f5c required global_actions list \u5168\u5c40\u52a8\u4f5c required local_actions list \u672c\u5730\u52a8\u4f5c required tag str \u6807\u8bc6. None tag_pre str \u6807\u8bc6\u524d\u7f00. None","title":"__init__()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPage.add_global_actions","text":"\u6dfb\u52a0\u5168\u5c40\u52a8\u4f5c Parameters: Name Type Description Default actions FrontAction|OrderedDict \u52a8\u4f5c\u5217\u8868 required","title":"add_global_actions()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPage.add_local_actions","text":"\u6dfb\u52a0\u8868\u5355\u52a8\u4f5c Parameters: Name Type Description Default actions FrontAction|OrderedDict \u52a8\u4f5c\u5217\u8868 required","title":"add_local_actions()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPage.add_node_actions","text":"\u6dfb\u52a0\u8868\u5355\u52a8\u4f5c Parameters: Name Type Description Default actions FrontAction|OrderedDict \u52a8\u4f5c\u5217\u8868 required","title":"add_node_actions()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPage.add_tag_pre","text":"\u6dfb\u52a0\u6807\u8bc6\u524d\u7f00 \u7528\u4e8e\u63d2\u4ef6\u4e2d\u751f\u6210\u9875\u9762\u65f6\u7ed9\u9875\u9762\u7684\u6807\u8bc6\u6dfb\u52a0\u524d\u7f00 Parameters: Name Type Description Default tag_pre str \u524d\u7f00 required","title":"add_tag_pre()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.FrontPageType","text":"\u524d\u7aef\u9875\u9762\u7c7b\u578b\u679a\u4e3e\u7c7b Type\u9875\u9762\u7c7b\u578b [\u53ef\u6269\u5c55]: - \u8868\u683c\u578b\u9875\u9762 (table) - \u8868\u5355\u578b\u9875\u9762 (form) - \u63cf\u8ff0\u578b\u9875\u9762 (description) - \u6811\u72b6\u578b\u9875\u9762 (tree) - \u5207\u6362\u578b\u9875\u9762 (tabs)- \u6682\u4e0d\u652f\u6301 - \u5217\u8868\u578b\u9875\u9762 (list)- \u6682\u4e0d\u652f\u6301 - \u5361\u7247\u578b\u9875\u9762 (cards)- \u6682\u4e0d\u652f\u6301 - \u7f51\u683c\u578b\u9875\u9762 (grid)- \u6682\u4e0d\u652f\u6301 - \u6b65\u9aa4\u578b\u9875\u9762 (step)- \u6682\u4e0d\u652f\u6301","title":"FrontPageType"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.GridPage","text":"\u7f51\u683c\u9875\u9762","title":"GridPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.ListPage","text":"\u5217\u8868\u9875\u9762","title":"ListPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.SelectPage","text":"\u9009\u62e9\u578b\u9875\u9762","title":"SelectPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.StepPage","text":"\u6b65\u9aa4\u9875\u9762","title":"StepPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.TablePage","text":"\u8868\u683c\u9875\u9762","title":"TablePage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.TabsPage","text":"\u7f51\u683c\u9875\u9762","title":"TabsPage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.TreePage","text":"\u6811\u5f62\u9875\u9762","title":"TreePage"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.get_global_pages","text":"\u83b7\u53d6\u9875\u9762\u5217\u8868","title":"get_global_pages()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.register_front_pages","text":"\u6ce8\u518c\u524d\u7aef\u9875\u9762 Parameters: Name Type Description Default pages List|FrontPage \u524d\u7aef\u9875\u9762 required","title":"register_front_pages()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.pages.unregister_front_pages","text":"\u5378\u8f7d\u9875\u9762 Parameters: Name Type Description Default pages List|FrontPage \u524d\u7aef\u9875\u9762 required","title":"unregister_front_pages()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#_2","text":"","title":"\u524d\u7aef\u8def\u7531"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers","text":"","title":"routers"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.FrontRouter","text":"_\u524d\u7aef\u8def\u7531\u7c7b Examples: >>> from arkid.core import routers >>> >>> router = routers . FrontRouter ( >>> path = 'user' , >>> name = '\u7528\u6237\u7ba1\u7406' , >>> icon = 'user' , >>> children = [ >>> routers . FrontRouter ( >>> path = user_list_tag , >>> name = '\u7528\u6237\u7ba1\u7406' , >>> icon = 'user' , >>> page = user_list_tag , >>> ) >>> ], >>> )","title":"FrontRouter"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.FrontRouter.__init__","text":"\u521d\u59cb\u5316 Parameters: Name Type Description Default path str \u8def\u7531\u8def\u5f84 required name str \u8def\u7531\u540d\u79f0. Defaults to None. None icon str \u56fe\u6807. Defaults to None. None children List \u5b50\u8def\u7531\u5217\u8868. Defaults to None. None redirect str \u8df3\u8f6c\u94fe\u63a5. Defaults to None. None page FrontPage \u9875\u9762. Defaults to None. None url str \u94fe\u63a5\u5730\u5740. Defaults to None. None","title":"__init__()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.FrontRouter.add_children","text":"\u6dfb\u52a0\u5b50\u8def\u7531 Parameters: Name Type Description Default child OrderedDict \u5b50\u8def\u7531\u63cf\u8ff0 required","title":"add_children()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.FrontRouter.change_page_tag","text":"\u66f4\u6539\u9875\u9762\u6807\u8bc6\uff0c\u4e3b\u8981\u7528\u4e8e\u63d2\u4ef6\u4e2d\u6dfb\u52a0\u6807\u8bc6\u524d\u7f00\u4ee5\u6ce8\u660e\u8be5\u9875\u9762\u6765\u6e90 \u6ce8\u610f\uff1a \u6b64\u5904\u4f1a\u5c06\u5b50\u9875\u9762\u6807\u8bc6\u4e00\u5e76\u66f4\u6539 Parameters: Name Type Description Default header str \u9875\u9762\u6807\u8bc6\u524d\u7f00 required","title":"change_page_tag()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.FrontRouter.remove_child","text":"\u79fb\u9664\u5b50\u8def\u7531 Parameters: Name Type Description Default child OrderedDict \u5b50\u8def\u7531\u63cf\u8ff0 required","title":"remove_child()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.register_front_routers","text":"\u6ce8\u518c\u524d\u7aef\u8def\u7531 Parameters: Name Type Description Default routers list \u8def\u7531\u5217\u8868\u6216\u8005\u8def\u7531 required primary str \u4e3b\u8def\u7531. Defaults to ''. None","title":"register_front_routers()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.routers.unregister_front_routers","text":"\u5378\u8f7d\u524d\u7aef\u8def\u7531 Parameters: Name Type Description Default routers list \u8def\u7531\u5217\u8868\u6216\u8def\u7531 required primary str \u4e3b\u8def\u7531. Defaults to ''. None","title":"unregister_front_routers()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#token","text":"","title":"Token"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.token","text":"","title":"token"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#_3","text":"","title":"\u8bed\u8a00\u56fd\u9645\u5316"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.translation","text":"","title":"translation"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.translation.gettext_default","text":"\u591a\u8bed\u8a00\u9ed8\u8ba4\u65b9\u6cd5 Parameters: Name Type Description Default id str \u6807\u8bc6 required msg str \u8bed\u8a00\u6587\u5b57. Defaults to None. None lang str \u8bed\u8a00\u79cd\u7c7b. Defaults to \"\u7b80\u4f53\u4e2d\u6587\". '\u7b80\u4f53\u4e2d\u6587' Returns: Type Description str id \u6807\u8bc6","title":"gettext_default()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#_4","text":"","title":"\u9519\u8bef\u4ee3\u7801"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.error","text":"","title":"error"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%20%E5%86%85%E6%A0%B8API/#arkid.core.error.ErrorCode","text":"An enumeration.","title":"ErrorCode"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/","text":"OpenAPI Plus # OpenAPI-Plus \u4f7f\u7528 django-ninja \u548c pydantic \u8fdb\u884c\u529f\u80fd\u6269\u5c55\uff0c\u4ee5\u8fbe\u5230\u9002\u914d ArkID \u4e00\u8d26\u901a\u9879\u76ee\u524d\u7aef\u751f\u6210\u7684\u76ee\u7684\u3002 OpenAPI-Plus \u4e3b\u8981\u8bb2\u8ff0\u5bf9\u5176\u8fdb\u884c\u4e86\u54ea\u4e9b\u6269\u5c55\uff0c\u800c\u8fd9\u4e9b\u6269\u5c55\u53c8\u6709\u4ec0\u4e48\u6837\u7684\u542b\u4e49\u5b58\u5728\u5462\uff1f\u8bf7\u7ee7\u7eed\u9605\u8bfb\u6587\u6863\u3002 \u6269\u5c55\u4e00: \u8def\u7531\uff08routers\uff09 # \u5176\u4e3b\u8981\u58f0\u660e\u524d\u7aef\u8def\u7531\u4fe1\u606f\uff0c\u901a\u8fc7\u8bfb\u53d6\u89e3\u6790 routers \u4e2d\u5185\u5bb9\uff0c\u751f\u6210\u524d\u7aef\u4fa7\u8fb9\u680f\u7b49\u5185\u5bb9\u3002\u4e00\u5171\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u7c7b\u522b\uff1a \u6709 Children \u7684\u8def\u7531 \u65e0 Children \u7684\u8def\u7531 \u5173\u952e\u5b57 \u542b\u4e49 \u7c7b\u578b path \u524d\u7aef\u8bbf\u95ee\u8def\u5f84\uff0c\u4f7f\u7528/\u5b57\u7b26\u8fdb\u884c\u53e0\u52a0 string name \u4fa7\u8fb9\u680f\u8def\u7531\u540d\u79f0 string icon \u4fa7\u8fb9\u680f\u8def\u7531\u56fe\u6807\uff0c\u9700\u4e0e\u524d\u7aef\u914d\u5408\u58f0\u660e string hidden \u662f\u5426\u9690\u85cf\uff0c\u5982\u679c\u4e3a true\uff0c\u5219\u4e0d\u5c55\u793a\u5728\u524d\u7aef\u4fa7\u8fb9\u680f\u4e2d boolean page \u8be5\u8def\u7531\u9700\u8981\u6e32\u67d3\u7684\u9875\u9762\uff0c\u5177\u4f53\u4fe1\u606f\u6307\u5411 pages \u6269\u5c55 string url \u76f4\u63a5\u8bbf\u95ee\u8be5URL\u63a5\u53e3\uff0c\u9ed8\u8ba4\u4e3aGET\uff0c\u63a5\u53e3\u8fd4\u56de\u65b0\u7684url\u5730\u5740\uff0c\u653e\u5165iframe\u4e2d\u663e\u793a string web \u662f\u5426\u4e3a\u7535\u8111\u7aef\u4fa7\u8fb9\u680f\uff0c\u53ef\u4ee5\u542b\u6709\u987a\u5e8f number, boolean mobile \u662f\u5426\u4e3a\u624b\u673a\u7aef\u5e95\u8fb9\u680f\uff0c\u5e76\u542b\u6709\u987a\u5e8f number, boolean \u91cd\u8981\u58f0\u660e path \u4e0d\u80fd\u4f7f\u7528 . \u7b49\u7279\u6b8a\u5b57\u7b26\u3002 page \u4e0d\u80fd\u4f7f\u7528 [ ] { } \u7b49\u7279\u6b8a\u5b57\u7b26\u3002 \u6709Children\u8def\u7531\u793a\u4f8b { \"path\" : \"mine\" , \"name\" : \"\u6211\u7684\" , \"icon\" : \"mine\" , \"hidden\" : true , \"children\" : [ { \"path\" : \"profile\" , \"name\" : \"\u4e2a\u4eba\u7ba1\u7406\" , \"page\" : \"mine_profile\" , \"icon\" : \"profile\" }, { \"path\" : \"logout\" , \"name\" : \"\u9000\u51fa\u767b\u5f55\" , \"page\" : \"mine_logout\" , \"icon\" : \"logout\" } ] } \u65e0Children\u8def\u7531\u793a\u4f8b { \"path\" : \"mine\" , \"name\" : \"\u6211\u7684\" , \"icon\" : \"mine\" , \"hidden\" : true , \"page\" : \"mine\" } \u6269\u5c55\u4e8c: \u9875\u9762\u914d\u7f6e\uff08pages\uff09 # \u58f0\u660e\u524d\u7aef\u9875\u9762\u751f\u6210\u6240\u9700\u8981\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u524d\u7aef\u5c06\u4f1a\u6839\u636eOpenAPI\u8fd4\u56de\u7684\u8be5\u9879\u5185\u5bb9\u8fdb\u884c\u89e3\u6790\u5904\u7406\uff0c\u4ece\u800c\u751f\u6210\u524d\u7aef\u5404\u79cd\u7c7b\u578b\u7684\u9875\u9762\u3002\u4e0b\u9762\u5c06\u8be6\u7ec6\u8bf4\u660e\u6bcf\u4e00\u9879\u914d\u7f6e\u7684\u542b\u4e49\u4ee5\u53ca\u5bf9\u5e94\u600e\u4e48\u8868\u8fbe\u548c\u5c55\u793a\u5728\u524d\u7aef\u3002 \u95ee\u9898 \u751f\u6210\u4e00\u4e2a\u8868\u683c\u6216\u8868\u5355\u9875\u9762\uff0c\u9700\u8981\u90a3\u4e9b\u914d\u7f6e\u4fe1\u606f\u5462\uff1f \u751f\u6210\u4e00\u4e2a\u6811\u7ed3\u6784\u9875\u9762\u5462\uff1f \u9875\u9762\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u9875\u9762\u7c7b\u578b # \u9488\u5bf9\u4ee5\u4e0a\u95ee\u9898\uff0c\u5148\u7ed9\u51fa\u6211\u4eec\u76ee\u524d \u5df2\u652f\u6301 \u2714 \u6216 \u5f85\u652f\u6301 \u2718 \u7684\u9875\u9762\u7c7b\u578b\u3002 \u7c7b\u578b \u540d\u79f0 \u652f\u6301\u6027 table \u8868\u683c\u578b\u9875\u9762 \u2714 form \u8868\u5355\u578b\u9875\u9762 \u2714 tree \u6811\u72b6\u6027\u9875\u9762 \u2714 tabs \u5207\u6362\u578b\u9875\u9762 \u2714 description \u63cf\u8ff0\u578b\u9875\u9762 \u2714 cards \u5361\u7247\u578b\u9875\u9762 \u2714 grid \u7f51\u683c\u578b\u9875\u9762 \u2718 list \u5217\u8868\u578b\u9875\u9762 \u2718 step \u6b65\u9aa4\u578b\u9875\u9762 \u2714 \u9875\u9762\u914d\u7f6e # \u5bf9\u9875\u9762\u4e2d\u6240\u9700\u7684\u914d\u7f6e\u8fdb\u884c\u8bf4\u660e\uff0c\u4ee5\u652f\u6301\u4e0a\u8ff0\u5404\u7c7b\u578b\u9875\u9762\u7684\u751f\u6210\u60c5\u5f62\u3002 \u5173\u952e\u5b57 \u542b\u4e49 \u529f\u80fd \u9644\u52a0\u8bf4\u660e type \u9875\u9762\u7c7b\u578b \u751f\u6210\u524d\u7aef\u9875\u9762\u6a21\u677f \u5177\u4f53\u53c2\u8003\u4e0b\u9762\u7684\u9875\u9762\u7c7b\u578b\u8bf4\u660e tag \u9875\u9762\u6807\u8bc6\u7b26 \u5339\u914d\u552f\u4e00\u9875\u9762\u914d\u7f6e \u9875\u9762\u552f\u4e00\u6807\u7b7e name \u9875\u9762\u540d\u79f0 \u5bf9\u5e94\u663e\u793a\u524d\u7aef\u9875\u9762\u6807\u9898 \u9700\u652f\u6301\u4e2d\u82f1\u6587 init_action \u9875\u9762\u521d\u59cb\u5316\u64cd\u4f5c \u83b7\u53d6schema\u548c\u6570\u636e \u5177\u4f53\u53c2\u8003init_action\u8be6\u7ec6\u8bf4\u660e init_data \u521d\u59cb\u5316\u6570\u636e \u521d\u59cb\u5316\u540e\u7684\u8d4b\u503c\u64cd\u4f5c \u9ed8\u8ba4\u4ece\u7236\u7ea7\u6570\u636e\u6c60\u5f00\u59cb\u67e5\u627e global_action \u9875\u9762\u5168\u5c40\u64cd\u4f5c \u751f\u6210\u5168\u5c40\u6309\u94ae\u64cd\u4f5c \u5177\u4f53\u53c2\u8003global_action\u8be6\u7ec6\u8bf4\u660e local_action \u9875\u9762\u5c40\u90e8\u64cd\u4f5c \u751f\u6210\u5c40\u90e8\u6309\u94ae\u64cd\u4f5c \u5177\u4f53\u53c2\u8003local_action\u8be6\u7ec6\u8bf4\u660e node_action \u9875\u9762\u8282\u70b9\u64cd\u4f5c \u751f\u6210\u8282\u70b9\u70b9\u51fb\u64cd\u4f5c \u53ef\u80fd\u5b58\u5728\u4e8etree/cards\u7b49\u9875\u9762\u4e2d\uff0c\u5177\u4f53\u53c2\u8003node_action\u8be6\u7ec6\u8bf4\u660e select \u662f\u5426\u4e3a\u53ef\u9009\u9875\u9762 \u751f\u6210\u53ef\u9009\u9875\u9762 form\u9875\u9762\u4e2d\u65e0\u9700\u8be5\u5b57\u6bb5 pages tabs/step\u591a\u9875\u9762\u6307\u5411 \u751f\u6210tabs/step\u591a\u9875\u9762 \u53ea\u5b58\u5728\u4e8etabs/step\u9875\u9762\u4e2d \u91cd\u8981\u63d0\u793a tag \u4e0d\u80fd\u53ea\u6709 [ ] { } \u7b49\u7279\u6b8a\u5b57\u7b26 tag \u540c\u4e00\u4e2a\u9875\u9762\u4e0b\u4e0d\u8981\u91cd\u590d\u58f0\u660e\u4e00\u4e2a\u9875\u7b7e \u9875\u9762\u64cd\u4f5c # \u9875\u9762\u4e3b\u8981\u914d\u7f6e\u5c31\u662f\u6709\u591a\u4e2a\u64cd\u4f5c\u7ec4\u6210\u7684\u3002\u5305\u542b\u521d\u59cb\u5316\u6570\u636e\u83b7\u53d6\u64cd\u4f5c\uff0c\u589e\u5220\u6539\u67e5\u7b49\u70b9\u51fb\u64cd\u4f5c\u3002\u6240\u4ee5\u64cd\u4f5c\u914d\u7f6e\u6709\u7740\u6781\u4e3a\u91cd\u8981\u7684\u542b\u4e49\u548c\u8be6\u7ec6\u914d\u7f6e\u58f0\u660e\u3002 \u64cd\u4f5c\u7c7b\u578b # \u5173\u952e\u5b57 \u540d\u79f0 \u8be6\u60c5\u8bf4\u660e \u652f\u6301\u6027 direct \u76f4\u63a5\u578b \u5e38\u89c1\u4e8e\u786e\u8ba4\u7f16\u8f91\u6216\u5220\u9664\u4ee5\u53ca\u6811\u8282\u70b9\u70b9\u51fb\u83b7\u53d6Children\u7b49\u64cd\u4f5c \u2714 open \u5f39\u6846\u578b \u6253\u5f00\u5bf9\u8bdd\u6846\uff0c\u5c55\u793a\u65b0\u7684\u4e00\u4e2a\u7c7b\u578b\u9875\u9762\uff0c\u5e38\u89c1\u4e8e\u521b\u5efa\u6216\u7f16\u8f91\u7b49\u64cd\u4f5c \u2714 cascade \u7ea7\u8054\u578b \u5e38\u89c1\u4e8e\u6811\u72b6\u578b\u9875\u9762\u7684\u7ea7\u8054\u9875\u9762\u4f7f\u7528\uff0c\u5f53\u70b9\u51fb\u67d0\u4e2a\u8282\u70b9\u65f6, \u51fa\u73b0\u4e0e\u4e4b\u5e76\u5217\u7684\u6570\u636e\u5c55\u793a\u9875\u9762 \u2714 import \u5bfc\u5165\u578b \u5bfc\u5165\u6587\u4ef6\u6216\u6570\u636e\u65f6\u4f7f\u7528 \u2718 export \u5bfc\u51fa\u578b \u5bfc\u51fa\u6587\u4ef6\u6216\u6570\u636e\u65f6\u4f7f\u7528\uff0c\u5206\u4e3a\u5168\u5bfc\u51fa\u6216\u90e8\u5206\u5bfc\u51fa \u2718 next \u6b65\u9aa4\u578b \u70b9\u51fb\u7ee7\u7eed\u4e0b\u4e00\u6b65\u64cd\u4f5c\uff0c\u6839\u636e\u60c5\u51b5\u81ea\u52a8\u6dfb\u52a0\u4e0a\u4e00\u6b65\u6309\u94ae \u2714 url \u5730\u5740\u578b \u76f4\u63a5\u66f4\u6539\u5f53\u524d\u6d4f\u89c8\u5668\u5730\u5740\u680f\u5730\u5740 \u2714 \u64cd\u4f5c\u914d\u7f6e # \u5173\u952e\u5b57 \u542b\u4e49 \u529f\u80fd tag \u64cd\u4f5c\u6807\u7b7e \u53ef\u7528\u4e8e\u524d\u7aef\u64cd\u4f5c\u540d\u79f0 path API\u63a5\u53e3 \u7528\u4e8e\u5339\u914dschema\u63cf\u8ff0\u548c\u83b7\u53d6\u6570\u636e method API\u63a5\u53e3\u65b9\u6cd5 \u540c\u4e0a type \u64cd\u4f5c\u7c7b\u578b \u65b9\u4fbf\u8bc6\u522b\u64cd\u4f5c\uff0c\u89c1\u4e0a\u65b9\u5177\u4f53\u8bf4\u660e page \u9875\u9762tag \u5f53\u64cd\u4f5c\u7c7b\u578b\u4e3aopen\u65f6\uff0c\u6307\u5411\u6253\u5f00\u9875\u9762\u7684tag name \u64cd\u4f5c\u540d\u79f0 \u524d\u7aef\u9875\u9762\u6309\u94ae\u540d\uff0cnode_action\u65e0\u9700\u5305\u542b\u8be5\u5185\u5bb9 icon \u56fe\u6807 \u53ef\u9009\uff0c\u76ee\u524d\u6682\u672a\u652f\u6301 close \u5173\u95ed\u6761\u4ef6 \u5f00\u5173\u578b\u6309\u94ae\u64cd\u4f5c\u7684\u5173\u95ed\u6761\u4ef6 open \u6253\u5f00\u6761\u4ef6 \u5f00\u5173\u578b\u6309\u94ae\u64cd\u4f5c\u7684\u6253\u5f00\u6761\u4ef6 \u63d0\u793a \u4e0a\u8ff0\u5b57\u6bb5\u5747\u4e3a\u53ef\u9009\u5b57\u6bb5\uff0c\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u58f0\u660e tag\u6216page\u5747\u4e0d\u80fd\u5305\u542b\u7279\u6b8a\u5b57\u7b26 close/open\u4ec5\u652f\u6301bool\u8bf4\u660e\uff0c\u5176\u4ed6\u6761\u4ef6\u5728\u8ba1\u5212\u5f00\u53d1\u4e2d close=True; (\u2714) open=False; (\u2714) close=is_system; (\u2718) open=!is_admin; (\u2718) close=is_system&!is_admin; (\u2718) \u521d\u59cb\u5316\u64cd\u4f5c # init_action\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u83b7\u53d6\u67d0\u4e2a\u9875\u9762Schema\u7ed3\u6784\u548c\u521d\u59cb\u6570\u636e\u3002\u4e5f\u5c31\u662f\u5f53\u4f60\u6253\u5f00\u6216\u770b\u5230\u67d0\u4e2a\u9875\u9762\u65f6\uff0c\u8be5\u64cd\u4f5c\u5c31\u4f1a\u81ea\u52a8\u53d1\u8d77\uff0c\u7136\u540e\u5c06\u83b7\u53d6\u5230\u7684\u6570\u636e\u586b\u5165\u9875\u9762\u4e2d\u3002 \u5176\u4e3b\u8981\u5305\u542b path \u548c method \uff0c\u4e14\u64cd\u4f5c\u7c7b\u578b\u4e3a direct \u7c7b\u578b\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u51fa\u73b0\u3002 { \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"tag\" : \"\" , \"type\" : \"direct\" , } } \u5168\u5c40\u64cd\u4f5c # global_action\u4e3b\u8981\u5b8c\u6210\u9875\u9762\u5168\u5c40\u6309\u94ae\u7684\u751f\u6210\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u5b8c\u6210\u5176\u5bf9\u5e94\u64cd\u4f5c\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002\u6bd4\u5982\u521b\u5efa/\u5bfc\u5165\u7b49\u64cd\u4f5c\u3002 \u5176\u914d\u7f6e\u9700\u8981\u5b8c\u5168\u6309\u7167 \u64cd\u4f5c\u914d\u7f6e \u7684\u8bf4\u660e\u6765\u5b8c\u6210\u3002 { \"global_action\" : { \"create\" : { \"name\" : \"\u65b0\u5efa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"open\" , \"page\" : \"user_create\" , \"tag\" : \"\" , }, \"import\" : { \"name\" : \"\u5bfc\u5165\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"import\" , \"tag\" : \"\" , }, \"export\" : { \"name\" : \"\u5bfc\u51fa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"export\" , \"tag\" : \"\" , }, } } \u5c40\u90e8\u64cd\u4f5c # local_action\u4e3b\u8981\u5b8c\u6210\u9875\u9762\u5c40\u90e8\u6309\u94ae\u7684\u751f\u6210\uff0c\u4ee5\u53ca\u5bf9\u5e94\u5176\u64cd\u4f5c\u7684\u521d\u59cb\u5316\u3002\u6bd4\u5982\u5220\u9664/\u7f16\u8f91\u7b49\u64cd\u4f5c\u3002 \u5176\u914d\u7f6e\u9700\u8981\u5b8c\u5168\u6309\u7167 \u64cd\u4f5c\u914d\u7f6e \u7684\u8bf4\u660e\u6765\u5b8c\u6210\u3002 \u793a\u4f8b { \"local_action\" : { \"edit\" : { \"name\" : \"\u7f16\u8f91\" , \"type\" : \"open\" , \"page\" : \"user_edit\" , \"tag\" : \"\" , }, \"delete\" : { \"name\" : \"\u5220\u9664\" , \"type\" : \"direct\" , \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"delete\" , \"tag\" : \"\" , } } } \u8282\u70b9\u64cd\u4f5c # node_action\u4e3b\u8981\u5b8c\u6210\u9875\u9762\u8282\u70b9\u7684\u64cd\u4f5c\u7684\u751f\u6210\uff0c\u4e0d\u4f1a\u6709\u5bf9\u5e94\u6309\u94ae\u7684\u663e\u793a\u3002 \u529f\u80fd\u4e3b\u8981\u4e3a\u83b7\u53d6\u5b50\u8282\u70b9\u548c\u7ea7\u8054\u9875\u9762\u7684\u6570\u636e\uff0c\u5728Cards\u7c7b\u578b\u7684\u9875\u9762\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u70b9\u51fbCards\u7684\u64cd\u4f5c\u58f0\u660e\u3002 \u63d0\u793a node_action\u4e3a\u6570\u7ec4\u7c7b\u578b\u914d\u7f6e \u82e5node_action\u4e2d\u6709\u4ec0\u4e48 direct \u7c7b\u578b\u7684\u64cd\u4f5c\u65f6\uff0c\u4e14\u5f53\u524d\u4e3a\u6811\u9875\u9762\uff0c\u9ed8\u8ba4\u8ba4\u4e3a\u5b58\u5728\u5b50\u8282\u70b9 \u82e5node_action\u4e2d\u6709 cascade \u7c7b\u578b\u7684\u64cd\u4f5c\u65f6\uff0c\u5c06\u5728\u8be5\u9875\u9762\u6267\u884c\u5b8cinit_action\u4e4b\u540e\u4f7f\u7528\u7b2c\u4e00\u4e2a\u8282\u70b9\u6570\u636e\u89e6\u53d1\u7ea7\u8054\u9875\u9762\u7684init_action \u793a\u4f8b { \"node_action\" : [ { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, { \"type\" : \"cascade\" , \"page\" : \"user_list\" , \"tag\" : \"\" , }, ] } \u914d\u7f6e\u4e3e\u4f8b # \u8868\u683c\u578b\u9875\u9762 # { \"name\" : \"\u7528\u6237\u5217\u8868\" , \"type\" : \"table\" , \"tag\" : \"user_list\" , \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, \"local_action\" : { \"edit\" : { \"name\" : \"\u7f16\u8f91\" , \"page\" : \"user_edit\" , \"tag\" : \"\" , \"type\" : \"open\" , \"icon\" : \"edit\" , }, \"delete\" : { \"name\" : \"\u5220\u9664\" , \"tag\" : \"\" , \"type\" : \"direct\" , \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"delete\" , } }, \"global_action\" : { \"create\" : { \"name\" : \"\u521b\u5efa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"open\" , \"tag\" : \"\" , } }, } \u63d0\u793a \u914d\u7f6e\u4e2d\u7684\u5168\u5c40\u548c\u5c40\u90e8\u64cd\u4f5c\u90fd\u5305\u542btype=open\u7c7b\u578b\u7684\u64cd\u4f5c\uff0c\u4f46\u63cf\u8ff0\u5374\u6709\u6240\u5dee\u5f02 \u5168\u5c40\u2018\u521b\u5efa\u2019\u64cd\u4f5c\u9875\u9762\u53ea\u6709\u4e00\u4e2a\u63a5\u53e3\u63cf\u8ff0\uff0c\u6545\u4e0d\u518d\u9700\u8981page\u5b57\u6bb5\uff0c\u524d\u7aef\u5c06\u4f1a\u81ea\u884c\u5904\u7406 \u5c40\u90e8\u2018\u7f16\u8f91\u2019\u64cd\u4f5c\u9875\u9762\u5c06\u4f1a\u6709\u4e24\u4e2a\u63a5\u53e3\uff08get\u548cpost\uff09\u63cf\u8ff0\uff0c\u6545\u9700\u8981page\u5b57\u6bb5 \u8868\u5355\u578b\u9875\u9762 # \u8868\u5355\u9875\u9762\u4e00\u822c\u60c5\u51b5\u6ca1\u6709local_action\u7684\u58f0\u660e\u3002global_action\u58f0\u660e\u4e00\u822c\u4e3a\u63d0\u4ea4\u8868\u5355\u64cd\u4f5c\u3002 { \"name\" : \"\u7f16\u8f91\u7528\u6237\" , \"type\" : \"form\" , \"tag\" : \"user_edit\" , \"init_action\" : { \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, \"global_action\" : { \"confirm\" : { \"name\" : \"\u786e\u8ba4\" , \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"post\" , \"type\" : \"direct\" , \"tag\" : \"\" , } } } \u6811\u72b6\u578b\u9875\u9762 # \u6811\u578b\u9875\u9762\u4e00\u822c\u9700\u8981\u914d\u5408select\u6216cascade\u8fdb\u884c\u8054\u5408\u4f7f\u7528\uff0c\u5355\u72ec\u4f7f\u7528\u7684\u60c5\u51b5\u8f83\u5c11\u3002 { \"name\" : \"\u7528\u6237\u5206\u7ec4\" , \"type\" : \"tree\" , \"tag\" : \"user_group\" , \"init_action\" : { }, } \u63cf\u8ff0\u578b\u9875\u9762 # \u63cf\u8ff0\u578b\u9875\u9762\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff1a { \"name\" : \"\u4e2a\u4eba\u8d44\u6599\" , \"type\" : \"description\" , \"tag\" : \"\" , \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"tag\" : \"\" , \"type\" : \"direct\" , }, \"global_action\" : { \"edit\" : { \"name\" : \"\u7f16\u8f91\" , \"type\" : \"open\" , \"page\" : \"edit_login_user\" , \"tag\" : \"\" , }, }, } \u5361\u7247\u578b\u9875\u9762 # \u5361\u7247\u578b\u9875\u9762\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff1a { \"name\" : \"\u672c\u5730\u5e94\u7528\" , \"type\" : \"cards\" , \"tag\" : \"\" , \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, \"global_action\" : { \"create\" : { \"name\" : \"\u521b\u5efa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"tag\" : \"\" , \"type\" : \"open\" , } }, \"local_action\" : { \"eidt\" : { \"name\" : \"\u7f16\u8f91\" , \"page\" : \"edit_this_app\" , \"type\" : \"open\" , \"tag\" : \"\" , }, \"delete\" : { \"name\" : \"\u5220\u9664\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"delete\" , \"type\" : \"direct\" , \"tag\" : \"\" , } } } \u6b65\u9aa4\u578b\u9875\u9762 # { \"name\" : \"\u8ba2\u5355\" , \"type\" : \"step\" , \"tag\" : \"\" , \"pages\" : [ \"first_step\" , \"second_step\" , \"third_step\" ], } \u5207\u6362\u578b\u9875\u9762 # { \"name\" : \"\u5e94\u7528\u5217\u8868\" , \"type\" : \"tabs\" , \"tag\" : \"\" , \"pages\" : [ \"my_app_list\" , \"app_store_list\" , \"purchased_app_list\" ], } \u6269\u5c55\u4e09\uff1aSchema # OpenAPI-Plus\u4e2d\u4f7f\u7528 pydantic \u4e2d\u63d0\u4f9b\u7684 Field \u65b9\u6cd5\u8fdb\u884cSchema\u5b57\u6bb5\u7684\u6269\u5c55\u3002\u4e0b\u9762\u5c06\u8be6\u7ec6\u8bf4\u660e\u6269\u5c55\u4e86\u54ea\u4e9b\u5b57\u6bb5\u5e76\u89e3\u91ca\u8bf4\u660e\u8fd9\u4e9b\u5b57\u6bb5\u5728\u524d\u7aef\u754c\u9762\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\u3002 \u7c7b\u578b/\u683c\u5f0f type/format # type \u4fe1\u606f \u9875\u9762\u5c55\u793a integer \u6570\u5b57\u7c7b\u578b \u6570\u5b57\u8f93\u5165\u6846 string \u5b57\u7b26\u4e32\u7c7b\u578b \u5b57\u7b26\u4e32\u8f93\u5165\u6846 boolean \u5e03\u5c14\u7c7b\u578b \u5f00\u5173\u6309\u94ae array \u6570\u7ec4\u7c7b\u578b \u4e0b\u62c9\u9009\u6846 object \u5bf9\u8c61\u7c7b\u578b \u4e3b\u8981\u4e3a\u591a\u4e2a\u8868\u5355\u9879 format \u4fe1\u606f \u9875\u9762\u5c55\u793a textarea \u957f\u6587\u672c \u53ef\u8c03\u8282\u957f\u6587\u672c\u8f93\u5165\u6846 link \u94fe\u63a5\u7c7b\u578b \u4f7f\u7528a\u6807\u7b7e\u5c55\u793a date-time \u65f6\u95f4 \u65f6\u95f4\u9009\u62e9\u5668 auto \u81ea\u52a8\u586b\u5145 \u4e0b\u62c9\u65f6\u89e6\u53d1\u9009\u9879\uff0c\u914d\u5408option_action\u4f7f\u7528 dynamic \u52a8\u6001\u8868\u5355 \u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u548c\u5220\u9664\u4ee5\u67d0\u4e2a\u5355\u5143\u4e3a\u57fa\u7840\u7684\u8868\u5355 binary \u4e8c\u8fdb\u5236\u6587\u4ef6 \u8f93\u5165\u6846\u52a0\u4e0a\u4f20\u6309\u94ae qrcode \u4e8c\u7ef4\u7801 \u5c55\u793a\u4e8c\u7ef4\u7801 markdown MD\u6587\u6863 \u5c55\u793aMD\u6587\u6863 badges \u591a\u6807\u7b7e \u5c55\u793a\u591a\u4e2a\u6807\u7b7e\u5185\u5bb9 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u5b58\u5728\u5176\u4ed6\u7684\u4e00\u4e9bSchema\u63cf\u8ff0\uff0c\u4e5f\u5f71\u54cd\u7740\u524d\u7aef\u9875\u9762\u7684\u5c55\u793a\u60c5\u51b5\u3002\u6bd4\u5982\uff1a \u679a\u4e3e(enum) - \u4f7f\u7528\u4e0b\u62c9\u5355\u9009\u6846 allOf - \u4f7f\u7528FormObject oneOf - \u4f7f\u7528FormObject $ref - \u4f7f\u7528FormObject \u9644\u52a0\u8bf4\u660e \u5f53\u58f0\u660edeprecated=True\u6216hidden=True\u65f6\uff0c\u524d\u7aef\u754c\u9762\u4e0d\u5c55\u793a \u5f53\u58f0\u660ereadonly=True\u65f6\uff0c\u524d\u7aef\u754c\u9762\u7981\u6b62\u7f16\u8f91 \u64cd\u4f5c *_action # \u8be5\u6a21\u5757\u7684\u64cd\u4f5c\u4e3b\u8981\u5bf9Schema\u63cf\u8ff0\u4e2d\u7684\u90e8\u5206\u5c5e\u6027\u8fdb\u884c\u5355\u4e00\u5316\u7684\u64cd\u4f5c\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e09\u79cd\u60c5\u5f62\uff0c\u8be5\u6a21\u5757\u53ef\u4ee5\u8fdb\u884c\u6269\u5c55\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u548c\u9700\u6c42\u800c\u5b9a\u3002\u6bcf\u4e00\u9879\u5185\u5bb9\u6bd4\u8f83\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u6240\u63cf\u8ff0\u7684\u9875\u9762\u914d\u7f6e\u64cd\u4f5c\u3002 \u5173\u952e\u5b57 \u7c7b\u578b item_action \u5143\u7d20\u9879\u64cd\u4f5c suffix_action \u540e\u7f00\u9879\u64cd\u4f5c option_action \u9009\u62e9\u9879\u64cd\u4f5c item_action # \u5143\u7d20\u9879\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u5f00\u5173\u6309\u94ae\u7c7b\u578b\u7684\u5143\u7d20\u4e2d\uff0c\u4e5f\u5c31\u662ftype=bool\u7684\u5143\u7d20\u3002 \u793a\u4f8b { \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"close\" : false , } suffix_action # \u540e\u7f00\u9879\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u50cf \u53d1\u9001\u6821\u9a8c\u7801 \u7b49\u7c7b\u4f3c\u7684\u8868\u5355\u9879\u64cd\u4f5c\u3002\u901a\u8fc7suffix_action\u7684\u63cf\u8ff0\uff0c\u524d\u7aef\u5c06\u8bfb\u53d6\u8bc6\u522b\uff0c\u5e76\u5728input\u8f93\u5165\u6846\u540e\u6302\u8f7d\u4e0a\u70b9\u51fb\u6309\u94ae\u64cd\u4f5c\uff0c\u53d1\u8d77suffix_action\u3002 \u793a\u4f8b { \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"name\" : \"\u53d1\u9001\u6821\u9a8c\u7801\" , \"delay\" : 60 , } option_action # \u9009\u62e9\u9879\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u83b7\u53d6\u4e0b\u62c9\u9009\u6846\u6570\u636e\u3002\u901a\u8fc7option_action\u7684\u63cf\u8ff0\uff0c\u5f53\u7528\u6237\u9f20\u6807\u79fb\u5165\u5230\u5bf9\u5e94\u7684\u524d\u7aef\u9875\u9762select\u5143\u7d20\u4e0a\u65f6\uff0c\u89e6\u53d1\u8be5\u64cd\u4f5c\u3002\u8be5\u64cd\u4f5c\u9700\u8981\u6ce8\u610f\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\u3002 \u793a\u4f8b { \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , } \u5bf9\u8bdd\u6846 page # \u63d0\u793a \u60f3\u4e00\u60f3: \u4e3a\u4ec0\u4e48\u4f1a\u9700\u8981\u5f39\u51fa\u65b0\u7684\u5bf9\u8bdd\u6846\u5462\uff1f \u5f53\u9700\u8981\u9009\u62e9\u67d0\u4e2a\u9875\u9762\u4e2d\u7684\u67d0\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5e76\u8fdb\u884c\u7edf\u4e00\u6dfb\u52a0\u65f6 \u5f53\u9700\u8981\u9009\u62e9\u67d0\u4e2a\u9875\u9762\u4e2d\u7684\u67d0\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5e76\u8fdb\u884c\u7edf\u4e00\u56de\u4f20\u65f6 \u5f53\u67d0\u4e2a\u5143\u7d20\u63cf\u8ff0\u4e0a\u4f7f\u7528Field\u6dfb\u52a0\u4e86page\u5c5e\u6027\uff0c\u5219\u4ee3\u8868\u5f53\u70b9\u51fb\u8be5\u9875\u9762\u5143\u7d20\u65f6\uff0c\u9700\u8981\u6253\u5f00page\u5c5e\u6027\u6307\u5411\u7684\u5bf9\u8bdd\u6846\u9875\u9762\u3002 page\u5c5e\u6027\u6307\u5411\u7684\u5185\u5bb9\u9700\u8981\u5728 pages \u4e2d\u8fdb\u884c\u63d0\u4f9b\u548c\u58f0\u660e\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u58f0\u660e\u8be5\u6570\u636e\u662f\u591a\u9009\u8fd8\u662f\u5355\u9009\uff0c\u5355\u9009\u4f7f\u7528 string \uff0c\u591a\u9009\u4f7f\u7528 array \u3002 \u5f53\u6570\u636e\u6dfb\u52a0\u6216\u56de\u4f20\u53ea\u9700\u8981id\u503c\u65f6\uff0c\u4e0d\u8981\u518d\u8fdb\u884c\u5176\u4ed6\u7684\u58f0\u660e\u3002\u5426\u5219\u9700\u8981\u58f0\u660e\u56de\u4f20\u7684Schema\u5185\u5bb9\u3002\u4e3e\u4f8b\u5982\u4e0b: class UserGroupCreateParentIn ( Schema ): \"\"\"hidden=True\u610f\u5473\u7740\u4e0d\u9700\u8981\u5728\u524d\u7aef\u5c55\u793a\uff0c\u4f46\u662f\u9700\u8981\u5728\u63a5\u53e3\u4e2d\u56de\u4f20\"\"\" id : UUID = Field ( hidden = True ) name : str class UserGroupCreateIn ( ModalSchema ): parent : Optional [ UserGroupCreateParentIn ] = Field ( title = _ ( \"\u4e0a\u7ea7\u7528\u6237\u5206\u7ec4\" ), page = \"\" , ) \u6269\u5c55\u56db\uff1a\u63a5\u53e3\uff08paths\uff09 # OpenAPI-Plus\u5bf9Paths\u6a21\u5757\u505a\u4e86\u4e00\u4e9b\u5fc5\u8981\u7684\u6269\u5c55\u3002\u6bd4\u5982operationId\u7b49\u5185\u5bb9\u3002 \u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\u7528\u4e8e\u63a5\u53e3API\u6743\u9650\u7684\u8bbe\u7f6e\u548c\u5339\u914d\u3002 \u6269\u5c55\u4e94\uff1a\u6743\u9650\uff08permissions\uff09 # OpenAPI-Plus\u6dfb\u52a0\u4e86\u6743\u9650\u76f8\u5173\u6a21\u5757\u3002 \u901a\u8fc7\u6743\u9650\u7684\u5339\u914d\u6765\u5b9e\u73b0API\u63a5\u53e3\u548c\u9875\u9762\u7684\u63a7\u5236\u3002 \u6269\u5c55\u516d\uff1a\u56fd\u9645\u5316\uff08translation\uff09 # OpenAPI-Plus\u6dfb\u52a0\u4e86\u56fd\u9645\u5316\u6a21\u5757\u3002 \u4e3b\u8981\u5305\u542b\u4e86\u5728OpenAPI\u63cf\u8ff0\u4e2d\u9700\u8981\u8fdb\u884c\u7ffb\u8bd1\u7684\u5b57\u6bb5\u7684\u4e2d\u82f1\u6587\u4fe1\u606f\u3002","title":"OpenAPI Plus"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#openapi-plus","text":"OpenAPI-Plus \u4f7f\u7528 django-ninja \u548c pydantic \u8fdb\u884c\u529f\u80fd\u6269\u5c55\uff0c\u4ee5\u8fbe\u5230\u9002\u914d ArkID \u4e00\u8d26\u901a\u9879\u76ee\u524d\u7aef\u751f\u6210\u7684\u76ee\u7684\u3002 OpenAPI-Plus \u4e3b\u8981\u8bb2\u8ff0\u5bf9\u5176\u8fdb\u884c\u4e86\u54ea\u4e9b\u6269\u5c55\uff0c\u800c\u8fd9\u4e9b\u6269\u5c55\u53c8\u6709\u4ec0\u4e48\u6837\u7684\u542b\u4e49\u5b58\u5728\u5462\uff1f\u8bf7\u7ee7\u7eed\u9605\u8bfb\u6587\u6863\u3002","title":"OpenAPI Plus"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#routers","text":"\u5176\u4e3b\u8981\u58f0\u660e\u524d\u7aef\u8def\u7531\u4fe1\u606f\uff0c\u901a\u8fc7\u8bfb\u53d6\u89e3\u6790 routers \u4e2d\u5185\u5bb9\uff0c\u751f\u6210\u524d\u7aef\u4fa7\u8fb9\u680f\u7b49\u5185\u5bb9\u3002\u4e00\u5171\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u7c7b\u522b\uff1a \u6709 Children \u7684\u8def\u7531 \u65e0 Children \u7684\u8def\u7531 \u5173\u952e\u5b57 \u542b\u4e49 \u7c7b\u578b path \u524d\u7aef\u8bbf\u95ee\u8def\u5f84\uff0c\u4f7f\u7528/\u5b57\u7b26\u8fdb\u884c\u53e0\u52a0 string name \u4fa7\u8fb9\u680f\u8def\u7531\u540d\u79f0 string icon \u4fa7\u8fb9\u680f\u8def\u7531\u56fe\u6807\uff0c\u9700\u4e0e\u524d\u7aef\u914d\u5408\u58f0\u660e string hidden \u662f\u5426\u9690\u85cf\uff0c\u5982\u679c\u4e3a true\uff0c\u5219\u4e0d\u5c55\u793a\u5728\u524d\u7aef\u4fa7\u8fb9\u680f\u4e2d boolean page \u8be5\u8def\u7531\u9700\u8981\u6e32\u67d3\u7684\u9875\u9762\uff0c\u5177\u4f53\u4fe1\u606f\u6307\u5411 pages \u6269\u5c55 string url \u76f4\u63a5\u8bbf\u95ee\u8be5URL\u63a5\u53e3\uff0c\u9ed8\u8ba4\u4e3aGET\uff0c\u63a5\u53e3\u8fd4\u56de\u65b0\u7684url\u5730\u5740\uff0c\u653e\u5165iframe\u4e2d\u663e\u793a string web \u662f\u5426\u4e3a\u7535\u8111\u7aef\u4fa7\u8fb9\u680f\uff0c\u53ef\u4ee5\u542b\u6709\u987a\u5e8f number, boolean mobile \u662f\u5426\u4e3a\u624b\u673a\u7aef\u5e95\u8fb9\u680f\uff0c\u5e76\u542b\u6709\u987a\u5e8f number, boolean \u91cd\u8981\u58f0\u660e path \u4e0d\u80fd\u4f7f\u7528 . \u7b49\u7279\u6b8a\u5b57\u7b26\u3002 page \u4e0d\u80fd\u4f7f\u7528 [ ] { } \u7b49\u7279\u6b8a\u5b57\u7b26\u3002 \u6709Children\u8def\u7531\u793a\u4f8b { \"path\" : \"mine\" , \"name\" : \"\u6211\u7684\" , \"icon\" : \"mine\" , \"hidden\" : true , \"children\" : [ { \"path\" : \"profile\" , \"name\" : \"\u4e2a\u4eba\u7ba1\u7406\" , \"page\" : \"mine_profile\" , \"icon\" : \"profile\" }, { \"path\" : \"logout\" , \"name\" : \"\u9000\u51fa\u767b\u5f55\" , \"page\" : \"mine_logout\" , \"icon\" : \"logout\" } ] } \u65e0Children\u8def\u7531\u793a\u4f8b { \"path\" : \"mine\" , \"name\" : \"\u6211\u7684\" , \"icon\" : \"mine\" , \"hidden\" : true , \"page\" : \"mine\" }","title":"\u6269\u5c55\u4e00: \u8def\u7531\uff08routers\uff09"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#pages","text":"\u58f0\u660e\u524d\u7aef\u9875\u9762\u751f\u6210\u6240\u9700\u8981\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u524d\u7aef\u5c06\u4f1a\u6839\u636eOpenAPI\u8fd4\u56de\u7684\u8be5\u9879\u5185\u5bb9\u8fdb\u884c\u89e3\u6790\u5904\u7406\uff0c\u4ece\u800c\u751f\u6210\u524d\u7aef\u5404\u79cd\u7c7b\u578b\u7684\u9875\u9762\u3002\u4e0b\u9762\u5c06\u8be6\u7ec6\u8bf4\u660e\u6bcf\u4e00\u9879\u914d\u7f6e\u7684\u542b\u4e49\u4ee5\u53ca\u5bf9\u5e94\u600e\u4e48\u8868\u8fbe\u548c\u5c55\u793a\u5728\u524d\u7aef\u3002 \u95ee\u9898 \u751f\u6210\u4e00\u4e2a\u8868\u683c\u6216\u8868\u5355\u9875\u9762\uff0c\u9700\u8981\u90a3\u4e9b\u914d\u7f6e\u4fe1\u606f\u5462\uff1f \u751f\u6210\u4e00\u4e2a\u6811\u7ed3\u6784\u9875\u9762\u5462\uff1f \u9875\u9762\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f","title":"\u6269\u5c55\u4e8c: \u9875\u9762\u914d\u7f6e\uff08pages\uff09"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_1","text":"\u9488\u5bf9\u4ee5\u4e0a\u95ee\u9898\uff0c\u5148\u7ed9\u51fa\u6211\u4eec\u76ee\u524d \u5df2\u652f\u6301 \u2714 \u6216 \u5f85\u652f\u6301 \u2718 \u7684\u9875\u9762\u7c7b\u578b\u3002 \u7c7b\u578b \u540d\u79f0 \u652f\u6301\u6027 table \u8868\u683c\u578b\u9875\u9762 \u2714 form \u8868\u5355\u578b\u9875\u9762 \u2714 tree \u6811\u72b6\u6027\u9875\u9762 \u2714 tabs \u5207\u6362\u578b\u9875\u9762 \u2714 description \u63cf\u8ff0\u578b\u9875\u9762 \u2714 cards \u5361\u7247\u578b\u9875\u9762 \u2714 grid \u7f51\u683c\u578b\u9875\u9762 \u2718 list \u5217\u8868\u578b\u9875\u9762 \u2718 step \u6b65\u9aa4\u578b\u9875\u9762 \u2714","title":"\u9875\u9762\u7c7b\u578b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_2","text":"\u5bf9\u9875\u9762\u4e2d\u6240\u9700\u7684\u914d\u7f6e\u8fdb\u884c\u8bf4\u660e\uff0c\u4ee5\u652f\u6301\u4e0a\u8ff0\u5404\u7c7b\u578b\u9875\u9762\u7684\u751f\u6210\u60c5\u5f62\u3002 \u5173\u952e\u5b57 \u542b\u4e49 \u529f\u80fd \u9644\u52a0\u8bf4\u660e type \u9875\u9762\u7c7b\u578b \u751f\u6210\u524d\u7aef\u9875\u9762\u6a21\u677f \u5177\u4f53\u53c2\u8003\u4e0b\u9762\u7684\u9875\u9762\u7c7b\u578b\u8bf4\u660e tag \u9875\u9762\u6807\u8bc6\u7b26 \u5339\u914d\u552f\u4e00\u9875\u9762\u914d\u7f6e \u9875\u9762\u552f\u4e00\u6807\u7b7e name \u9875\u9762\u540d\u79f0 \u5bf9\u5e94\u663e\u793a\u524d\u7aef\u9875\u9762\u6807\u9898 \u9700\u652f\u6301\u4e2d\u82f1\u6587 init_action \u9875\u9762\u521d\u59cb\u5316\u64cd\u4f5c \u83b7\u53d6schema\u548c\u6570\u636e \u5177\u4f53\u53c2\u8003init_action\u8be6\u7ec6\u8bf4\u660e init_data \u521d\u59cb\u5316\u6570\u636e \u521d\u59cb\u5316\u540e\u7684\u8d4b\u503c\u64cd\u4f5c \u9ed8\u8ba4\u4ece\u7236\u7ea7\u6570\u636e\u6c60\u5f00\u59cb\u67e5\u627e global_action \u9875\u9762\u5168\u5c40\u64cd\u4f5c \u751f\u6210\u5168\u5c40\u6309\u94ae\u64cd\u4f5c \u5177\u4f53\u53c2\u8003global_action\u8be6\u7ec6\u8bf4\u660e local_action \u9875\u9762\u5c40\u90e8\u64cd\u4f5c \u751f\u6210\u5c40\u90e8\u6309\u94ae\u64cd\u4f5c \u5177\u4f53\u53c2\u8003local_action\u8be6\u7ec6\u8bf4\u660e node_action \u9875\u9762\u8282\u70b9\u64cd\u4f5c \u751f\u6210\u8282\u70b9\u70b9\u51fb\u64cd\u4f5c \u53ef\u80fd\u5b58\u5728\u4e8etree/cards\u7b49\u9875\u9762\u4e2d\uff0c\u5177\u4f53\u53c2\u8003node_action\u8be6\u7ec6\u8bf4\u660e select \u662f\u5426\u4e3a\u53ef\u9009\u9875\u9762 \u751f\u6210\u53ef\u9009\u9875\u9762 form\u9875\u9762\u4e2d\u65e0\u9700\u8be5\u5b57\u6bb5 pages tabs/step\u591a\u9875\u9762\u6307\u5411 \u751f\u6210tabs/step\u591a\u9875\u9762 \u53ea\u5b58\u5728\u4e8etabs/step\u9875\u9762\u4e2d \u91cd\u8981\u63d0\u793a tag \u4e0d\u80fd\u53ea\u6709 [ ] { } \u7b49\u7279\u6b8a\u5b57\u7b26 tag \u540c\u4e00\u4e2a\u9875\u9762\u4e0b\u4e0d\u8981\u91cd\u590d\u58f0\u660e\u4e00\u4e2a\u9875\u7b7e","title":"\u9875\u9762\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_3","text":"\u9875\u9762\u4e3b\u8981\u914d\u7f6e\u5c31\u662f\u6709\u591a\u4e2a\u64cd\u4f5c\u7ec4\u6210\u7684\u3002\u5305\u542b\u521d\u59cb\u5316\u6570\u636e\u83b7\u53d6\u64cd\u4f5c\uff0c\u589e\u5220\u6539\u67e5\u7b49\u70b9\u51fb\u64cd\u4f5c\u3002\u6240\u4ee5\u64cd\u4f5c\u914d\u7f6e\u6709\u7740\u6781\u4e3a\u91cd\u8981\u7684\u542b\u4e49\u548c\u8be6\u7ec6\u914d\u7f6e\u58f0\u660e\u3002","title":"\u9875\u9762\u64cd\u4f5c"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_4","text":"\u5173\u952e\u5b57 \u540d\u79f0 \u8be6\u60c5\u8bf4\u660e \u652f\u6301\u6027 direct \u76f4\u63a5\u578b \u5e38\u89c1\u4e8e\u786e\u8ba4\u7f16\u8f91\u6216\u5220\u9664\u4ee5\u53ca\u6811\u8282\u70b9\u70b9\u51fb\u83b7\u53d6Children\u7b49\u64cd\u4f5c \u2714 open \u5f39\u6846\u578b \u6253\u5f00\u5bf9\u8bdd\u6846\uff0c\u5c55\u793a\u65b0\u7684\u4e00\u4e2a\u7c7b\u578b\u9875\u9762\uff0c\u5e38\u89c1\u4e8e\u521b\u5efa\u6216\u7f16\u8f91\u7b49\u64cd\u4f5c \u2714 cascade \u7ea7\u8054\u578b \u5e38\u89c1\u4e8e\u6811\u72b6\u578b\u9875\u9762\u7684\u7ea7\u8054\u9875\u9762\u4f7f\u7528\uff0c\u5f53\u70b9\u51fb\u67d0\u4e2a\u8282\u70b9\u65f6, \u51fa\u73b0\u4e0e\u4e4b\u5e76\u5217\u7684\u6570\u636e\u5c55\u793a\u9875\u9762 \u2714 import \u5bfc\u5165\u578b \u5bfc\u5165\u6587\u4ef6\u6216\u6570\u636e\u65f6\u4f7f\u7528 \u2718 export \u5bfc\u51fa\u578b \u5bfc\u51fa\u6587\u4ef6\u6216\u6570\u636e\u65f6\u4f7f\u7528\uff0c\u5206\u4e3a\u5168\u5bfc\u51fa\u6216\u90e8\u5206\u5bfc\u51fa \u2718 next \u6b65\u9aa4\u578b \u70b9\u51fb\u7ee7\u7eed\u4e0b\u4e00\u6b65\u64cd\u4f5c\uff0c\u6839\u636e\u60c5\u51b5\u81ea\u52a8\u6dfb\u52a0\u4e0a\u4e00\u6b65\u6309\u94ae \u2714 url \u5730\u5740\u578b \u76f4\u63a5\u66f4\u6539\u5f53\u524d\u6d4f\u89c8\u5668\u5730\u5740\u680f\u5730\u5740 \u2714","title":"\u64cd\u4f5c\u7c7b\u578b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_5","text":"\u5173\u952e\u5b57 \u542b\u4e49 \u529f\u80fd tag \u64cd\u4f5c\u6807\u7b7e \u53ef\u7528\u4e8e\u524d\u7aef\u64cd\u4f5c\u540d\u79f0 path API\u63a5\u53e3 \u7528\u4e8e\u5339\u914dschema\u63cf\u8ff0\u548c\u83b7\u53d6\u6570\u636e method API\u63a5\u53e3\u65b9\u6cd5 \u540c\u4e0a type \u64cd\u4f5c\u7c7b\u578b \u65b9\u4fbf\u8bc6\u522b\u64cd\u4f5c\uff0c\u89c1\u4e0a\u65b9\u5177\u4f53\u8bf4\u660e page \u9875\u9762tag \u5f53\u64cd\u4f5c\u7c7b\u578b\u4e3aopen\u65f6\uff0c\u6307\u5411\u6253\u5f00\u9875\u9762\u7684tag name \u64cd\u4f5c\u540d\u79f0 \u524d\u7aef\u9875\u9762\u6309\u94ae\u540d\uff0cnode_action\u65e0\u9700\u5305\u542b\u8be5\u5185\u5bb9 icon \u56fe\u6807 \u53ef\u9009\uff0c\u76ee\u524d\u6682\u672a\u652f\u6301 close \u5173\u95ed\u6761\u4ef6 \u5f00\u5173\u578b\u6309\u94ae\u64cd\u4f5c\u7684\u5173\u95ed\u6761\u4ef6 open \u6253\u5f00\u6761\u4ef6 \u5f00\u5173\u578b\u6309\u94ae\u64cd\u4f5c\u7684\u6253\u5f00\u6761\u4ef6 \u63d0\u793a \u4e0a\u8ff0\u5b57\u6bb5\u5747\u4e3a\u53ef\u9009\u5b57\u6bb5\uff0c\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u58f0\u660e tag\u6216page\u5747\u4e0d\u80fd\u5305\u542b\u7279\u6b8a\u5b57\u7b26 close/open\u4ec5\u652f\u6301bool\u8bf4\u660e\uff0c\u5176\u4ed6\u6761\u4ef6\u5728\u8ba1\u5212\u5f00\u53d1\u4e2d close=True; (\u2714) open=False; (\u2714) close=is_system; (\u2718) open=!is_admin; (\u2718) close=is_system&!is_admin; (\u2718)","title":"\u64cd\u4f5c\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_6","text":"init_action\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u83b7\u53d6\u67d0\u4e2a\u9875\u9762Schema\u7ed3\u6784\u548c\u521d\u59cb\u6570\u636e\u3002\u4e5f\u5c31\u662f\u5f53\u4f60\u6253\u5f00\u6216\u770b\u5230\u67d0\u4e2a\u9875\u9762\u65f6\uff0c\u8be5\u64cd\u4f5c\u5c31\u4f1a\u81ea\u52a8\u53d1\u8d77\uff0c\u7136\u540e\u5c06\u83b7\u53d6\u5230\u7684\u6570\u636e\u586b\u5165\u9875\u9762\u4e2d\u3002 \u5176\u4e3b\u8981\u5305\u542b path \u548c method \uff0c\u4e14\u64cd\u4f5c\u7c7b\u578b\u4e3a direct \u7c7b\u578b\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u51fa\u73b0\u3002 { \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"tag\" : \"\" , \"type\" : \"direct\" , } }","title":"\u521d\u59cb\u5316\u64cd\u4f5c"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_7","text":"global_action\u4e3b\u8981\u5b8c\u6210\u9875\u9762\u5168\u5c40\u6309\u94ae\u7684\u751f\u6210\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u5b8c\u6210\u5176\u5bf9\u5e94\u64cd\u4f5c\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002\u6bd4\u5982\u521b\u5efa/\u5bfc\u5165\u7b49\u64cd\u4f5c\u3002 \u5176\u914d\u7f6e\u9700\u8981\u5b8c\u5168\u6309\u7167 \u64cd\u4f5c\u914d\u7f6e \u7684\u8bf4\u660e\u6765\u5b8c\u6210\u3002 { \"global_action\" : { \"create\" : { \"name\" : \"\u65b0\u5efa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"open\" , \"page\" : \"user_create\" , \"tag\" : \"\" , }, \"import\" : { \"name\" : \"\u5bfc\u5165\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"import\" , \"tag\" : \"\" , }, \"export\" : { \"name\" : \"\u5bfc\u51fa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"export\" , \"tag\" : \"\" , }, } }","title":"\u5168\u5c40\u64cd\u4f5c"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_8","text":"local_action\u4e3b\u8981\u5b8c\u6210\u9875\u9762\u5c40\u90e8\u6309\u94ae\u7684\u751f\u6210\uff0c\u4ee5\u53ca\u5bf9\u5e94\u5176\u64cd\u4f5c\u7684\u521d\u59cb\u5316\u3002\u6bd4\u5982\u5220\u9664/\u7f16\u8f91\u7b49\u64cd\u4f5c\u3002 \u5176\u914d\u7f6e\u9700\u8981\u5b8c\u5168\u6309\u7167 \u64cd\u4f5c\u914d\u7f6e \u7684\u8bf4\u660e\u6765\u5b8c\u6210\u3002 \u793a\u4f8b { \"local_action\" : { \"edit\" : { \"name\" : \"\u7f16\u8f91\" , \"type\" : \"open\" , \"page\" : \"user_edit\" , \"tag\" : \"\" , }, \"delete\" : { \"name\" : \"\u5220\u9664\" , \"type\" : \"direct\" , \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"delete\" , \"tag\" : \"\" , } } }","title":"\u5c40\u90e8\u64cd\u4f5c"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_9","text":"node_action\u4e3b\u8981\u5b8c\u6210\u9875\u9762\u8282\u70b9\u7684\u64cd\u4f5c\u7684\u751f\u6210\uff0c\u4e0d\u4f1a\u6709\u5bf9\u5e94\u6309\u94ae\u7684\u663e\u793a\u3002 \u529f\u80fd\u4e3b\u8981\u4e3a\u83b7\u53d6\u5b50\u8282\u70b9\u548c\u7ea7\u8054\u9875\u9762\u7684\u6570\u636e\uff0c\u5728Cards\u7c7b\u578b\u7684\u9875\u9762\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u70b9\u51fbCards\u7684\u64cd\u4f5c\u58f0\u660e\u3002 \u63d0\u793a node_action\u4e3a\u6570\u7ec4\u7c7b\u578b\u914d\u7f6e \u82e5node_action\u4e2d\u6709\u4ec0\u4e48 direct \u7c7b\u578b\u7684\u64cd\u4f5c\u65f6\uff0c\u4e14\u5f53\u524d\u4e3a\u6811\u9875\u9762\uff0c\u9ed8\u8ba4\u8ba4\u4e3a\u5b58\u5728\u5b50\u8282\u70b9 \u82e5node_action\u4e2d\u6709 cascade \u7c7b\u578b\u7684\u64cd\u4f5c\u65f6\uff0c\u5c06\u5728\u8be5\u9875\u9762\u6267\u884c\u5b8cinit_action\u4e4b\u540e\u4f7f\u7528\u7b2c\u4e00\u4e2a\u8282\u70b9\u6570\u636e\u89e6\u53d1\u7ea7\u8054\u9875\u9762\u7684init_action \u793a\u4f8b { \"node_action\" : [ { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, { \"type\" : \"cascade\" , \"page\" : \"user_list\" , \"tag\" : \"\" , }, ] }","title":"\u8282\u70b9\u64cd\u4f5c"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_10","text":"","title":"\u914d\u7f6e\u4e3e\u4f8b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_11","text":"{ \"name\" : \"\u7528\u6237\u5217\u8868\" , \"type\" : \"table\" , \"tag\" : \"user_list\" , \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, \"local_action\" : { \"edit\" : { \"name\" : \"\u7f16\u8f91\" , \"page\" : \"user_edit\" , \"tag\" : \"\" , \"type\" : \"open\" , \"icon\" : \"edit\" , }, \"delete\" : { \"name\" : \"\u5220\u9664\" , \"tag\" : \"\" , \"type\" : \"direct\" , \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"delete\" , } }, \"global_action\" : { \"create\" : { \"name\" : \"\u521b\u5efa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"type\" : \"open\" , \"tag\" : \"\" , } }, } \u63d0\u793a \u914d\u7f6e\u4e2d\u7684\u5168\u5c40\u548c\u5c40\u90e8\u64cd\u4f5c\u90fd\u5305\u542btype=open\u7c7b\u578b\u7684\u64cd\u4f5c\uff0c\u4f46\u63cf\u8ff0\u5374\u6709\u6240\u5dee\u5f02 \u5168\u5c40\u2018\u521b\u5efa\u2019\u64cd\u4f5c\u9875\u9762\u53ea\u6709\u4e00\u4e2a\u63a5\u53e3\u63cf\u8ff0\uff0c\u6545\u4e0d\u518d\u9700\u8981page\u5b57\u6bb5\uff0c\u524d\u7aef\u5c06\u4f1a\u81ea\u884c\u5904\u7406 \u5c40\u90e8\u2018\u7f16\u8f91\u2019\u64cd\u4f5c\u9875\u9762\u5c06\u4f1a\u6709\u4e24\u4e2a\u63a5\u53e3\uff08get\u548cpost\uff09\u63cf\u8ff0\uff0c\u6545\u9700\u8981page\u5b57\u6bb5","title":"\u8868\u683c\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_12","text":"\u8868\u5355\u9875\u9762\u4e00\u822c\u60c5\u51b5\u6ca1\u6709local_action\u7684\u58f0\u660e\u3002global_action\u58f0\u660e\u4e00\u822c\u4e3a\u63d0\u4ea4\u8868\u5355\u64cd\u4f5c\u3002 { \"name\" : \"\u7f16\u8f91\u7528\u6237\" , \"type\" : \"form\" , \"tag\" : \"user_edit\" , \"init_action\" : { \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, \"global_action\" : { \"confirm\" : { \"name\" : \"\u786e\u8ba4\" , \"path\" : \"/api/v1/xxx/{id}/\" , \"method\" : \"post\" , \"type\" : \"direct\" , \"tag\" : \"\" , } } }","title":"\u8868\u5355\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_13","text":"\u6811\u578b\u9875\u9762\u4e00\u822c\u9700\u8981\u914d\u5408select\u6216cascade\u8fdb\u884c\u8054\u5408\u4f7f\u7528\uff0c\u5355\u72ec\u4f7f\u7528\u7684\u60c5\u51b5\u8f83\u5c11\u3002 { \"name\" : \"\u7528\u6237\u5206\u7ec4\" , \"type\" : \"tree\" , \"tag\" : \"user_group\" , \"init_action\" : { }, }","title":"\u6811\u72b6\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_14","text":"\u63cf\u8ff0\u578b\u9875\u9762\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff1a { \"name\" : \"\u4e2a\u4eba\u8d44\u6599\" , \"type\" : \"description\" , \"tag\" : \"\" , \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"tag\" : \"\" , \"type\" : \"direct\" , }, \"global_action\" : { \"edit\" : { \"name\" : \"\u7f16\u8f91\" , \"type\" : \"open\" , \"page\" : \"edit_login_user\" , \"tag\" : \"\" , }, }, }","title":"\u63cf\u8ff0\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_15","text":"\u5361\u7247\u578b\u9875\u9762\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff1a { \"name\" : \"\u672c\u5730\u5e94\u7528\" , \"type\" : \"cards\" , \"tag\" : \"\" , \"init_action\" : { \"path\" : \"/api/v1/xxx\" , \"method\" : \"get\" , \"type\" : \"direct\" , \"tag\" : \"\" , }, \"global_action\" : { \"create\" : { \"name\" : \"\u521b\u5efa\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"tag\" : \"\" , \"type\" : \"open\" , } }, \"local_action\" : { \"eidt\" : { \"name\" : \"\u7f16\u8f91\" , \"page\" : \"edit_this_app\" , \"type\" : \"open\" , \"tag\" : \"\" , }, \"delete\" : { \"name\" : \"\u5220\u9664\" , \"path\" : \"/api/v1/xxx\" , \"method\" : \"delete\" , \"type\" : \"direct\" , \"tag\" : \"\" , } } }","title":"\u5361\u7247\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_16","text":"{ \"name\" : \"\u8ba2\u5355\" , \"type\" : \"step\" , \"tag\" : \"\" , \"pages\" : [ \"first_step\" , \"second_step\" , \"third_step\" ], }","title":"\u6b65\u9aa4\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_17","text":"{ \"name\" : \"\u5e94\u7528\u5217\u8868\" , \"type\" : \"tabs\" , \"tag\" : \"\" , \"pages\" : [ \"my_app_list\" , \"app_store_list\" , \"purchased_app_list\" ], }","title":"\u5207\u6362\u578b\u9875\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#schema","text":"OpenAPI-Plus\u4e2d\u4f7f\u7528 pydantic \u4e2d\u63d0\u4f9b\u7684 Field \u65b9\u6cd5\u8fdb\u884cSchema\u5b57\u6bb5\u7684\u6269\u5c55\u3002\u4e0b\u9762\u5c06\u8be6\u7ec6\u8bf4\u660e\u6269\u5c55\u4e86\u54ea\u4e9b\u5b57\u6bb5\u5e76\u89e3\u91ca\u8bf4\u660e\u8fd9\u4e9b\u5b57\u6bb5\u5728\u524d\u7aef\u754c\u9762\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\u3002","title":"\u6269\u5c55\u4e09\uff1aSchema"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#typeformat","text":"type \u4fe1\u606f \u9875\u9762\u5c55\u793a integer \u6570\u5b57\u7c7b\u578b \u6570\u5b57\u8f93\u5165\u6846 string \u5b57\u7b26\u4e32\u7c7b\u578b \u5b57\u7b26\u4e32\u8f93\u5165\u6846 boolean \u5e03\u5c14\u7c7b\u578b \u5f00\u5173\u6309\u94ae array \u6570\u7ec4\u7c7b\u578b \u4e0b\u62c9\u9009\u6846 object \u5bf9\u8c61\u7c7b\u578b \u4e3b\u8981\u4e3a\u591a\u4e2a\u8868\u5355\u9879 format \u4fe1\u606f \u9875\u9762\u5c55\u793a textarea \u957f\u6587\u672c \u53ef\u8c03\u8282\u957f\u6587\u672c\u8f93\u5165\u6846 link \u94fe\u63a5\u7c7b\u578b \u4f7f\u7528a\u6807\u7b7e\u5c55\u793a date-time \u65f6\u95f4 \u65f6\u95f4\u9009\u62e9\u5668 auto \u81ea\u52a8\u586b\u5145 \u4e0b\u62c9\u65f6\u89e6\u53d1\u9009\u9879\uff0c\u914d\u5408option_action\u4f7f\u7528 dynamic \u52a8\u6001\u8868\u5355 \u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u548c\u5220\u9664\u4ee5\u67d0\u4e2a\u5355\u5143\u4e3a\u57fa\u7840\u7684\u8868\u5355 binary \u4e8c\u8fdb\u5236\u6587\u4ef6 \u8f93\u5165\u6846\u52a0\u4e0a\u4f20\u6309\u94ae qrcode \u4e8c\u7ef4\u7801 \u5c55\u793a\u4e8c\u7ef4\u7801 markdown MD\u6587\u6863 \u5c55\u793aMD\u6587\u6863 badges \u591a\u6807\u7b7e \u5c55\u793a\u591a\u4e2a\u6807\u7b7e\u5185\u5bb9 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u5b58\u5728\u5176\u4ed6\u7684\u4e00\u4e9bSchema\u63cf\u8ff0\uff0c\u4e5f\u5f71\u54cd\u7740\u524d\u7aef\u9875\u9762\u7684\u5c55\u793a\u60c5\u51b5\u3002\u6bd4\u5982\uff1a \u679a\u4e3e(enum) - \u4f7f\u7528\u4e0b\u62c9\u5355\u9009\u6846 allOf - \u4f7f\u7528FormObject oneOf - \u4f7f\u7528FormObject $ref - \u4f7f\u7528FormObject \u9644\u52a0\u8bf4\u660e \u5f53\u58f0\u660edeprecated=True\u6216hidden=True\u65f6\uff0c\u524d\u7aef\u754c\u9762\u4e0d\u5c55\u793a \u5f53\u58f0\u660ereadonly=True\u65f6\uff0c\u524d\u7aef\u754c\u9762\u7981\u6b62\u7f16\u8f91","title":"\u7c7b\u578b/\u683c\u5f0f type/format"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#_action","text":"\u8be5\u6a21\u5757\u7684\u64cd\u4f5c\u4e3b\u8981\u5bf9Schema\u63cf\u8ff0\u4e2d\u7684\u90e8\u5206\u5c5e\u6027\u8fdb\u884c\u5355\u4e00\u5316\u7684\u64cd\u4f5c\u3002\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e09\u79cd\u60c5\u5f62\uff0c\u8be5\u6a21\u5757\u53ef\u4ee5\u8fdb\u884c\u6269\u5c55\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u548c\u9700\u6c42\u800c\u5b9a\u3002\u6bcf\u4e00\u9879\u5185\u5bb9\u6bd4\u8f83\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u6240\u63cf\u8ff0\u7684\u9875\u9762\u914d\u7f6e\u64cd\u4f5c\u3002 \u5173\u952e\u5b57 \u7c7b\u578b item_action \u5143\u7d20\u9879\u64cd\u4f5c suffix_action \u540e\u7f00\u9879\u64cd\u4f5c option_action \u9009\u62e9\u9879\u64cd\u4f5c","title":"\u64cd\u4f5c *_action"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#item_action","text":"\u5143\u7d20\u9879\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u5f00\u5173\u6309\u94ae\u7c7b\u578b\u7684\u5143\u7d20\u4e2d\uff0c\u4e5f\u5c31\u662ftype=bool\u7684\u5143\u7d20\u3002 \u793a\u4f8b { \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"close\" : false , }","title":"item_action"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#suffix_action","text":"\u540e\u7f00\u9879\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u50cf \u53d1\u9001\u6821\u9a8c\u7801 \u7b49\u7c7b\u4f3c\u7684\u8868\u5355\u9879\u64cd\u4f5c\u3002\u901a\u8fc7suffix_action\u7684\u63cf\u8ff0\uff0c\u524d\u7aef\u5c06\u8bfb\u53d6\u8bc6\u522b\uff0c\u5e76\u5728input\u8f93\u5165\u6846\u540e\u6302\u8f7d\u4e0a\u70b9\u51fb\u6309\u94ae\u64cd\u4f5c\uff0c\u53d1\u8d77suffix_action\u3002 \u793a\u4f8b { \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"name\" : \"\u53d1\u9001\u6821\u9a8c\u7801\" , \"delay\" : 60 , }","title":"suffix_action"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#option_action","text":"\u9009\u62e9\u9879\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u83b7\u53d6\u4e0b\u62c9\u9009\u6846\u6570\u636e\u3002\u901a\u8fc7option_action\u7684\u63cf\u8ff0\uff0c\u5f53\u7528\u6237\u9f20\u6807\u79fb\u5165\u5230\u5bf9\u5e94\u7684\u524d\u7aef\u9875\u9762select\u5143\u7d20\u4e0a\u65f6\uff0c\u89e6\u53d1\u8be5\u64cd\u4f5c\u3002\u8be5\u64cd\u4f5c\u9700\u8981\u6ce8\u610f\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\u3002 \u793a\u4f8b { \"path\" : \"/api/v1/xxx\" , \"method\" : \"post\" , }","title":"option_action"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#page","text":"\u63d0\u793a \u60f3\u4e00\u60f3: \u4e3a\u4ec0\u4e48\u4f1a\u9700\u8981\u5f39\u51fa\u65b0\u7684\u5bf9\u8bdd\u6846\u5462\uff1f \u5f53\u9700\u8981\u9009\u62e9\u67d0\u4e2a\u9875\u9762\u4e2d\u7684\u67d0\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5e76\u8fdb\u884c\u7edf\u4e00\u6dfb\u52a0\u65f6 \u5f53\u9700\u8981\u9009\u62e9\u67d0\u4e2a\u9875\u9762\u4e2d\u7684\u67d0\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5e76\u8fdb\u884c\u7edf\u4e00\u56de\u4f20\u65f6 \u5f53\u67d0\u4e2a\u5143\u7d20\u63cf\u8ff0\u4e0a\u4f7f\u7528Field\u6dfb\u52a0\u4e86page\u5c5e\u6027\uff0c\u5219\u4ee3\u8868\u5f53\u70b9\u51fb\u8be5\u9875\u9762\u5143\u7d20\u65f6\uff0c\u9700\u8981\u6253\u5f00page\u5c5e\u6027\u6307\u5411\u7684\u5bf9\u8bdd\u6846\u9875\u9762\u3002 page\u5c5e\u6027\u6307\u5411\u7684\u5185\u5bb9\u9700\u8981\u5728 pages \u4e2d\u8fdb\u884c\u63d0\u4f9b\u548c\u58f0\u660e\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u58f0\u660e\u8be5\u6570\u636e\u662f\u591a\u9009\u8fd8\u662f\u5355\u9009\uff0c\u5355\u9009\u4f7f\u7528 string \uff0c\u591a\u9009\u4f7f\u7528 array \u3002 \u5f53\u6570\u636e\u6dfb\u52a0\u6216\u56de\u4f20\u53ea\u9700\u8981id\u503c\u65f6\uff0c\u4e0d\u8981\u518d\u8fdb\u884c\u5176\u4ed6\u7684\u58f0\u660e\u3002\u5426\u5219\u9700\u8981\u58f0\u660e\u56de\u4f20\u7684Schema\u5185\u5bb9\u3002\u4e3e\u4f8b\u5982\u4e0b: class UserGroupCreateParentIn ( Schema ): \"\"\"hidden=True\u610f\u5473\u7740\u4e0d\u9700\u8981\u5728\u524d\u7aef\u5c55\u793a\uff0c\u4f46\u662f\u9700\u8981\u5728\u63a5\u53e3\u4e2d\u56de\u4f20\"\"\" id : UUID = Field ( hidden = True ) name : str class UserGroupCreateIn ( ModalSchema ): parent : Optional [ UserGroupCreateParentIn ] = Field ( title = _ ( \"\u4e0a\u7ea7\u7528\u6237\u5206\u7ec4\" ), page = \"\" , )","title":"\u5bf9\u8bdd\u6846 page"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#paths","text":"OpenAPI-Plus\u5bf9Paths\u6a21\u5757\u505a\u4e86\u4e00\u4e9b\u5fc5\u8981\u7684\u6269\u5c55\u3002\u6bd4\u5982operationId\u7b49\u5185\u5bb9\u3002 \u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\u7528\u4e8e\u63a5\u53e3API\u6743\u9650\u7684\u8bbe\u7f6e\u548c\u5339\u914d\u3002","title":"\u6269\u5c55\u56db\uff1a\u63a5\u53e3\uff08paths\uff09"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#permissions","text":"OpenAPI-Plus\u6dfb\u52a0\u4e86\u6743\u9650\u76f8\u5173\u6a21\u5757\u3002 \u901a\u8fc7\u6743\u9650\u7684\u5339\u914d\u6765\u5b9e\u73b0API\u63a5\u53e3\u548c\u9875\u9762\u7684\u63a7\u5236\u3002","title":"\u6269\u5c55\u4e94\uff1a\u6743\u9650\uff08permissions\uff09"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/OpenAPI%20Plus/#translation","text":"OpenAPI-Plus\u6dfb\u52a0\u4e86\u56fd\u9645\u5316\u6a21\u5757\u3002 \u4e3b\u8981\u5305\u542b\u4e86\u5728OpenAPI\u63cf\u8ff0\u4e2d\u9700\u8981\u8fdb\u884c\u7ffb\u8bd1\u7684\u5b57\u6bb5\u7684\u4e2d\u82f1\u6587\u4fe1\u606f\u3002","title":"\u6269\u5c55\u516d\uff1a\u56fd\u9645\u5316\uff08translation\uff09"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/","text":"\u5185\u6838\u4e8b\u4ef6 # arkid.core.event # Event # __init__ ( self , tag , tenant , request = None , response = None , packages = [], data = None , uuid = None ) special # \u4e8b\u4ef6 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u7c7b\u578b\u552f\u4e00\u6807\u8bc6 required tenant Tenant \u79df\u6237 required request HttpRequest django http request None response HttpResponse django http response None packages list[str] \u63d2\u4ef6package\u6807\u8bc6 [] data _type_ \u4e8b\u4ef6data None uuid str \u4e8b\u4ef6\u5305\u542b\u7684request_uuid None EventType # __init__ ( self , tag , name , data_schema = None , result_schema = None , request_schema = None , response_schema = None , description = '' ) special # \u4e8b\u4ef6\u7c7b\u578b\u7528\u4e8e\u6ce8\u518c \u6ce8\u610f event request \u5207\u52ff\u4fee\u6539 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u7c7b\u578b\u552f\u4e00\u6807\u8bc6 required name str \u4e8b\u4ef6\u7c7b\u578b\u540d\u5b57 required data_schema Schema \u8f93\u5165data\u7684Schema None result_schema Schema \u4e8b\u4ef6\u5904\u7406\u56de\u8c03\u51fd\u6570 return \u7ed3\u679c Schema None request_schema Schema django http request Schema None response_schema Schema django http response Schema None description str \u4e8b\u4ef6\u7c7b\u578b\u63cf\u8ff0 ''","title":"\u5185\u6838\u4e8b\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/#_1","text":"","title":"\u5185\u6838\u4e8b\u4ef6"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/#arkid.core.event","text":"","title":"event"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/#arkid.core.event.Event","text":"","title":"Event"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/#arkid.core.event.Event.__init__","text":"\u4e8b\u4ef6 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u7c7b\u578b\u552f\u4e00\u6807\u8bc6 required tenant Tenant \u79df\u6237 required request HttpRequest django http request None response HttpResponse django http response None packages list[str] \u63d2\u4ef6package\u6807\u8bc6 [] data _type_ \u4e8b\u4ef6data None uuid str \u4e8b\u4ef6\u5305\u542b\u7684request_uuid None","title":"__init__()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/#arkid.core.event.EventType","text":"","title":"EventType"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8/#arkid.core.event.EventType.__init__","text":"\u4e8b\u4ef6\u7c7b\u578b\u7528\u4e8e\u6ce8\u518c \u6ce8\u610f event request \u5207\u52ff\u4fee\u6539 Parameters: Name Type Description Default tag str \u4e8b\u4ef6\u7c7b\u578b\u552f\u4e00\u6807\u8bc6 required name str \u4e8b\u4ef6\u7c7b\u578b\u540d\u5b57 required data_schema Schema \u8f93\u5165data\u7684Schema None result_schema Schema \u4e8b\u4ef6\u5904\u7406\u56de\u8c03\u51fd\u6570 return \u7ed3\u679c Schema None request_schema Schema django http request Schema None response_schema Schema django http response Schema None description str \u4e8b\u4ef6\u7c7b\u578b\u63cf\u8ff0 ''","title":"__init__()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/","text":"\u524d\u7aef\u754c\u9762 # \u6e29\u99a8\u63d0\u793a \u5728\u9605\u8bfb\u8be5\u6587\u6863\u4e4b\u524d\uff0c\u5e0c\u671b\u60a8\u5df2\u9605\u8bfb\u8fc7OpenAPI-Plus\u6587\u6863 \u60a8\u5df2\u4f7f\u7528\u6216\u6d4f\u89c8\u8fc7ArkID\u524d\u7aef\u754c\u9762 \u524d\u7aef\u754c\u9762\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6a21\u5757\uff1a \u767b\u5f55\u754c\u9762 \u524d\u7aef\u5730\u5740\u754c\u9762 \u529f\u80fd\u754c\u9762 \u767b\u5f55\u754c\u9762 # \u767b\u5f55\u754c\u9762\u4e3b\u8981\u901a\u8fc7 /api/v1/tenant/{tenant_id}/login_page/ \u63a5\u53e3\u8fd4\u56de\u7684\u9875\u9762\u63cf\u8ff0\u4fe1\u606f\u751f\u6210\u3002 \u767b\u5f55\u754c\u9762\u914d\u7f6e\u63a5\u53e3\u8fd4\u56de\u5185\u5bb9\u5305\u542b\u4e24\u9879\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002\u4e3e\u4f8b\u56fe\u7247\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u5173\u952e\u5b57 \u540d\u79f0 \u8be6\u60c5\u8bf4\u660e data \u9875\u9762\u9879\u914d\u7f6e \u6e32\u67d3\u767b\u5f55/\u6ce8\u518c\u7b49\u4e0d\u540c\u9875\u9762\u8868\u5355 tenant \u79df\u6237\u4fe1\u606f \u6e32\u67d3\u79df\u6237\u56fe\u6807\u548c\u540d\u79f0\u7b49 \u9875\u9762\u9879\u914d\u7f6e # \u9875\u9762\u9879\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u7531 \u8ba4\u8bc1\u56e0\u7d20 \u6a21\u5757\u52a8\u6001\u6dfb\u52a0\u6240\u5f97\u3002\u9ed8\u8ba4\u6709\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u9875\u9762\u914d\u7f6e\u7b49\u4fe1\u606f\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9875\u9762\u9879\u914d\u7f6e\u751f\u6210\u767b\u5f55\u6a21\u5757\u4e2d\u6240\u6709\u7684\u4e0d\u540c\u8868\u5355\u9879\u548c\u6309\u94ae\u64cd\u4f5c\u3002\u4e3b\u8981\u5305\u542b\u7684\u9875\u9762\u9879\u4e3a\u767b\u5f55\u9875\u9762\u3001\u6ce8\u518c\u9875\u9762\u548c\u5fd8\u8bb0\u5bc6\u7801\u9875\u9762\u3002\u7531\u4e8e\u4e09\u79cd\u9875\u9762\u9879\u7684\u6e32\u67d3\u8fc7\u7a0b\u4e00\u81f4\uff0c\u5728\u6b64\u53ea\u4ecb\u7ecd\u767b\u5f55\u9875\u9762\u9879\u7684\u751f\u6210\u8fc7\u7a0b\u4ee5\u53ca\u6ce8\u610f\u4e8b\u9879\u3002 data\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u503c\u4e3a\u9875\u9762\u9879\u7684\u5404\u81ea\u9875\u9762\u63cf\u8ff0\u4fe1\u606f\uff0c\u6bcf\u4e00\u9879\u4e2d\u53c8\u5305\u542b forms bottoms extend name \u7b49\u5b57\u6bb5\u4fe1\u606f\u3002 \u5173\u952e\u5b57 \u540d\u79f0 name \u9875\u9762\u914d\u7f6e\u9879\u540d\u79f0 forms \u4e0d\u540c\u65b9\u5f0f\u7684\u8868\u5355 bottoms \u8868\u5355\u5e95\u90e8\u64cd\u4f5c extend \u7b2c\u4e09\u65b9\u767b\u5f55 \u8868\u5355\u9879 forms forms\u7528\u6765\u6e32\u67d3\u4e0d\u540c\u65b9\u5f0f\u8868\u5355\u9879\u3002\u6bd4\u5982\u767b\u5f55\u53ef\u4ee5\u5b58\u5728 \u2460 \u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u65b9\u5f0f\uff1b\u2461 \u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\u65b9\u5f0f \u7b49\u3002\u800c\u5176\u4e2d\u53c8\u5305\u542b label items submit \u7b49\u5b57\u6bb5\u4fe1\u606f\u3002 \u5173\u952e\u5b57 \u8be6\u60c5 label \u8868\u5355\u9879\u6807\u9898\u540d\u79f0 items \u6bcf\u4e00\u6761\u8868\u5355\u9879\u7684\u8be6\u7ec6\u8868\u8ff0 submit \u8868\u5355\u9879\u7684\u63d0\u4ea4\u64cd\u4f5c\u8868\u8ff0 items\u8868\u5355\u9879\u7528\u4e8e\u663e\u793a\u548c\u8f93\u5165\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u624b\u673a\u53f7\u7b49\u4fe1\u606f\uff0c\u5e76\u5e26\u6709\u53d1\u9001\u9a8c\u8bc1\u7801\u7b49\u529f\u80fd\u64cd\u4f5c\u3002 \u5173\u952e\u5b57 \u542b\u4e49 \u8be6\u60c5 name \u5b57\u6bb5key \u63d0\u4ea4\u65f6\u56de\u4f20\u7684key type \u8868\u5355\u9879\u7c7b\u578b \u2460 text \u2461 password \u2462 hidden placeholder \u8868\u5355\u9879\u5360\u4f4d\u7b26 - readonly \u8868\u5355\u9879\u53ea\u8bfb - append \u540e\u7f00\u64cd\u4f5c \u89c1submit\u64cd\u4f5c\u8bf4\u660e\u5373\u53ef\uff0c \u4e00\u822c\u5e38\u7528\u4e8e'\u53d1\u9001\u9a8c\u8bc1\u7801'\u548c'\u56fe\u5f62\u6821\u9a8c\u7801'\u7b49\u64cd\u4f5c submit\u4e3a\u63d0\u4ea4\u7528\u6237\u8f93\u5165\u7684items\u4fe1\u606f\u3002 \u5173\u952e\u5b57 \u8be6\u60c5 http \u6309\u94ae\u64cd\u4f5c\u5185\u5bb9\uff0c\u5305\u542burl/path/params\u7b49\u5185\u5bb9 title \u6309\u94ae\u64cd\u4f5c\u540d\u79f0 redirect \u70b9\u51fb\u4e4b\u540e\u7684\u91cd\u5b9a\u5411\u5730\u5740 agreement \u6ce8\u518c\u534f\u8bae\u8bf4\u660e delay \u65f6\u95f4\u5ef6\u8fdf\uff0c \u7528\u4e8e\u53d1\u9001\u9a8c\u8bc1\u7801\u7b49\u64cd\u4f5c gopage \u9875\u9762\u540d\u79f0\uff0c\u7528\u4e8e\u524d\u5f80data\u4e2d\u67d0\u4e2a\u9875\u9762 img \u56fe\u7247\u5730\u5740\uff0c\u7528\u4e8e\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u56fe\u6807\u663e\u793a long \u5e03\u5c14\u503c\uff0c\u957f\u7c7b\u578b\u6309\u94ae, \u7528\u4e8e\u6309\u94ae\u7684\u957f\u5ea6\u7684\u63a7\u5236 prepend \u6309\u94ae\u524d\u7f00\u6587\u5b57\uff0c\u5e38\u7528\u4e8e\u8868\u5355\u5e95\u90e8\u6309\u94ae tooltip \u6309\u94ae\u79fb\u5165\u63d0\u793a\u4fe1\u606f\u63cf\u8ff0\uff0c\u5e38\u7528\u4e8e\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae \u5e95\u90e8\u64cd\u4f5c bottoms bottoms\u7528\u4e8e\u4e0d\u540c\u9875\u9762\u914d\u7f6e\u9879\u4e4b\u95f4\u8fdb\u884c\u6765\u56de\u7684\u5207\u6362\u64cd\u4f5c\u3002 \u5728\u524d\u7aef\u9875\u9762\u5c55\u793a\u4e2d\uff0c\u5e38\u89c1\u4e8e \u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\u7acb\u5373\u6ce8\u518c \u548c \u5fd8\u8bb0\u5bc6\u7801 \u7b49\u6309\u94ae\u3002\u8be5\u7c7b\u578b\u7684\u64cd\u4f5c\u5c5e\u6027\u4e00\u822c\u5305\u542b\u4e0a\u8ff0\u63cf\u8ff0\u4e2d\u7684 prepend gopage \u7b49\u5c5e\u6027\u3002 \u7b2c\u4e09\u65b9\u767b\u5f55 extend extend\u4ec5\u5b58\u5728\u4e8e\u767b\u5f55\u9875\u9762\u914d\u7f6e\u9879\u4e2d\uff0c\u7528\u4e8e\u663e\u793a\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u9879\u3002\u5728\u4e0a\u9762\u56fe\u7247\u4e2d\u8868\u793a\u4e3a\u4e0b\u65b9\u7684\u591a\u4e2a\u56fe\u6807\u3002 extend\u7531 title buttons \u4e24\u9879\u7ec4\u6210\u3002title\u4e3a\u6807\u9898\uff1bbuttons\u4e3a\u5404\u4e2a\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae\u914d\u7f6e\u3002 buttons\u4e2d\u7684\u64cd\u4f5c\u5c5e\u6027\u4e00\u822c\u5305\u542b img redirect tooltip \u7b49\u5c5e\u6027\u4fe1\u606f\u3002 \u914d\u7f6e\u4e3e\u4f8b \u63a5\u53e3\u4e2ddata\u8fd4\u56de\u7684\u4fe1\u606f\u4e3e\u4f8b\u5982\u4e0b\u6240\u8ff0\uff1a { \"data\" : { \"login\" : { \"name\" : \"login\" , \"forms\" : [ { \"label\" : \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , \"items\" : [ { \"value\" : \"\" , \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" , }, { \"value\" : \"\" , \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" , }, ], \"submit\" : { \"http\" : { \"url\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"params\" : null , }, \"title\" : \"\u767b\u5f55\" , \"long\" : true , }, } ], \"bottoms\" : [ { \"prepend\" : \"\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\" , \"gopage\" : \"register\" , \"title\" : \"\u7acb\u5373\u6ce8\u518c\" , }, { \"prepend\" : null , \"gopage\" : \"password\" , \"title\" : \"\u5fd8\u8bb0\u5bc6\u7801\" , }, ], \"extend\" : { \"title\" : \"\u7b2c\u4e09\u65b9\u767b\u5f55\" , \"buttons\" : [ { \"img\" : \"xxx.png\" , \"redirect\" : { \"url\" : \"xxx\" , \"params\" : null , }, \"tooltip\" : \"Github\" , }, { \"img\" : \"xxx.png\" , \"redirect\" : { \"url\" : \"xxx\" , \"params\" : null , }, \"tooltip\" : \"Gitee\" , } ], }, }, \"register\" : {}, \"password\" : {}, } } \u79df\u6237\u4fe1\u606f # \u79df\u6237\u4fe1\u606f\u4e3b\u8981\u8fd4\u56de\u5f53\u524d\u767b\u5f55\u7684\u79df\u6237\u4fe1\u606f\u3002\u6e32\u67d3\u4e0a\u56fe\u4e2d\u8868\u5355\u4e0a\u65b9\u7684\u79df\u6237\u56fe\u6807\u548c\u79df\u6237\u540d\u79f0\u3002 \u767b\u5f55\u63d0\u793a \u767b\u5f55\u9875\u9762\u9ed8\u8ba4\u4f7f\u7528\u5e73\u53f0\u79df\u6237\u767b\u5f55 \u82e5\u60f3\u4f7f\u7528\u5176\u4ed6\u5df2\u5b58\u5728\u7684\u79df\u6237\u8fdb\u884c\u767b\u5f55\uff0c\u8bf7\u5728\u5730\u5740\u680f\u586b\u5165\u540e\u7f00\u4fe1\u606f \u4f8b\u5982\uff1a /login?tenant_id=123 \u524d\u7aef\u5730\u5740\u754c\u9762 # \u8be5\u9875\u9762\u7684\u5b58\u5728\u4f9d\u636e\u662f\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5339\u914d\u53ef\u80fd\u5b58\u5728\u7684\u79df\u6237slug\u3002 \u524d\u7aef\u5730\u5740\u754c\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4f7f\u7528\u8bf4\u660e \u5730\u5740\u5fc5\u987b\u5305\u542b\u534f\u8bae\u3001\u57df\u540d\u548c\u7aef\u53e3\u3002\u6bd4\u5982 https://arkidv2.dev.longguikeji.com \u82e5\u8f93\u5165\u7684\u5730\u5740\u4e24\u7aef\u542b\u6709\u7a7a\u683c\uff0c\u5c06\u81ea\u52a8\u53bb\u6389\u3002 \u82e5\u8f93\u5165\u7684\u5730\u5740\u672b\u5c3e\u4e3a / \u5b57\u7b26\uff0c\u4e5f\u5c06\u81ea\u52a8\u53bb\u6389\u3002 \u82e5\u8f93\u5165\u7684\u5730\u5740\u4e2d\u95f4\u5b58\u5728\u7a7a\u683c\u6216\u4e3a\u975e\u5730\u5740\u5b57\u7b26\u4e32\uff0c\u5219\u4e0d\u4f1a\u63d0\u4ea4\u6210\u529f\u3002 \u529f\u80fd\u754c\u9762 # \u4e3b\u8981\u63cf\u8ff0\u600e\u6837\u901a\u8fc7OpenAPI-Plus\u7684\u6269\u5c55\u63a5\u53e3 /api/v1/openapi.json \u8fd4\u56de\u7684\u4fe1\u606f\u800c\u6f14\u5316\u4e3a\u524d\u7aef\u663e\u793a\u7684\u6bcf\u4e00\u5f20\u754c\u9762\u3002\u901a\u8fc7\u5bf9\u524d\u7aef\u754c\u9762\u7684\u751f\u6210\u8fc7\u7a0b\u7684\u6f14\u53d8\u63cf\u8ff0\uff0c\u4f7f\u5f97\u9605\u8bfbArkID\u524d\u7aef\u9879\u76ee\u7684\u4eba\u5458\u66f4\u52a0\u6613\u4e8e\u5efa\u8bae\u6216\u4f7f\u7528\u3002 \u529f\u80fd\u754c\u9762\u4e3b\u8981\u5305\u542b\u9664\u767b\u5f55\u9875\u9762\u4e4b\u5916\u7684\u5176\u4ed6\u529f\u80fd\u6027\u9875\u9762\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u9605\u8bfb\u6570\u636e\u548c\u589e\u5220\u6539\u67e5\u6570\u636e\u4fe1\u606f\u7684\u5185\u5bb9\u9875\u9762\u3002\u5177\u4f53\u9875\u9762\u7684\u5185\u5bb9\u548c\u8fd0\u4f5c\u9700\u8981\u6709\u524d\u7aef\u77e5\u8bc6\u57fa\u7840\uff0c\u6bd4\u5982TypeScript\u3001Vue3\u548cBootstrap5\u7b49\u3002\u6b64\u6587\u6863\u5c06\u4f1a\u907f\u514d\u6d89\u53ca\u5230\u4efb\u4f55\u524d\u7aef\u6240\u9700\u8981\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u800c\u53ea\u662f\u4e3a\u60a8\u66f4\u597d\u4e86\u8d2f\u7a7f\u524d\u7aef\u548c\u540e\u7aef\uff0c\u4ece\u800c\u7406\u89e3\u5176\u5927\u4f53\u8fd0\u4f5c\u7684\u65b9\u5f0f\u3002 \u95ee\u9898\u6982\u89c8 # \u8fd9\u4e9b\u9875\u9762\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u529f\u80fd\u9875\u9762\u7684\u751f\u6210\u5927\u4f53\u7ecf\u8fc7\u7684\u4e86\u4e0b\u9762\u7684\u51e0\u4e2a\u6b65\u9aa4\u3002 \u6839\u636e\u8def\u7531\uff08routers\uff09\u751f\u6210\u524d\u7aef\u8def\u7531 \u6839\u636e\u8def\u7531\u63d0\u4f9b\u7684\u9875\u9762\uff08page\uff09\u5bfb\u627e\u9875\u9762\u914d\u7f6e\uff08pages\uff09\u4e2d\u5bf9\u5e94\u7684\u914d\u7f6e\u8be6\u60c5 \u6839\u636e\u9875\u9762\u914d\u7f6e\u751f\u6210\u7c7b\u578b\u9875\u9762\uff0c\u5e76\u5bfb\u627e\u5176\u4e2d\u7684\u5f39\u6846\u9875\u3001\u7ea7\u8054\u9875\u548c\u5b50\u9875\uff0c\u4ee5\u53ca\u5404\u81ea\u5bf9\u5e94\u7684\u64cd\u4f5c\uff08paths\uff09 \u6839\u636e\u64cd\u4f5c\u4fe1\u606f\u5bfb\u627e\u5bf9\u5e94\u7684\u63cf\u8ff0\uff08components\uff09\u5185\u5bb9\uff0c\u5e76\u6839\u636e\u63cf\u8ff0\u751f\u6210\u9875\u9762\u5c5e\u6027 \u5c06\u64cd\u4f5c\u6302\u8f7d\u5230\u9875\u9762\u6216\u6309\u94ae\u4e0a\uff0c\u4ece\u800c\u5b8c\u6210\u9875\u9762\u7684\u6e32\u67d3\u548c\u6309\u94ae\u7684\u64cd\u4f5c \u63d0\u793a \u5f39\u6846\u9875\uff1a\u6309\u94ae\u7c7b\u578b\u4e3aopen\u7684\u64cd\u4f5c\u6253\u5f00\u7684\u5bf9\u8bdd\u6846\u9875\u9762 \u7ea7\u8054\u9875\uff1a\u4e00\u822c\u4e3a\u6811\u72b6\u9875node_action\u63cf\u8ff0\u4e2d\u7684cascade\u7c7b\u578b\u64cd\u4f5c\u7684\u6307\u5411\u9875\u9762 \u5b50\u9875\uff1a\u5b9a\u4e49\u4e3atabs/step\u7b49\u7c7b\u578b\u9875\u9762\u4e2d\u58f0\u660e\u7684pages\u6307\u5411\u9875\u9762 OpenAPI-Plus # OpenAPI-Plus\u901a\u8fc7\u63a5\u53e3 /api/v1/openapi.json \u8fd4\u56de\u7684\u4fe1\u606f\u548c\u529f\u80fd\u7b80\u4ecb\u5982\u4e0b\u3002\u66f4\u4e3a\u8be6\u7ec6\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003OpenAPI-Plus\u6587\u6863\u3002 \u6a21\u5757 \u540d\u79f0 \u8be6\u60c5\u8bf4\u660e \u524d\u7aef\u662f\u5426\u4f7f\u7528 routers \u8def\u7531\u96c6 \u7528\u4e8e\u524d\u7aef\u751f\u6210\u8def\u7531\u4fe1\u606f \u2714 pages \u9875\u9762\u96c6 \u7528\u4e8e\u524d\u7aef\u751f\u6210\u4e0d\u540c\u7684\u9875\u9762\u7c7b\u578b\u548c\u9875\u9762\u64cd\u4f5c \u2714 paths \u63a5\u53e3\u96c6 \u7528\u4e8e\u5bfb\u627eComponents\u548c\u6743\u9650\u8ba4\u8bc1\u7b49 \u2714 components \u63cf\u8ff0\u96c6 \u7528\u4e8e\u524d\u7aef\u751f\u6210\u9875\u9762\u5143\u7d20\u4fe1\u606f \u2714 permissions \u6743\u9650\u96c6 \u7528\u4e8e\u6743\u9650\u7ba1\u7406 \u2714 translation \u56fd\u9645\u5316 \u7528\u4e8e\u56fd\u9645\u5316\u8bed\u97f3\u5207\u6362 \u2714 info \u4fe1\u606f OpenAPI\u63cf\u8ff0 \u2718 openapi \u7248\u672c \u7248\u672c\u53f7 \u2718 \u8def\u7531 routers # \u8def\u7531\u4fe1\u606f\u7531OpenAPI-Plus\u63a5\u53e3\u63d0\u4f9b\u3002\u524d\u7aef\u5c06\u76f4\u63a5\u8bfb\u53d6\u6b64\u6a21\u5757\u7684\u5185\u5bb9\uff0c\u5e76\u6839\u636e\u8def\u7531\u63cf\u8ff0\u6765\u751f\u6210\u524d\u7aef\u8def\u7531\u8868\u3002 \u5728\u751f\u6210\u524d\u7aef\u8def\u7531\u8868\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u8def\u7531\u9875\u9762\u6743\u9650\u548c\u8def\u7531\u4e00\u4e9b\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u548c\u6302\u8f7d\u3002\u8def\u7531\u5206\u4e3a\u6709Children\u548c\u65e0Children\u3002 \u63d0\u793a \u5b50\u8def\u7531Children\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e2\u65f6\uff0c\u4f1a\u4ea7\u751f\u7236\u5b50\u4fa7\u8fb9\u680f \u5b50\u8def\u7531Children\u4e3a\u7a7a\u6216\u6570\u91cf\u4e3a1\u65f6\uff0c\u4fa7\u8fb9\u680f\u76f4\u63a5\u5c55\u793a\u9875\u9762 \u65e0Children\u8def\u7531\u793a\u4f8b { \"path\" : \"mine\" , \"name\" : \"\u6211\u7684\" , \"icon\" : \"mine\" , \"hidden\" : true , \"page\" : \"mine\" , } \u8def\u7531\u6743\u9650 \u5982\u679c\u67d0\u4e2aOpenAPI-Plus\u8def\u7531\u8868\u4e2d\u63d0\u4f9b page \u4fe1\u606f\uff0c\u5219\u8bf4\u660e\u6b64\u8def\u7531\u8868\u9700\u8981\u5c55\u793a\u67d0\u4e2a\u9875\u9762\uff0c\u4e5f\u5c31\u9700\u8981\u5148\u5224\u65ad\u8be5\u9875\u9762\u662f\u5426\u62e5\u6709\u6743\u9650\u3002\u6743\u9650\u96c6\u4e0d\u4f1a\u76f4\u63a5\u63d0\u4f9b\u8be5\u9875\u9762\u7684\u6743\u9650\uff0c\u800c\u9700\u8981\u524d\u7aef\u627e\u5230\u8be5\u9875\u9762\u7684\u521d\u59cb\u5316\u63a5\u53e3\u7b49\u5185\u5bb9\uff0c\u901a\u8fc7\u63a5\u53e3\u6765\u95f4\u63a5\u5730\u5224\u65ad\u8be5\u8def\u7531\u9875\u9762\u7684\u6743\u9650\u3002 \u8def\u7531\u6743\u9650\u67e5\u627e\u6b65\u9aa4\uff08\u4ee5\u4e0a\u8ff0\u793a\u4f8b\u4e3a\u4f8b\uff09\uff1a \u4e0a\u8ff0\u793a\u4f8b\u4e2d page \u6307\u5411mine\u9875\u9762\uff0c\u5c06\u5728 \u9875\u9762\u914d\u7f6e \u4e2d\u67e5\u627e\u5230init_action\u3002\u5982\u679c\u5176\u4e3a\u7ea7\u8054\u9875\u9762\u548c\u5b50\u9875\u9762(tabs/step)\u7c7b\u578b\uff0c\u5219\u67e5\u627e\u7ea7\u8054\u9875\u9762\u7684\u7b2c\u4e00\u4e2a\u5b50\u9875\u9762\u7684 \u9875\u9762\u914d\u7f6e \u901a\u8fc7init_action\u518d\u67e5\u627e \u63a5\u53e3\u4fe1\u606f \u4e2d\u5bf9\u5e94\u7684\u63a5\u53e3operationId \u901a\u8fc7operationId\u518d\u53bb \u6743\u9650\u96c6 \u4e2d\u67e5\u627e\u5bf9\u5e94\u7684sort_id\u503c \u6839\u636esort_id\u503c\u901a\u8fc7\u6743\u9650\u63a5\u53e3\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\u6765\u51b3\u5b9a\u5176\u662f\u5426\u62e5\u6709\u6743\u9650 \u82e5\u62e5\u6709\u8be5\u8def\u7531\u6743\u9650\uff0c\u5219\u663e\u793a\uff1b\u5426\u5219\u4e0d\u663e\u793a \u663e\u793a\u5c5e\u6027 \u9664\u8def\u7531\u6743\u9650\u9700\u8981\u524d\u7aef\u6ce8\u610f\u4e4b\u5916\uff0cOpenAPI-Plus\u63d0\u4f9b\u7684 mobile web \u4e24\u4e2a\u663e\u793a\u5c5e\u6027\u4e5f\u9700\u8981\u524d\u7aef\u8fdb\u884c\u505a\u51fa\u76f8\u5bf9\u5e94\u7684\u5904\u7406\u3002 \u8fd9\u4e24\u4e2a\u5c5e\u6027\u51b3\u5b9a\u79fb\u52a8\u7aef\u548cWeb\u7aef\u663e\u793a\u54ea\u4e9b\u8def\u7531\u9875\u9762\u3002\u5982\u679c\u6307\u660emobile\u5c5e\u6027\uff0c\u5219\u5c06\u4f1a\u5728\u79fb\u52a8\u7aef\u9875\u9762\u5e95\u90e8\u663e\u793a\u5bf9\u5e94\u7684\u8def\u7531\u4fe1\u606f\u3002 \u9875\u9762\u914d\u7f6e pages # \u9875\u9762\u914d\u7f6e\u9879\u4e3b\u8981\u7528\u6765\u6e32\u67d3\u9875\u9762\u7684\u7c7b\u578b\u548c\u64cd\u4f5c\u3002\u901a\u8fc7\u8bfb\u53d6\u89e3\u6790\u9875\u9762\u914d\u7f6e\u9879\u4e2d\u7684\u5185\u5bb9\uff0c\u5b8c\u6210\u8def\u7531\u9875\u9762\u7684\u5b8c\u6574\u6e32\u67d3\u3002\u9875\u9762\u914d\u7f6e\u9879\u4e2d\u5305\u542b\u54ea\u4e9b\u5185\u5bb9\uff0c\u5df2\u7ecf\u5728OpenAPI-Plus\u6587\u6863\u4e2d\u8be6\u7ec6\u9610\u8ff0\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 \u751f\u6210\u7684\u67d0\u4e2a\u4e3b\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u751f\u6210\u7684\u67d0\u4e2a\u5f39\u51fa\u6846\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8bfb\u53d6\u63d0\u793a \u82e5\u4e3a\u8def\u7531\u58f0\u660e\u9875\u9762\u548c\u5176\u7ea7\u8054\u9875\u9762\u5747\u4e3a\u4e3b\u9875\u9762 \u4e3b\u9875\u9762\u548c\u5176\u4ed6\u5b50\u9875\u9762(tabs/step)\u5747\u4f7f\u7528Card\u4e0d\u4f7f\u7528Modal \u4e3b\u9875\u9762\u548c\u4e3b\u9875\u9762\u4ece\u5c5e\u7b2c\u4e00\u4e2a\u5b50\u9875\u9762\u5747\u5728\u6253\u5f00\u8def\u7531\u65f6\u9700\u8981\u521d\u59cb\u5316\u6570\u636e \u9875\u9762\u914d\u7f6e\u9879\u8bfb\u53d6\u6b65\u9aa4\uff1a \u8bfb\u53d6\u9875\u9762\u914d\u7f6e\u540d\u79f0\uff0c\u6302\u8f7d\u5230\u524d\u7aef\u9875\u9762\u4e2d\uff0c\u82e5\u5176\u4e3a\u4e3b\u9875\u9762\u4e14\u4e0d\u662f\u7ea7\u8054\u9875\u9762\u5219\u9690\u85cf\u8be5\u540d\u79f0 \u8bfb\u53d6init_action\u4fe1\u606f\uff0c\u6839\u636einit_action\u4fe1\u606f\u4e2d\u7684\u63a5\u53e3\u83b7\u53d6\u63a5\u53e3\u63cf\u8ff0 \u8bfb\u53d6\u5176\u4f59action\u4fe1\u606f\uff0c\u5e76\u751f\u6210\u9875\u9762\u4e2d\u5bf9\u5e94\u7684\u64cd\u4f5c\u6216\u6309\u94ae \u518d\u4f7f\u7528\u4e0a\u8ff0\u4e24\u4e2a\u6b65\u9aa4\u4e2d\u7684action\u4fe1\u606f\uff0c\u5b8c\u6210\u9875\u9762\u64cd\u4f5c\u7684\u6302\u8f7d \u91cd\u590d\u6267\u884c\u8be5\u8bfb\u53d6\u6b65\u9aa4\uff0c\u5b8c\u6210\u6240\u6709\u6307\u5b9a\u9875\u9762\u7684\u914d\u7f6e\u8bfb\u53d6\u5de5\u4f5c \u63a5\u53e3\u4fe1\u606f paths # \u63a5\u53e3\u4fe1\u606f\u5bf9\u4e8e\u524d\u7aef\u6765\u8bf4\uff0c\u9664operationId\u4e4b\u5916\uff0c\u4e3b\u8981\u7528\u4e8e\u63a5\u53e3responses\u6216requestBody\u5185\u5bb9\u7684\u8bfb\u53d6\u4ee5\u53ca\u64cd\u4f5c\u5185\u5bb9\u7684\u6302\u8f7d\u3002 \u5f53 \u9875\u9762\u914d\u7f6e \u4e2d\u7684action\u63cf\u8ff0 method=get \u65f6\u8bfb\u53d6responses\uff1b\u5426\u5219\u8bfb\u53d6requestBody\u3002 \u4e24\u6761\u8bfb\u53d6\u8def\u7ebf responses => 200 => content => application/json => schema => $ref requestBody => content => application/json => schema => $ref \u5e76\u8fdb\u4e00\u6b65\u8bfb\u53d6\u5176\u4e2d\u7684$ref\u6307\u5411\u3002\u4f8b\u5982 $ref=#/components/schemas/MineAppsOut \u65f6\uff0c\u4f1a\u6839\u636e\u5176 MineAppsOut \u53bb \u5c5e\u6027\u63cf\u8ff0 \u4e2d\u8fdb\u4e00\u6b65\u64cd\u4f5c\u63cf\u8ff0\u3002 \u5c5e\u6027\u63cf\u8ff0 components # \u5c5e\u6027\u63cf\u8ff0\u5728 components => schema => MineAppsOut \u7684\u65b9\u5f0f\u8fdb\u884c\u63cf\u8ff0\u7684\u8be6\u7ec6\u4fe1\u606f\u7684\u89e3\u6790\u548c\u5904\u7406\u3002 \u5728\u6839\u636e\u8be6\u7ec6\u4fe1\u606f\u4e2d\u7684 properties \u7b49\u5185\u5bb9\u6302\u8f7d\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u9875\u9762\u4e2d\u3002 table\u8868\u683c\u578b\u9875\u9762\u5c31\u6302\u8f7d\u5230\u8868\u683c\u5217\u4e2d\uff1bform\u8868\u5355\u578b\u9875\u9762\u5c31\u6302\u8f7d\u5230\u8868\u5355\u9879\u4e2d\u3002 \u6743\u9650\u96c6 permissions # \u6743\u9650\u96c6\u4e3b\u8981\u7528\u4e8e\u524d\u7aef\u8def\u7531\u548cAPI\u6309\u94ae\u7684\u663e\u793a\u4e0e\u5426\u7684\u63a7\u5236\u3002 \u5f53\u6ca1\u6709\u8def\u7531\u6216\u6309\u94ae\u6743\u9650\u4fe1\u606f\u65f6\uff0c\u9875\u9762\u4e0d\u4f1a\u663e\u793a\u6240\u5bf9\u5e94\u7684\u5185\u5bb9\u3002 \u56fd\u9645\u5316 translation # \u9875\u9762\u793a\u4f8b\u56fe\u7247\uff1a \u56fd\u9645\u5316\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u5728\u8bed\u8a00\u4e4b\u95f4\u7684\u9009\u62e9\u5207\u6362\uff0c\u5207\u6362\u4e4b\u540e\u9875\u9762\u5c06\u4f1a\u5237\u65b0\u540e\u66f4\u65b0\uff0c\u4f7f\u7528OpenAPI-Plus\u63d0\u4f9b\u7684\u7ffb\u8bd1\u6587\u672c\u8fdb\u884c\u5bf9\u9875\u9762\u6240\u4f7f\u7528\u4f4d\u7f6e\u7684\u5168\u5c40\u66ff\u6362\u3002","title":"\u524d\u7aef\u754c\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_1","text":"\u6e29\u99a8\u63d0\u793a \u5728\u9605\u8bfb\u8be5\u6587\u6863\u4e4b\u524d\uff0c\u5e0c\u671b\u60a8\u5df2\u9605\u8bfb\u8fc7OpenAPI-Plus\u6587\u6863 \u60a8\u5df2\u4f7f\u7528\u6216\u6d4f\u89c8\u8fc7ArkID\u524d\u7aef\u754c\u9762 \u524d\u7aef\u754c\u9762\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6a21\u5757\uff1a \u767b\u5f55\u754c\u9762 \u524d\u7aef\u5730\u5740\u754c\u9762 \u529f\u80fd\u754c\u9762","title":"\u524d\u7aef\u754c\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_2","text":"\u767b\u5f55\u754c\u9762\u4e3b\u8981\u901a\u8fc7 /api/v1/tenant/{tenant_id}/login_page/ \u63a5\u53e3\u8fd4\u56de\u7684\u9875\u9762\u63cf\u8ff0\u4fe1\u606f\u751f\u6210\u3002 \u767b\u5f55\u754c\u9762\u914d\u7f6e\u63a5\u53e3\u8fd4\u56de\u5185\u5bb9\u5305\u542b\u4e24\u9879\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002\u4e3e\u4f8b\u56fe\u7247\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u5173\u952e\u5b57 \u540d\u79f0 \u8be6\u60c5\u8bf4\u660e data \u9875\u9762\u9879\u914d\u7f6e \u6e32\u67d3\u767b\u5f55/\u6ce8\u518c\u7b49\u4e0d\u540c\u9875\u9762\u8868\u5355 tenant \u79df\u6237\u4fe1\u606f \u6e32\u67d3\u79df\u6237\u56fe\u6807\u548c\u540d\u79f0\u7b49","title":"\u767b\u5f55\u754c\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_3","text":"\u9875\u9762\u9879\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u7531 \u8ba4\u8bc1\u56e0\u7d20 \u6a21\u5757\u52a8\u6001\u6dfb\u52a0\u6240\u5f97\u3002\u9ed8\u8ba4\u6709\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u9875\u9762\u914d\u7f6e\u7b49\u4fe1\u606f\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9875\u9762\u9879\u914d\u7f6e\u751f\u6210\u767b\u5f55\u6a21\u5757\u4e2d\u6240\u6709\u7684\u4e0d\u540c\u8868\u5355\u9879\u548c\u6309\u94ae\u64cd\u4f5c\u3002\u4e3b\u8981\u5305\u542b\u7684\u9875\u9762\u9879\u4e3a\u767b\u5f55\u9875\u9762\u3001\u6ce8\u518c\u9875\u9762\u548c\u5fd8\u8bb0\u5bc6\u7801\u9875\u9762\u3002\u7531\u4e8e\u4e09\u79cd\u9875\u9762\u9879\u7684\u6e32\u67d3\u8fc7\u7a0b\u4e00\u81f4\uff0c\u5728\u6b64\u53ea\u4ecb\u7ecd\u767b\u5f55\u9875\u9762\u9879\u7684\u751f\u6210\u8fc7\u7a0b\u4ee5\u53ca\u6ce8\u610f\u4e8b\u9879\u3002 data\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u503c\u4e3a\u9875\u9762\u9879\u7684\u5404\u81ea\u9875\u9762\u63cf\u8ff0\u4fe1\u606f\uff0c\u6bcf\u4e00\u9879\u4e2d\u53c8\u5305\u542b forms bottoms extend name \u7b49\u5b57\u6bb5\u4fe1\u606f\u3002 \u5173\u952e\u5b57 \u540d\u79f0 name \u9875\u9762\u914d\u7f6e\u9879\u540d\u79f0 forms \u4e0d\u540c\u65b9\u5f0f\u7684\u8868\u5355 bottoms \u8868\u5355\u5e95\u90e8\u64cd\u4f5c extend \u7b2c\u4e09\u65b9\u767b\u5f55 \u8868\u5355\u9879 forms forms\u7528\u6765\u6e32\u67d3\u4e0d\u540c\u65b9\u5f0f\u8868\u5355\u9879\u3002\u6bd4\u5982\u767b\u5f55\u53ef\u4ee5\u5b58\u5728 \u2460 \u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u65b9\u5f0f\uff1b\u2461 \u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\u65b9\u5f0f \u7b49\u3002\u800c\u5176\u4e2d\u53c8\u5305\u542b label items submit \u7b49\u5b57\u6bb5\u4fe1\u606f\u3002 \u5173\u952e\u5b57 \u8be6\u60c5 label \u8868\u5355\u9879\u6807\u9898\u540d\u79f0 items \u6bcf\u4e00\u6761\u8868\u5355\u9879\u7684\u8be6\u7ec6\u8868\u8ff0 submit \u8868\u5355\u9879\u7684\u63d0\u4ea4\u64cd\u4f5c\u8868\u8ff0 items\u8868\u5355\u9879\u7528\u4e8e\u663e\u793a\u548c\u8f93\u5165\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u624b\u673a\u53f7\u7b49\u4fe1\u606f\uff0c\u5e76\u5e26\u6709\u53d1\u9001\u9a8c\u8bc1\u7801\u7b49\u529f\u80fd\u64cd\u4f5c\u3002 \u5173\u952e\u5b57 \u542b\u4e49 \u8be6\u60c5 name \u5b57\u6bb5key \u63d0\u4ea4\u65f6\u56de\u4f20\u7684key type \u8868\u5355\u9879\u7c7b\u578b \u2460 text \u2461 password \u2462 hidden placeholder \u8868\u5355\u9879\u5360\u4f4d\u7b26 - readonly \u8868\u5355\u9879\u53ea\u8bfb - append \u540e\u7f00\u64cd\u4f5c \u89c1submit\u64cd\u4f5c\u8bf4\u660e\u5373\u53ef\uff0c \u4e00\u822c\u5e38\u7528\u4e8e'\u53d1\u9001\u9a8c\u8bc1\u7801'\u548c'\u56fe\u5f62\u6821\u9a8c\u7801'\u7b49\u64cd\u4f5c submit\u4e3a\u63d0\u4ea4\u7528\u6237\u8f93\u5165\u7684items\u4fe1\u606f\u3002 \u5173\u952e\u5b57 \u8be6\u60c5 http \u6309\u94ae\u64cd\u4f5c\u5185\u5bb9\uff0c\u5305\u542burl/path/params\u7b49\u5185\u5bb9 title \u6309\u94ae\u64cd\u4f5c\u540d\u79f0 redirect \u70b9\u51fb\u4e4b\u540e\u7684\u91cd\u5b9a\u5411\u5730\u5740 agreement \u6ce8\u518c\u534f\u8bae\u8bf4\u660e delay \u65f6\u95f4\u5ef6\u8fdf\uff0c \u7528\u4e8e\u53d1\u9001\u9a8c\u8bc1\u7801\u7b49\u64cd\u4f5c gopage \u9875\u9762\u540d\u79f0\uff0c\u7528\u4e8e\u524d\u5f80data\u4e2d\u67d0\u4e2a\u9875\u9762 img \u56fe\u7247\u5730\u5740\uff0c\u7528\u4e8e\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u56fe\u6807\u663e\u793a long \u5e03\u5c14\u503c\uff0c\u957f\u7c7b\u578b\u6309\u94ae, \u7528\u4e8e\u6309\u94ae\u7684\u957f\u5ea6\u7684\u63a7\u5236 prepend \u6309\u94ae\u524d\u7f00\u6587\u5b57\uff0c\u5e38\u7528\u4e8e\u8868\u5355\u5e95\u90e8\u6309\u94ae tooltip \u6309\u94ae\u79fb\u5165\u63d0\u793a\u4fe1\u606f\u63cf\u8ff0\uff0c\u5e38\u7528\u4e8e\u7b2c\u4e09\u65b9\u767b\u5f55\u6309\u94ae \u5e95\u90e8\u64cd\u4f5c bottoms bottoms\u7528\u4e8e\u4e0d\u540c\u9875\u9762\u914d\u7f6e\u9879\u4e4b\u95f4\u8fdb\u884c\u6765\u56de\u7684\u5207\u6362\u64cd\u4f5c\u3002 \u5728\u524d\u7aef\u9875\u9762\u5c55\u793a\u4e2d\uff0c\u5e38\u89c1\u4e8e \u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\u7acb\u5373\u6ce8\u518c \u548c \u5fd8\u8bb0\u5bc6\u7801 \u7b49\u6309\u94ae\u3002\u8be5\u7c7b\u578b\u7684\u64cd\u4f5c\u5c5e\u6027\u4e00\u822c\u5305\u542b\u4e0a\u8ff0\u63cf\u8ff0\u4e2d\u7684 prepend gopage \u7b49\u5c5e\u6027\u3002 \u7b2c\u4e09\u65b9\u767b\u5f55 extend extend\u4ec5\u5b58\u5728\u4e8e\u767b\u5f55\u9875\u9762\u914d\u7f6e\u9879\u4e2d\uff0c\u7528\u4e8e\u663e\u793a\u4e0d\u540c\u7684\u7b2c\u4e09\u65b9\u767b\u5f55\u9879\u3002\u5728\u4e0a\u9762\u56fe\u7247\u4e2d\u8868\u793a\u4e3a\u4e0b\u65b9\u7684\u591a\u4e2a\u56fe\u6807\u3002 extend\u7531 title buttons \u4e24\u9879\u7ec4\u6210\u3002title\u4e3a\u6807\u9898\uff1bbuttons\u4e3a\u5404\u4e2a\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae\u914d\u7f6e\u3002 buttons\u4e2d\u7684\u64cd\u4f5c\u5c5e\u6027\u4e00\u822c\u5305\u542b img redirect tooltip \u7b49\u5c5e\u6027\u4fe1\u606f\u3002 \u914d\u7f6e\u4e3e\u4f8b \u63a5\u53e3\u4e2ddata\u8fd4\u56de\u7684\u4fe1\u606f\u4e3e\u4f8b\u5982\u4e0b\u6240\u8ff0\uff1a { \"data\" : { \"login\" : { \"name\" : \"login\" , \"forms\" : [ { \"label\" : \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , \"items\" : [ { \"value\" : \"\" , \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" , }, { \"value\" : \"\" , \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" , }, ], \"submit\" : { \"http\" : { \"url\" : \"/api/v1/xxx\" , \"method\" : \"post\" , \"params\" : null , }, \"title\" : \"\u767b\u5f55\" , \"long\" : true , }, } ], \"bottoms\" : [ { \"prepend\" : \"\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\" , \"gopage\" : \"register\" , \"title\" : \"\u7acb\u5373\u6ce8\u518c\" , }, { \"prepend\" : null , \"gopage\" : \"password\" , \"title\" : \"\u5fd8\u8bb0\u5bc6\u7801\" , }, ], \"extend\" : { \"title\" : \"\u7b2c\u4e09\u65b9\u767b\u5f55\" , \"buttons\" : [ { \"img\" : \"xxx.png\" , \"redirect\" : { \"url\" : \"xxx\" , \"params\" : null , }, \"tooltip\" : \"Github\" , }, { \"img\" : \"xxx.png\" , \"redirect\" : { \"url\" : \"xxx\" , \"params\" : null , }, \"tooltip\" : \"Gitee\" , } ], }, }, \"register\" : {}, \"password\" : {}, } }","title":"\u9875\u9762\u9879\u914d\u7f6e"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_4","text":"\u79df\u6237\u4fe1\u606f\u4e3b\u8981\u8fd4\u56de\u5f53\u524d\u767b\u5f55\u7684\u79df\u6237\u4fe1\u606f\u3002\u6e32\u67d3\u4e0a\u56fe\u4e2d\u8868\u5355\u4e0a\u65b9\u7684\u79df\u6237\u56fe\u6807\u548c\u79df\u6237\u540d\u79f0\u3002 \u767b\u5f55\u63d0\u793a \u767b\u5f55\u9875\u9762\u9ed8\u8ba4\u4f7f\u7528\u5e73\u53f0\u79df\u6237\u767b\u5f55 \u82e5\u60f3\u4f7f\u7528\u5176\u4ed6\u5df2\u5b58\u5728\u7684\u79df\u6237\u8fdb\u884c\u767b\u5f55\uff0c\u8bf7\u5728\u5730\u5740\u680f\u586b\u5165\u540e\u7f00\u4fe1\u606f \u4f8b\u5982\uff1a /login?tenant_id=123","title":"\u79df\u6237\u4fe1\u606f"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_5","text":"\u8be5\u9875\u9762\u7684\u5b58\u5728\u4f9d\u636e\u662f\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5339\u914d\u53ef\u80fd\u5b58\u5728\u7684\u79df\u6237slug\u3002 \u524d\u7aef\u5730\u5740\u754c\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4f7f\u7528\u8bf4\u660e \u5730\u5740\u5fc5\u987b\u5305\u542b\u534f\u8bae\u3001\u57df\u540d\u548c\u7aef\u53e3\u3002\u6bd4\u5982 https://arkidv2.dev.longguikeji.com \u82e5\u8f93\u5165\u7684\u5730\u5740\u4e24\u7aef\u542b\u6709\u7a7a\u683c\uff0c\u5c06\u81ea\u52a8\u53bb\u6389\u3002 \u82e5\u8f93\u5165\u7684\u5730\u5740\u672b\u5c3e\u4e3a / \u5b57\u7b26\uff0c\u4e5f\u5c06\u81ea\u52a8\u53bb\u6389\u3002 \u82e5\u8f93\u5165\u7684\u5730\u5740\u4e2d\u95f4\u5b58\u5728\u7a7a\u683c\u6216\u4e3a\u975e\u5730\u5740\u5b57\u7b26\u4e32\uff0c\u5219\u4e0d\u4f1a\u63d0\u4ea4\u6210\u529f\u3002","title":"\u524d\u7aef\u5730\u5740\u754c\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_6","text":"\u4e3b\u8981\u63cf\u8ff0\u600e\u6837\u901a\u8fc7OpenAPI-Plus\u7684\u6269\u5c55\u63a5\u53e3 /api/v1/openapi.json \u8fd4\u56de\u7684\u4fe1\u606f\u800c\u6f14\u5316\u4e3a\u524d\u7aef\u663e\u793a\u7684\u6bcf\u4e00\u5f20\u754c\u9762\u3002\u901a\u8fc7\u5bf9\u524d\u7aef\u754c\u9762\u7684\u751f\u6210\u8fc7\u7a0b\u7684\u6f14\u53d8\u63cf\u8ff0\uff0c\u4f7f\u5f97\u9605\u8bfbArkID\u524d\u7aef\u9879\u76ee\u7684\u4eba\u5458\u66f4\u52a0\u6613\u4e8e\u5efa\u8bae\u6216\u4f7f\u7528\u3002 \u529f\u80fd\u754c\u9762\u4e3b\u8981\u5305\u542b\u9664\u767b\u5f55\u9875\u9762\u4e4b\u5916\u7684\u5176\u4ed6\u529f\u80fd\u6027\u9875\u9762\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u9605\u8bfb\u6570\u636e\u548c\u589e\u5220\u6539\u67e5\u6570\u636e\u4fe1\u606f\u7684\u5185\u5bb9\u9875\u9762\u3002\u5177\u4f53\u9875\u9762\u7684\u5185\u5bb9\u548c\u8fd0\u4f5c\u9700\u8981\u6709\u524d\u7aef\u77e5\u8bc6\u57fa\u7840\uff0c\u6bd4\u5982TypeScript\u3001Vue3\u548cBootstrap5\u7b49\u3002\u6b64\u6587\u6863\u5c06\u4f1a\u907f\u514d\u6d89\u53ca\u5230\u4efb\u4f55\u524d\u7aef\u6240\u9700\u8981\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u800c\u53ea\u662f\u4e3a\u60a8\u66f4\u597d\u4e86\u8d2f\u7a7f\u524d\u7aef\u548c\u540e\u7aef\uff0c\u4ece\u800c\u7406\u89e3\u5176\u5927\u4f53\u8fd0\u4f5c\u7684\u65b9\u5f0f\u3002","title":"\u529f\u80fd\u754c\u9762"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#_7","text":"\u8fd9\u4e9b\u9875\u9762\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u529f\u80fd\u9875\u9762\u7684\u751f\u6210\u5927\u4f53\u7ecf\u8fc7\u7684\u4e86\u4e0b\u9762\u7684\u51e0\u4e2a\u6b65\u9aa4\u3002 \u6839\u636e\u8def\u7531\uff08routers\uff09\u751f\u6210\u524d\u7aef\u8def\u7531 \u6839\u636e\u8def\u7531\u63d0\u4f9b\u7684\u9875\u9762\uff08page\uff09\u5bfb\u627e\u9875\u9762\u914d\u7f6e\uff08pages\uff09\u4e2d\u5bf9\u5e94\u7684\u914d\u7f6e\u8be6\u60c5 \u6839\u636e\u9875\u9762\u914d\u7f6e\u751f\u6210\u7c7b\u578b\u9875\u9762\uff0c\u5e76\u5bfb\u627e\u5176\u4e2d\u7684\u5f39\u6846\u9875\u3001\u7ea7\u8054\u9875\u548c\u5b50\u9875\uff0c\u4ee5\u53ca\u5404\u81ea\u5bf9\u5e94\u7684\u64cd\u4f5c\uff08paths\uff09 \u6839\u636e\u64cd\u4f5c\u4fe1\u606f\u5bfb\u627e\u5bf9\u5e94\u7684\u63cf\u8ff0\uff08components\uff09\u5185\u5bb9\uff0c\u5e76\u6839\u636e\u63cf\u8ff0\u751f\u6210\u9875\u9762\u5c5e\u6027 \u5c06\u64cd\u4f5c\u6302\u8f7d\u5230\u9875\u9762\u6216\u6309\u94ae\u4e0a\uff0c\u4ece\u800c\u5b8c\u6210\u9875\u9762\u7684\u6e32\u67d3\u548c\u6309\u94ae\u7684\u64cd\u4f5c \u63d0\u793a \u5f39\u6846\u9875\uff1a\u6309\u94ae\u7c7b\u578b\u4e3aopen\u7684\u64cd\u4f5c\u6253\u5f00\u7684\u5bf9\u8bdd\u6846\u9875\u9762 \u7ea7\u8054\u9875\uff1a\u4e00\u822c\u4e3a\u6811\u72b6\u9875node_action\u63cf\u8ff0\u4e2d\u7684cascade\u7c7b\u578b\u64cd\u4f5c\u7684\u6307\u5411\u9875\u9762 \u5b50\u9875\uff1a\u5b9a\u4e49\u4e3atabs/step\u7b49\u7c7b\u578b\u9875\u9762\u4e2d\u58f0\u660e\u7684pages\u6307\u5411\u9875\u9762","title":"\u95ee\u9898\u6982\u89c8"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#openapi-plus","text":"OpenAPI-Plus\u901a\u8fc7\u63a5\u53e3 /api/v1/openapi.json \u8fd4\u56de\u7684\u4fe1\u606f\u548c\u529f\u80fd\u7b80\u4ecb\u5982\u4e0b\u3002\u66f4\u4e3a\u8be6\u7ec6\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003OpenAPI-Plus\u6587\u6863\u3002 \u6a21\u5757 \u540d\u79f0 \u8be6\u60c5\u8bf4\u660e \u524d\u7aef\u662f\u5426\u4f7f\u7528 routers \u8def\u7531\u96c6 \u7528\u4e8e\u524d\u7aef\u751f\u6210\u8def\u7531\u4fe1\u606f \u2714 pages \u9875\u9762\u96c6 \u7528\u4e8e\u524d\u7aef\u751f\u6210\u4e0d\u540c\u7684\u9875\u9762\u7c7b\u578b\u548c\u9875\u9762\u64cd\u4f5c \u2714 paths \u63a5\u53e3\u96c6 \u7528\u4e8e\u5bfb\u627eComponents\u548c\u6743\u9650\u8ba4\u8bc1\u7b49 \u2714 components \u63cf\u8ff0\u96c6 \u7528\u4e8e\u524d\u7aef\u751f\u6210\u9875\u9762\u5143\u7d20\u4fe1\u606f \u2714 permissions \u6743\u9650\u96c6 \u7528\u4e8e\u6743\u9650\u7ba1\u7406 \u2714 translation \u56fd\u9645\u5316 \u7528\u4e8e\u56fd\u9645\u5316\u8bed\u97f3\u5207\u6362 \u2714 info \u4fe1\u606f OpenAPI\u63cf\u8ff0 \u2718 openapi \u7248\u672c \u7248\u672c\u53f7 \u2718","title":"OpenAPI-Plus"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#routers","text":"\u8def\u7531\u4fe1\u606f\u7531OpenAPI-Plus\u63a5\u53e3\u63d0\u4f9b\u3002\u524d\u7aef\u5c06\u76f4\u63a5\u8bfb\u53d6\u6b64\u6a21\u5757\u7684\u5185\u5bb9\uff0c\u5e76\u6839\u636e\u8def\u7531\u63cf\u8ff0\u6765\u751f\u6210\u524d\u7aef\u8def\u7531\u8868\u3002 \u5728\u751f\u6210\u524d\u7aef\u8def\u7531\u8868\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u8def\u7531\u9875\u9762\u6743\u9650\u548c\u8def\u7531\u4e00\u4e9b\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u548c\u6302\u8f7d\u3002\u8def\u7531\u5206\u4e3a\u6709Children\u548c\u65e0Children\u3002 \u63d0\u793a \u5b50\u8def\u7531Children\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e2\u65f6\uff0c\u4f1a\u4ea7\u751f\u7236\u5b50\u4fa7\u8fb9\u680f \u5b50\u8def\u7531Children\u4e3a\u7a7a\u6216\u6570\u91cf\u4e3a1\u65f6\uff0c\u4fa7\u8fb9\u680f\u76f4\u63a5\u5c55\u793a\u9875\u9762 \u65e0Children\u8def\u7531\u793a\u4f8b { \"path\" : \"mine\" , \"name\" : \"\u6211\u7684\" , \"icon\" : \"mine\" , \"hidden\" : true , \"page\" : \"mine\" , } \u8def\u7531\u6743\u9650 \u5982\u679c\u67d0\u4e2aOpenAPI-Plus\u8def\u7531\u8868\u4e2d\u63d0\u4f9b page \u4fe1\u606f\uff0c\u5219\u8bf4\u660e\u6b64\u8def\u7531\u8868\u9700\u8981\u5c55\u793a\u67d0\u4e2a\u9875\u9762\uff0c\u4e5f\u5c31\u9700\u8981\u5148\u5224\u65ad\u8be5\u9875\u9762\u662f\u5426\u62e5\u6709\u6743\u9650\u3002\u6743\u9650\u96c6\u4e0d\u4f1a\u76f4\u63a5\u63d0\u4f9b\u8be5\u9875\u9762\u7684\u6743\u9650\uff0c\u800c\u9700\u8981\u524d\u7aef\u627e\u5230\u8be5\u9875\u9762\u7684\u521d\u59cb\u5316\u63a5\u53e3\u7b49\u5185\u5bb9\uff0c\u901a\u8fc7\u63a5\u53e3\u6765\u95f4\u63a5\u5730\u5224\u65ad\u8be5\u8def\u7531\u9875\u9762\u7684\u6743\u9650\u3002 \u8def\u7531\u6743\u9650\u67e5\u627e\u6b65\u9aa4\uff08\u4ee5\u4e0a\u8ff0\u793a\u4f8b\u4e3a\u4f8b\uff09\uff1a \u4e0a\u8ff0\u793a\u4f8b\u4e2d page \u6307\u5411mine\u9875\u9762\uff0c\u5c06\u5728 \u9875\u9762\u914d\u7f6e \u4e2d\u67e5\u627e\u5230init_action\u3002\u5982\u679c\u5176\u4e3a\u7ea7\u8054\u9875\u9762\u548c\u5b50\u9875\u9762(tabs/step)\u7c7b\u578b\uff0c\u5219\u67e5\u627e\u7ea7\u8054\u9875\u9762\u7684\u7b2c\u4e00\u4e2a\u5b50\u9875\u9762\u7684 \u9875\u9762\u914d\u7f6e \u901a\u8fc7init_action\u518d\u67e5\u627e \u63a5\u53e3\u4fe1\u606f \u4e2d\u5bf9\u5e94\u7684\u63a5\u53e3operationId \u901a\u8fc7operationId\u518d\u53bb \u6743\u9650\u96c6 \u4e2d\u67e5\u627e\u5bf9\u5e94\u7684sort_id\u503c \u6839\u636esort_id\u503c\u901a\u8fc7\u6743\u9650\u63a5\u53e3\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\u6765\u51b3\u5b9a\u5176\u662f\u5426\u62e5\u6709\u6743\u9650 \u82e5\u62e5\u6709\u8be5\u8def\u7531\u6743\u9650\uff0c\u5219\u663e\u793a\uff1b\u5426\u5219\u4e0d\u663e\u793a \u663e\u793a\u5c5e\u6027 \u9664\u8def\u7531\u6743\u9650\u9700\u8981\u524d\u7aef\u6ce8\u610f\u4e4b\u5916\uff0cOpenAPI-Plus\u63d0\u4f9b\u7684 mobile web \u4e24\u4e2a\u663e\u793a\u5c5e\u6027\u4e5f\u9700\u8981\u524d\u7aef\u8fdb\u884c\u505a\u51fa\u76f8\u5bf9\u5e94\u7684\u5904\u7406\u3002 \u8fd9\u4e24\u4e2a\u5c5e\u6027\u51b3\u5b9a\u79fb\u52a8\u7aef\u548cWeb\u7aef\u663e\u793a\u54ea\u4e9b\u8def\u7531\u9875\u9762\u3002\u5982\u679c\u6307\u660emobile\u5c5e\u6027\uff0c\u5219\u5c06\u4f1a\u5728\u79fb\u52a8\u7aef\u9875\u9762\u5e95\u90e8\u663e\u793a\u5bf9\u5e94\u7684\u8def\u7531\u4fe1\u606f\u3002","title":"\u8def\u7531 routers"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#pages","text":"\u9875\u9762\u914d\u7f6e\u9879\u4e3b\u8981\u7528\u6765\u6e32\u67d3\u9875\u9762\u7684\u7c7b\u578b\u548c\u64cd\u4f5c\u3002\u901a\u8fc7\u8bfb\u53d6\u89e3\u6790\u9875\u9762\u914d\u7f6e\u9879\u4e2d\u7684\u5185\u5bb9\uff0c\u5b8c\u6210\u8def\u7531\u9875\u9762\u7684\u5b8c\u6574\u6e32\u67d3\u3002\u9875\u9762\u914d\u7f6e\u9879\u4e2d\u5305\u542b\u54ea\u4e9b\u5185\u5bb9\uff0c\u5df2\u7ecf\u5728OpenAPI-Plus\u6587\u6863\u4e2d\u8be6\u7ec6\u9610\u8ff0\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 \u751f\u6210\u7684\u67d0\u4e2a\u4e3b\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u751f\u6210\u7684\u67d0\u4e2a\u5f39\u51fa\u6846\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8bfb\u53d6\u63d0\u793a \u82e5\u4e3a\u8def\u7531\u58f0\u660e\u9875\u9762\u548c\u5176\u7ea7\u8054\u9875\u9762\u5747\u4e3a\u4e3b\u9875\u9762 \u4e3b\u9875\u9762\u548c\u5176\u4ed6\u5b50\u9875\u9762(tabs/step)\u5747\u4f7f\u7528Card\u4e0d\u4f7f\u7528Modal \u4e3b\u9875\u9762\u548c\u4e3b\u9875\u9762\u4ece\u5c5e\u7b2c\u4e00\u4e2a\u5b50\u9875\u9762\u5747\u5728\u6253\u5f00\u8def\u7531\u65f6\u9700\u8981\u521d\u59cb\u5316\u6570\u636e \u9875\u9762\u914d\u7f6e\u9879\u8bfb\u53d6\u6b65\u9aa4\uff1a \u8bfb\u53d6\u9875\u9762\u914d\u7f6e\u540d\u79f0\uff0c\u6302\u8f7d\u5230\u524d\u7aef\u9875\u9762\u4e2d\uff0c\u82e5\u5176\u4e3a\u4e3b\u9875\u9762\u4e14\u4e0d\u662f\u7ea7\u8054\u9875\u9762\u5219\u9690\u85cf\u8be5\u540d\u79f0 \u8bfb\u53d6init_action\u4fe1\u606f\uff0c\u6839\u636einit_action\u4fe1\u606f\u4e2d\u7684\u63a5\u53e3\u83b7\u53d6\u63a5\u53e3\u63cf\u8ff0 \u8bfb\u53d6\u5176\u4f59action\u4fe1\u606f\uff0c\u5e76\u751f\u6210\u9875\u9762\u4e2d\u5bf9\u5e94\u7684\u64cd\u4f5c\u6216\u6309\u94ae \u518d\u4f7f\u7528\u4e0a\u8ff0\u4e24\u4e2a\u6b65\u9aa4\u4e2d\u7684action\u4fe1\u606f\uff0c\u5b8c\u6210\u9875\u9762\u64cd\u4f5c\u7684\u6302\u8f7d \u91cd\u590d\u6267\u884c\u8be5\u8bfb\u53d6\u6b65\u9aa4\uff0c\u5b8c\u6210\u6240\u6709\u6307\u5b9a\u9875\u9762\u7684\u914d\u7f6e\u8bfb\u53d6\u5de5\u4f5c","title":"\u9875\u9762\u914d\u7f6e pages"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#paths","text":"\u63a5\u53e3\u4fe1\u606f\u5bf9\u4e8e\u524d\u7aef\u6765\u8bf4\uff0c\u9664operationId\u4e4b\u5916\uff0c\u4e3b\u8981\u7528\u4e8e\u63a5\u53e3responses\u6216requestBody\u5185\u5bb9\u7684\u8bfb\u53d6\u4ee5\u53ca\u64cd\u4f5c\u5185\u5bb9\u7684\u6302\u8f7d\u3002 \u5f53 \u9875\u9762\u914d\u7f6e \u4e2d\u7684action\u63cf\u8ff0 method=get \u65f6\u8bfb\u53d6responses\uff1b\u5426\u5219\u8bfb\u53d6requestBody\u3002 \u4e24\u6761\u8bfb\u53d6\u8def\u7ebf responses => 200 => content => application/json => schema => $ref requestBody => content => application/json => schema => $ref \u5e76\u8fdb\u4e00\u6b65\u8bfb\u53d6\u5176\u4e2d\u7684$ref\u6307\u5411\u3002\u4f8b\u5982 $ref=#/components/schemas/MineAppsOut \u65f6\uff0c\u4f1a\u6839\u636e\u5176 MineAppsOut \u53bb \u5c5e\u6027\u63cf\u8ff0 \u4e2d\u8fdb\u4e00\u6b65\u64cd\u4f5c\u63cf\u8ff0\u3002","title":"\u63a5\u53e3\u4fe1\u606f paths"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#components","text":"\u5c5e\u6027\u63cf\u8ff0\u5728 components => schema => MineAppsOut \u7684\u65b9\u5f0f\u8fdb\u884c\u63cf\u8ff0\u7684\u8be6\u7ec6\u4fe1\u606f\u7684\u89e3\u6790\u548c\u5904\u7406\u3002 \u5728\u6839\u636e\u8be6\u7ec6\u4fe1\u606f\u4e2d\u7684 properties \u7b49\u5185\u5bb9\u6302\u8f7d\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u9875\u9762\u4e2d\u3002 table\u8868\u683c\u578b\u9875\u9762\u5c31\u6302\u8f7d\u5230\u8868\u683c\u5217\u4e2d\uff1bform\u8868\u5355\u578b\u9875\u9762\u5c31\u6302\u8f7d\u5230\u8868\u5355\u9879\u4e2d\u3002","title":"\u5c5e\u6027\u63cf\u8ff0 components"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#permissions","text":"\u6743\u9650\u96c6\u4e3b\u8981\u7528\u4e8e\u524d\u7aef\u8def\u7531\u548cAPI\u6309\u94ae\u7684\u663e\u793a\u4e0e\u5426\u7684\u63a7\u5236\u3002 \u5f53\u6ca1\u6709\u8def\u7531\u6216\u6309\u94ae\u6743\u9650\u4fe1\u606f\u65f6\uff0c\u9875\u9762\u4e0d\u4f1a\u663e\u793a\u6240\u5bf9\u5e94\u7684\u5185\u5bb9\u3002","title":"\u6743\u9650\u96c6 permissions"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/#translation","text":"\u9875\u9762\u793a\u4f8b\u56fe\u7247\uff1a \u56fd\u9645\u5316\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u5728\u8bed\u8a00\u4e4b\u95f4\u7684\u9009\u62e9\u5207\u6362\uff0c\u5207\u6362\u4e4b\u540e\u9875\u9762\u5c06\u4f1a\u5237\u65b0\u540e\u66f4\u65b0\uff0c\u4f7f\u7528OpenAPI-Plus\u63d0\u4f9b\u7684\u7ffb\u8bd1\u6587\u672c\u8fdb\u884c\u5bf9\u9875\u9762\u6240\u4f7f\u7528\u4f4d\u7f6e\u7684\u5168\u5c40\u66ff\u6362\u3002","title":"\u56fd\u9645\u5316 translation"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/","text":"\u6570\u636e\u8868\u5b9a\u4e49 # arkid.core.models # AccountLifeCrontab ( BaseModel ) django-model # AccountLifeCrontab(id, is_del, is_active, updated, created, name, tenant, config) config : JSONField blank django-field nullable # Config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField blank django-field nullable # name tenant : ForeignKey django-field # Tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 App ( BaseModel , ExpandModel ) django-model # App(id, is_del, is_active, updated, created, tenant, name, url, logo, description, type, secret, config, package, entry_permission, arkstore_category_id, arkstore_app_id) arkstore_app_id : CharField blank django-field nullable # Arkstore app id arkstore_category_id : IntegerField django-field nullable # ArkStore\u5206\u7c7bID config : OneToOneField blank django-field nullable # config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 description : TextField blank django-field nullable # description entry_permission : ForeignKey blank django-field nullable # entry permission id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 logo : CharField blank django-field nullable # logo name : CharField django-field # name package : CharField blank django-field nullable # package secret : CharField blank django-field nullable # secret tenant : ForeignKey django-field # tenant type : CharField django-field # type updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 url : CharField blank django-field nullable # url AppExpandAbstract ( BaseModel ) django-model # created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 target : OneToOneField blank django-field # target updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 foreign_key ( BaseModel , ExpandModel ) django-model # App(id, is_del, is_active, updated, created, tenant, name, url, logo, description, type, secret, config, package, entry_permission, arkstore_category_id, arkstore_app_id) arkstore_app_id : CharField blank django-field nullable # Arkstore app id arkstore_category_id : IntegerField django-field nullable # ArkStore\u5206\u7c7bID config : OneToOneField blank django-field nullable # config created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 description : TextField blank django-field nullable # description entry_permission : ForeignKey blank django-field nullable # entry permission id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 logo : CharField blank django-field nullable # logo name : CharField django-field # name package : CharField blank django-field nullable # package secret : CharField blank django-field nullable # secret tenant : ForeignKey django-field # tenant type : CharField django-field # type updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 url : CharField blank django-field nullable # url AppGroup ( BaseModel , ExpandModel ) django-model # AppGroup(id, is_del, is_active, updated, created, tenant, name, parent) apps : ManyToManyField blank django-field # APP List created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # name parent : ForeignKey blank django-field nullable # parent tenant : ForeignKey django-field # tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 AppGroupExpandAbstract ( BaseModel ) django-model # created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 target : OneToOneField blank django-field # target updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 foreign_key ( BaseModel , ExpandModel ) django-model # AppGroup(id, is_del, is_active, updated, created, tenant, name, parent) apps : ManyToManyField blank django-field # APP List created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # name parent : ForeignKey blank django-field nullable # parent tenant : ForeignKey django-field # tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 AppPermissionResult ( BaseModel , ExpandModel ) django-model # AppPermissionResult(id, is_del, is_active, updated, created, self_app, tenant, app, result) app : ForeignKey blank django-field nullable # App created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 result : CharField blank django-field nullable # \u6743\u9650\u7ed3\u679c self_app : ForeignKey blank django-field nullable # \u81ea\u8eab\u5e94\u7528 tenant : ForeignKey django-field # \u79df\u6237 updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 ApproveAction ( BaseModel , ExpandModel ) django-model # ApproveAction(id, is_del, is_active, updated, created, name, path, method, description, extension, tenant) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 description : TextField blank django-field nullable # Description extension : ForeignKey django-field nullable # Extension id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 method : CharField django-field # Request Method name : CharField django-field # Name path : CharField django-field # Request Path tenant : ForeignKey django-field nullable # Tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 ApproveRequest ( BaseModel , ExpandModel ) django-model # ApproveRequest(id, is_del, is_active, updated, created, user, tenant, action, environ, body, status, request_path, request_get, request_post) action : ForeignKey django-field # Request Action body : BinaryField django-field # Request Body created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 environ : JSONField django-field # Request Environ id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 request_get : JSONField django-field nullable # Request GET request_path : CharField django-field # Request Path request_post : JSONField django-field nullable # Request POST status : CharField django-field # Status tenant : ForeignKey django-field nullable # Tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 user : ForeignKey django-field # User EmptyModel ( Model ) django-model # EmptyModel(id) ExpiringToken ( Model ) django-model # ExpiringToken(user, token, created) created : DateTimeField blank django-field # Created token : CharField django-field # Token user : OneToOneField django-field # User expired ( self , tenant ) # Return boolean indicating token expiration. GroupPermissionResult ( BaseModel , ExpandModel ) django-model # GroupPermissionResult(id, is_del, is_active, updated, created, user_group, tenant, app, result) app : ForeignKey blank django-field nullable # App created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 result : CharField blank django-field nullable # \u6743\u9650\u7ed3\u679c tenant : ForeignKey django-field # \u79df\u6237 updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 user_group : ForeignKey django-field # \u7528\u6237\u5206\u7ec4 LanguageData ( BaseModel ) django-model # LanguageData(id, is_del, is_active, updated, created, name, extension, extension_data, custom_data) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 extension : OneToOneField django-field nullable # Extension extension_data : JSONField blank django-field nullable # \u63d2\u4ef6\u81ea\u5e26\u6570\u636e id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # Name updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 Message ( BaseModel , ExpandModel ) django-model # Message(id, is_del, is_active, updated, created, title, user, content, readed_status, url, sender) content : TextField blank django-field nullable # content created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 readed_status : BooleanField django-field # readed_status sender : ForeignKey blank django-field nullable # Sender title : CharField blank django-field nullable # title updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 url : URLField blank django-field nullable # url user : ForeignKey django-field # User MessageExpandAbstract ( BaseModel ) django-model # created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 target : OneToOneField blank django-field # target updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 foreign_key ( BaseModel , ExpandModel ) django-model # Message(id, is_del, is_active, updated, created, title, user, content, readed_status, url, sender) content : TextField blank django-field nullable # content created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 readed_status : BooleanField django-field # readed_status sender : ForeignKey blank django-field nullable # Sender title : CharField blank django-field nullable # title updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 url : URLField blank django-field nullable # url user : ForeignKey django-field # User Permission ( PermissionAbstract ) django-model # Permission(id, is_del, is_active, updated, created, name, code, tenant, category, is_system, operation_id, describe, is_update, is_open, sort_id, app, parent) app : ForeignKey blank django-field nullable # APP category : CharField django-field # category code : CharField django-field # Code container : ManyToManyField blank django-field # Permission List created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 describe : JSONField blank django-field # describe id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_open : BooleanField django-field # is open is_system : BooleanField django-field # System Permission is_update : BooleanField django-field # \u662f\u5426\u66f4\u65b0 name : CharField django-field # Name operation_id : CharField blank django-field nullable # Operation ID parent : ForeignKey blank django-field nullable # Parent sort_id : IntegerField django-field # Sort ID tenant : ForeignKey blank django-field nullable # Tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 save ( self , * args , ** kwargs ) # Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set. PermissionAbstract ( BaseModel , ExpandModel ) django-model # category : CharField django-field # category code : CharField django-field # Code created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 describe : JSONField blank django-field # describe id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_open : BooleanField django-field # is open is_system : BooleanField django-field # System Permission is_update : BooleanField django-field # \u662f\u5426\u66f4\u65b0 name : CharField django-field # Name operation_id : CharField blank django-field nullable # Operation ID tenant : ForeignKey blank django-field nullable # Tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 Platform ( BaseModel , ExpandModel ) django-model # Platform(id, is_del, is_active, updated, created, is_saas, is_need_rent, frontend_url) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 frontend_url : URLField blank django-field nullable # ArkId\u8bbf\u95ee\u5730\u5740 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_need_rent : BooleanField django-field # Is Tenant Need Rent Extension is_saas : BooleanField django-field # SaaS Switch updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 SystemPermission ( PermissionAbstract ) django-model # SystemPermission(id, is_del, is_active, updated, created, name, code, tenant, category, is_system, operation_id, describe, is_update, is_open, sort_id, parent) category : CharField django-field # category code : CharField django-field # Code container : ManyToManyField blank django-field # SystemPermission List created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 describe : JSONField blank django-field # describe id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_open : BooleanField django-field # is open is_system : BooleanField django-field # System Permission is_update : BooleanField django-field # \u662f\u5426\u66f4\u65b0 name : CharField django-field # Name operation_id : CharField blank django-field nullable # Operation ID parent : ForeignKey blank django-field nullable # Parent sort_id : IntegerField django-field # Sort ID tenant : ForeignKey blank django-field nullable # Tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 save ( self , * args , ** kwargs ) # Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set. Tenant ( BaseModel , ExpandModel ) django-model # Tenant(id, is_del, is_active, updated, created, name, slug, icon, token_duration_minutes) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 icon : URLField blank django-field nullable # Icon id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_platform_tenant property readonly # \u662f\u5426\u662f\u5e73\u53f0\u79df\u6237 name : CharField django-field # Name slug : SlugField blank django-field nullable # Slug token_duration_minutes : IntegerField django-field # Token Duration Minutes updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 users : ManyToManyField blank django-field # users TenantExpandAbstract ( BaseModel ) django-model # created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 target : OneToOneField blank django-field # target updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 foreign_key ( BaseModel , ExpandModel ) django-model # Tenant(id, is_del, is_active, updated, created, name, slug, icon, token_duration_minutes) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 icon : URLField blank django-field nullable # Icon id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_platform_tenant property readonly # \u662f\u5426\u662f\u5e73\u53f0\u79df\u6237 name : CharField django-field # Name slug : SlugField blank django-field nullable # Slug token_duration_minutes : IntegerField django-field # Token Duration Minutes updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 users : ManyToManyField blank django-field # users User ( BaseModel , ExpandModel ) django-model # User(id, is_del, is_active, updated, created, username, avatar, is_platform_user, tenant, scim_external_id) avatar : URLField blank django-field nullable # Avatar created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_platform_user : BooleanField django-field # Is Platform User scim_external_id : CharField blank django-field nullable # scim external id tenant : ForeignKey django-field # tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 username : CharField django-field # Username save ( self , * args , ** kwargs ) # Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set. UserExpandAbstract ( BaseModel ) django-model # created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 target : OneToOneField blank django-field # target updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 foreign_key ( BaseModel , ExpandModel ) django-model # User(id, is_del, is_active, updated, created, username, avatar, is_platform_user, tenant, scim_external_id) avatar : URLField blank django-field nullable # Avatar created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 is_platform_user : BooleanField django-field # Is Platform User scim_external_id : CharField blank django-field nullable # scim external id tenant : ForeignKey django-field # tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 username : CharField django-field # Username save ( self , * args , ** kwargs ) # Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set. UserGroup ( BaseModel , ExpandModel ) django-model # UserGroup(id, is_del, is_active, updated, created, tenant, name, parent, permission, scim_external_id) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # name parent : ForeignKey blank django-field nullable # parent permission : ForeignKey blank django-field nullable # permission scim_external_id : CharField blank django-field nullable # scim external id tenant : ForeignKey django-field # tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 users : ManyToManyField blank django-field # User List UserGroupExpandAbstract ( BaseModel ) django-model # created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 target : OneToOneField blank django-field # target updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 foreign_key ( BaseModel , ExpandModel ) django-model # UserGroup(id, is_del, is_active, updated, created, tenant, name, parent, permission, scim_external_id) created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 name : CharField django-field # name parent : ForeignKey blank django-field nullable # parent permission : ForeignKey blank django-field nullable # permission scim_external_id : CharField blank django-field nullable # scim external id tenant : ForeignKey django-field # tenant updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 users : ManyToManyField blank django-field # User List UserPermissionResult ( BaseModel , ExpandModel ) django-model # UserPermissionResult(id, is_del, is_active, updated, created, user, tenant, app, result) app : ForeignKey blank django-field nullable # App created : DateTimeField blank django-field nullable # \u521b\u5efa\u65f6\u95f4 id : UUIDField django-field # ID is_active : BooleanField django-field # \u662f\u5426\u53ef\u7528 is_del : BooleanField django-field # \u662f\u5426\u5220\u9664 result : CharField blank django-field nullable # \u6743\u9650\u7ed3\u679c tenant : ForeignKey django-field # \u79df\u6237 updated : DateTimeField blank django-field nullable # \u66f4\u65b0\u65f6\u95f4 user : ForeignKey django-field # \u7528\u6237 \u5185\u6838\u6269\u5c55\u7c7b # arkid.core.expand # ExpandManager ( Manager ) # Enables changing the default queryset function. get_queryset ( self , filters = {}) # Return a new QuerySet object. Subclasses can override this method to customize the behavior of the Manager.","title":"\u6570\u636e\u8868\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#_1","text":"","title":"\u6570\u636e\u8868\u5b9a\u4e49"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models","text":"","title":"models"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab","text":"AccountLifeCrontab(id, is_del, is_active, updated, created, name, tenant, config)","title":"AccountLifeCrontab"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.config","text":"Config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.tenant","text":"Tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AccountLifeCrontab.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App","text":"App(id, is_del, is_active, updated, created, tenant, name, url, logo, description, type, secret, config, package, entry_permission, arkstore_category_id, arkstore_app_id)","title":"App"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.arkstore_app_id","text":"Arkstore app id","title":"arkstore_app_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.arkstore_category_id","text":"ArkStore\u5206\u7c7bID","title":"arkstore_category_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.config","text":"config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.description","text":"description","title":"description"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.entry_permission","text":"entry permission","title":"entry_permission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.logo","text":"logo","title":"logo"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.package","text":"package","title":"package"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.secret","text":"secret","title":"secret"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.type","text":"type","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.App.url","text":"url","title":"url"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract","text":"","title":"AppExpandAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.target","text":"target","title":"target"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key","text":"App(id, is_del, is_active, updated, created, tenant, name, url, logo, description, type, secret, config, package, entry_permission, arkstore_category_id, arkstore_app_id)","title":"foreign_key"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.arkstore_app_id","text":"Arkstore app id","title":"arkstore_app_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.arkstore_category_id","text":"ArkStore\u5206\u7c7bID","title":"arkstore_category_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.config","text":"config","title":"config"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.description","text":"description","title":"description"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.entry_permission","text":"entry permission","title":"entry_permission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.logo","text":"logo","title":"logo"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.package","text":"package","title":"package"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.secret","text":"secret","title":"secret"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.type","text":"type","title":"type"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppExpandAbstract.foreign_key.url","text":"url","title":"url"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup","text":"AppGroup(id, is_del, is_active, updated, created, tenant, name, parent)","title":"AppGroup"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.apps","text":"APP List","title":"apps"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.parent","text":"parent","title":"parent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroup.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract","text":"","title":"AppGroupExpandAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.target","text":"target","title":"target"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key","text":"AppGroup(id, is_del, is_active, updated, created, tenant, name, parent)","title":"foreign_key"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.apps","text":"APP List","title":"apps"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.parent","text":"parent","title":"parent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppGroupExpandAbstract.foreign_key.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult","text":"AppPermissionResult(id, is_del, is_active, updated, created, self_app, tenant, app, result)","title":"AppPermissionResult"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.app","text":"App","title":"app"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.result","text":"\u6743\u9650\u7ed3\u679c","title":"result"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.self_app","text":"\u81ea\u8eab\u5e94\u7528","title":"self_app"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.AppPermissionResult.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction","text":"ApproveAction(id, is_del, is_active, updated, created, name, path, method, description, extension, tenant)","title":"ApproveAction"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.description","text":"Description","title":"description"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.extension","text":"Extension","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.method","text":"Request Method","title":"method"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.path","text":"Request Path","title":"path"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.tenant","text":"Tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveAction.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest","text":"ApproveRequest(id, is_del, is_active, updated, created, user, tenant, action, environ, body, status, request_path, request_get, request_post)","title":"ApproveRequest"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.action","text":"Request Action","title":"action"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.body","text":"Request Body","title":"body"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.environ","text":"Request Environ","title":"environ"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.request_get","text":"Request GET","title":"request_get"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.request_path","text":"Request Path","title":"request_path"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.request_post","text":"Request POST","title":"request_post"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.status","text":"Status","title":"status"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.tenant","text":"Tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ApproveRequest.user","text":"User","title":"user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.EmptyModel","text":"EmptyModel(id)","title":"EmptyModel"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ExpiringToken","text":"ExpiringToken(user, token, created)","title":"ExpiringToken"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ExpiringToken.created","text":"Created","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ExpiringToken.token","text":"Token","title":"token"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ExpiringToken.user","text":"User","title":"user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.ExpiringToken.expired","text":"Return boolean indicating token expiration.","title":"expired()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult","text":"GroupPermissionResult(id, is_del, is_active, updated, created, user_group, tenant, app, result)","title":"GroupPermissionResult"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.app","text":"App","title":"app"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.result","text":"\u6743\u9650\u7ed3\u679c","title":"result"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.GroupPermissionResult.user_group","text":"\u7528\u6237\u5206\u7ec4","title":"user_group"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData","text":"LanguageData(id, is_del, is_active, updated, created, name, extension, extension_data, custom_data)","title":"LanguageData"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.extension","text":"Extension","title":"extension"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.extension_data","text":"\u63d2\u4ef6\u81ea\u5e26\u6570\u636e","title":"extension_data"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.LanguageData.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message","text":"Message(id, is_del, is_active, updated, created, title, user, content, readed_status, url, sender)","title":"Message"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.content","text":"content","title":"content"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.readed_status","text":"readed_status","title":"readed_status"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.sender","text":"Sender","title":"sender"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.title","text":"title","title":"title"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.url","text":"url","title":"url"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Message.user","text":"User","title":"user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract","text":"","title":"MessageExpandAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.target","text":"target","title":"target"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key","text":"Message(id, is_del, is_active, updated, created, title, user, content, readed_status, url, sender)","title":"foreign_key"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.content","text":"content","title":"content"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.readed_status","text":"readed_status","title":"readed_status"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.sender","text":"Sender","title":"sender"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.title","text":"title","title":"title"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.url","text":"url","title":"url"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.MessageExpandAbstract.foreign_key.user","text":"User","title":"user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission","text":"Permission(id, is_del, is_active, updated, created, name, code, tenant, category, is_system, operation_id, describe, is_update, is_open, sort_id, app, parent)","title":"Permission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.app","text":"APP","title":"app"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.category","text":"category","title":"category"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.code","text":"Code","title":"code"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.container","text":"Permission List","title":"container"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.describe","text":"describe","title":"describe"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.is_open","text":"is open","title":"is_open"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.is_system","text":"System Permission","title":"is_system"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.is_update","text":"\u662f\u5426\u66f4\u65b0","title":"is_update"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.operation_id","text":"Operation ID","title":"operation_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.parent","text":"Parent","title":"parent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.sort_id","text":"Sort ID","title":"sort_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.tenant","text":"Tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Permission.save","text":"Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set.","title":"save()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract","text":"","title":"PermissionAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.category","text":"category","title":"category"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.code","text":"Code","title":"code"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.describe","text":"describe","title":"describe"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.is_open","text":"is open","title":"is_open"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.is_system","text":"System Permission","title":"is_system"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.is_update","text":"\u662f\u5426\u66f4\u65b0","title":"is_update"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.operation_id","text":"Operation ID","title":"operation_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.tenant","text":"Tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.PermissionAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform","text":"Platform(id, is_del, is_active, updated, created, is_saas, is_need_rent, frontend_url)","title":"Platform"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.frontend_url","text":"ArkId\u8bbf\u95ee\u5730\u5740","title":"frontend_url"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.is_need_rent","text":"Is Tenant Need Rent Extension","title":"is_need_rent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.is_saas","text":"SaaS Switch","title":"is_saas"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Platform.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission","text":"SystemPermission(id, is_del, is_active, updated, created, name, code, tenant, category, is_system, operation_id, describe, is_update, is_open, sort_id, parent)","title":"SystemPermission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.category","text":"category","title":"category"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.code","text":"Code","title":"code"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.container","text":"SystemPermission List","title":"container"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.describe","text":"describe","title":"describe"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.is_open","text":"is open","title":"is_open"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.is_system","text":"System Permission","title":"is_system"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.is_update","text":"\u662f\u5426\u66f4\u65b0","title":"is_update"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.operation_id","text":"Operation ID","title":"operation_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.parent","text":"Parent","title":"parent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.sort_id","text":"Sort ID","title":"sort_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.tenant","text":"Tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.SystemPermission.save","text":"Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set.","title":"save()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant","text":"Tenant(id, is_del, is_active, updated, created, name, slug, icon, token_duration_minutes)","title":"Tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.icon","text":"Icon","title":"icon"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.is_platform_tenant","text":"\u662f\u5426\u662f\u5e73\u53f0\u79df\u6237","title":"is_platform_tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.slug","text":"Slug","title":"slug"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.token_duration_minutes","text":"Token Duration Minutes","title":"token_duration_minutes"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.Tenant.users","text":"users","title":"users"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract","text":"","title":"TenantExpandAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.target","text":"target","title":"target"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key","text":"Tenant(id, is_del, is_active, updated, created, name, slug, icon, token_duration_minutes)","title":"foreign_key"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.icon","text":"Icon","title":"icon"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.is_platform_tenant","text":"\u662f\u5426\u662f\u5e73\u53f0\u79df\u6237","title":"is_platform_tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.name","text":"Name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.slug","text":"Slug","title":"slug"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.token_duration_minutes","text":"Token Duration Minutes","title":"token_duration_minutes"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.TenantExpandAbstract.foreign_key.users","text":"users","title":"users"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User","text":"User(id, is_del, is_active, updated, created, username, avatar, is_platform_user, tenant, scim_external_id)","title":"User"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.avatar","text":"Avatar","title":"avatar"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.is_platform_user","text":"Is Platform User","title":"is_platform_user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.scim_external_id","text":"scim external id","title":"scim_external_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.username","text":"Username","title":"username"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.User.save","text":"Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set.","title":"save()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract","text":"","title":"UserExpandAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.target","text":"target","title":"target"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key","text":"User(id, is_del, is_active, updated, created, username, avatar, is_platform_user, tenant, scim_external_id)","title":"foreign_key"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.avatar","text":"Avatar","title":"avatar"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.is_platform_user","text":"Is Platform User","title":"is_platform_user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.scim_external_id","text":"scim external id","title":"scim_external_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.username","text":"Username","title":"username"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserExpandAbstract.foreign_key.save","text":"Save the current instance. Override this in a subclass if you want to control the saving process. The 'force_insert' and 'force_update' parameters can be used to insist that the \"save\" must be an SQL insert or update (or equivalent for non-SQL backends), respectively. Normally, they should not be set.","title":"save()"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup","text":"UserGroup(id, is_del, is_active, updated, created, tenant, name, parent, permission, scim_external_id)","title":"UserGroup"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.parent","text":"parent","title":"parent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.permission","text":"permission","title":"permission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.scim_external_id","text":"scim external id","title":"scim_external_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroup.users","text":"User List","title":"users"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract","text":"","title":"UserGroupExpandAbstract"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.target","text":"target","title":"target"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key","text":"UserGroup(id, is_del, is_active, updated, created, tenant, name, parent, permission, scim_external_id)","title":"foreign_key"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.name","text":"name","title":"name"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.parent","text":"parent","title":"parent"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.permission","text":"permission","title":"permission"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.scim_external_id","text":"scim external id","title":"scim_external_id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.tenant","text":"tenant","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserGroupExpandAbstract.foreign_key.users","text":"User List","title":"users"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult","text":"UserPermissionResult(id, is_del, is_active, updated, created, user, tenant, app, result)","title":"UserPermissionResult"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.app","text":"App","title":"app"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.created","text":"\u521b\u5efa\u65f6\u95f4","title":"created"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.id","text":"ID","title":"id"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.is_active","text":"\u662f\u5426\u53ef\u7528","title":"is_active"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.is_del","text":"\u662f\u5426\u5220\u9664","title":"is_del"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.result","text":"\u6743\u9650\u7ed3\u679c","title":"result"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.tenant","text":"\u79df\u6237","title":"tenant"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.updated","text":"\u66f4\u65b0\u65f6\u95f4","title":"updated"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.models.UserPermissionResult.user","text":"\u7528\u6237","title":"user"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#_2","text":"","title":"\u5185\u6838\u6269\u5c55\u7c7b"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.expand","text":"","title":"expand"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.expand.ExpandManager","text":"Enables changing the default queryset function.","title":"ExpandManager"},{"location":"%20%20%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%AE%9A%E4%B9%89/#arkid.core.expand.ExpandManager.get_queryset","text":"Return a new QuerySet object. Subclasses can override this method to customize the behavior of the Manager.","title":"get_queryset()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/","text":"\u7cfb\u7edf\u63d2\u4ef6 # OIDC&OAuth2\u8ba4\u8bc1\u534f\u8bae \u9ed8\u8ba4\u8d26\u53f7\u751f\u547d\u5468\u671f\u7ba1\u7406 \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20 \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20 \u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20 \u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236 \u793a\u4f8b\u63d2\u4ef6 Github\u7b2c\u4e09\u65b9\u767b\u5f55\u670d\u52a1 \u4e2d\u6587\u8bed\u8a00\u5305 ArkID\u7528\u6237\u6570\u636e\u540c\u6b65 \u963f\u91cc\u4e91\u77ed\u4fe1 \u672c\u5730\u6587\u4ef6\u5b58\u50a8 Bootswatch\u4e3b\u9898","title":"\u7cfb\u7edf\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/#_1","text":"OIDC&OAuth2\u8ba4\u8bc1\u534f\u8bae \u9ed8\u8ba4\u8d26\u53f7\u751f\u547d\u5468\u671f\u7ba1\u7406 \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20 \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20 \u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20 \u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236 \u793a\u4f8b\u63d2\u4ef6 Github\u7b2c\u4e09\u65b9\u767b\u5f55\u670d\u52a1 \u4e2d\u6587\u8bed\u8a00\u5305 ArkID\u7528\u6237\u6570\u636e\u540c\u6b65 \u963f\u91cc\u4e91\u77ed\u4fe1 \u672c\u5730\u6587\u4ef6\u5b58\u50a8 Bootswatch\u4e3b\u9898","title":"\u7cfb\u7edf\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/","text":"\u9ed8\u8ba4\u751f\u547d\u5468\u671f\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u8bbe\u7f6e\u7528\u6237\u8fc7\u671f\u65f6\u95f4\u540e\uff0c\u5b9a\u65f6\u4efb\u52a1\u4f1a\u5b9a\u671f\u5c06\u7528\u6237\u8fc7\u671f\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u5927\u4e8e\u7528\u6237\u8fc7\u671f\u65f6\u95f4\uff0c\u5219\u7981\u7528\u8be5\u7528\u6237 \u914d\u7f6e\u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1 # \u6253\u5f00\u8d26\u53f7\u751f\u547d\u5468\u671f\u9875\u9762 \u914d\u7f6e\u5b9a\u65f6\u4efb\u52a1\u8868\u5355\u53c2\u6570 \u70b9\u51fb \u7f16\u8f91\u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1 \u6309\u94ae \u5176\u4e2d\u5b9a\u65f6\u8fd0\u884c\u65f6\u95f4\u8bed\u6cd5\u53c2\u8003 linux Crontab \u547d\u4ee4\u8bed\u6cd5\uff0c\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a\u6bcf\u59298\u70b9\u8fd0\u884c\u4e00\u6b21\uff0c\u5982\u679c\u5931\u8d25\u518d\u6bcf\u9694\u95f4\u969430\u79d2\u91cd\u8bd52\u6b21 \u914d\u7f6e\u7528\u6237\u8fc7\u671f\u65f6\u95f4 # \u70b9\u51fb\u521b\u5efa\u6309\u94ae \u70b9\u51fbConfig \u914d\u7f6e\u7528\u6237\u548c\u8fc7\u671f\u65f6\u95f4 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u5b9e\u73b0\u601d\u8def # \u5b9a\u65f6\u4efb\u52a1\u5c06\u7528\u6237\u7684\u8fc7\u671f\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u7528\u6237\u5df2\u7ecf\u8fc7\u671f\uff0c\u5219\u8bbe\u7f6e\u7528\u6237\u5c5e\u6027is_active\u4e3aFalse\uff0c\u5c06\u7981\u6b62\u8be5\u7528\u6237\u767b\u5f55ArkID \u9700\u8981\u8986\u76d6\u63d2\u4ef6\u57fa\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.account_life.AccountLifeExtension \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0: # periodic_task \u4ee3\u7801 # extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension ( AccountLifeExtension ) # Source code in extension_root/com_longgui_account_life_arkid/__init__.py class AccountLifeArkIDExtension ( AccountLifeExtension ): def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" ) def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline () create_tenant_config ( self , tenant , config , name , type ) # \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" ) periodic_task ( self , event , ** kwargs ) # \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Parameters: Name Type Description Default event arkid.core.event.Event \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_account_life_arkid/__init__.py def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline () update_tenant_config ( self , id , config , name , type ) # \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig","title":"\u9ed8\u8ba4\u751f\u547d\u5468\u671f\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_1","text":"","title":"\u9ed8\u8ba4\u751f\u547d\u5468\u671f\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_2","text":"\u8bbe\u7f6e\u7528\u6237\u8fc7\u671f\u65f6\u95f4\u540e\uff0c\u5b9a\u65f6\u4efb\u52a1\u4f1a\u5b9a\u671f\u5c06\u7528\u6237\u8fc7\u671f\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u5927\u4e8e\u7528\u6237\u8fc7\u671f\u65f6\u95f4\uff0c\u5219\u7981\u7528\u8be5\u7528\u6237","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_3","text":"\u6253\u5f00\u8d26\u53f7\u751f\u547d\u5468\u671f\u9875\u9762 \u914d\u7f6e\u5b9a\u65f6\u4efb\u52a1\u8868\u5355\u53c2\u6570 \u70b9\u51fb \u7f16\u8f91\u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1 \u6309\u94ae \u5176\u4e2d\u5b9a\u65f6\u8fd0\u884c\u65f6\u95f4\u8bed\u6cd5\u53c2\u8003 linux Crontab \u547d\u4ee4\u8bed\u6cd5\uff0c\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff1a\u6bcf\u59298\u70b9\u8fd0\u884c\u4e00\u6b21\uff0c\u5982\u679c\u5931\u8d25\u518d\u6bcf\u9694\u95f4\u969430\u79d2\u91cd\u8bd52\u6b21","title":"\u914d\u7f6e\u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_4","text":"\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u70b9\u51fbConfig \u914d\u7f6e\u7528\u6237\u548c\u8fc7\u671f\u65f6\u95f4 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae","title":"\u914d\u7f6e\u7528\u6237\u8fc7\u671f\u65f6\u95f4"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_5","text":"\u5b9a\u65f6\u4efb\u52a1\u5c06\u7528\u6237\u7684\u8fc7\u671f\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u7528\u6237\u5df2\u7ecf\u8fc7\u671f\uff0c\u5219\u8bbe\u7f6e\u7528\u6237\u5c5e\u6027is_active\u4e3aFalse\uff0c\u5c06\u7981\u6b62\u8be5\u7528\u6237\u767b\u5f55ArkID \u9700\u8981\u8986\u76d6\u63d2\u4ef6\u57fa\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.account_life.AccountLifeExtension","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_6","text":"periodic_task","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0:"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#_7","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension","text":"Source code in extension_root/com_longgui_account_life_arkid/__init__.py class AccountLifeArkIDExtension ( AccountLifeExtension ): def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" ) def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline ()","title":"AccountLifeArkIDExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.create_tenant_config","text":"\u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def create_tenant_config ( self , tenant , config , name , type ): \"\"\" \u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" config_created = TenantExtensionConfig () config_created . tenant = tenant config_created . extension = Extension . active_objects . get ( package = self . package ) config_created . config = json . loads ( config . json ()) config_created . name = name config_created . type = type config_created . save () return config_created","title":"create_tenant_config()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def load ( self ): super () . load () self . register_front_pages ( select_user_page ) self . register_account_life_schema ( UserExpirationListSchema , \"user_expiration\" )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.periodic_task","text":"\u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Parameters: Name Type Description Default event arkid.core.event.Event \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_account_life_arkid/__init__.py def periodic_task ( self , event , ** kwargs ): \"\"\" \u904d\u5386\u6240\u6709\u63d2\u4ef6\u914d\u7f6e\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u7528\u6237\u5bf9\u5e94\u7684\u8fc7\u671f\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u7981\u7528\u7528\u6237 Args: event (arkid.core.event.Event): \u751f\u547d\u5468\u671f\u5b9a\u65f6\u4efb\u52a1\u4e8b\u4ef6 \"\"\" logger . info ( \"Doing account life arkid priodic task...\" ) configs = self . get_tenant_configs ( event . tenant ) for cfg in configs : for item in cfg . config : user_id = item . get ( 'user' ) . get ( 'id' ) user = User . objects . get ( id = user_id ) expiration_time = timezone . datetime . strptime ( item . get ( 'expiration_time' ), '%Y-%m- %d T%H:%M:%S' ) logger . info ( f \"expiration_time: { expiration_time } /now: { datetime . now () } \" ) if expiration_time <= datetime . now (): user . offline ()","title":"periodic_task()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_account_life_arkid/#extension_root.com_longgui_account_life_arkid.AccountLifeArkIDExtension.update_tenant_config","text":"\u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 Source code in extension_root/com_longgui_account_life_arkid/__init__.py def update_tenant_config ( self , id , config , name , type ): \"\"\" \u66f4\u65b0\u751f\u547d\u5468\u671f\u914d\u7f6e\uff0c\u624b\u5de5\u89e3\u51b3expiration_time\u7c7b\u578b\u4e3adatetime\u4e0d\u80fdjson\u5e8f\u5217\u5316\u7684\u95ee\u9898 \"\"\" tenantextensionconfig = TenantExtensionConfig . valid_objects . filter ( id = id ) . first () tenantextensionconfig . config = json . loads ( config . json ()) tenantextensionconfig . name = name tenantextensionconfig . type = type tenantextensionconfig . save () return tenantextensionconfig","title":"update_tenant_config()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/","text":"\u6e90\u7801 # extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension ( AppProtocolExtension ) # Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py class OAuth2ServerExtension ( AppProtocolExtension ): def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load () def load_urls ( self ): self . register_routers ( urls , True ) def load_auth_view ( self ): # \u52a0\u8f7d\u8ba4\u8bc1view auth_view = AuthorizationView . as_view () auth_path = r \"app/(?P<app_id>[\\w-]+)/oauth/authorize/$\" url_name = \"authorize\" type = [ 'OIDC' , 'OAuth2' ] self . register_enter_view ( auth_view , auth_path , url_name , type ) def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True ) def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False ) def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization create_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True ) delete_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load () update_app ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False ) update_app_data ( self , event , config , is_create ) # \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True update_url_data ( self , tenant_id , config , obj ) # \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization","title":"\u6e90\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#_1","text":"","title":"\u6e90\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension","text":"Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py class OAuth2ServerExtension ( AppProtocolExtension ): def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load () def load_urls ( self ): self . register_routers ( urls , True ) def load_auth_view ( self ): # \u52a0\u8f7d\u8ba4\u8bc1view auth_view = AuthorizationView . as_view () auth_path = r \"app/(?P<app_id>[\\w-]+)/oauth/authorize/$\" url_name = \"authorize\" type = [ 'OIDC' , 'OAuth2' ] self . register_enter_view ( auth_view , auth_path , url_name , type ) def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True ) def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False ) def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization","title":"OAuth2ServerExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.create_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u521b\u5efa\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def create_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , True )","title":"create_app()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.delete_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u5220\u9664\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def delete_app ( self , event , ** kwargs ): Application . objects . filter ( uuid = event . data . id ) . delete () return True","title":"delete_app()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def load ( self ): # \u52a0\u8f7durl\u5730\u5740 self . load_urls () # \u52a0\u8f7d\u76f8\u5e94\u7684view self . load_auth_view () # \u52a0\u8f7d\u76f8\u5e94\u7684\u914d\u7f6e\u6587\u4ef6 if not settings . IS_CENTRAL_ARKID : self . register_app_protocol_schema ( OIDCConfigSchema , 'OIDC' ) self . register_app_protocol_schema ( Oauth2ConfigSchema , 'OAuth2' ) super () . load ()","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.update_app","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u4fee\u6539\u5e94\u7528 Parameters: Name Type Description Default event \u4e8b\u4ef6\u53c2\u6570 required kwargs \u5176\u5b83\u65b9\u6cd5\u53c2\u6570 {} Returns: Type Description bool \u662f\u5426\u6210\u529f\u6267\u884c Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app ( self , event , ** kwargs ): config = event . data [ \"config\" ] return self . update_app_data ( event , config , False )","title":"update_app()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.update_app_data","text":"\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_app_data ( self , event , config , is_create ): ''' \u4fee\u6539\u5e94\u7528\u7a0b\u5e8f ''' app = event . data [ \"app\" ] tenant = event . tenant client_type = config [ \"client_type\" ] redirect_uris = config [ \"redirect_uris\" ] grant_type = config [ \"grant_type\" ] skip_authorization = config [ \"skip_authorization\" ] app_type = event . data . get ( \"app_type\" ) algorithm = config . get ( \"algorithm\" , None ) obj , iscreated = Application . objects . get_or_create ( uuid = app . id ) obj . name = app . name obj . client_type = client_type obj . redirect_uris = redirect_uris obj . skip_authorization = skip_authorization obj . authorization_grant_type = grant_type if algorithm and app_type == 'OIDC' : obj . algorithm = algorithm obj . save () # \u66f4\u65b0\u5730\u5740\u4fe1\u606f self . update_url_data ( tenant . id , config , obj ) return True","title":"update_app_data()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/#extension_root.com_longgui_app_protocol_oidc.OAuth2ServerExtension.update_url_data","text":"\u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f Source code in extension_root/com_longgui_app_protocol_oidc/__init__.py def update_url_data ( self , tenant_id , config , obj ): ''' \u66f4\u65b0\u914d\u7f6e\u4e2d\u7684url\u4fe1\u606f ''' host = get_app_config () . get_frontend_host () namespace = f 'api: { self . pname } _tenant' config [ \"userinfo\" ] = host + reverse ( namespace + \":oauth-user-info\" , args = [ tenant_id ]) config [ \"authorize\" ] = host + reverse ( namespace + \":authorize\" , args = [ tenant_id , obj . uuid ]) config [ \"token\" ] = host + reverse ( namespace + \":token\" , args = [ tenant_id ]) config [ \"logout\" ] = host + reverse ( namespace + \":oauth-user-logout\" , args = [ tenant_id ]) config [ \"issuer_url\" ] = \" {} /api/v1/tenant/ {} /app/ {} /\" . format ( host , tenant_id , obj . uuid ) config [ \"client_id\" ] = obj . client_id config [ \"client_secret\" ] = obj . client_secret config [ \"skip_authorization\" ] = obj . skip_authorization","title":"update_url_data()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/Case/","text":"\u4ee3\u7801\u793a\u4f8b # FastAPI # from fastapi import FastAPI from starlette.responses import RedirectResponse import requests import json app = FastAPI () client_id = 'KHvanrQlNIBMZj9owre9ZZ6oc8AjWNdPHYUO2rwH' client_secret = 'ywZCKjSzxiWfgiaoEYAmloQ0greaLxLtTv6TnOyRtsgjvR7xAiTwpY0H5A46ZSSYz3x5laxHXQSlpjamnih3aQlYqS7Eq6oiSXsjiGNXnnf750i8WbbWAVAZdEaiivas' auth_url = 'http://localhost:9528/api/v1/tenant/bf3511e2-07b3-459f-829e-17a349602531/app/10e82a7d-b7fd-45e0-976b-885859066508/oauth/authorize/' redirect_uri = 'http://127.0.0.1:8001/redirect' get_token_url = 'http://localhost:9528/api/v1/tenant/bf3511e2-07b3-459f-829e-17a349602531/oauth/token/' get_userinfo_url = 'http://localhost:9528/api/v1/tenant/bf3511e2-07b3-459f-829e-17a349602531/oauth/userinfo/' @app . get ( \"/auth\" ) def oidc_auth (): response = RedirectResponse ( url = auth_url + '?client_id=' + client_id + '&redirect_uri=' + redirect_uri + '&response_type=code&scope=userinfo' ) return response @app . get ( \"/redirect\" ) def oidc_redirect ( code : str ): auth = requests . auth . HTTPBasicAuth ( client_id , client_secret ) response = requests . post ( url = get_token_url , auth = auth , data = { 'code' : code , 'grant_type' : 'authorization_code' } ) response = json . loads ( response . content ) access_token = response [ \"access_token\" ] return requests . get ( url = get_userinfo_url , headers = { 'Authorization' : 'Bearer ' + access_token } ) . content Java # import javax.servlet.* ; import javax.servlet.http.* ; import javax.servlet.annotation.WebServlet ; import java.io.IOException ; @WebServlet ( name = \"OidcServlet\" , value = \"/OidcServlet\" ) public class OidcLoginServlet extends HttpServlet { public final static String clientId = \"Y0nyNqIBsNBqYlW5ebGTRvgeNO6B0zZxvmFSCKWP\" ; public final static String clientSecret = \"LZHoJu7yZ5XnKR2dff4WlnD3BWcXTol2QBQX2IwboZUJYdVKmjvvEfRe002XK4nu1ujYZMdo3X4ow9CKiyVRLFRMoNEufhAeE0OgK5tVtRPRvVYAvKlIjE4QSaw6bRSB\" ; public final static String authUrl = \"http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/app/0b97eb6a-ee67-4e64-b59d-f4b49f3546ed/oauth/authorize/\" ; public final static String redirectUri = \"http://127.0.0.1:8080/redirect\" ; public final static String getTokenUrl = \"http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/oauth/token/\" ; public final static String getUserinfoUrl = \"http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/oauth/userinfo/\" ; /** * \u53d1\u8d77\u6388\u6743 * @param request * @param response * @throws ServletException * @throws IOException */ @Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { StringBuilder sb = new StringBuilder (); sb . append ( authUrl ); sb . append ( \"?client_id=\" ); sb . append ( clientId ); sb . append ( \"&redirect_uri=\" ); sb . append ( redirectUri ); sb . append ( \"&response_type=code\" ); sb . append ( \"&scope=userinfo\" ); response . sendRedirect ( sb . toString ()); } } import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.JSONObject ; import org.apache.http.Consts ; import org.apache.http.HttpEntity ; import org.apache.http.HttpHeaders ; import org.apache.http.client.methods.HttpGet ; import org.apache.http.client.methods.HttpPost ; import org.apache.http.entity.ContentType ; import org.apache.http.entity.mime.MultipartEntityBuilder ; import org.apache.http.entity.mime.content.StringBody ; import org.apache.http.impl.client.BasicResponseHandler ; import org.apache.http.impl.client.CloseableHttpClient ; import org.apache.http.impl.client.HttpClientBuilder ; import javax.servlet.* ; import javax.servlet.http.* ; import javax.servlet.annotation.* ; import java.io.IOException ; import java.nio.charset.StandardCharsets ; import org.apache.commons.codec.binary.Base64 ; import java.util.HashMap ; import java.util.Map ; @WebServlet ( name = \"OidcRedirectServlet\" , value = \"/OidcRedirectServlet\" ) public class OidcRedirectServlet extends HttpServlet { /** * \u6388\u6743\u56de\u8c03 * @param request * @param response * @throws ServletException * @throws IOException */ @Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { String code = request . getParameter ( \"code\" ); // \u83b7\u53d6accessToken JSONObject accessTokenResult = requestAccessToken ( code ); // { // \"access_token\":\"f9i0Jy0J7IDLHnZWbW3vMUSYI80fmw\", // \"expires_in\":36000, // \"token_type\":\"Bearer\", // \"scope\":\"userinfo\", // \"refresh_token\":\"gJclZjxoeRuq170HqgbDl6u3JdATcQ\" // } if ( accessTokenResult != null ){ //\u83b7\u53d6userInfo JSONObject userInfoResult = requestUserInfo ( accessTokenResult . getString ( \"access_token\" )); // { // \"id\":\"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\", // \"name\":\"admin\", // \"sub\":\"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\", // \"sub_id\":\"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\", // \"preferred_username\":\"admin\", // \"groups\":[\"tenant_admin\"], // \"tenant_id\":\"4da114ce-e115-44a0-823b-d372114425d0\", // \"tenant_slug\":\"\" // } } else { System . out . println ( \"\u6ca1\u6709\u83b7\u53d6\u5230access_token\" ); } } /** * \u83b7\u53d6accessToken * @param code \u6388\u6743\u7801 * @return JsonObject */ private JSONObject requestAccessToken ( String code ){ Map < String , String > params = new HashMap <> (); params . put ( \"code\" , code ); params . put ( \"grant_type\" , \"authorization_code\" ); //\u521b\u5efa\u8bf7\u6c42\u5bf9\u8c61 HttpPost httpPost = new HttpPost ( OidcLoginServlet . getTokenUrl ); // \u521b\u5efaauth\u8ba4\u8bc1\u5bf9\u8c61 String auth = OidcLoginServlet . clientId + \":\" + OidcLoginServlet . clientSecret ; byte [] encodedAuth = Base64 . encodeBase64 ( auth . getBytes ( StandardCharsets . UTF_8 )); String authHeader = \"Basic \" + new String ( encodedAuth ); //\u521b\u5efahttpclient\u5bf9\u8c61 CloseableHttpClient httpClient = HttpClientBuilder . create (). build (); try { // \u5c06\u9a8c\u8bc1\u4fe1\u606f\u653e\u5165\u5230 Header httpPost . setHeader ( HttpHeaders . AUTHORIZATION , authHeader ); //\u521b\u5efa\u8bf7\u6c42\u5934\u5bf9\u8c61 BasicResponseHandler handler = new BasicResponseHandler (); //\u8bbe\u7f6e\u8bf7\u6c42\u683c\u5f0f MultipartEntityBuilder builder = MultipartEntityBuilder . create (); if ( params != null ) { for ( String key : params . keySet ()) { builder . addPart ( key , new StringBody ( params . get ( key ), ContentType . create ( \"text/plain\" , Consts . UTF_8 ))); } } HttpEntity reqEntity = builder . build (); httpPost . setEntity ( reqEntity ); // \u6267\u884c\u8bf7\u6c42 String result = httpClient . execute ( httpPost , handler ); JSONObject jsonObj = JSON . parseObject ( result ); return jsonObj ; } catch ( Exception e ) { System . out . println ( e ); } finally { //\u91ca\u653e\u8fde\u63a5 try { httpClient . close (); } catch ( Exception e ) { } } return null ; } /** * \u83b7\u53d6\u7528\u6237\u4fe1\u606f * @param accessToken \u8bf7\u6c42Token * @return JsonObject */ private JSONObject requestUserInfo ( String accessToken ){ //\u521b\u5efa\u8bf7\u6c42\u5bf9\u8c61 HttpGet httpGet = new HttpGet ( OidcLoginServlet . getUserinfoUrl ); //\u521b\u5efahttpclient\u5bf9\u8c61 CloseableHttpClient httpClient = HttpClientBuilder . create (). build (); try { //\u521b\u5efa\u8bf7\u6c42\u5934\u5bf9\u8c61 BasicResponseHandler handler = new BasicResponseHandler (); //\u8bbe\u7f6e\u8bf7\u6c42\u5934 httpGet . setHeader ( HttpHeaders . AUTHORIZATION , \"Bearer \" + accessToken ); // \u6267\u884c\u8bf7\u6c42 String result = httpClient . execute ( httpGet , handler ); System . out . println ( result ); JSONObject jsonObj = JSON . parseObject ( result ); return jsonObj ; } catch ( Exception e ) { System . out . println ( e ); } finally { //\u91ca\u653e\u8fde\u63a5 try { httpClient . close (); } catch ( Exception e ) { } } return null ; } }","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/Case/#_1","text":"","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/Case/#fastapi","text":"from fastapi import FastAPI from starlette.responses import RedirectResponse import requests import json app = FastAPI () client_id = 'KHvanrQlNIBMZj9owre9ZZ6oc8AjWNdPHYUO2rwH' client_secret = 'ywZCKjSzxiWfgiaoEYAmloQ0greaLxLtTv6TnOyRtsgjvR7xAiTwpY0H5A46ZSSYz3x5laxHXQSlpjamnih3aQlYqS7Eq6oiSXsjiGNXnnf750i8WbbWAVAZdEaiivas' auth_url = 'http://localhost:9528/api/v1/tenant/bf3511e2-07b3-459f-829e-17a349602531/app/10e82a7d-b7fd-45e0-976b-885859066508/oauth/authorize/' redirect_uri = 'http://127.0.0.1:8001/redirect' get_token_url = 'http://localhost:9528/api/v1/tenant/bf3511e2-07b3-459f-829e-17a349602531/oauth/token/' get_userinfo_url = 'http://localhost:9528/api/v1/tenant/bf3511e2-07b3-459f-829e-17a349602531/oauth/userinfo/' @app . get ( \"/auth\" ) def oidc_auth (): response = RedirectResponse ( url = auth_url + '?client_id=' + client_id + '&redirect_uri=' + redirect_uri + '&response_type=code&scope=userinfo' ) return response @app . get ( \"/redirect\" ) def oidc_redirect ( code : str ): auth = requests . auth . HTTPBasicAuth ( client_id , client_secret ) response = requests . post ( url = get_token_url , auth = auth , data = { 'code' : code , 'grant_type' : 'authorization_code' } ) response = json . loads ( response . content ) access_token = response [ \"access_token\" ] return requests . get ( url = get_userinfo_url , headers = { 'Authorization' : 'Bearer ' + access_token } ) . content","title":"FastAPI"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/Case/#java","text":"import javax.servlet.* ; import javax.servlet.http.* ; import javax.servlet.annotation.WebServlet ; import java.io.IOException ; @WebServlet ( name = \"OidcServlet\" , value = \"/OidcServlet\" ) public class OidcLoginServlet extends HttpServlet { public final static String clientId = \"Y0nyNqIBsNBqYlW5ebGTRvgeNO6B0zZxvmFSCKWP\" ; public final static String clientSecret = \"LZHoJu7yZ5XnKR2dff4WlnD3BWcXTol2QBQX2IwboZUJYdVKmjvvEfRe002XK4nu1ujYZMdo3X4ow9CKiyVRLFRMoNEufhAeE0OgK5tVtRPRvVYAvKlIjE4QSaw6bRSB\" ; public final static String authUrl = \"http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/app/0b97eb6a-ee67-4e64-b59d-f4b49f3546ed/oauth/authorize/\" ; public final static String redirectUri = \"http://127.0.0.1:8080/redirect\" ; public final static String getTokenUrl = \"http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/oauth/token/\" ; public final static String getUserinfoUrl = \"http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/oauth/userinfo/\" ; /** * \u53d1\u8d77\u6388\u6743 * @param request * @param response * @throws ServletException * @throws IOException */ @Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { StringBuilder sb = new StringBuilder (); sb . append ( authUrl ); sb . append ( \"?client_id=\" ); sb . append ( clientId ); sb . append ( \"&redirect_uri=\" ); sb . append ( redirectUri ); sb . append ( \"&response_type=code\" ); sb . append ( \"&scope=userinfo\" ); response . sendRedirect ( sb . toString ()); } } import com.alibaba.fastjson.JSON ; import com.alibaba.fastjson.JSONObject ; import org.apache.http.Consts ; import org.apache.http.HttpEntity ; import org.apache.http.HttpHeaders ; import org.apache.http.client.methods.HttpGet ; import org.apache.http.client.methods.HttpPost ; import org.apache.http.entity.ContentType ; import org.apache.http.entity.mime.MultipartEntityBuilder ; import org.apache.http.entity.mime.content.StringBody ; import org.apache.http.impl.client.BasicResponseHandler ; import org.apache.http.impl.client.CloseableHttpClient ; import org.apache.http.impl.client.HttpClientBuilder ; import javax.servlet.* ; import javax.servlet.http.* ; import javax.servlet.annotation.* ; import java.io.IOException ; import java.nio.charset.StandardCharsets ; import org.apache.commons.codec.binary.Base64 ; import java.util.HashMap ; import java.util.Map ; @WebServlet ( name = \"OidcRedirectServlet\" , value = \"/OidcRedirectServlet\" ) public class OidcRedirectServlet extends HttpServlet { /** * \u6388\u6743\u56de\u8c03 * @param request * @param response * @throws ServletException * @throws IOException */ @Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { String code = request . getParameter ( \"code\" ); // \u83b7\u53d6accessToken JSONObject accessTokenResult = requestAccessToken ( code ); // { // \"access_token\":\"f9i0Jy0J7IDLHnZWbW3vMUSYI80fmw\", // \"expires_in\":36000, // \"token_type\":\"Bearer\", // \"scope\":\"userinfo\", // \"refresh_token\":\"gJclZjxoeRuq170HqgbDl6u3JdATcQ\" // } if ( accessTokenResult != null ){ //\u83b7\u53d6userInfo JSONObject userInfoResult = requestUserInfo ( accessTokenResult . getString ( \"access_token\" )); // { // \"id\":\"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\", // \"name\":\"admin\", // \"sub\":\"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\", // \"sub_id\":\"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\", // \"preferred_username\":\"admin\", // \"groups\":[\"tenant_admin\"], // \"tenant_id\":\"4da114ce-e115-44a0-823b-d372114425d0\", // \"tenant_slug\":\"\" // } } else { System . out . println ( \"\u6ca1\u6709\u83b7\u53d6\u5230access_token\" ); } } /** * \u83b7\u53d6accessToken * @param code \u6388\u6743\u7801 * @return JsonObject */ private JSONObject requestAccessToken ( String code ){ Map < String , String > params = new HashMap <> (); params . put ( \"code\" , code ); params . put ( \"grant_type\" , \"authorization_code\" ); //\u521b\u5efa\u8bf7\u6c42\u5bf9\u8c61 HttpPost httpPost = new HttpPost ( OidcLoginServlet . getTokenUrl ); // \u521b\u5efaauth\u8ba4\u8bc1\u5bf9\u8c61 String auth = OidcLoginServlet . clientId + \":\" + OidcLoginServlet . clientSecret ; byte [] encodedAuth = Base64 . encodeBase64 ( auth . getBytes ( StandardCharsets . UTF_8 )); String authHeader = \"Basic \" + new String ( encodedAuth ); //\u521b\u5efahttpclient\u5bf9\u8c61 CloseableHttpClient httpClient = HttpClientBuilder . create (). build (); try { // \u5c06\u9a8c\u8bc1\u4fe1\u606f\u653e\u5165\u5230 Header httpPost . setHeader ( HttpHeaders . AUTHORIZATION , authHeader ); //\u521b\u5efa\u8bf7\u6c42\u5934\u5bf9\u8c61 BasicResponseHandler handler = new BasicResponseHandler (); //\u8bbe\u7f6e\u8bf7\u6c42\u683c\u5f0f MultipartEntityBuilder builder = MultipartEntityBuilder . create (); if ( params != null ) { for ( String key : params . keySet ()) { builder . addPart ( key , new StringBody ( params . get ( key ), ContentType . create ( \"text/plain\" , Consts . UTF_8 ))); } } HttpEntity reqEntity = builder . build (); httpPost . setEntity ( reqEntity ); // \u6267\u884c\u8bf7\u6c42 String result = httpClient . execute ( httpPost , handler ); JSONObject jsonObj = JSON . parseObject ( result ); return jsonObj ; } catch ( Exception e ) { System . out . println ( e ); } finally { //\u91ca\u653e\u8fde\u63a5 try { httpClient . close (); } catch ( Exception e ) { } } return null ; } /** * \u83b7\u53d6\u7528\u6237\u4fe1\u606f * @param accessToken \u8bf7\u6c42Token * @return JsonObject */ private JSONObject requestUserInfo ( String accessToken ){ //\u521b\u5efa\u8bf7\u6c42\u5bf9\u8c61 HttpGet httpGet = new HttpGet ( OidcLoginServlet . getUserinfoUrl ); //\u521b\u5efahttpclient\u5bf9\u8c61 CloseableHttpClient httpClient = HttpClientBuilder . create (). build (); try { //\u521b\u5efa\u8bf7\u6c42\u5934\u5bf9\u8c61 BasicResponseHandler handler = new BasicResponseHandler (); //\u8bbe\u7f6e\u8bf7\u6c42\u5934 httpGet . setHeader ( HttpHeaders . AUTHORIZATION , \"Bearer \" + accessToken ); // \u6267\u884c\u8bf7\u6c42 String result = httpClient . execute ( httpGet , handler ); System . out . println ( result ); JSONObject jsonObj = JSON . parseObject ( result ); return jsonObj ; } catch ( Exception e ) { System . out . println ( e ); } finally { //\u91ca\u653e\u8fde\u63a5 try { httpClient . close (); } catch ( Exception e ) { } } return null ; } }","title":"Java"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/","text":"OAuth2 # OAuth2\u662f\u4e00\u4e2a\u6388\u6743\u7684\u5f00\u653e\u534f\u8bae \u6dfb\u52a0OAuth2\u5e94\u7528 # \u6253\u5f00\u5e94\u7528\u5217\u8868 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u586b\u5199\u914d\u7f6e \u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u70b9\u51fb\u786e\u8ba4\u540e\uff0c\u5bf9\u8bdd\u6846\u5173\u95ed\uff0c\u53ef\u4ee5\u770b\u5230\u4f60\u521b\u5efa\u7684\u5e94\u7528\u3002 \u5e94\u7528\u7c7b\u578b\u9009\u62e9\u4e3aOIDC\uff0c\u586b\u5199\u53c2\u6570\uff0c\u521b\u5efa\u5b8c\u6bd5 \u5373\u53ef\u67e5\u770b\u8be5\u534f\u8bae\u6240\u6709\u76f8\u5173\u7684\u53c2\u6570\u3002 \u4f7f\u7528OAuth2\u5e94\u7528 # \u660e\u767d\u9875\u9762\u5b57\u6bb5\u542b\u4e49 # \u82f1\u6587\u53c2\u6570\u540d\u79f0 \u5bf9\u5e94\u9875\u9762\u5b57\u6bb5 redirect url \u56de\u8c03\u5730\u5740 client_id \u5ba2\u6237\u7aefid client_token \u5ba2\u6237\u7aef\u79d8\u94a5 authorize url \u6388\u6743url get token url \u83b7\u53d6access_token\u5730\u5740 userinfo url \u7528\u6237\u4fe1\u606f\u5730\u5740 logout url \u9000\u51fa\u767b\u5f55\u5730\u5740 \u83b7\u53d6Authorization Code # \u8bf7\u6c42\u5730\u5740: authorize url \u8bf7\u6c42\u65b9\u5f0f: GET( \u91cd\u5b9a\u5411 ) \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b client_id client_id redirect_uri redirect url response_type \u586b\u5165code code scope \u53ef\u9009 ( openid userinfo) \u5982\u679c\u4f20\u9012openid\uff0c\u83b7\u53d6token\u4f1a\u591a\u4e00\u4e2aid_token \u8bf7\u6c42\u793a\u4f8b: http://authorize url/?client_id=xxxxx&redirect_uri=xxxxx&response_type=code&scope=userinfo \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 \u8fd4\u56de\u793a\u4f8b: http://redirect_uri?code=XEV8esOvaVk9wyAuiNXpb3Nuwn5av9&token=cd34840ffc804b894ede31bc21b176ef559e137f \u83b7\u53d6Access Token # \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization token\u683c\u5f0f\u4e3a client_id:client_secret \u4f7f\u7528base64\u7f16\u7801 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 grant_type \u586b\u5165authorization_code \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"cFcWq78HH9MKVQOFJgGPl6RFtESAc2\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"oRHcgoGYsL5h1UimT4rWcg93lcTyjN\" } \u83b7\u53d6\u7528\u6237\u4fe1\u606f # \u8bf7\u6c42\u5730\u5740: userinfo url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization Bearer access_token Bearer cFcWq78HH9MKVQOFJgGPl6RFtESAc2 \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b id \u7528\u6237id name \u7528\u6237\u540d\u79f0 sub \u7528\u6237id sub_id \u7528\u6237id preferred_username \u7528\u6237\u540d groups \u7528\u6237\u5206\u7ec4 tenant_id \u79df\u6237id tenant_slug \u79df\u6237slug \u8fd4\u56de\u793a\u4f8b: { \"id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"name\" : \"admin\" , \"sub\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"sub_id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"preferred_username\" : \"admin\" , \"groups\" : [ ], \"tenant_id\" : \"4da114ce-e115-44a0-823b-d372114425d0\" , \"tenant_slug\" : \"\" } \u5237\u65b0token # \u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\u5982\u679c\u9881\u53d1\u7684\u4ee4\u724c\u8fc7\u4e86\u6709\u6548\u671f\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u66f4\u6362\u65b0\u7684\u4ee4\u724c \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization \u8fd9\u4e2atoken\u7531client_id\u548cclient_secret\u751f\u6210 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b refresh_token \u66f4\u65b0\u4ee4\u724c grant_type \u586b\u5165refresh_token \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"51s34LPxhhKlUTP5r5mHevGW7ussXC\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"68trmzGvLmmbjACnHFGgzoCl5LBOrJ\" }","title":"OAuth2"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#oauth2","text":"OAuth2\u662f\u4e00\u4e2a\u6388\u6743\u7684\u5f00\u653e\u534f\u8bae","title":"OAuth2"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#oauth2_1","text":"\u6253\u5f00\u5e94\u7528\u5217\u8868 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u586b\u5199\u914d\u7f6e \u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u70b9\u51fb\u786e\u8ba4\u540e\uff0c\u5bf9\u8bdd\u6846\u5173\u95ed\uff0c\u53ef\u4ee5\u770b\u5230\u4f60\u521b\u5efa\u7684\u5e94\u7528\u3002 \u5e94\u7528\u7c7b\u578b\u9009\u62e9\u4e3aOIDC\uff0c\u586b\u5199\u53c2\u6570\uff0c\u521b\u5efa\u5b8c\u6bd5 \u5373\u53ef\u67e5\u770b\u8be5\u534f\u8bae\u6240\u6709\u76f8\u5173\u7684\u53c2\u6570\u3002","title":"\u6dfb\u52a0OAuth2\u5e94\u7528"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#oauth2_2","text":"","title":"\u4f7f\u7528OAuth2\u5e94\u7528"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#_1","text":"\u82f1\u6587\u53c2\u6570\u540d\u79f0 \u5bf9\u5e94\u9875\u9762\u5b57\u6bb5 redirect url \u56de\u8c03\u5730\u5740 client_id \u5ba2\u6237\u7aefid client_token \u5ba2\u6237\u7aef\u79d8\u94a5 authorize url \u6388\u6743url get token url \u83b7\u53d6access_token\u5730\u5740 userinfo url \u7528\u6237\u4fe1\u606f\u5730\u5740 logout url \u9000\u51fa\u767b\u5f55\u5730\u5740","title":"\u660e\u767d\u9875\u9762\u5b57\u6bb5\u542b\u4e49"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#authorization-code","text":"\u8bf7\u6c42\u5730\u5740: authorize url \u8bf7\u6c42\u65b9\u5f0f: GET( \u91cd\u5b9a\u5411 ) \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b client_id client_id redirect_uri redirect url response_type \u586b\u5165code code scope \u53ef\u9009 ( openid userinfo) \u5982\u679c\u4f20\u9012openid\uff0c\u83b7\u53d6token\u4f1a\u591a\u4e00\u4e2aid_token \u8bf7\u6c42\u793a\u4f8b: http://authorize url/?client_id=xxxxx&redirect_uri=xxxxx&response_type=code&scope=userinfo \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 \u8fd4\u56de\u793a\u4f8b: http://redirect_uri?code=XEV8esOvaVk9wyAuiNXpb3Nuwn5av9&token=cd34840ffc804b894ede31bc21b176ef559e137f","title":"\u83b7\u53d6Authorization Code"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#access-token","text":"\u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization token\u683c\u5f0f\u4e3a client_id:client_secret \u4f7f\u7528base64\u7f16\u7801 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 grant_type \u586b\u5165authorization_code \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"cFcWq78HH9MKVQOFJgGPl6RFtESAc2\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"oRHcgoGYsL5h1UimT4rWcg93lcTyjN\" }","title":"\u83b7\u53d6Access Token"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#_2","text":"\u8bf7\u6c42\u5730\u5740: userinfo url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization Bearer access_token Bearer cFcWq78HH9MKVQOFJgGPl6RFtESAc2 \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b id \u7528\u6237id name \u7528\u6237\u540d\u79f0 sub \u7528\u6237id sub_id \u7528\u6237id preferred_username \u7528\u6237\u540d groups \u7528\u6237\u5206\u7ec4 tenant_id \u79df\u6237id tenant_slug \u79df\u6237slug \u8fd4\u56de\u793a\u4f8b: { \"id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"name\" : \"admin\" , \"sub\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"sub_id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"preferred_username\" : \"admin\" , \"groups\" : [ ], \"tenant_id\" : \"4da114ce-e115-44a0-823b-d372114425d0\" , \"tenant_slug\" : \"\" }","title":"\u83b7\u53d6\u7528\u6237\u4fe1\u606f"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OAuth2/#token","text":"\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\u5982\u679c\u9881\u53d1\u7684\u4ee4\u724c\u8fc7\u4e86\u6709\u6548\u671f\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u66f4\u6362\u65b0\u7684\u4ee4\u724c \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization \u8fd9\u4e2atoken\u7531client_id\u548cclient_secret\u751f\u6210 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b refresh_token \u66f4\u65b0\u4ee4\u724c grant_type \u586b\u5165refresh_token \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"51s34LPxhhKlUTP5r5mHevGW7ussXC\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"68trmzGvLmmbjACnHFGgzoCl5LBOrJ\" }","title":"\u5237\u65b0token"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/","text":"OIDC # OIDC\u662f\u57fa\u4e8eOAuth2\u548cOpenID\u6574\u5408\u7684\u65b0\u8ba4\u8bc1\u6388\u6743\u534f\u8bae \u6dfb\u52a0OIDC\u5e94\u7528 # \u6253\u5f00\u5e94\u7528\u5217\u8868 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u586b\u5199\u914d\u7f6e \u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u70b9\u51fb\u786e\u8ba4\u540e\uff0c\u5bf9\u8bdd\u6846\u5173\u95ed\uff0c\u53ef\u4ee5\u770b\u5230\u4f60\u521b\u5efa\u7684\u5e94\u7528\u3002 \u5e94\u7528\u7c7b\u578b\u9009\u62e9\u4e3aOIDC\uff0c\u586b\u5199\u53c2\u6570\uff0c\u521b\u5efa\u5b8c\u6bd5 \u5373\u53ef\u67e5\u770b\u8be5\u534f\u8bae\u6240\u6709\u76f8\u5173\u7684\u53c2\u6570\u3002 \u4f7f\u7528OIDC\u5e94\u7528 # \u660e\u767d\u9875\u9762\u5b57\u6bb5\u542b\u4e49 # \u82f1\u6587\u53c2\u6570\u540d\u79f0 \u5bf9\u5e94\u9875\u9762\u5b57\u6bb5 redirect url \u56de\u8c03\u5730\u5740 client_id \u5ba2\u6237\u7aefid client_token \u5ba2\u6237\u7aef\u79d8\u94a5 authorize url \u6388\u6743url get token url \u83b7\u53d6access_token\u5730\u5740 userinfo url \u7528\u6237\u4fe1\u606f\u5730\u5740 logout url \u9000\u51fa\u767b\u5f55\u5730\u5740 \u83b7\u53d6Authorization Code # \u8bf7\u6c42\u5730\u5740: authorize url \u8bf7\u6c42\u65b9\u5f0f: GET( \u91cd\u5b9a\u5411 ) \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b client_id client_id redirect_uri redirect url response_type \u586b\u5165code code scope \u53ef\u9009 ( openid userinfo) \u5982\u679c\u4f20\u9012openid\uff0c\u83b7\u53d6token\u4f1a\u591a\u4e00\u4e2aid_token \u8bf7\u6c42\u793a\u4f8b: http://authorize url/?client_id=xxxxx&redirect_uri=xxxxx&response_type=code&scope=userinfo \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 \u8fd4\u56de\u793a\u4f8b: http://redirect_uri?code=XEV8esOvaVk9wyAuiNXpb3Nuwn5av9&token=cd34840ffc804b894ede31bc21b176ef559e137f \u83b7\u53d6Access Token # \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization token\u683c\u5f0f\u4e3a client_id:client_secret \u4f7f\u7528base64\u7f16\u7801 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 grant_type \u586b\u5165authorization_code \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"cFcWq78HH9MKVQOFJgGPl6RFtESAc2\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"oRHcgoGYsL5h1UimT4rWcg93lcTyjN\" } \u83b7\u53d6\u7528\u6237\u4fe1\u606f # \u8bf7\u6c42\u5730\u5740: userinfo url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization Bearer access_token Bearer cFcWq78HH9MKVQOFJgGPl6RFtESAc2 \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b id \u7528\u6237id name \u7528\u6237\u540d\u79f0 sub \u7528\u6237id sub_id \u7528\u6237id preferred_username \u7528\u6237\u540d groups \u7528\u6237\u5206\u7ec4 tenant_id \u79df\u6237id tenant_slug \u79df\u6237slug \u8fd4\u56de\u793a\u4f8b: { \"id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"name\" : \"admin\" , \"sub\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"sub_id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"preferred_username\" : \"admin\" , \"groups\" : [ ], \"tenant_id\" : \"4da114ce-e115-44a0-823b-d372114425d0\" , \"tenant_slug\" : \"\" } \u5237\u65b0token # \u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\u5982\u679c\u9881\u53d1\u7684\u4ee4\u724c\u8fc7\u4e86\u6709\u6548\u671f\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u66f4\u6362\u65b0\u7684\u4ee4\u724c \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization \u8fd9\u4e2atoken\u7531client_id\u548cclient_secret\u751f\u6210 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b refresh_token \u66f4\u65b0\u4ee4\u724c grant_type \u586b\u5165refresh_token \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"51s34LPxhhKlUTP5r5mHevGW7ussXC\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"68trmzGvLmmbjACnHFGgzoCl5LBOrJ\" } \u9000\u51faoidc # \u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u9000\u51fa\u7528\u6237\u767b\u5f55\uff0c\u5e76\u8df3\u8f6c\u5230\u6307\u5b9a\u5730\u5740 \u8bf7\u6c42\u5730\u5740: logout url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b id_token_hint id_token post_logout_redirect_uri \u9000\u51fa\u767b\u5f55\u540e\u8df3\u8f6c\u7684\u5730\u5740(\u53ef\u9009) \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b error_code \u9519\u8bef\u7801 error_msg \u9519\u8bef\u4fe1\u606f \u8fd4\u56de\u793a\u4f8b: { \"error_code\" : 0 , \"error_msg\" : \"logout success\" }","title":"OIDC"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#oidc","text":"OIDC\u662f\u57fa\u4e8eOAuth2\u548cOpenID\u6574\u5408\u7684\u65b0\u8ba4\u8bc1\u6388\u6743\u534f\u8bae","title":"OIDC"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#oidc_1","text":"\u6253\u5f00\u5e94\u7528\u5217\u8868 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u586b\u5199\u914d\u7f6e \u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u70b9\u51fb\u786e\u8ba4\u540e\uff0c\u5bf9\u8bdd\u6846\u5173\u95ed\uff0c\u53ef\u4ee5\u770b\u5230\u4f60\u521b\u5efa\u7684\u5e94\u7528\u3002 \u5e94\u7528\u7c7b\u578b\u9009\u62e9\u4e3aOIDC\uff0c\u586b\u5199\u53c2\u6570\uff0c\u521b\u5efa\u5b8c\u6bd5 \u5373\u53ef\u67e5\u770b\u8be5\u534f\u8bae\u6240\u6709\u76f8\u5173\u7684\u53c2\u6570\u3002","title":"\u6dfb\u52a0OIDC\u5e94\u7528"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#oidc_2","text":"","title":"\u4f7f\u7528OIDC\u5e94\u7528"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#_1","text":"\u82f1\u6587\u53c2\u6570\u540d\u79f0 \u5bf9\u5e94\u9875\u9762\u5b57\u6bb5 redirect url \u56de\u8c03\u5730\u5740 client_id \u5ba2\u6237\u7aefid client_token \u5ba2\u6237\u7aef\u79d8\u94a5 authorize url \u6388\u6743url get token url \u83b7\u53d6access_token\u5730\u5740 userinfo url \u7528\u6237\u4fe1\u606f\u5730\u5740 logout url \u9000\u51fa\u767b\u5f55\u5730\u5740","title":"\u660e\u767d\u9875\u9762\u5b57\u6bb5\u542b\u4e49"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#authorization-code","text":"\u8bf7\u6c42\u5730\u5740: authorize url \u8bf7\u6c42\u65b9\u5f0f: GET( \u91cd\u5b9a\u5411 ) \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b client_id client_id redirect_uri redirect url response_type \u586b\u5165code code scope \u53ef\u9009 ( openid userinfo) \u5982\u679c\u4f20\u9012openid\uff0c\u83b7\u53d6token\u4f1a\u591a\u4e00\u4e2aid_token \u8bf7\u6c42\u793a\u4f8b: http://authorize url/?client_id=xxxxx&redirect_uri=xxxxx&response_type=code&scope=userinfo \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 \u8fd4\u56de\u793a\u4f8b: http://redirect_uri?code=XEV8esOvaVk9wyAuiNXpb3Nuwn5av9&token=cd34840ffc804b894ede31bc21b176ef559e137f","title":"\u83b7\u53d6Authorization Code"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#access-token","text":"\u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization token\u683c\u5f0f\u4e3a client_id:client_secret \u4f7f\u7528base64\u7f16\u7801 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code \u6388\u6743\u7801 grant_type \u586b\u5165authorization_code \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"cFcWq78HH9MKVQOFJgGPl6RFtESAc2\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"oRHcgoGYsL5h1UimT4rWcg93lcTyjN\" }","title":"\u83b7\u53d6Access Token"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#_2","text":"\u8bf7\u6c42\u5730\u5740: userinfo url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization Bearer access_token Bearer cFcWq78HH9MKVQOFJgGPl6RFtESAc2 \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b id \u7528\u6237id name \u7528\u6237\u540d\u79f0 sub \u7528\u6237id sub_id \u7528\u6237id preferred_username \u7528\u6237\u540d groups \u7528\u6237\u5206\u7ec4 tenant_id \u79df\u6237id tenant_slug \u79df\u6237slug \u8fd4\u56de\u793a\u4f8b: { \"id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"name\" : \"admin\" , \"sub\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"sub_id\" : \"faf5aae6-3cdf-4595-8b4a-3a06b31117c8\" , \"preferred_username\" : \"admin\" , \"groups\" : [ ], \"tenant_id\" : \"4da114ce-e115-44a0-823b-d372114425d0\" , \"tenant_slug\" : \"\" }","title":"\u83b7\u53d6\u7528\u6237\u4fe1\u606f"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#token","text":"\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\u5982\u679c\u9881\u53d1\u7684\u4ee4\u724c\u8fc7\u4e86\u6709\u6548\u671f\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\u66f4\u6362\u65b0\u7684\u4ee4\u724c \u8bf7\u6c42\u5730\u5740: get token url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization \u8fd9\u4e2atoken\u7531client_id\u548cclient_secret\u751f\u6210 Basic Token Content-Type \u586b\u5165multipart/form-data \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b refresh_token \u66f4\u65b0\u4ee4\u724c grant_type \u586b\u5165refresh_token \u8bf7\u6c42\u793a\u4f8b: \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b access_token \u4ee4\u724c expires_in \u8fc7\u671f\u65f6\u95f4 token_type Bearer scope userinfo openid refresh_token \u7528\u4e8e\u66f4\u65b0\u4ee4\u724c\u7684\u4ee4\u724c \u8fd4\u56de\u793a\u4f8b: { \"access_token\" : \"51s34LPxhhKlUTP5r5mHevGW7ussXC\" , \"expires_in\" : 36000 , \"token_type\" : \"Bearer\" , \"scope\" : \"userinfo\" , \"refresh_token\" : \"68trmzGvLmmbjACnHFGgzoCl5LBOrJ\" }","title":"\u5237\u65b0token"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_oidc/OIDC/#oidc_3","text":"\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u9000\u51fa\u7528\u6237\u767b\u5f55\uff0c\u5e76\u8df3\u8f6c\u5230\u6307\u5b9a\u5730\u5740 \u8bf7\u6c42\u5730\u5740: logout url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b id_token_hint id_token post_logout_redirect_uri \u9000\u51fa\u767b\u5f55\u540e\u8df3\u8f6c\u7684\u5730\u5740(\u53ef\u9009) \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b error_code \u9519\u8bef\u7801 error_msg \u9519\u8bef\u4fe1\u606f \u8fd4\u56de\u793a\u4f8b: { \"error_code\" : 0 , \"error_msg\" : \"logout success\" }","title":"\u9000\u51faoidc"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/","text":"\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u5b89\u88c5\u540e\uff0c\u4f1a\u5728 \u5ba1\u6279\u7ba1\u7406 \u83dc\u5355\u4e0b\u9762\u6dfb\u52a0 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\uff0c\u7528\u4e8e\u5904\u7406\u5206\u914d\u7ed9\u5f53\u524d\u5ba1\u6279\u7cfb\u7edf\u7684\u5ba1\u6279\u8bf7\u6c42 \u521b\u5efa\u5ba1\u6279\u52a8\u4f5c # \u6253\u5f00\u5ba1\u6279\u52a8\u4f5c\u9875\u9762\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u586b\u5165\u8868\u5355\u53c2\u6570 \u751f\u6210\u5ba1\u6279\u8bf7\u6c42 # \u6253\u5f00\u8d26\u53f7\u751f\u547d\u5468\u671f\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u914d\u7f6e\u8868\u5355\u53c2\u6570\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u7531\u4e8e\u4e0a\u4e2a\u6b65\u9aa4\u4e2d\u5df2\u7ecf\u914d\u7f6e\u4e86\u9488\u5bf9\u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\u7684\u5ba1\u6279\u52a8\u4f5c\uff0c\u6240\u4ee5\u8be5\u8bf7\u6c42\u8fd4\u56de403 \u67e5\u770b\u5ba1\u6279\u8bf7\u6c42 # \u6253\u5f00 \u5ba1\u6279\u7ba1\u7406->\u5ba1\u6279\u8bf7\u6c42 \u9875\u9762 \u6253\u5f00 \u7528\u6237\u5934\u50cf->\u5ba1\u6279\u8bf7\u6c42 \u9875\u9762 \u5904\u7406\u5ba1\u6279\u8bf7\u6c42 # \u6253\u5f00 \u5ba1\u6279\u7ba1\u7406->\u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\uff0c \u70b9\u51fb\u901a\u8fc7\u6309\u94ae \u6253\u5f00 \u5df2\u5ba1\u6838 \u9875\u7b7e\uff0c \u786e\u8ba4\u72b6\u6001\u5df2\u6539\u53d8 \u6253\u5f00 \u8d26\u53f7\u751f\u547d\u5468\u671f \u9875\u9762\uff0c \u786e\u8ba4\u5f85\u5ba1\u6838\u7684\u8bf7\u6c42\u91cd\u65b0\u6267\u884c \u5b9e\u73b0\u601d\u8def # \u5728 approve_requests_page \u4e2d\u6dfb\u52a0 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\u4e2d\u8c03\u7528 /approve_requests/{{request_id}}/pass/ \u540c\u610f\u5ba1\u6279\u8bf7\u6c42 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\u4e2d\u8c03\u7528 /approve_requests/{{request_id}}/deny/ \u62d2\u7edd\u5ba1\u6279\u8bf7\u6c42 \u5b9e\u73b0 pass_approve_request \u62bd\u8c61\u65b9\u6cd5 \u540c\u610f\u5ba1\u6279\u8bf7\u6c42 \u5b9e\u73b0 deny_approve_request \u62bd\u8c61\u65b9\u6cd5 \u62d2\u7edd\u5ba1\u6279\u8bf7\u6c42 \u7531\u4e8e\u6b64\u63d2\u4ef6\u53ea\u4e0d\u9700\u8981\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u7b2c\u4e09\u65b9\u6240\u4ee5\u6ca1\u6709\u8986\u76d6\u62bd\u8c61\u65b9\u6cd5 create_approve_request \u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.approve_system.ApproveSystemExtension \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0: # pass_approve_request deny_approve_request create_approve_request \u4ee3\u7801 # extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension ( ApproveSystemExtension ) # Source code in extension_root/com_longgui_approve_system_arkid/__init__.py class ApproveSystemArkIDExtension ( ApproveSystemExtension ): def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router ) @operation ( List [ ApproveRequestListItemOut ], roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) @paginate ( CustomPagination ) def list_tenant_approve_requests ( self , request , tenant_id : str , is_approved : str = '' ): package = 'com.longgui.approve.system.arkid' requests = ApproveRequest . valid_objects . filter ( tenant = request . tenant , action__extension__package = package ) if is_approved == 'true' : requests = requests . exclude ( status = \"wait\" ) elif is_approved == 'false' : requests = requests . filter ( status = \"wait\" ) return requests def create_approve_request ( self , event , ** kwargs ): pass def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' ) def deny_approve_request ( self , request , approve_request ): pass create_approve_request ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def create_approve_request ( self , event , ** kwargs ): pass deny_approve_request ( self , request , approve_request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def deny_approve_request ( self , request , approve_request ): pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router ) pass_approve_request ( self , request , approve_request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' )","title":"\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_1","text":"","title":"\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_2","text":"\u9ed8\u8ba4\u5ba1\u6279\u7cfb\u7edf\u63d2\u4ef6\u5b89\u88c5\u540e\uff0c\u4f1a\u5728 \u5ba1\u6279\u7ba1\u7406 \u83dc\u5355\u4e0b\u9762\u6dfb\u52a0 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\uff0c\u7528\u4e8e\u5904\u7406\u5206\u914d\u7ed9\u5f53\u524d\u5ba1\u6279\u7cfb\u7edf\u7684\u5ba1\u6279\u8bf7\u6c42","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_3","text":"\u6253\u5f00\u5ba1\u6279\u52a8\u4f5c\u9875\u9762\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u586b\u5165\u8868\u5355\u53c2\u6570","title":"\u521b\u5efa\u5ba1\u6279\u52a8\u4f5c"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_4","text":"\u6253\u5f00\u8d26\u53f7\u751f\u547d\u5468\u671f\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u914d\u7f6e\u8868\u5355\u53c2\u6570\uff0c\u70b9\u51fb\u521b\u5efa\u6309\u94ae \u7531\u4e8e\u4e0a\u4e2a\u6b65\u9aa4\u4e2d\u5df2\u7ecf\u914d\u7f6e\u4e86\u9488\u5bf9\u521b\u5efa\u751f\u547d\u5468\u671f\u914d\u7f6e\u7684\u5ba1\u6279\u52a8\u4f5c\uff0c\u6240\u4ee5\u8be5\u8bf7\u6c42\u8fd4\u56de403","title":"\u751f\u6210\u5ba1\u6279\u8bf7\u6c42"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_5","text":"\u6253\u5f00 \u5ba1\u6279\u7ba1\u7406->\u5ba1\u6279\u8bf7\u6c42 \u9875\u9762 \u6253\u5f00 \u7528\u6237\u5934\u50cf->\u5ba1\u6279\u8bf7\u6c42 \u9875\u9762","title":"\u67e5\u770b\u5ba1\u6279\u8bf7\u6c42"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_6","text":"\u6253\u5f00 \u5ba1\u6279\u7ba1\u7406->\u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\uff0c \u70b9\u51fb\u901a\u8fc7\u6309\u94ae \u6253\u5f00 \u5df2\u5ba1\u6838 \u9875\u7b7e\uff0c \u786e\u8ba4\u72b6\u6001\u5df2\u6539\u53d8 \u6253\u5f00 \u8d26\u53f7\u751f\u547d\u5468\u671f \u9875\u9762\uff0c \u786e\u8ba4\u5f85\u5ba1\u6838\u7684\u8bf7\u6c42\u91cd\u65b0\u6267\u884c","title":"\u5904\u7406\u5ba1\u6279\u8bf7\u6c42"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_7","text":"\u5728 approve_requests_page \u4e2d\u6dfb\u52a0 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\u4e2d\u8c03\u7528 /approve_requests/{{request_id}}/pass/ \u540c\u610f\u5ba1\u6279\u8bf7\u6c42 \u9ed8\u8ba4\u8bf7\u6c42\u5904\u7406 \u9875\u9762\u4e2d\u8c03\u7528 /approve_requests/{{request_id}}/deny/ \u62d2\u7edd\u5ba1\u6279\u8bf7\u6c42 \u5b9e\u73b0 pass_approve_request \u62bd\u8c61\u65b9\u6cd5 \u540c\u610f\u5ba1\u6279\u8bf7\u6c42 \u5b9e\u73b0 deny_approve_request \u62bd\u8c61\u65b9\u6cd5 \u62d2\u7edd\u5ba1\u6279\u8bf7\u6c42 \u7531\u4e8e\u6b64\u63d2\u4ef6\u53ea\u4e0d\u9700\u8981\u5c06\u5ba1\u6279\u8bf7\u6c42\u53d1\u9001\u5230\u7b2c\u4e09\u65b9\u6240\u4ee5\u6ca1\u6709\u8986\u76d6\u62bd\u8c61\u65b9\u6cd5 create_approve_request \u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.approve_system.ApproveSystemExtension","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_8","text":"pass_approve_request deny_approve_request create_approve_request","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0:"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#_9","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension","text":"Source code in extension_root/com_longgui_approve_system_arkid/__init__.py class ApproveSystemArkIDExtension ( ApproveSystemExtension ): def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router ) @operation ( List [ ApproveRequestListItemOut ], roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) @paginate ( CustomPagination ) def list_tenant_approve_requests ( self , request , tenant_id : str , is_approved : str = '' ): package = 'com.longgui.approve.system.arkid' requests = ApproveRequest . valid_objects . filter ( tenant = request . tenant , action__extension__package = package ) if is_approved == 'true' : requests = requests . exclude ( status = \"wait\" ) elif is_approved == 'false' : requests = requests . filter ( status = \"wait\" ) return requests def create_approve_request ( self , event , ** kwargs ): pass def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' ) def deny_approve_request ( self , request , approve_request ): pass","title":"ApproveSystemArkIDExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.create_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default event arkid.core.event.Event \u521b\u5efa\u5ba1\u6279\u8bf7\u6c42\u4e8b\u4ef6 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def create_approve_request ( self , event , ** kwargs ): pass","title":"create_approve_request()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.deny_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u62d2\u7edd\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def deny_approve_request ( self , request , approve_request ): pass","title":"deny_approve_request()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def load ( self ): super () . load () self . register_api ( f '/approve_requests/' , 'GET' , self . list_tenant_approve_requests , response = List [ ApproveRequestListItemOut ], tenant_path = True , ) self . register_approve_system_schema ( ApproveSystemArkIDConfigSchema , 'approve_system_arkid' ) self . register_front_pages ([ router_page , waiting_page , approved_page ]) self . register_front_routers ( router , approve_manage_router )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_approve_system_arkid/#extension_root.com_longgui_approve_system_arkid.ApproveSystemArkIDExtension.pass_approve_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request django.http.HttpRequest HTTP \u8bf7\u6c42 required approve_request arkid.core.models.ApproveRequest \u9700\u8981\u540c\u610f\u7684\u5ba1\u6279\u8bf7\u6c42 required Source code in extension_root/com_longgui_approve_system_arkid/__init__.py def pass_approve_request ( self , request , approve_request ): response = restore_approve_request ( approve_request ) logger . info ( f 'Restore approve request with result: { response } ' )","title":"pass_approve_request()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/","text":"\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20 # \u529f\u80fd\u4ecb\u7ecd # \u5bf9\u7528\u6237\u8ba4\u8bc1\u51ed\u8bc1\u8868\u5355\u8fdb\u884c\u6269\u5145\uff0c\u63d2\u5165\u56fe\u5f62\u9a8c\u8bc1\u7801\u5e76\u5b9e\u73b0\u76f8\u5173\u9a8c\u8bc1\u529f\u80fd \u6ce8\u610f\uff1a\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u4e0d\u5177\u6709\u8ba4\u8bc1/\u6ce8\u518c/\u4fee\u6539\u5bc6\u7801\u7b49\u529f\u80fd\uff0c\u4ec5\u5bf9\u5176\u4ed6\u8ba4\u8bc1\u56e0\u7d20\u8fdb\u884c\u51ed\u8bc1\u5143\u7d20\u6269\u5145 \u666e\u901a\u7528\u6237\uff1a \u5728 \u201c\u767b\u5f55\u201d \u9875\u9762\u5b9e\u73b0\u5411\u6307\u5b9a\u8868\u5355\u63d2\u5165\u56fe\u5f62\u9a8c\u8bc1\u7801 \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u79df\u6237\u914d\u7f6e \u8ba4\u8bc1\u56e0\u7d20\u914d\u7f6e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u79df\u8d41\u5b8c\u6210\u540e\uff0c\u8fdb\u5165\u5df2\u79df\u8d41\u5217\u8868\uff0c\u627e\u5230\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e\uff0c\u914d\u7f6e\u76f8\u5173\u6570\u636e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u56e0\u7d20\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"authcode\"\uff0c \u65e0\u987b\u914d\u7f6e\u76f8\u5173\u53c2\u6570\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u5b9e\u73b0\u601d\u8def # \u666e\u901a\u7528\u6237\uff1a\u56fe\u5f62\u9a8c\u8bc1\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6AUTHRULE_FIX_LOGIN_PAGE,AUTHRULE_CHECK_AUTH_DATA D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 C->>A: \u53d1\u51faAUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u5411\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u6ce8\u5165\u5143\u7d20 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>C: \u8f93\u5165\u8ba4\u8bc1\u51ed\u8bc1\uff0c\u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42 C->>A: \u89e6\u53d1\u8ba4\u8bc1\u51ed\u8bc1\u68c0\u67e5\u4e8b\u4ef6AUTHRULE_CHECK_AUTH_DATA A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u5b8c\u6210\u8ba4\u8bc1\u51ed\u8bc1\u68c0\u67e5\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5982\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u76f8\u5173\u64cd\u4f5c\u5219\u751f\u6210token\u5e76\u8df3\u8f6c\u81f3\u684c\u9762\uff0c\u5982\u5b8c\u6210\u91cd\u7f6e\u5bc6\u7801\u64cd\u4f5c\u6216\u8005\u672a\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u64cd\u4f5c\u5219\u63d0\u793a\u9519\u8bef \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # load authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page check_auth_data fix_login_page \u4ee3\u7801 # extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension ( AuthFactorExtension ) # \u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py class AuthCodeAuthFactorExtension ( AuthFactorExtension ): \"\"\"\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 \"\"\" def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" self . create_extension_config_schema () self . create_extension_settings_schema () self . register_extension_api () super () . load () # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if self . get_settings ( tenant ): settings = { \"width\" : 180 , \"height\" : 60 , \"auth_code_length\" : 4 } self . update_or_create_settings ( tenant , settings , True , False ) if not self . get_tenant_configs ( tenant ): config = { \"login_enabled\" : False , \"register_enabled\" : False , \"reset_password_enabled\" : False } self . create_tenant_config ( tenant , config , \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"authcode\" ) def authenticate ( self , event , ** kwargs ): pass @transaction . atomic () def register ( self , event , ** kwargs ): pass def reset_password ( self , event , ** kwargs ): pass def create_login_page ( self , event , config , config_data ): pass def fix_login_page ( self , event , ** kwargs ): items = [ { \"type\" : \"text\" , \"name\" : \"authcode\" , \"append\" :{ \"type\" : \"image\" , \"http\" : { \"url\" : self . generate_code_path , \"method\" : \"get\" , }, }, \"placeholder\" : _ ( \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" ) }, { \"type\" : \"hidden\" , \"name\" : \"authcode_key\" , }, ] for login_pages , ext in event . data [ \"login_pages\" ]: for config_id , login_page in login_pages . items (): if config_id == uuid . UUID ( event . data [ \"main_auth_factor_id\" ]) . hex : for form in login_page [ self . LOGIN ][ \"forms\" ]: form [ \"items\" ] . extend ( items ) def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) authcode = data . get ( 'authcode' ) authcode_key = data . get ( 'authcode_key' ) if not self . check_authcode ( event . tenant , authcode , authcode_key ): settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( event . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) rs = self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) rs [ \"data\" ] = { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } return False , rs return True , None def create_register_page ( self , event , config , config_data ): pass def create_password_page ( self , event , config , config_data ): pass def create_other_page ( self , event , config , config_data ): pass def create_auth_manage_page ( self ): pass def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" AuthCodeAuthFactorSchema = create_extension_schema ( 'AuthCodeAuthFactorSchema' , __file__ , [ ( 'login_enabled' , bool , Field ( default = False , title = _ ( 'login_enabled' , '\u542f\u7528\u767b\u5f55' ), readonly = True ) ), ( 'register_enabled' , bool , Field ( default = False , title = _ ( 'register_enabled' , '\u542f\u7528\u6ce8\u518c' ), readonly = True ) ), ( 'reset_password_enabled' , bool , Field ( default = False , title = _ ( 'reset_password_enabled' , '\u542f\u7528\u91cd\u7f6e\u5bc6\u7801' ), readonly = True ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( AuthCodeAuthFactorSchema , 'authcode' ) def create_extension_settings_schema ( self ): \"\"\"\u521b\u5efa\u79df\u6237\u914d\u7f6eschama \"\"\" AuthCodeAuthFactorSettingsSchema = create_extension_schema ( 'AuthCodeAuthFactorSettingsSchema' , __file__ , [ ( 'width' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u5bbd\u5ea6\" ), default = 180 )), ( 'height' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u9ad8\u5ea6\" ), default = 60 )), ( 'auth_code_length' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u957f\u5ea6\" ), default = 4 )), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ] ) self . register_settings_schema ( AuthCodeAuthFactorSettingsSchema ) def get_random_char ( self , auth_code_length = 4 ) -> str : \"\"\"\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u7ec4\u5408 Args: auth_code_length (int, optional): \u56fe\u5f62\u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. Returns: str: \u968f\u673a\u5b57\u7b26\u4e32 \"\"\" chr_all = string . ascii_letters + string . digits str_random = '' . join ( random . sample ( chr_all , auth_code_length )) return str_random def get_random_color ( self , low , high ): \"\"\"\u83b7\u53d6\u968f\u673a\u989c\u8272 Args: low (int): \u4e0b\u9650 high (int): \u4e0a\u9650 Returns: tuple(int,int,int): RGB \"\"\" return ( random . randint ( low , high ), random . randint ( low , high ), random . randint ( low , high ), ) def get_authcode_picture ( self , auth_code_length = 4 , width = 180 , height = 60 ): \"\"\"\u5236\u4f5c\u9a8c\u8bc1\u7801\u56fe\u7247 Args: auth_code_length (int, optional): \u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. width (int, optional): \u56fe\u5f62\u5bbd\u5ea6. Defaults to 180. height (int, optional): \u56fe\u5f62\u9ad8\u5ea6. Defaults to 60. Returns: tuple(str,str,image): \u7f13\u5b58key,\u56fe\u5f62\u9a8c\u8bc1\u7801,\u56fe\u7247 \"\"\" # \u521b\u5efa\u7a7a\u767d\u753b\u5e03 image = Image . new ( 'RGB' , ( width , height ), self . get_random_color ( 20 , 100 )) # \u9a8c\u8bc1\u7801\u7684\u5b57\u4f53 font = ImageFont . truetype ( os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ), 'assets/stxinwei.ttf' ), 40 ) # \u521b\u5efa\u753b\u7b14 draw = ImageDraw . Draw ( image ) # \u83b7\u53d6\u9a8c\u8bc1\u7801 char_4 = self . get_random_char ( auth_code_length ) # \u5411\u753b\u5e03\u4e0a\u586b\u5199\u9a8c\u8bc1\u7801 for i in range ( auth_code_length ): draw . text ( ( 40 * i + 10 , 0 ), char_4 [ i ], font = font , fill = self . get_random_color ( 100 , 200 ), ) # \u7ed8\u5236\u5e72\u6270\u70b9 for x in range ( random . randint ( 200 , 600 )): x = random . randint ( 1 , width - 1 ) y = random . randint ( 1 , height - 1 ) draw . point (( x , y ), fill = self . get_random_color ( 50 , 150 )) # \u6a21\u7cca\u5904\u7406 image = image . filter ( ImageFilter . BLUR ) key = self . generate_key () buf = BytesIO () # \u5c06\u56fe\u7247\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u6587\u4ef6\u7c7b\u578b\u4e3apng image . save ( buf , 'png' ) byte_data = buf . getvalue () base64_str = base64 . b64encode ( byte_data ) return key , char_4 , base64_str def generate_key ( self ): \"\"\"\u751f\u6210\u968f\u673akey Returns: str: \u968f\u673akey \"\"\" key = ' {} ' . format ( uuid . uuid4 () . hex ) return key @operation ( GenrateAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def get_authcode ( self , request , tenant_id : str ): \"\"\" \u83b7\u53d6\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" tenant = Tenant . active_objects . get ( id = tenant_id ) settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( request . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) return { \"data\" : { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } } @operation ( CheckAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def check_auth_code ( self , request , tenant_id : str , data : CheckAuthCodeIn ): \"\"\" \u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" if self . check_authcode ( request . tenant , data . authcode , data . authcode_key ): return self . success () else : return self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) def check_authcode ( self , tenant , authcode , authcode_key ): \"\"\"\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" return authcode_key and cache . get ( tenant , authcode_key ) . lower () == authcode . lower () def register_extension_api ( self ): \"\"\"\u6ce8\u518c\u63d2\u4ef6API \"\"\" self . generate_code_path = self . register_api ( '/auth_code/' , 'GET' , self . get_authcode , tenant_path = True , auth = None , response = GenrateAuthCodeOut , ) self . check_code_path = self . register_api ( '/auth_code/' , 'POST' , self . check_auth_code , tenant_path = True , auth = None , response = CheckAuthCodeOut , ) authenticate ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def authenticate ( self , event , ** kwargs ): pass check_auth_code ( self , request , tenant_id , data ) # \u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py @operation ( CheckAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def check_auth_code ( self , request , tenant_id : str , data : CheckAuthCodeIn ): \"\"\" \u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" if self . check_authcode ( request . tenant , data . authcode , data . authcode_key ): return self . success () else : return self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) check_auth_data ( self , event , ** kwargs ) # \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) authcode = data . get ( 'authcode' ) authcode_key = data . get ( 'authcode_key' ) if not self . check_authcode ( event . tenant , authcode , authcode_key ): settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( event . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) rs = self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) rs [ \"data\" ] = { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } return False , rs return True , None check_authcode ( self , tenant , authcode , authcode_key ) # \u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def check_authcode ( self , tenant , authcode , authcode_key ): \"\"\"\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" return authcode_key and cache . get ( tenant , authcode_key ) . lower () == authcode . lower () create_auth_manage_page ( self ) # \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_auth_manage_page ( self ): pass create_extension_config_schema ( self ) # \u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" AuthCodeAuthFactorSchema = create_extension_schema ( 'AuthCodeAuthFactorSchema' , __file__ , [ ( 'login_enabled' , bool , Field ( default = False , title = _ ( 'login_enabled' , '\u542f\u7528\u767b\u5f55' ), readonly = True ) ), ( 'register_enabled' , bool , Field ( default = False , title = _ ( 'register_enabled' , '\u542f\u7528\u6ce8\u518c' ), readonly = True ) ), ( 'reset_password_enabled' , bool , Field ( default = False , title = _ ( 'reset_password_enabled' , '\u542f\u7528\u91cd\u7f6e\u5bc6\u7801' ), readonly = True ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( AuthCodeAuthFactorSchema , 'authcode' ) create_extension_settings_schema ( self ) # \u521b\u5efa\u79df\u6237\u914d\u7f6eschama Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_extension_settings_schema ( self ): \"\"\"\u521b\u5efa\u79df\u6237\u914d\u7f6eschama \"\"\" AuthCodeAuthFactorSettingsSchema = create_extension_schema ( 'AuthCodeAuthFactorSettingsSchema' , __file__ , [ ( 'width' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u5bbd\u5ea6\" ), default = 180 )), ( 'height' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u9ad8\u5ea6\" ), default = 60 )), ( 'auth_code_length' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u957f\u5ea6\" ), default = 4 )), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ] ) self . register_settings_schema ( AuthCodeAuthFactorSettingsSchema ) create_login_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_login_page ( self , event , config , config_data ): pass create_other_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_other_page ( self , event , config , config_data ): pass create_password_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_password_page ( self , event , config , config_data ): pass create_register_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_register_page ( self , event , config , config_data ): pass fix_login_page ( self , event , ** kwargs ) # \u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def fix_login_page ( self , event , ** kwargs ): items = [ { \"type\" : \"text\" , \"name\" : \"authcode\" , \"append\" :{ \"type\" : \"image\" , \"http\" : { \"url\" : self . generate_code_path , \"method\" : \"get\" , }, }, \"placeholder\" : _ ( \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" ) }, { \"type\" : \"hidden\" , \"name\" : \"authcode_key\" , }, ] for login_pages , ext in event . data [ \"login_pages\" ]: for config_id , login_page in login_pages . items (): if config_id == uuid . UUID ( event . data [ \"main_auth_factor_id\" ]) . hex : for form in login_page [ self . LOGIN ][ \"forms\" ]: form [ \"items\" ] . extend ( items ) generate_key ( self ) # \u751f\u6210\u968f\u673akey Returns: Type Description str \u968f\u673akey Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def generate_key ( self ): \"\"\"\u751f\u6210\u968f\u673akey Returns: str: \u968f\u673akey \"\"\" key = ' {} ' . format ( uuid . uuid4 () . hex ) return key get_authcode ( self , request , tenant_id ) # \u83b7\u53d6\u56fe\u5f62\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py @operation ( GenrateAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def get_authcode ( self , request , tenant_id : str ): \"\"\" \u83b7\u53d6\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" tenant = Tenant . active_objects . get ( id = tenant_id ) settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( request . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) return { \"data\" : { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } } get_authcode_picture ( self , auth_code_length = 4 , width = 180 , height = 60 ) # \u5236\u4f5c\u9a8c\u8bc1\u7801\u56fe\u7247 Parameters: Name Type Description Default auth_code_length int \u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. 4 width int \u56fe\u5f62\u5bbd\u5ea6. Defaults to 180. 180 height int \u56fe\u5f62\u9ad8\u5ea6. Defaults to 60. 60 Returns: Type Description tuple(str,str,image) \u7f13\u5b58key,\u56fe\u5f62\u9a8c\u8bc1\u7801,\u56fe\u7247 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def get_authcode_picture ( self , auth_code_length = 4 , width = 180 , height = 60 ): \"\"\"\u5236\u4f5c\u9a8c\u8bc1\u7801\u56fe\u7247 Args: auth_code_length (int, optional): \u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. width (int, optional): \u56fe\u5f62\u5bbd\u5ea6. Defaults to 180. height (int, optional): \u56fe\u5f62\u9ad8\u5ea6. Defaults to 60. Returns: tuple(str,str,image): \u7f13\u5b58key,\u56fe\u5f62\u9a8c\u8bc1\u7801,\u56fe\u7247 \"\"\" # \u521b\u5efa\u7a7a\u767d\u753b\u5e03 image = Image . new ( 'RGB' , ( width , height ), self . get_random_color ( 20 , 100 )) # \u9a8c\u8bc1\u7801\u7684\u5b57\u4f53 font = ImageFont . truetype ( os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ), 'assets/stxinwei.ttf' ), 40 ) # \u521b\u5efa\u753b\u7b14 draw = ImageDraw . Draw ( image ) # \u83b7\u53d6\u9a8c\u8bc1\u7801 char_4 = self . get_random_char ( auth_code_length ) # \u5411\u753b\u5e03\u4e0a\u586b\u5199\u9a8c\u8bc1\u7801 for i in range ( auth_code_length ): draw . text ( ( 40 * i + 10 , 0 ), char_4 [ i ], font = font , fill = self . get_random_color ( 100 , 200 ), ) # \u7ed8\u5236\u5e72\u6270\u70b9 for x in range ( random . randint ( 200 , 600 )): x = random . randint ( 1 , width - 1 ) y = random . randint ( 1 , height - 1 ) draw . point (( x , y ), fill = self . get_random_color ( 50 , 150 )) # \u6a21\u7cca\u5904\u7406 image = image . filter ( ImageFilter . BLUR ) key = self . generate_key () buf = BytesIO () # \u5c06\u56fe\u7247\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u6587\u4ef6\u7c7b\u578b\u4e3apng image . save ( buf , 'png' ) byte_data = buf . getvalue () base64_str = base64 . b64encode ( byte_data ) return key , char_4 , base64_str get_random_char ( self , auth_code_length = 4 ) # \u83b7\u53d6\u968f\u673a\u5b57\u7b26\u7ec4\u5408 Parameters: Name Type Description Default auth_code_length int \u56fe\u5f62\u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. 4 Returns: Type Description str \u968f\u673a\u5b57\u7b26\u4e32 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def get_random_char ( self , auth_code_length = 4 ) -> str : \"\"\"\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u7ec4\u5408 Args: auth_code_length (int, optional): \u56fe\u5f62\u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. Returns: str: \u968f\u673a\u5b57\u7b26\u4e32 \"\"\" chr_all = string . ascii_letters + string . digits str_random = '' . join ( random . sample ( chr_all , auth_code_length )) return str_random get_random_color ( self , low , high ) # \u83b7\u53d6\u968f\u673a\u989c\u8272 Parameters: Name Type Description Default low int \u4e0b\u9650 required high int \u4e0a\u9650 required Returns: Type Description tuple(int,int,int) RGB Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def get_random_color ( self , low , high ): \"\"\"\u83b7\u53d6\u968f\u673a\u989c\u8272 Args: low (int): \u4e0b\u9650 high (int): \u4e0a\u9650 Returns: tuple(int,int,int): RGB \"\"\" return ( random . randint ( low , high ), random . randint ( low , high ), random . randint ( low , high ), ) load ( self ) # \u52a0\u8f7d\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" self . create_extension_config_schema () self . create_extension_settings_schema () self . register_extension_api () super () . load () # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if self . get_settings ( tenant ): settings = { \"width\" : 180 , \"height\" : 60 , \"auth_code_length\" : 4 } self . update_or_create_settings ( tenant , settings , True , False ) if not self . get_tenant_configs ( tenant ): config = { \"login_enabled\" : False , \"register_enabled\" : False , \"reset_password_enabled\" : False } self . create_tenant_config ( tenant , config , \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"authcode\" ) register_extension_api ( self ) # \u6ce8\u518c\u63d2\u4ef6API Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def register_extension_api ( self ): \"\"\"\u6ce8\u518c\u63d2\u4ef6API \"\"\" self . generate_code_path = self . register_api ( '/auth_code/' , 'GET' , self . get_authcode , tenant_path = True , auth = None , response = GenrateAuthCodeOut , ) self . check_code_path = self . register_api ( '/auth_code/' , 'POST' , self . check_auth_code , tenant_path = True , auth = None , response = CheckAuthCodeOut , ) reset_password ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def reset_password ( self , event , ** kwargs ): pass","title":"\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#_1","text":"","title":"\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#_2","text":"\u5bf9\u7528\u6237\u8ba4\u8bc1\u51ed\u8bc1\u8868\u5355\u8fdb\u884c\u6269\u5145\uff0c\u63d2\u5165\u56fe\u5f62\u9a8c\u8bc1\u7801\u5e76\u5b9e\u73b0\u76f8\u5173\u9a8c\u8bc1\u529f\u80fd \u6ce8\u610f\uff1a\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u4e0d\u5177\u6709\u8ba4\u8bc1/\u6ce8\u518c/\u4fee\u6539\u5bc6\u7801\u7b49\u529f\u80fd\uff0c\u4ec5\u5bf9\u5176\u4ed6\u8ba4\u8bc1\u56e0\u7d20\u8fdb\u884c\u51ed\u8bc1\u5143\u7d20\u6269\u5145 \u666e\u901a\u7528\u6237\uff1a \u5728 \u201c\u767b\u5f55\u201d \u9875\u9762\u5b9e\u73b0\u5411\u6307\u5b9a\u8868\u5355\u63d2\u5165\u56fe\u5f62\u9a8c\u8bc1\u7801","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#_3","text":"\u63d2\u4ef6\u79df\u8d41 \u79df\u6237\u914d\u7f6e \u8ba4\u8bc1\u56e0\u7d20\u914d\u7f6e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u79df\u8d41\u5b8c\u6210\u540e\uff0c\u8fdb\u5165\u5df2\u79df\u8d41\u5217\u8868\uff0c\u627e\u5230\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e\uff0c\u914d\u7f6e\u76f8\u5173\u6570\u636e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u56e0\u7d20\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"authcode\"\uff0c \u65e0\u987b\u914d\u7f6e\u76f8\u5173\u53c2\u6570\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#_4","text":"\u666e\u901a\u7528\u6237\uff1a\u56fe\u5f62\u9a8c\u8bc1\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6AUTHRULE_FIX_LOGIN_PAGE,AUTHRULE_CHECK_AUTH_DATA D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 C->>A: \u53d1\u51faAUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u5411\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u6ce8\u5165\u5143\u7d20 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>C: \u8f93\u5165\u8ba4\u8bc1\u51ed\u8bc1\uff0c\u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42 C->>A: \u89e6\u53d1\u8ba4\u8bc1\u51ed\u8bc1\u68c0\u67e5\u4e8b\u4ef6AUTHRULE_CHECK_AUTH_DATA A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u5b8c\u6210\u8ba4\u8bc1\u51ed\u8bc1\u68c0\u67e5\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5982\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u76f8\u5173\u64cd\u4f5c\u5219\u751f\u6210token\u5e76\u8df3\u8f6c\u81f3\u684c\u9762\uff0c\u5982\u5b8c\u6210\u91cd\u7f6e\u5bc6\u7801\u64cd\u4f5c\u6216\u8005\u672a\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u64cd\u4f5c\u5219\u63d0\u793a\u9519\u8bef","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#_5","text":"load authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page check_auth_data fix_login_page","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#_6","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension","text":"\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py class AuthCodeAuthFactorExtension ( AuthFactorExtension ): \"\"\"\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 \"\"\" def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" self . create_extension_config_schema () self . create_extension_settings_schema () self . register_extension_api () super () . load () # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if self . get_settings ( tenant ): settings = { \"width\" : 180 , \"height\" : 60 , \"auth_code_length\" : 4 } self . update_or_create_settings ( tenant , settings , True , False ) if not self . get_tenant_configs ( tenant ): config = { \"login_enabled\" : False , \"register_enabled\" : False , \"reset_password_enabled\" : False } self . create_tenant_config ( tenant , config , \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"authcode\" ) def authenticate ( self , event , ** kwargs ): pass @transaction . atomic () def register ( self , event , ** kwargs ): pass def reset_password ( self , event , ** kwargs ): pass def create_login_page ( self , event , config , config_data ): pass def fix_login_page ( self , event , ** kwargs ): items = [ { \"type\" : \"text\" , \"name\" : \"authcode\" , \"append\" :{ \"type\" : \"image\" , \"http\" : { \"url\" : self . generate_code_path , \"method\" : \"get\" , }, }, \"placeholder\" : _ ( \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" ) }, { \"type\" : \"hidden\" , \"name\" : \"authcode_key\" , }, ] for login_pages , ext in event . data [ \"login_pages\" ]: for config_id , login_page in login_pages . items (): if config_id == uuid . UUID ( event . data [ \"main_auth_factor_id\" ]) . hex : for form in login_page [ self . LOGIN ][ \"forms\" ]: form [ \"items\" ] . extend ( items ) def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) authcode = data . get ( 'authcode' ) authcode_key = data . get ( 'authcode_key' ) if not self . check_authcode ( event . tenant , authcode , authcode_key ): settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( event . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) rs = self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) rs [ \"data\" ] = { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } return False , rs return True , None def create_register_page ( self , event , config , config_data ): pass def create_password_page ( self , event , config , config_data ): pass def create_other_page ( self , event , config , config_data ): pass def create_auth_manage_page ( self ): pass def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" AuthCodeAuthFactorSchema = create_extension_schema ( 'AuthCodeAuthFactorSchema' , __file__ , [ ( 'login_enabled' , bool , Field ( default = False , title = _ ( 'login_enabled' , '\u542f\u7528\u767b\u5f55' ), readonly = True ) ), ( 'register_enabled' , bool , Field ( default = False , title = _ ( 'register_enabled' , '\u542f\u7528\u6ce8\u518c' ), readonly = True ) ), ( 'reset_password_enabled' , bool , Field ( default = False , title = _ ( 'reset_password_enabled' , '\u542f\u7528\u91cd\u7f6e\u5bc6\u7801' ), readonly = True ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( AuthCodeAuthFactorSchema , 'authcode' ) def create_extension_settings_schema ( self ): \"\"\"\u521b\u5efa\u79df\u6237\u914d\u7f6eschama \"\"\" AuthCodeAuthFactorSettingsSchema = create_extension_schema ( 'AuthCodeAuthFactorSettingsSchema' , __file__ , [ ( 'width' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u5bbd\u5ea6\" ), default = 180 )), ( 'height' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u9ad8\u5ea6\" ), default = 60 )), ( 'auth_code_length' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u957f\u5ea6\" ), default = 4 )), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ] ) self . register_settings_schema ( AuthCodeAuthFactorSettingsSchema ) def get_random_char ( self , auth_code_length = 4 ) -> str : \"\"\"\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u7ec4\u5408 Args: auth_code_length (int, optional): \u56fe\u5f62\u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. Returns: str: \u968f\u673a\u5b57\u7b26\u4e32 \"\"\" chr_all = string . ascii_letters + string . digits str_random = '' . join ( random . sample ( chr_all , auth_code_length )) return str_random def get_random_color ( self , low , high ): \"\"\"\u83b7\u53d6\u968f\u673a\u989c\u8272 Args: low (int): \u4e0b\u9650 high (int): \u4e0a\u9650 Returns: tuple(int,int,int): RGB \"\"\" return ( random . randint ( low , high ), random . randint ( low , high ), random . randint ( low , high ), ) def get_authcode_picture ( self , auth_code_length = 4 , width = 180 , height = 60 ): \"\"\"\u5236\u4f5c\u9a8c\u8bc1\u7801\u56fe\u7247 Args: auth_code_length (int, optional): \u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. width (int, optional): \u56fe\u5f62\u5bbd\u5ea6. Defaults to 180. height (int, optional): \u56fe\u5f62\u9ad8\u5ea6. Defaults to 60. Returns: tuple(str,str,image): \u7f13\u5b58key,\u56fe\u5f62\u9a8c\u8bc1\u7801,\u56fe\u7247 \"\"\" # \u521b\u5efa\u7a7a\u767d\u753b\u5e03 image = Image . new ( 'RGB' , ( width , height ), self . get_random_color ( 20 , 100 )) # \u9a8c\u8bc1\u7801\u7684\u5b57\u4f53 font = ImageFont . truetype ( os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ), 'assets/stxinwei.ttf' ), 40 ) # \u521b\u5efa\u753b\u7b14 draw = ImageDraw . Draw ( image ) # \u83b7\u53d6\u9a8c\u8bc1\u7801 char_4 = self . get_random_char ( auth_code_length ) # \u5411\u753b\u5e03\u4e0a\u586b\u5199\u9a8c\u8bc1\u7801 for i in range ( auth_code_length ): draw . text ( ( 40 * i + 10 , 0 ), char_4 [ i ], font = font , fill = self . get_random_color ( 100 , 200 ), ) # \u7ed8\u5236\u5e72\u6270\u70b9 for x in range ( random . randint ( 200 , 600 )): x = random . randint ( 1 , width - 1 ) y = random . randint ( 1 , height - 1 ) draw . point (( x , y ), fill = self . get_random_color ( 50 , 150 )) # \u6a21\u7cca\u5904\u7406 image = image . filter ( ImageFilter . BLUR ) key = self . generate_key () buf = BytesIO () # \u5c06\u56fe\u7247\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u6587\u4ef6\u7c7b\u578b\u4e3apng image . save ( buf , 'png' ) byte_data = buf . getvalue () base64_str = base64 . b64encode ( byte_data ) return key , char_4 , base64_str def generate_key ( self ): \"\"\"\u751f\u6210\u968f\u673akey Returns: str: \u968f\u673akey \"\"\" key = ' {} ' . format ( uuid . uuid4 () . hex ) return key @operation ( GenrateAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def get_authcode ( self , request , tenant_id : str ): \"\"\" \u83b7\u53d6\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" tenant = Tenant . active_objects . get ( id = tenant_id ) settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( request . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) return { \"data\" : { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } } @operation ( CheckAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def check_auth_code ( self , request , tenant_id : str , data : CheckAuthCodeIn ): \"\"\" \u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" if self . check_authcode ( request . tenant , data . authcode , data . authcode_key ): return self . success () else : return self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) def check_authcode ( self , tenant , authcode , authcode_key ): \"\"\"\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" return authcode_key and cache . get ( tenant , authcode_key ) . lower () == authcode . lower () def register_extension_api ( self ): \"\"\"\u6ce8\u518c\u63d2\u4ef6API \"\"\" self . generate_code_path = self . register_api ( '/auth_code/' , 'GET' , self . get_authcode , tenant_path = True , auth = None , response = GenrateAuthCodeOut , ) self . check_code_path = self . register_api ( '/auth_code/' , 'POST' , self . check_auth_code , tenant_path = True , auth = None , response = CheckAuthCodeOut , )","title":"AuthCodeAuthFactorExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.authenticate","text":"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def authenticate ( self , event , ** kwargs ): pass","title":"authenticate()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.check_auth_code","text":"\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py @operation ( CheckAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def check_auth_code ( self , request , tenant_id : str , data : CheckAuthCodeIn ): \"\"\" \u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" if self . check_authcode ( request . tenant , data . authcode , data . authcode_key ): return self . success () else : return self . error ( ErrorCode . AUTHCODE_NOT_MATCH )","title":"check_auth_code()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.check_auth_data","text":"\u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def check_auth_data ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Args: event: \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) authcode = data . get ( 'authcode' ) authcode_key = data . get ( 'authcode_key' ) if not self . check_authcode ( event . tenant , authcode , authcode_key ): settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( event . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) rs = self . error ( ErrorCode . AUTHCODE_NOT_MATCH ) rs [ \"data\" ] = { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } return False , rs return True , None","title":"check_auth_data()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.check_authcode","text":"\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def check_authcode ( self , tenant , authcode , authcode_key ): \"\"\"\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" return authcode_key and cache . get ( tenant , authcode_key ) . lower () == authcode . lower ()","title":"check_authcode()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_auth_manage_page","text":"\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_auth_manage_page ( self ): pass","title":"create_auth_manage_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_extension_config_schema","text":"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" AuthCodeAuthFactorSchema = create_extension_schema ( 'AuthCodeAuthFactorSchema' , __file__ , [ ( 'login_enabled' , bool , Field ( default = False , title = _ ( 'login_enabled' , '\u542f\u7528\u767b\u5f55' ), readonly = True ) ), ( 'register_enabled' , bool , Field ( default = False , title = _ ( 'register_enabled' , '\u542f\u7528\u6ce8\u518c' ), readonly = True ) ), ( 'reset_password_enabled' , bool , Field ( default = False , title = _ ( 'reset_password_enabled' , '\u542f\u7528\u91cd\u7f6e\u5bc6\u7801' ), readonly = True ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( AuthCodeAuthFactorSchema , 'authcode' )","title":"create_extension_config_schema()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_extension_settings_schema","text":"\u521b\u5efa\u79df\u6237\u914d\u7f6eschama Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_extension_settings_schema ( self ): \"\"\"\u521b\u5efa\u79df\u6237\u914d\u7f6eschama \"\"\" AuthCodeAuthFactorSettingsSchema = create_extension_schema ( 'AuthCodeAuthFactorSettingsSchema' , __file__ , [ ( 'width' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u5bbd\u5ea6\" ), default = 180 )), ( 'height' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u56fe\u7247\u9ad8\u5ea6\" ), default = 60 )), ( 'auth_code_length' , int , Field ( title = _ ( \"\u9a8c\u8bc1\u7801\u957f\u5ea6\" ), default = 4 )), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ] ) self . register_settings_schema ( AuthCodeAuthFactorSettingsSchema )","title":"create_extension_settings_schema()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_login_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_login_page ( self , event , config , config_data ): pass","title":"create_login_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_other_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_other_page ( self , event , config , config_data ): pass","title":"create_other_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_password_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_password_page ( self , event , config , config_data ): pass","title":"create_password_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.create_register_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def create_register_page ( self , event , config , config_data ): pass","title":"create_register_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.fix_login_page","text":"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def fix_login_page ( self , event , ** kwargs ): items = [ { \"type\" : \"text\" , \"name\" : \"authcode\" , \"append\" :{ \"type\" : \"image\" , \"http\" : { \"url\" : self . generate_code_path , \"method\" : \"get\" , }, }, \"placeholder\" : _ ( \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" ) }, { \"type\" : \"hidden\" , \"name\" : \"authcode_key\" , }, ] for login_pages , ext in event . data [ \"login_pages\" ]: for config_id , login_page in login_pages . items (): if config_id == uuid . UUID ( event . data [ \"main_auth_factor_id\" ]) . hex : for form in login_page [ self . LOGIN ][ \"forms\" ]: form [ \"items\" ] . extend ( items )","title":"fix_login_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.generate_key","text":"\u751f\u6210\u968f\u673akey Returns: Type Description str \u968f\u673akey Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def generate_key ( self ): \"\"\"\u751f\u6210\u968f\u673akey Returns: str: \u968f\u673akey \"\"\" key = ' {} ' . format ( uuid . uuid4 () . hex ) return key","title":"generate_key()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.get_authcode","text":"\u83b7\u53d6\u56fe\u5f62\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py @operation ( GenrateAuthCodeOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def get_authcode ( self , request , tenant_id : str ): \"\"\" \u83b7\u53d6\u56fe\u5f62\u9a8c\u8bc1\u7801 \"\"\" tenant = Tenant . active_objects . get ( id = tenant_id ) settings = self . get_settings ( tenant ) key , code , image = self . get_authcode_picture ( settings . settings . get ( \"auth_code_length\" , 4 ), settings . settings . get ( \"width\" , 180 ), settings . settings . get ( \"height\" , 60 ) ) cache . set ( request . tenant , key , code , expired = settings . settings . get ( \"expired\" , 10 ) * 60 ) return { \"data\" : { \"image\" : str ( image , 'utf8' ), \"authcode_key\" : key } }","title":"get_authcode()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.get_authcode_picture","text":"\u5236\u4f5c\u9a8c\u8bc1\u7801\u56fe\u7247 Parameters: Name Type Description Default auth_code_length int \u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. 4 width int \u56fe\u5f62\u5bbd\u5ea6. Defaults to 180. 180 height int \u56fe\u5f62\u9ad8\u5ea6. Defaults to 60. 60 Returns: Type Description tuple(str,str,image) \u7f13\u5b58key,\u56fe\u5f62\u9a8c\u8bc1\u7801,\u56fe\u7247 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def get_authcode_picture ( self , auth_code_length = 4 , width = 180 , height = 60 ): \"\"\"\u5236\u4f5c\u9a8c\u8bc1\u7801\u56fe\u7247 Args: auth_code_length (int, optional): \u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. width (int, optional): \u56fe\u5f62\u5bbd\u5ea6. Defaults to 180. height (int, optional): \u56fe\u5f62\u9ad8\u5ea6. Defaults to 60. Returns: tuple(str,str,image): \u7f13\u5b58key,\u56fe\u5f62\u9a8c\u8bc1\u7801,\u56fe\u7247 \"\"\" # \u521b\u5efa\u7a7a\u767d\u753b\u5e03 image = Image . new ( 'RGB' , ( width , height ), self . get_random_color ( 20 , 100 )) # \u9a8c\u8bc1\u7801\u7684\u5b57\u4f53 font = ImageFont . truetype ( os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ), 'assets/stxinwei.ttf' ), 40 ) # \u521b\u5efa\u753b\u7b14 draw = ImageDraw . Draw ( image ) # \u83b7\u53d6\u9a8c\u8bc1\u7801 char_4 = self . get_random_char ( auth_code_length ) # \u5411\u753b\u5e03\u4e0a\u586b\u5199\u9a8c\u8bc1\u7801 for i in range ( auth_code_length ): draw . text ( ( 40 * i + 10 , 0 ), char_4 [ i ], font = font , fill = self . get_random_color ( 100 , 200 ), ) # \u7ed8\u5236\u5e72\u6270\u70b9 for x in range ( random . randint ( 200 , 600 )): x = random . randint ( 1 , width - 1 ) y = random . randint ( 1 , height - 1 ) draw . point (( x , y ), fill = self . get_random_color ( 50 , 150 )) # \u6a21\u7cca\u5904\u7406 image = image . filter ( ImageFilter . BLUR ) key = self . generate_key () buf = BytesIO () # \u5c06\u56fe\u7247\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u6587\u4ef6\u7c7b\u578b\u4e3apng image . save ( buf , 'png' ) byte_data = buf . getvalue () base64_str = base64 . b64encode ( byte_data ) return key , char_4 , base64_str","title":"get_authcode_picture()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.get_random_char","text":"\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u7ec4\u5408 Parameters: Name Type Description Default auth_code_length int \u56fe\u5f62\u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. 4 Returns: Type Description str \u968f\u673a\u5b57\u7b26\u4e32 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def get_random_char ( self , auth_code_length = 4 ) -> str : \"\"\"\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u7ec4\u5408 Args: auth_code_length (int, optional): \u56fe\u5f62\u9a8c\u8bc1\u7801\u957f\u5ea6. Defaults to 4. Returns: str: \u968f\u673a\u5b57\u7b26\u4e32 \"\"\" chr_all = string . ascii_letters + string . digits str_random = '' . join ( random . sample ( chr_all , auth_code_length )) return str_random","title":"get_random_char()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.get_random_color","text":"\u83b7\u53d6\u968f\u673a\u989c\u8272 Parameters: Name Type Description Default low int \u4e0b\u9650 required high int \u4e0a\u9650 required Returns: Type Description tuple(int,int,int) RGB Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def get_random_color ( self , low , high ): \"\"\"\u83b7\u53d6\u968f\u673a\u989c\u8272 Args: low (int): \u4e0b\u9650 high (int): \u4e0a\u9650 Returns: tuple(int,int,int): RGB \"\"\" return ( random . randint ( low , high ), random . randint ( low , high ), random . randint ( low , high ), )","title":"get_random_color()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.load","text":"\u52a0\u8f7d\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" self . create_extension_config_schema () self . create_extension_settings_schema () self . register_extension_api () super () . load () # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if self . get_settings ( tenant ): settings = { \"width\" : 180 , \"height\" : 60 , \"auth_code_length\" : 4 } self . update_or_create_settings ( tenant , settings , True , False ) if not self . get_tenant_configs ( tenant ): config = { \"login_enabled\" : False , \"register_enabled\" : False , \"reset_password_enabled\" : False } self . create_tenant_config ( tenant , config , \"\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"authcode\" )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.register_extension_api","text":"\u6ce8\u518c\u63d2\u4ef6API Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def register_extension_api ( self ): \"\"\"\u6ce8\u518c\u63d2\u4ef6API \"\"\" self . generate_code_path = self . register_api ( '/auth_code/' , 'GET' , self . get_authcode , tenant_path = True , auth = None , response = GenrateAuthCodeOut , ) self . check_code_path = self . register_api ( '/auth_code/' , 'POST' , self . check_auth_code , tenant_path = True , auth = None , response = CheckAuthCodeOut , )","title":"register_extension_api()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_authcode/#extension_root.com_longgui_auth_factor_authcode.AuthCodeAuthFactorExtension.reset_password","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_authcode/__init__.py def reset_password ( self , event , ** kwargs ): pass","title":"reset_password()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/","text":"\u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20 # \u529f\u80fd\u4ecb\u7ecd # \u5bf9\u7528\u6237\u8868\u6269\u5c55\u624b\u673a\u53f7\u7801\u5b57\u6bb5\uff0c\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u624b\u673a\u53f7\u7801\u4e0e\u9a8c\u8bc1\u7801\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba4\u8bc1\uff0c\u6ce8\u518c\uff0c\u91cd\u7f6e\u5bc6\u7801\u4ee5\u53ca\u66f4\u6362\u624b\u673a\u53f7\u3002 \u666e\u901a\u7528\u6237\uff1a \u5728 \u201c\u6ce8\u518c\u201d \u9875\u9762\u5b9e\u73b0\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c \u5728 \u201c\u767b\u5f55\u201d \u9875\u9762\u5b9e\u73b0\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u7528\u6237\u767b\u5f55 \u5728 \u201c\u66f4\u6539\u5bc6\u7801\u201d \u9875\u9762\u5b9e\u73b0\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u65b9\u5f0f\u4e0b\u5bc6\u7801\u66f4\u6539 \u5728 \u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u4e2d\u6dfb\u52a0\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u7684\u529f\u80fd \u79df\u6237\u7ba1\u7406\u5458 \u5728\u201d\u7528\u6237\u7ba1\u7406 - \u7528\u6237\u5217\u8868\u201c\u4e2d\u7f16\u8f91\u9875\u9762\u6dfb\u52a0\u624b\u673a\u53f7\u7801\u7f16\u8f91\u529f\u80fd \u524d\u7f6e\u6761\u4ef6 # \u9700\u914d\u5408\u77ed\u4fe1\u63d2\u4ef6\u4f7f\u7528\uff0c\u7cfb\u7edf\u5df2\u9ed8\u8ba4\u63d0\u4f9b\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\uff0c\u5982\u9700\u67e5\u770b\u914d\u7f6e\u65b9\u6cd5\u8bf7\u79fb\u6b65\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u6587\u6863\u3002 \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u8ba4\u8bc1\u56e0\u7d20\u914d\u7f6e \u767b\u5f55\u754c\u9762 \u6ce8\u518c\u754c\u9762 \u5bc6\u7801\u4fee\u6539\u754c\u9762 \u66f4\u6362\u624b\u673a\u53f7\u7801\u754c\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u56e0\u7d20\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"mobile\",\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u5df2\u914d\u7f6e\u7684\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u7531\u7528\u6237\u5934\u50cf\u83dc\u5355\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011\u754c\u9762,\u9009\u62e9\u66f4\u6539\u624b\u673a\u53f7\u7801\u6807\u7b7e\u9875 \u5b9e\u73b0\u601d\u8def # \u666e\u901a\u7528\u6237\uff1a\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 participant B as \u77ed\u4fe1\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u624b\u673a\u9a8c\u8bc1\u7801\u76f8\u5173\u4e8b\u4ef6\uff08\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u7b49\uff09 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u76d1\u542c\u77ed\u4fe1\u4e8b\u4ef6 D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 C->>A: \u53d1\u51faCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u5143\u7d20 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>A: \u8f93\u5165\u624b\u673a\u53f7\u7801\uff0c\u70b9\u51fb\u3010\u53d1\u9001\u77ed\u4fe1\u3011\u6309\u94ae\uff0c\u8bbf\u95ee\u77ed\u4fe1\u53d1\u9001\u63a5\u53e3 A->>B: \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff0c\u53d1\u51faSEND_SMS\u4e8b\u4ef6 B->>A: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u53d1\u51fa\u77ed\u4fe1 A->>D: \u8fd4\u56de\u77ed\u4fe1\u53d1\u9001\u7ed3\u679c D->>C: \u8f93\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u70b9\u51fb\u3010\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u3011\u6309\u94ae C->>A: \u53d1\u51fa\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u6d41\u7a0b\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5982\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u76f8\u5173\u64cd\u4f5c\u5219\u751f\u6210token\u5e76\u8df3\u8f6c\u81f3\u684c\u9762\uff0c\u5982\u5b8c\u6210\u91cd\u7f6e\u5bc6\u7801\u64cd\u4f5c\u6216\u8005\u672a\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u64cd\u4f5c\u5219\u63d0\u793a\u9519\u8bef \u666e\u901a\u7528\u6237\uff1a\u91cd\u7f6e\u624b\u673a\u53f7\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 participant B as \u77ed\u4fe1\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u6dfb\u52a0\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u5143\u7d20\uff0c\u5411\u6838\u5fc3\u6ce8\u518c\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u63a5\u53e3 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u76d1\u542c\u77ed\u4fe1\u4e8b\u4ef6 D->>C: \u8bbf\u95ee\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u529f\u80fd D->>A: \u8f93\u5165\u624b\u673a\u53f7\u7801\uff0c\u70b9\u51fb\u3010\u53d1\u9001\u77ed\u4fe1\u3011\u6309\u94ae\uff0c\u8bbf\u95ee\u77ed\u4fe1\u53d1\u9001\u63a5\u53e3 A->>B: \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff0c\u53d1\u51faSEND_SMS\u4e8b\u4ef6 B->>A: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u53d1\u51fa\u77ed\u4fe1 A->>D: \u8fd4\u56de\u77ed\u4fe1\u53d1\u9001\u7ed3\u679c D->>C: \u8f93\u5165\u9a8c\u8bc1\u7801\u4fe1\u606f\uff0c\u70b9\u51fb\u3010\u786e\u8ba4\u3011\u6309\u94ae C->>A: \u8bbf\u95ee\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u63a5\u53e3 A->>C: \u54cd\u5e94\u63a5\u53e3\uff0c\u68c0\u67e5\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5e76\u63d0\u793a\u662f\u5426\u5b8c\u6210\u66f4\u6539 \u7ba1\u7406\u5458\u7528\u6237\uff1a \u66f4\u6362\u7528\u6237\u624b\u673a\u53f7\u7801 sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u7528\u6237\u5217\u8868-\u7f16\u8f91\u7528\u6237\u201d\u9875\u9762\u6ce8\u5165\u624b\u673a\u53f7\u7801\u5143\u7d20 D->>C: \u7ba1\u7406\u5458\u767b\u5f55\uff0c\u8bbf\u95ee\u7528\u6237\u5217\u8868\u9875\u9762\uff0c\u7f16\u8f91\u7528\u6237\u624b\u673a\u53f7\u7801\u5e76\u4fdd\u5b58 C->>D: \u5199\u5165\u6570\u636e\u81f3\u6570\u636e\u5e93 \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # load authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page check_auth_data fix_login_page \u4ee3\u7801 # extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension ( AuthFactorExtension ) # \u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py class MobileAuthFactorExtension ( AuthFactorExtension ): \"\"\"\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 \"\"\" def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code ) def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg )) @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR ) def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data ) def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' ) @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED ) @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success () @operation ( MineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def mine_mobile ( self , request , tenant_id : str ): user = request . user user_expand = User . expand_objects . filter ( id = user . id ) . first () config = self . get_tenant_configs ( request . tenant ) . first () if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) return self . success ( data = { \"current_mobile\" : user_expand . get ( \"mobile\" , None ), \"mobile\" : \"\" , \"code\" : \"\" , \"config_id\" : config . id . hex , }, ) authenticate ( self , event , ** kwargs ) # \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg )) check_auth_data ( self , event , ** kwargs ) # \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_auth_data ( self , event , ** kwargs ): pass check_mobile_exists ( self , mobile , tenant ) # \u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default mobile str \u624b\u673a\u53f7 required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None check_username_exists ( self , username , tenant ) # \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default username str \u7528\u6237\u540d required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None create_auth_manage_page ( self ) # \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages create_extension_config_schema ( self ) # \u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' ) create_login_page ( self , event , config , config_data ) # \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data ) create_other_page ( self , event , config , config_data ) # \u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass create_password_page ( self , event , config , config_data ) # \u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data ) create_register_page ( self , event , config , config_data ) # \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data ) fix_login_page ( self , event , ** kwargs ) # \u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def fix_login_page ( self , event , ** kwargs ): pass load ( self ) # \u52a0\u8f7d\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code ) register ( self , event , ** kwargs ) # \u6ce8\u518c\u7528\u6237 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user reset_password ( self , event , ** kwargs ) # \u91cd\u7f6e\u5bc6\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR ) send_sms_code ( self , request , tenant_id , config_id , data ) # \u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED ) update_mine_mobile ( self , request , tenant_id , data ) # \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success () extension_root.com_longgui_auth_factor_mobile.sms # check_sms_code ( tenant , mobile , code ) # \u9a8c\u8bc1\u77ed\u4fe1\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/sms.py def check_sms_code ( tenant , mobile , code ): \"\"\" \u9a8c\u8bc1\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" c_code = cache . get ( tenant , gen_sms_code_key ( mobile )) return c_code == code create_sms_code ( tenant , phone_number , uth_code_length = 6 , expired = None ) # \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5e76\u5b58\u50a8\u81f3\u7f13\u5b58 Source code in extension_root/com_longgui_auth_factor_mobile/sms.py def create_sms_code ( tenant , phone_number , uth_code_length = 6 , expired : Optional [ int ] = None ): \"\"\"\u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5e76\u5b58\u50a8\u81f3\u7f13\u5b58 \"\"\" code = gen_sms_code ( uth_code_length ) cache . set ( tenant , gen_sms_code_key ( phone_number ), code , expired = expired ) return code gen_sms_code_key ( mobile ) # \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684key Source code in extension_root/com_longgui_auth_factor_mobile/sms.py def gen_sms_code_key ( mobile ): ''' \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684key ''' return f 'sms: { mobile } '","title":"\u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_1","text":"","title":"\u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_2","text":"\u5bf9\u7528\u6237\u8868\u6269\u5c55\u624b\u673a\u53f7\u7801\u5b57\u6bb5\uff0c\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u624b\u673a\u53f7\u7801\u4e0e\u9a8c\u8bc1\u7801\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba4\u8bc1\uff0c\u6ce8\u518c\uff0c\u91cd\u7f6e\u5bc6\u7801\u4ee5\u53ca\u66f4\u6362\u624b\u673a\u53f7\u3002 \u666e\u901a\u7528\u6237\uff1a \u5728 \u201c\u6ce8\u518c\u201d \u9875\u9762\u5b9e\u73b0\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c \u5728 \u201c\u767b\u5f55\u201d \u9875\u9762\u5b9e\u73b0\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u7528\u6237\u767b\u5f55 \u5728 \u201c\u66f4\u6539\u5bc6\u7801\u201d \u9875\u9762\u5b9e\u73b0\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u65b9\u5f0f\u4e0b\u5bc6\u7801\u66f4\u6539 \u5728 \u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u4e2d\u6dfb\u52a0\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u7684\u529f\u80fd \u79df\u6237\u7ba1\u7406\u5458 \u5728\u201d\u7528\u6237\u7ba1\u7406 - \u7528\u6237\u5217\u8868\u201c\u4e2d\u7f16\u8f91\u9875\u9762\u6dfb\u52a0\u624b\u673a\u53f7\u7801\u7f16\u8f91\u529f\u80fd","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_3","text":"\u9700\u914d\u5408\u77ed\u4fe1\u63d2\u4ef6\u4f7f\u7528\uff0c\u7cfb\u7edf\u5df2\u9ed8\u8ba4\u63d0\u4f9b\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\uff0c\u5982\u9700\u67e5\u770b\u914d\u7f6e\u65b9\u6cd5\u8bf7\u79fb\u6b65\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u6587\u6863\u3002","title":"\u524d\u7f6e\u6761\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_4","text":"\u63d2\u4ef6\u79df\u8d41 \u8ba4\u8bc1\u56e0\u7d20\u914d\u7f6e \u767b\u5f55\u754c\u9762 \u6ce8\u518c\u754c\u9762 \u5bc6\u7801\u4fee\u6539\u754c\u9762 \u66f4\u6362\u624b\u673a\u53f7\u7801\u754c\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u56e0\u7d20\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"mobile\",\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u5df2\u914d\u7f6e\u7684\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u7531\u7528\u6237\u5934\u50cf\u83dc\u5355\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011\u754c\u9762,\u9009\u62e9\u66f4\u6539\u624b\u673a\u53f7\u7801\u6807\u7b7e\u9875","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_5","text":"\u666e\u901a\u7528\u6237\uff1a\u624b\u673a\u53f7\u7801+\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 participant B as \u77ed\u4fe1\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u624b\u673a\u9a8c\u8bc1\u7801\u76f8\u5173\u4e8b\u4ef6\uff08\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u7b49\uff09 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u76d1\u542c\u77ed\u4fe1\u4e8b\u4ef6 D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 C->>A: \u53d1\u51faCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u5143\u7d20 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>A: \u8f93\u5165\u624b\u673a\u53f7\u7801\uff0c\u70b9\u51fb\u3010\u53d1\u9001\u77ed\u4fe1\u3011\u6309\u94ae\uff0c\u8bbf\u95ee\u77ed\u4fe1\u53d1\u9001\u63a5\u53e3 A->>B: \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff0c\u53d1\u51faSEND_SMS\u4e8b\u4ef6 B->>A: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u53d1\u51fa\u77ed\u4fe1 A->>D: \u8fd4\u56de\u77ed\u4fe1\u53d1\u9001\u7ed3\u679c D->>C: \u8f93\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u70b9\u51fb\u3010\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u3011\u6309\u94ae C->>A: \u53d1\u51fa\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u6d41\u7a0b\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5982\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u76f8\u5173\u64cd\u4f5c\u5219\u751f\u6210token\u5e76\u8df3\u8f6c\u81f3\u684c\u9762\uff0c\u5982\u5b8c\u6210\u91cd\u7f6e\u5bc6\u7801\u64cd\u4f5c\u6216\u8005\u672a\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u64cd\u4f5c\u5219\u63d0\u793a\u9519\u8bef \u666e\u901a\u7528\u6237\uff1a\u91cd\u7f6e\u624b\u673a\u53f7\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 participant B as \u77ed\u4fe1\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u6dfb\u52a0\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u5143\u7d20\uff0c\u5411\u6838\u5fc3\u6ce8\u518c\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u63a5\u53e3 C->>B: \u52a0\u8f7d\u63d2\u4ef6 B->>C: \u76d1\u542c\u77ed\u4fe1\u4e8b\u4ef6 D->>C: \u8bbf\u95ee\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u529f\u80fd D->>A: \u8f93\u5165\u624b\u673a\u53f7\u7801\uff0c\u70b9\u51fb\u3010\u53d1\u9001\u77ed\u4fe1\u3011\u6309\u94ae\uff0c\u8bbf\u95ee\u77ed\u4fe1\u53d1\u9001\u63a5\u53e3 A->>B: \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\uff0c\u53d1\u51faSEND_SMS\u4e8b\u4ef6 B->>A: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u53d1\u51fa\u77ed\u4fe1 A->>D: \u8fd4\u56de\u77ed\u4fe1\u53d1\u9001\u7ed3\u679c D->>C: \u8f93\u5165\u9a8c\u8bc1\u7801\u4fe1\u606f\uff0c\u70b9\u51fb\u3010\u786e\u8ba4\u3011\u6309\u94ae C->>A: \u8bbf\u95ee\u91cd\u7f6e\u624b\u673a\u53f7\u7801\u63a5\u53e3 A->>C: \u54cd\u5e94\u63a5\u53e3\uff0c\u68c0\u67e5\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5e76\u63d0\u793a\u662f\u5426\u5b8c\u6210\u66f4\u6539 \u7ba1\u7406\u5458\u7528\u6237\uff1a \u66f4\u6362\u7528\u6237\u624b\u673a\u53f7\u7801 sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u624b\u673a\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u7528\u6237\u5217\u8868-\u7f16\u8f91\u7528\u6237\u201d\u9875\u9762\u6ce8\u5165\u624b\u673a\u53f7\u7801\u5143\u7d20 D->>C: \u7ba1\u7406\u5458\u767b\u5f55\uff0c\u8bbf\u95ee\u7528\u6237\u5217\u8868\u9875\u9762\uff0c\u7f16\u8f91\u7528\u6237\u624b\u673a\u53f7\u7801\u5e76\u4fdd\u5b58 C->>D: \u5199\u5165\u6570\u636e\u81f3\u6570\u636e\u5e93","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_6","text":"load authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page check_auth_data fix_login_page","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#_7","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension","text":"\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py class MobileAuthFactorExtension ( AuthFactorExtension ): \"\"\"\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 \"\"\" def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code ) def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg )) @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR ) def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data ) def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' ) @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED ) @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success () @operation ( MineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def mine_mobile ( self , request , tenant_id : str ): user = request . user user_expand = User . expand_objects . filter ( id = user . id ) . first () config = self . get_tenant_configs ( request . tenant ) . first () if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) return self . success ( data = { \"current_mobile\" : user_expand . get ( \"mobile\" , None ), \"mobile\" : \"\" , \"code\" : \"\" , \"config_id\" : config . id . hex , }, )","title":"MobileAuthFactorExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.authenticate","text":"\u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def authenticate ( self , event , ** kwargs ): \"\"\" \u8ba4\u8bc1 \u901a\u8fc7\u624b\u673a\u53f7\u7801\u67e5\u627e\u7528\u6237\u5e76\u6821\u9a8c\u77ed\u4fe1\u9a8c\u8bc1\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) if user : user = user [ 0 ] if check_sms_code ( tenant , mobile , sms_code ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) else : msg = ErrorCode . SMS_CODE_MISMATCH else : msg = ErrorCode . MOBILE_NOT_EXISTS_ERROR return self . auth_failed ( event , data = self . error ( msg ))","title":"authenticate()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.check_auth_data","text":"\u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_auth_data ( self , event , ** kwargs ): pass","title":"check_auth_data()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.check_mobile_exists","text":"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default mobile str \u624b\u673a\u53f7 required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_mobile_exists ( self , mobile , tenant ): \"\"\"\u68c0\u67e5\u7535\u8bdd\u53f7\u7801\u662f\u5426\u5df2\u5b58\u5728 Args: mobile (str): \u624b\u673a\u53f7 tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): mobile\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" if not mobile : return False , ErrorCode . MOBILE_EMPTY if User . expand_objects . filter ( tenant = tenant , mobile = mobile ) . count (): return False , ErrorCode . MOBILE_EXISTS_ERROR return True , None","title":"check_mobile_exists()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.check_username_exists","text":"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Parameters: Name Type Description Default username str \u7528\u6237\u540d required tenant Tenant \u79df\u6237 required Returns: Type Description (bool,ErrorCode) username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def check_username_exists ( self , username , tenant ): \"\"\"\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728 Args: username (str): \u7528\u6237\u540d tenant (Tenant): \u79df\u6237 Returns: (bool,ErrorCode): username\u662f\u5426\u5b58\u5728\u4ee5\u53ca\u5bf9\u5e94\u9519\u8bef \"\"\" # \u68c0\u67e5username\u662f\u5426\u4e3a\u7a7a if not username : return False , ErrorCode . USERNAME_EMPTY # \u68c0\u67e5username\u662f\u5426\u5df2\u5b58\u5728 if User . expand_objects . filter ( tenant = tenant , username = username ) . count (): return False , ErrorCode . USERNAME_EXISTS_ERROR return True , None","title":"check_username_exists()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_auth_manage_page","text":"\u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_auth_manage_page ( self ): \"\"\" \u521b\u5efa\u201c\u6211\u7684-\u8ba4\u8bc1\u7ba1\u7406\u201d\u4e2d\u7684\u66f4\u6362\u624b\u673a\u53f7\u7801\u9875\u9762 \"\"\" _pages = [] mine_mobile_path = self . register_api ( \"/mine_mobile/\" , \"GET\" , self . mine_mobile , tenant_path = True , auth = GlobalAuth (), response = MineMobileOut ) upodate_mine_mobile_path = self . register_api ( \"/mine_mobile/\" , 'POST' , self . update_mine_mobile , tenant_path = True , auth = GlobalAuth (), response = UpdateMineMobileOut ) name = '\u66f4\u6539\u624b\u673a\u53f7\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . DirectAction ( path = mine_mobile_path , method = actions . FrontActionMethod . GET , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = upodate_mine_mobile_path ), } ) _pages . append ( page ) return _pages","title":"create_auth_manage_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_extension_config_schema","text":"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6eschema\u63cf\u8ff0 \"\"\" select_sms_page = pages . TablePage ( select = True , name = _ ( \"\u6307\u5b9a\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6\" )) self . register_front_pages ( select_sms_page ) select_sms_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=sms' , method = actions . FrontActionMethod . GET ) ) MobileAuthFactorSchema = create_extension_schema ( 'MobileAuthFactorSchema' , __file__ , [ ( 'sms_config' , MobileAuthFactorConfigSchema , Field ( title = _ ( 'sms extension config' , '\u77ed\u4fe1\u63d2\u4ef6\u8fd0\u884c\u65f6' ), page = select_sms_page . tag , ), ), ( 'code_length' , int , Field ( title = _ ( 'code_length' , '\u9a8c\u8bc1\u7801\u957f\u5ea6' ), default = 6 ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 10 , ) ), ], BaseAuthFactorSchema , ) self . register_auth_factor_schema ( MobileAuthFactorSchema , 'mobile' )","title":"create_extension_config_schema()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_login_page","text":"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_login_page ( self , event , config , config_data ): \"\"\" \u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\u9875\u9762Schema\u63cf\u8ff0 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" , } ] self . add_page_form ( config , self . LOGIN , \"\u624b\u673a\u9a8c\u8bc1\u7801\u767b\u5f55\" , items , config_data )","title":"create_login_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_other_page","text":"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_other_page ( self , event , config , config_data ): \"\"\"\u521b\u5efa\u5176\u4ed6\u9875\u9762\uff08\u672c\u63d2\u4ef6\u65e0\u76f8\u5173\u9875\u9762\uff09 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" pass","title":"create_other_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_password_page","text":"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_password_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u91cd\u7f6e\u5bc6\u7801\u9875\u9762Schema\u63cf\u8ff0 \u901a\u8fc7\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\u65f6\u9700\u63d0\u4f9b\u624b\u673a\u53f7\u7801\u4ee5\u53ca\u5bf9\u5e94\u9a8c\u8bc1\u7801\uff0c\u540c\u65f6\u6b64\u5904\u6dfb\u52a0\u65b0\u5bc6\u7801\u786e\u8ba4\u673a\u5236 \u6ce8\u610f\uff1a\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\u9700\u8981\u542f\u7528\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u63d2\u4ef6\u4ee5\u63d0\u4f9b\u5b8c\u6574\u652f\u6301 Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" } ] self . add_page_form ( config , self . RESET_PASSWORD , \"\u624b\u673a\u9a8c\u8bc1\u7801\u91cd\u7f6e\u5bc6\u7801\" , items , config_data )","title":"create_password_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.create_register_page","text":"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def create_register_page ( self , event , config , config_data ): \"\"\"\u751f\u6210\u624b\u673a\u9a8c\u8bc1\u7801\u7528\u6237\u6ce8\u518c\u9875\u9762Schema\u63cf\u8ff0 \u56e0\u672c\u63d2\u4ef6\u63d0\u4f9b\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u6b64\u5904\u9700\u7528\u6237\u6307\u5b9a\u8d26\u53f7\u7528\u6237\u540d Args: event (Event): \u4e8b\u4ef6 config (TenantExtensionConfig): \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \"\"\" items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : \"\u7528\u6237\u540d\" }, { \"type\" : \"text\" , \"name\" : \"mobile\" , \"placeholder\" : \"\u624b\u673a\u53f7\u7801\" , \"append\" : { \"title\" : \"\u53d1\u9001\u9a8c\u8bc1\u7801\" , \"http\" : { \"url\" : self . url_send_sms_code , \"method\" : \"post\" , \"params\" : { \"mobile\" : \"mobile\" , \"areacode\" : \"86\" , }, }, \"delay\" : 60 } }, { \"type\" : \"text\" , \"name\" : \"sms_code\" , \"placeholder\" : \"\u9a8c\u8bc1\u7801\" } ] self . add_page_form ( config , self . REGISTER , \"\u624b\u673a\u9a8c\u8bc1\u7801\u6ce8\u518c\" , items , config_data )","title":"create_register_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.fix_login_page","text":"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def fix_login_page ( self , event , ** kwargs ): pass","title":"fix_login_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.load","text":"\u52a0\u8f7d\u63d2\u4ef6 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def load ( self ): \"\"\"\u52a0\u8f7d\u63d2\u4ef6 \"\"\" super () . load () self . create_extension_config_schema () self . register_extend_field ( UserMobile , \"mobile\" ) from api.v1.schema.auth import AuthIn from api.v1.schema.user import UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut from api.v1.schema.mine import ProfileSchemaOut self . register_extend_api ( AuthIn , UserCreateIn , UserItemOut , UserUpdateIn , UserListItemOut , mobile = ( Optional [ str ], Field ( title = _ ( \"\u7535\u8bdd\u53f7\u7801\" ))), # areacode=(str,Field(title=_(\"\u533a\u53f7\"))) ) self . register_extend_api ( ProfileSchemaOut , mobile = ( Optional [ str ], Field ( readonly = True )) ) # \u6ce8\u518c\u53d1\u9001\u77ed\u4fe1\u63a5\u53e3 self . url_send_sms_code = self . register_api ( '/config/ {config_id} /send_sms_code/' , 'POST' , self . send_sms_code , tenant_path = True , auth = None , response = SendSMSCodeOut , ) print ( self . url_send_sms_code )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.register","text":"\u6ce8\u518c\u7528\u6237 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @transaction . atomic () def register ( self , event , ** kwargs ): \"\"\" \u6ce8\u518c\u7528\u6237 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) username = data . get ( 'username' ) config = self . get_current_config ( event ) ret , message = self . check_mobile_exists ( mobile , tenant ) if not ret : return self . error ( message ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) ret , message = self . check_username_exists ( username , tenant ) if not ret : return self . error ( message ) user = User ( tenant = tenant ) user . mobile = mobile user . username = username user . save () tenant . users . add ( user ) tenant . save () return user","title":"register()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.reset_password","text":"\u91cd\u7f6e\u5bc6\u7801 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py def reset_password ( self , event , ** kwargs ): \"\"\" \u91cd\u7f6e\u5bc6\u7801 Args: event (Event): \u4e8b\u4ef6 \"\"\" tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) mobile = data . get ( 'mobile' ) sms_code = data . get ( 'sms_code' ) password = data . get ( 'password' ) checkpassword = data . get ( 'checkpassword' ) if password != checkpassword : return self . error ( ErrorCode . PASSWORD_IS_INCONSISTENT ) if not check_sms_code ( tenant , mobile , sms_code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = User . expand_objects . filter ( tenant = tenant , mobile = mobile ) if len ( user ) > 1 : logger . error ( f ' { mobile } \u5728\u6570\u636e\u5e93\u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . error ( ErrorCode . CONTACT_MANAGER ) if user : user = user [ 0 ] user = User . active_objects . get ( id = user . get ( \"id\" )) user . password = make_password ( password ) user . save () return self . success () return self . error ( ErrorCode . MOBILE_NOT_EXISTS_ERROR )","title":"reset_password()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.send_sms_code","text":"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( SendSMSCodeOut ) def send_sms_code ( self , request , tenant_id , config_id : str , data : SendSMSCodeIn ): \"\"\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" tenant = request . tenant mobile = data . mobile config = self . get_config_by_id ( config_id ) if not config : return self . error ( ErrorCode . CONFIG_IS_NOT_EXISTS ) if not mobile or mobile == \"mobile\" : return self . error ( ErrorCode . MOBILE_EMPTY ) code = create_sms_code ( tenant , mobile , config . config . get ( 'code_length' , 6 ), config . config . get ( \"expired\" , 10 ) * 60 ) responses = dispatch_event ( Event ( tag = SEND_SMS , tenant = tenant , request = request , data = { \"config_id\" : config . config [ \"sms_config\" ][ \"id\" ], \"mobile\" : data . mobile , \"code\" : code , \"areacode\" : data . areacode , \"username\" : request . user . username if request . user else \"\" }, packages = config . config [ \"sms_config\" ][ \"package\" ] ) ) if not responses : return self . error ( ErrorCode . SMS_EXTENSION_NOT_EXISTS ) useless , ( data , extension ) = responses [ 0 ] if data : return self . success () else : return self . error ( ErrorCode . SMS_SEND_FAILED )","title":"send_sms_code()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.MobileAuthFactorExtension.update_mine_mobile","text":"\u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/__init__.py @operation ( UpdateMineMobileOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_mobile ( self , request , tenant_id : str , data : UpdateMineMobileIn ): \"\"\" \u666e\u901a\u7528\u6237\uff1a\u66f4\u65b0\u624b\u673a\u53f7\u7801 \"\"\" mobile = data . mobile ret , message = self . check_mobile_exists ( mobile , request . tenant ) if not ret : return self . error ( message ) if not check_sms_code ( request . tenant , mobile , data . code ): return self . error ( ErrorCode . SMS_CODE_MISMATCH ) user = request . user user . mobile = data . mobile user . save () return self . success ()","title":"update_mine_mobile()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.sms","text":"","title":"sms"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.sms.check_sms_code","text":"\u9a8c\u8bc1\u77ed\u4fe1\u9a8c\u8bc1\u7801 Source code in extension_root/com_longgui_auth_factor_mobile/sms.py def check_sms_code ( tenant , mobile , code ): \"\"\" \u9a8c\u8bc1\u77ed\u4fe1\u9a8c\u8bc1\u7801 \"\"\" c_code = cache . get ( tenant , gen_sms_code_key ( mobile )) return c_code == code","title":"check_sms_code()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.sms.create_sms_code","text":"\u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5e76\u5b58\u50a8\u81f3\u7f13\u5b58 Source code in extension_root/com_longgui_auth_factor_mobile/sms.py def create_sms_code ( tenant , phone_number , uth_code_length = 6 , expired : Optional [ int ] = None ): \"\"\"\u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u5e76\u5b58\u50a8\u81f3\u7f13\u5b58 \"\"\" code = gen_sms_code ( uth_code_length ) cache . set ( tenant , gen_sms_code_key ( phone_number ), code , expired = expired ) return code","title":"create_sms_code()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_mobile/#extension_root.com_longgui_auth_factor_mobile.sms.gen_sms_code_key","text":"\u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684key Source code in extension_root/com_longgui_auth_factor_mobile/sms.py def gen_sms_code_key ( mobile ): ''' \u751f\u6210\u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684key ''' return f 'sms: { mobile } '","title":"gen_sms_code_key()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/","text":"\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20 # \u529f\u80fd\u4ecb\u7ecd # \u5bf9\u7528\u6237\u8868\u6269\u5c55\u5bc6\u7801\u5b57\u6bb5\uff0c\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba4\u8bc1\uff0c\u6ce8\u518c\u3002 \u666e\u901a\u7528\u6237\uff1a \u5728 \u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u4e2d\u6dfb\u52a0\u91cd\u7f6e\u5bc6\u7801\u7684\u529f\u80fd \u5728 \u201c\u6ce8\u518c\u201d \u9875\u9762\u5b9e\u73b0\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c \u5728 \u201c\u767b\u5f55\u201d \u9875\u9762\u5b9e\u73b0\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55 \u79df\u6237\u7ba1\u7406\u5458 \u5728\u201d\u7528\u6237\u7ba1\u7406 - \u7528\u6237\u5217\u8868\u201c\u4e2d\u6dfb\u52a0\u91cd\u7f6e\u5bc6\u7801\u7684\u529f\u80fd \u914d\u7f6e\u6307\u5357 # \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u8ba4\u8bc1\u56e0\u7d20\u914d\u7f6e \u767b\u5f55\u754c\u9762 \u6ce8\u518c\u754c\u9762 \u66f4\u6539\u5bc6\u7801\u754c\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u56e0\u7d20\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"password\",\u586b\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u7531\u7528\u6237\u5934\u50cf\u83dc\u5355\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011\u754c\u9762,\u9009\u62e9\u66f4\u6539\u5bc6\u7801\u6807\u7b7e\u9875 \u5b9e\u73b0\u601d\u8def # \u666e\u901a\u7528\u6237\uff1a\u6ce8\u518c/\u767b\u5f55\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u5bc6\u7801\u8ba4\u8bc1\u76f8\u5173\u4e8b\u4ef6\uff08\u6ce8\u518c/\u767b\u5f55\u7b49\uff09 D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55\u9875\u9762 C->>A: \u53d1\u51faCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u6ce8\u518c/\u767b\u5f55\u9875\u9762\u5143\u7d20 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>C: \u8f93\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u70b9\u51fb\u3010\u6ce8\u518c/\u767b\u5f55\u3011\u6309\u94ae C->>A: \u53d1\u51fa\u6ce8\u518c/\u767b\u5f55\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u6d41\u7a0b\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5982\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u76f8\u5173\u64cd\u4f5c\u5219\u751f\u6210token\u5e76\u8df3\u8f6c\u81f3\u684c\u9762\uff0c\u5982\u672a\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u64cd\u4f5c\u5219\u63d0\u793a\u9519\u8bef \u666e\u901a\u7528\u6237\uff1a\u91cd\u7f6e\u5bc6\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u6dfb\u52a0\u91cd\u7f6e\u5bc6\u7801\u5143\u7d20\uff0c\u5411\u6838\u5fc3\u6ce8\u518c\u91cd\u7f6e\u5bc6\u7801\u63a5\u53e3 D->>C: \u8bbf\u95ee\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u5f55\u5165\u65b0\u7684\u5bc6\u7801 C->>A: \u8bbf\u95ee\u91cd\u7f6e\u5bc6\u7801\u63a5\u53e3 A->>C: \u54cd\u5e94\u63a5\u53e3\uff0c\u68c0\u67e5\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5e76\u63d0\u793a\u662f\u5426\u5b8c\u6210\u66f4\u6539 \u7ba1\u7406\u5458\u7528\u6237\uff1a \u91cd\u7f6e\u7528\u6237\u5bc6\u7801 sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u7528\u6237\u5217\u8868-\u7f16\u8f91\u7528\u6237\u201d\u9875\u9762\u6ce8\u5165\u5bc6\u7801\u5143\u7d20\uff0c\u5411\u6838\u5fc3\u7528\u6237\u6a21\u578b\u6ce8\u5165\u5bc6\u7801\u5b57\u6bb5 D->>C: \u7ba1\u7406\u5458\u767b\u5f55\uff0c\u8bbf\u95ee\u7528\u6237\u5217\u8868\u9875\u9762\uff0c\u7f16\u8f91\u7528\u6237\u5bc6\u7801\uff0c\u70b9\u51fb\u4fdd\u5b58 C->>D: \u4fee\u6539\u5bc6\u7801\u5b57\u6bb5\u503c\u5e76\u4fdd\u5b58\u81f3\u6570\u636e\u5e93 \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # load authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page check_auth_data fix_login_page \u4ee3\u7801 # extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension ( AuthFactorExtension ) # Source code in extension_root/com_longgui_auth_factor_password/__init__.py class PasswordAuthFactorExtension ( AuthFactorExtension ): def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event ) def create_tenant_event ( self , event , ** kwargs ): tenant = event . tenant config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def reset_user_password ( self , request , tenant_id : str , id : str , data : RestUserPasswordIn ): user = User . active_objects . get ( id = id ) password = data . password user . password = make_password ( password ) user . save () return self . success () def get_user_key_fields ( self , request ): data = [{ 'key' : key , 'name' : value } for key , value in User . key_fields . items ()] return data def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH )) @transaction . atomic () def register ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config = self . get_current_config ( event ) ret , message = self . check_password_complexity ( password , config ) if not ret : return self . error ( ErrorCode . PASSWORD_STRENGTH_LACK ) register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] if not register_fields : fields = [ 'username' ] if username is None : self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_EMPTY )) else : fields = [ k for k in register_fields if request . POST . get ( k ) is not None ] if not fields : self . auth_failed ( event , data = self . error ( ErrorCode . ALL_USER_FLAG_LACK_FIELD )) for field in fields : user = self . _get_register_user ( tenant , field , request . POST . get ( field )) if user : self . auth_failed ( event , data = self . error ( ErrorCode . FIELD_USER_EXISTS , field = field )) # user = User.objects.create(tenant=tenant) user = User ( tenant = tenant ) for k in fields : if request . POST . get ( k ): setattr ( user , k , request . POST . get ( k )) user . password = make_password ( password ) user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): pass def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): pass def create_other_page ( self , event , config , config_data ): pass def check_password_complexity ( self , pwd , config ): if not pwd : return False , 'No password provide' if config : regular = config . config . get ( 'regular' ) title = config . config . get ( 'title' ) if re . match ( regular , pwd ): return True , None else : return False , title return True , None def _get_register_user ( self , tenant , field_name , field_value ): user = None if field_name in ( 'username' , 'email' ): user = User . active_objects . filter ( ** { field_name : field_value }) . first () else : # \u83b7\u53d6\u521a\u6ce8\u518c\u7684\u7528\u6237 user = User . expand_objects . filter ( ** { field_name : field_value }) . first () return user def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR ) authenticate ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH )) check_auth_data ( self , event , ** kwargs ) # \u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def check_auth_data ( self , event , ** kwargs ): pass create_auth_manage_page ( self ) # \u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page create_login_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data ) create_other_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_other_page ( self , event , config , config_data ): pass create_password_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_password_page ( self , event , config , config_data ): pass create_register_page ( self , event , config , config_data ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data ) fix_login_page ( self , event , ** kwargs ) # \u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def fix_login_page ( self , event , ** kwargs ): pass load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event ) reset_password ( self , event , ** kwargs ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def reset_password ( self , event , ** kwargs ): pass update_mine_password ( self , request , tenant_id , data ) # \u66f4\u6539\u5bc6\u7801 Source code in extension_root/com_longgui_auth_factor_password/__init__.py @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR )","title":"\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_1","text":"","title":"\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_2","text":"\u5bf9\u7528\u6237\u8868\u6269\u5c55\u5bc6\u7801\u5b57\u6bb5\uff0c\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba4\u8bc1\uff0c\u6ce8\u518c\u3002 \u666e\u901a\u7528\u6237\uff1a \u5728 \u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u4e2d\u6dfb\u52a0\u91cd\u7f6e\u5bc6\u7801\u7684\u529f\u80fd \u5728 \u201c\u6ce8\u518c\u201d \u9875\u9762\u5b9e\u73b0\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c \u5728 \u201c\u767b\u5f55\u201d \u9875\u9762\u5b9e\u73b0\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55 \u79df\u6237\u7ba1\u7406\u5458 \u5728\u201d\u7528\u6237\u7ba1\u7406 - \u7528\u6237\u5217\u8868\u201c\u4e2d\u6dfb\u52a0\u91cd\u7f6e\u5bc6\u7801\u7684\u529f\u80fd","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_3","text":"","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_4","text":"\u63d2\u4ef6\u79df\u8d41 \u8ba4\u8bc1\u56e0\u7d20\u914d\u7f6e \u767b\u5f55\u754c\u9762 \u6ce8\u518c\u754c\u9762 \u66f4\u6539\u5bc6\u7801\u754c\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u56e0\u7d20\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"password\",\u586b\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u7531\u7528\u6237\u5934\u50cf\u83dc\u5355\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011\u754c\u9762,\u9009\u62e9\u66f4\u6539\u5bc6\u7801\u6807\u7b7e\u9875","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_5","text":"\u666e\u901a\u7528\u6237\uff1a\u6ce8\u518c/\u767b\u5f55\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u5bc6\u7801\u8ba4\u8bc1\u76f8\u5173\u4e8b\u4ef6\uff08\u6ce8\u518c/\u767b\u5f55\u7b49\uff09 D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55\u9875\u9762 C->>A: \u53d1\u51faCREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u7ec4\u88c5\u6ce8\u518c/\u767b\u5f55\u9875\u9762\u5143\u7d20 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>C: \u8f93\u5165\u76f8\u5173\u4fe1\u606f\uff0c\u70b9\u51fb\u3010\u6ce8\u518c/\u767b\u5f55\u3011\u6309\u94ae C->>A: \u53d1\u51fa\u6ce8\u518c/\u767b\u5f55\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6\uff0c\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u6d41\u7a0b\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5982\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u76f8\u5173\u64cd\u4f5c\u5219\u751f\u6210token\u5e76\u8df3\u8f6c\u81f3\u684c\u9762\uff0c\u5982\u672a\u5b8c\u6210\u6ce8\u518c/\u767b\u5f55\u64cd\u4f5c\u5219\u63d0\u793a\u9519\u8bef \u666e\u901a\u7528\u6237\uff1a\u91cd\u7f6e\u5bc6\u7801\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u6dfb\u52a0\u91cd\u7f6e\u5bc6\u7801\u5143\u7d20\uff0c\u5411\u6838\u5fc3\u6ce8\u518c\u91cd\u7f6e\u5bc6\u7801\u63a5\u53e3 D->>C: \u8bbf\u95ee\u201c\u6211\u7684 - \u8ba4\u8bc1\u7ba1\u7406\u201c \u9875\u9762\u4e2d\u91cd\u7f6e\u5bc6\u7801\u529f\u80fd\uff0c\u5f55\u5165\u65b0\u7684\u5bc6\u7801 C->>A: \u8bbf\u95ee\u91cd\u7f6e\u5bc6\u7801\u63a5\u53e3 A->>C: \u54cd\u5e94\u63a5\u53e3\uff0c\u68c0\u67e5\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u7ed3\u679c C->>D: \u68c0\u67e5\u7ed3\u679c\uff0c\u5e76\u63d0\u793a\u662f\u5426\u5b8c\u6210\u66f4\u6539 \u7ba1\u7406\u5458\u7528\u6237\uff1a \u91cd\u7f6e\u7528\u6237\u5bc6\u7801 sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u5411\u201c\u7528\u6237\u5217\u8868-\u7f16\u8f91\u7528\u6237\u201d\u9875\u9762\u6ce8\u5165\u5bc6\u7801\u5143\u7d20\uff0c\u5411\u6838\u5fc3\u7528\u6237\u6a21\u578b\u6ce8\u5165\u5bc6\u7801\u5b57\u6bb5 D->>C: \u7ba1\u7406\u5458\u767b\u5f55\uff0c\u8bbf\u95ee\u7528\u6237\u5217\u8868\u9875\u9762\uff0c\u7f16\u8f91\u7528\u6237\u5bc6\u7801\uff0c\u70b9\u51fb\u4fdd\u5b58 C->>D: \u4fee\u6539\u5bc6\u7801\u5b57\u6bb5\u503c\u5e76\u4fdd\u5b58\u81f3\u6570\u636e\u5e93","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_6","text":"load authenticate register reset_password create_login_page create_register_page create_password_page create_other_page create_auth_manage_page check_auth_data fix_login_page","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#_7","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension","text":"Source code in extension_root/com_longgui_auth_factor_password/__init__.py class PasswordAuthFactorExtension ( AuthFactorExtension ): def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event ) def create_tenant_event ( self , event , ** kwargs ): tenant = event . tenant config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) def check_auth_data ( self , event , ** kwargs ): pass def fix_login_page ( self , event , ** kwargs ): pass @operation ( roles = [ TENANT_ADMIN , PLATFORM_ADMIN ]) def reset_user_password ( self , request , tenant_id : str , id : str , data : RestUserPasswordIn ): user = User . active_objects . get ( id = id ) password = data . password user . password = make_password ( password ) user . save () return self . success () def get_user_key_fields ( self , request ): data = [{ 'key' : key , 'name' : value } for key , value in User . key_fields . items ()] return data def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH )) @transaction . atomic () def register ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config = self . get_current_config ( event ) ret , message = self . check_password_complexity ( password , config ) if not ret : return self . error ( ErrorCode . PASSWORD_STRENGTH_LACK ) register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] if not register_fields : fields = [ 'username' ] if username is None : self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_EMPTY )) else : fields = [ k for k in register_fields if request . POST . get ( k ) is not None ] if not fields : self . auth_failed ( event , data = self . error ( ErrorCode . ALL_USER_FLAG_LACK_FIELD )) for field in fields : user = self . _get_register_user ( tenant , field , request . POST . get ( field )) if user : self . auth_failed ( event , data = self . error ( ErrorCode . FIELD_USER_EXISTS , field = field )) # user = User.objects.create(tenant=tenant) user = User ( tenant = tenant ) for k in fields : if request . POST . get ( k ): setattr ( user , k , request . POST . get ( k )) user . password = make_password ( password ) user . save () tenant . users . add ( user ) tenant . save () return user def reset_password ( self , event , ** kwargs ): pass def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data ) def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data ) def create_password_page ( self , event , config , config_data ): pass def create_other_page ( self , event , config , config_data ): pass def check_password_complexity ( self , pwd , config ): if not pwd : return False , 'No password provide' if config : regular = config . config . get ( 'regular' ) title = config . config . get ( 'title' ) if re . match ( regular , pwd ): return True , None else : return False , title return True , None def _get_register_user ( self , tenant , field_name , field_value ): user = None if field_name in ( 'username' , 'email' ): user = User . active_objects . filter ( ** { field_name : field_value }) . first () else : # \u83b7\u53d6\u521a\u6ce8\u518c\u7684\u7528\u6237 user = User . expand_objects . filter ( ** { field_name : field_value }) . first () return user def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR )","title":"PasswordAuthFactorExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.authenticate","text":"\u62bd\u8c61\u65b9\u6cd5:\u8ba4\u8bc1 Parameters: Name Type Description Default event Event \u8ba4\u8bc1\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def authenticate ( self , event , ** kwargs ): tenant = event . tenant request = event . request data = request . POST or json . load ( request . body ) username = data . get ( 'username' ) password = data . get ( 'password' ) config_id = data . get ( 'config_id' ) config = TenantExtensionConfig . active_objects . get ( id = config_id ) . config login_enabled_field_names = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . get ( 'login_enabled_field_names' )] filter_params = None login_enabled_field_names = login_enabled_field_names or [ \"username\" ] for lefn in login_enabled_field_names : temp = { lefn : username } if filter_params : filter_params = Q ( ** temp ) | filter_params else : filter_params = Q ( ** temp ) users = User . expand_objects . filter ( tenant = tenant ) . filter ( filter_params ) if len ( users ) > 1 : logger . error ( f ' { username } \u5728 { login_enabled_field_names } \u4e2d\u5339\u914d\u5230\u591a\u4e2a\u7528\u6237' ) return self . auth_failed ( event , data = self . error ( ErrorCode . CONTACT_MANAGER )) user = users [ 0 ] if users else None if user : user_password = user . get ( \"password\" ) if user_password : if check_password ( password , user_password ): user = User . active_objects . get ( id = user . get ( \"id\" )) return self . auth_success ( user , event ) return self . auth_failed ( event , data = self . error ( ErrorCode . USERNAME_PASSWORD_MISMATCH ))","title":"authenticate()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.check_auth_data","text":"\u54cd\u5e94\u68c0\u67e5\u8ba4\u8bc1\u51ed\u8bc1\u4e8b\u4ef6 Parameters: Name Type Description Default event AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def check_auth_data ( self , event , ** kwargs ): pass","title":"check_auth_data()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_auth_manage_page","text":"\u8ba4\u8bc1\u7ba1\u7406\u9875\u9762\u63cf\u8ff0 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_auth_manage_page ( self ): # \u66f4\u6539\u5bc6\u7801\u9875\u9762 mine_password_path = self . register_api ( \"/mine_password/\" , 'POST' , self . update_mine_password , tenant_path = True , response = UpdateMinePasswordOut , ) name = '\u66f4\u6539\u5bc6\u7801' page = pages . FormPage ( name = name ) page . create_actions ( init_action = actions . ConfirmAction ( path = mine_password_path , ), global_actions = { 'confirm' : actions . ConfirmAction ( path = mine_password_path ), } ) return page","title":"create_auth_manage_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_login_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_login_page ( self , event , config , config_data ): username_placeholder = \"\" for lefn in [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'login_enabled_field_names' ,[])]: if username_placeholder : username_placeholder = ',' + User . key_fields [ lefn ] else : username_placeholder = User . key_fields [ lefn ] items = [ { \"type\" : \"text\" , \"name\" : \"username\" , \"placeholder\" : username_placeholder or '\u7528\u6237\u540d' }, { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, ] self . add_page_form ( config , self . LOGIN , \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , items , config_data )","title":"create_login_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_other_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u767b\u5f55\u9875\u4e0a\u5176\u4ed6\u64cd\u4f5c\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_other_page ( self , event , config , config_data ): pass","title":"create_other_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_password_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u91cd\u7f6e\u5bc6\u7801\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_password_page ( self , event , config , config_data ): pass","title":"create_password_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.create_register_page","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u7ec4\u88c5\u6ce8\u518c\u9875\u9762\u8868\u5355 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_AUTH_FACTOR\u4e8b\u4ef6 required config TenantExtensionConfig \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required config_data dict \u8fd0\u884c\u65f6\u914d\u7f6e\u6570\u636e required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def create_register_page ( self , event , config , config_data ): items = [] register_fields = [ item [ \"key\" ] if isinstance ( item , dict ) else item for item in config . config . get ( 'register_enabled_field_names' )] for rf in register_fields : items . append ({ \"type\" : \"text\" , \"name\" : rf , \"placeholder\" : User . key_fields [ rf ] }) items . extend ([ { \"type\" : \"password\" , \"name\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" }, { \"type\" : \"password\" , \"name\" : \"checkpassword\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" }, ]) self . add_page_form ( config , self . REGISTER , \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , items , config_data )","title":"create_register_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.fix_login_page","text":"\u5411login_pages\u586b\u5165\u8ba4\u8bc1\u5143\u7d20 Parameters: Name Type Description Default event AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def fix_login_page ( self , event , ** kwargs ): pass","title":"fix_login_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_factor_password/__init__.py def load ( self ): super () . load () self . register_extend_field ( UserPassword , \"password\" ) self . register_auth_factor_schema ( PasswordAuthFactorSchema , 'password' ) self . register_extend_api ( AuthIn , password = str ) user_key_fields_path = self . register_api ( '/user_key_fields/' , 'GET' , self . get_user_key_fields , response = List [ GetUserKeyFieldItemOut ], ) select_pw_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) select_pw_register_login_fields_page . create_actions ( init_action = actions . DirectAction ( path = user_key_fields_path , method = actions . FrontActionMethod . GET , ), ) self . register_front_pages ( select_pw_login_fields_page ) self . register_front_pages ( select_pw_register_login_fields_page ) # \u79df\u6237\u7ba1\u7406\u5458\uff1a\u7528\u6237\u7ba1\u7406-\u7528\u6237\u5217\u8868-\u91cd\u7f6e\u5bc6\u7801 reset_user_password_path = self . register_api ( '/reset_user_password/ {id} /' , 'POST' , self . reset_user_password , tenant_path = True , response = ResponseSchema , auth = GlobalAuth () ) user_list_page . add_local_actions ( actions . OpenAction ( name = '\u91cd\u7f6e\u5bc6\u7801' , path = reset_user_password_path , method = actions . FrontActionMethod . POST , ) ) # \u521d\u59cb\u5316\u90e8\u5206\u914d\u7f6e\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): config = { 'login_enabled_field_names' : [{ 'key' : 'username' }], 'register_enabled_field_names' : [{ 'key' : 'username' }], 'is_apply' : False , 'regular' : '' , 'title' : '' , } self . create_tenant_config ( tenant , config , \"default\" , \"password\" ) try : admin_user = User . active_objects . filter ( username = 'admin' ) . first () if admin_user : admin_password = UserPassword . active_objects . filter ( target = admin_user ) if not admin_password : admin_user . password = make_password ( 'admin' ) admin_user . save () except Exception as e : print ( e ) self . listen_event ( CREATE_TENANT , self . create_tenant_event )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.reset_password","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u54cd\u5e94\u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 Parameters: Name Type Description Default event Event \u91cd\u7f6e\u5bc6\u7801\u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_factor_password/__init__.py def reset_password ( self , event , ** kwargs ): pass","title":"reset_password()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_password/#extension_root.com_longgui_auth_factor_password.PasswordAuthFactorExtension.update_mine_password","text":"\u66f4\u6539\u5bc6\u7801 Source code in extension_root/com_longgui_auth_factor_password/__init__.py @operation ( UpdateMinePasswordOut , roles = [ TENANT_ADMIN , PLATFORM_ADMIN , NORMAL_USER ]) def update_mine_password ( self , request , tenant_id : str , data : UpdateMinePasswordIn ): \"\"\"\u66f4\u6539\u5bc6\u7801\"\"\" user = request . user user_expand = User . expand_objects . get ( id = user . id ) user_password = user_expand [ \"password\" ] if not user_password or check_password ( data . old_password , user_password ): if data . password == data . confirm_password : user . password = make_password ( data . password ) user . save () return self . success () else : return self . error ( ErrorCode . TWO_TIME_PASSWORD_MISMATCH ) return self . error ( ErrorCode . OLD_PASSWORD_ERROR )","title":"update_mine_password()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/","text":"\u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236 # \u529f\u80fd\u4ecb\u7ecd # \u5728\u7528\u6237\u8d85\u51fa\u9650\u5236\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u540e\uff0c\u5bf9\u7528\u6237\u8ba4\u8bc1\u51ed\u8bc1\u8868\u5355\u8fdb\u884c\u6269\u5145\uff0c\u63d2\u5165\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5e76\u5728\u7528\u6237\u518d\u6b21\u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42\u65f6\u8fdb\u884c\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c \u524d\u7f6e\u6761\u4ef6 # \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236\u89c4\u5219\u63d2\u4ef6\u4e2d\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u548c\u4e00\u4e2a\u6b21\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u652f\u6301\uff0c\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u5373\u4e3a\u62e5\u6709\u767b\u5f55/\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u4e3b\u8981\u529f\u80fd\u7684\u8ba4\u8bc1\u56e0\u7d20\uff0c\u6b21\u8ba4\u8bc1\u56e0\u7d20\u4e3a\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u901a\u8fc7\u8ba4\u8bc1\u89c4\u5219\u9650\u5236\u5bf9\u8ba4\u8bc1\u8fc7\u7a0b\u8fdb\u884c\u8865\u5145\uff0c\u6b64\u5904\u4ee5\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u4e0e\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u4e3a\u4f8b\u3002 \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u8ba4\u8bc1\u89c4\u5219\u914d\u7f6e \u767b\u9646\u754c\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u8ba4\u8bc1\u6b21\u6570\u9650\u5236\u89c4\u5219\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u89c4\u5219\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"retry_times\",\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u9009\u62e9\u9ed8\u8ba4\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\uff0c\u6b21\u8ba4\u8bc1\u56e0\u7d20\u9009\u62e9\u9ed8\u8ba4\u7684\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5f53\u7528\u6237\u8fdb\u5165\u767b\u9646\u754c\u9762\u5e76\u91cd\u590d\u5931\u8d25\u4e09\u6b21\u540e\uff0c\u9875\u9762\u4f1a\u5237\u65b0\u5e76\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801 \u5b9e\u73b0\u601d\u8def # \u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236\u89c4\u5219\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6CREATE_LOGIN_PAGE_RULES,AUTH_FAIL,BEFORE_AUTH D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 C->>A: \u53d1\u51faCREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u89c4\u5219,\u5982\u6ee1\u8db3\u89c4\u5219\u5373\u89e6\u53d1AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>C: \u8f93\u5165\u8ba4\u8bc1\u51ed\u8bc1\uff0c\u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42 C->>A: \u89e6\u53d1BEFORE_AUTH\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u89c4\u5219\uff0c\u5982\u6ee1\u8db3\u89c4\u5219\u5373\u89e6\u53d1AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6\uff0c\u68c0\u67e5\u5e76\u8fd4\u56de\u7ed3\u679c C->>A: \u68c0\u67e5\u7ed3\u679c,\u5982\u672a\u5b8c\u6210\u8ba4\u8bc1\uff0c\u89e6\u53d1AUTH_FAIL\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u5e76\u5224\u65ad\u662f\u5426\u5237\u65b0\u9875\u9762 C->>D: \u6839\u636e\u8fd4\u56de\u7ed3\u679c\u6e32\u67d3\u6216\u5237\u65b0\u9875\u9762 \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # load check_rule \u4ee3\u7801 # extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension ( AuthRuleExtension ) # Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py class AuthRuleRetryTimesExtension ( AuthRuleExtension ): def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" ) def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) ) def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 ) def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id ))) def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \" def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \" def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" ) auth_fail ( self , event , ** kwargs ) # \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Parameters: Name Type Description Default event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True before_auth ( self , event , ** kwargs ) # \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Parameters: Name Type Description Default event \u4e8b\u4ef6 required Returns: Type Description tuple(bool,dict) \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None check_refresh_status ( self , tenant , host , config_id ) # \u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description bool \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id ))) check_retry_times ( self , tenant , host , config_id , limited = 3 ) # \u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required limited int \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. 3 Returns: Type Description bool \u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited check_rule ( self , event , config ) # \u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required config TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) ) create_extension_config_schema ( self ) # \u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" ) gen_key ( self , host , config_id ) # \u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \" gen_refresh_key ( self , host , config_id ) # \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \" load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" ) set_refresh_status ( self , tenant , host , config_id ) # \u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 )","title":"\u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_1","text":"","title":"\u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_2","text":"\u5728\u7528\u6237\u8d85\u51fa\u9650\u5236\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u540e\uff0c\u5bf9\u7528\u6237\u8ba4\u8bc1\u51ed\u8bc1\u8868\u5355\u8fdb\u884c\u6269\u5145\uff0c\u63d2\u5165\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\uff0c\u5e76\u5728\u7528\u6237\u518d\u6b21\u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42\u65f6\u8fdb\u884c\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_3","text":"\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236\u89c4\u5219\u63d2\u4ef6\u4e2d\u9700\u8981\u81f3\u5c11\u4e00\u4e2a\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u548c\u4e00\u4e2a\u6b21\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u652f\u6301\uff0c\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u5373\u4e3a\u62e5\u6709\u767b\u5f55/\u6ce8\u518c/\u91cd\u7f6e\u5bc6\u7801\u7b49\u4e3b\u8981\u529f\u80fd\u7684\u8ba4\u8bc1\u56e0\u7d20\uff0c\u6b21\u8ba4\u8bc1\u56e0\u7d20\u4e3a\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u901a\u8fc7\u8ba4\u8bc1\u89c4\u5219\u9650\u5236\u5bf9\u8ba4\u8bc1\u8fc7\u7a0b\u8fdb\u884c\u8865\u5145\uff0c\u6b64\u5904\u4ee5\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\u4e0e\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\u4e3a\u4f8b\u3002","title":"\u524d\u7f6e\u6761\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_4","text":"\u63d2\u4ef6\u79df\u8d41 \u8ba4\u8bc1\u89c4\u5219\u914d\u7f6e \u767b\u9646\u754c\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u8ba4\u8bc1\u6b21\u6570\u9650\u5236\u89c4\u5219\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011-> \u3010\u8ba4\u8bc1\u89c4\u5219\u3011,\u70b9\u51fb\u521b\u5efa\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9\"retry_times\",\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u9009\u62e9\u9ed8\u8ba4\u5bc6\u7801\u8ba4\u8bc1\u56e0\u7d20\uff0c\u6b21\u8ba4\u8bc1\u56e0\u7d20\u9009\u62e9\u9ed8\u8ba4\u7684\u56fe\u5f62\u9a8c\u8bc1\u7801\u8ba4\u8bc1\u56e0\u7d20\uff0c\u81f3\u6b64\u914d\u7f6e\u5b8c\u6210 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5f53\u7528\u6237\u8fdb\u5165\u767b\u9646\u754c\u9762\u5e76\u91cd\u590d\u5931\u8d25\u4e09\u6b21\u540e\uff0c\u9875\u9762\u4f1a\u5237\u65b0\u5e76\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_5","text":"\u8ba4\u8bc1\u89c4\u5219: \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236\uff1a sequenceDiagram participant D as \u7528\u6237 participant C as \u5e73\u53f0\u6838\u5fc3 participant A as \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236\u89c4\u5219\u63d2\u4ef6 C->>A: \u52a0\u8f7d\u63d2\u4ef6 A->>C: \u6ce8\u518c\u5e76\u76d1\u542c\u4e8b\u4ef6CREATE_LOGIN_PAGE_RULES,AUTH_FAIL,BEFORE_AUTH D->>C: \u8bbf\u95ee\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 C->>A: \u53d1\u51faCREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u89c4\u5219,\u5982\u6ee1\u8db3\u89c4\u5219\u5373\u89e6\u53d1AUTHRULE_FIX_LOGIN_PAGE\u4e8b\u4ef6 C->>D: \u6e32\u67d3\u6ce8\u518c/\u767b\u5f55/\u91cd\u7f6e\u5bc6\u7801\u9875\u9762 D->>C: \u8f93\u5165\u8ba4\u8bc1\u51ed\u8bc1\uff0c\u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42 C->>A: \u89e6\u53d1BEFORE_AUTH\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u89c4\u5219\uff0c\u5982\u6ee1\u8db3\u89c4\u5219\u5373\u89e6\u53d1AUTHRULE_CHECK_AUTH_DATA\u4e8b\u4ef6\uff0c\u68c0\u67e5\u5e76\u8fd4\u56de\u7ed3\u679c C->>A: \u68c0\u67e5\u7ed3\u679c,\u5982\u672a\u5b8c\u6210\u8ba4\u8bc1\uff0c\u89e6\u53d1AUTH_FAIL\u4e8b\u4ef6 A->>C: \u54cd\u5e94\u4e8b\u4ef6,\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u5e76\u5224\u65ad\u662f\u5426\u5237\u65b0\u9875\u9762 C->>D: \u6839\u636e\u8fd4\u56de\u7ed3\u679c\u6e32\u67d3\u6216\u5237\u65b0\u9875\u9762","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_6","text":"load check_rule","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#_7","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension","text":"Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py class AuthRuleRetryTimesExtension ( AuthRuleExtension ): def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" ) def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) ) def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 ) def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id ))) def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \" def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \" def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" )","title":"AuthRuleRetryTimesExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.auth_fail","text":"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Parameters: Name Type Description Default event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def auth_fail ( self , event , ** kwargs ): \"\"\"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bb0\u5f55\u5bf9\u5e94IP\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570 Args: event : \u4e8b\u4ef6 \"\"\" data = event . data [ \"data\" ] # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u914d\u7f6e for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) key = self . gen_key ( host , config . id . hex ) try_times = int ( cache . get ( event . tenant , key ) or 0 ) cache . set ( event . tenant , key , try_times + 1 , expired = config . config . get ( \"expired\" , 30 ) * 60 ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )) and not self . check_refresh_status ( event . tenant , host , config . id . hex ): data . update ( self . error ( ErrorCode . AUTH_FAIL_TIMES_OVER_LIMITED )) self . set_refresh_status ( event . tenant , host , config . id . hex ) data [ \"refresh\" ] = True","title":"auth_fail()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.before_auth","text":"\u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Parameters: Name Type Description Default event \u4e8b\u4ef6 required Returns: Type Description tuple(bool,dict) \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def before_auth ( self , event , ** kwargs ): \"\"\" \u54cd\u5e94\u4e8b\u4ef6\uff1a\u8ba4\u8bc1\u4e4b\u524d, \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u6761\u4ef6\uff0c\u5982\u6ee1\u8db3\u5219\u89e6\u53d1\u4e8b\u4ef6\u5e76\u68c0\u67e5\u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c Args: event: \u4e8b\u4ef6 Returns: tuple(bool,dict): \u6b21\u7ea7\u8ba4\u8bc1\u56e0\u7d20\u6821\u9a8c\u7ed3\u679c \"\"\" for config in self . get_tenant_configs ( event . tenant ): if uuid . UUID ( config . config [ \"main_auth_factor\" ][ \"id\" ]) . hex == event . data [ \"auth_factor_config_id\" ]: host = event . request . META . get ( \"REMOTE_ADDR\" ) if self . check_retry_times ( event . tenant , host , config . id . hex , config . config . get ( \"try_times\" , 0 )): # \u5224\u5b9a\u9700\u8981\u9a8c\u8bc1 responses = dispatch_event ( Event ( core_event . AUTHRULE_CHECK_AUTH_DATA , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ] ) ) for useless ,( response , useless ) in responses : if not response : continue result , data = response if not result : return response return True , None","title":"before_auth()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.check_refresh_status","text":"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description bool \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_refresh_status ( self , tenant , host , config_id ): \"\"\"\u6821\u9a8c\u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: bool: \u662f\u5426\u9700\u8981\u5237\u65b0\u9875\u9762 \"\"\" return bool ( cache . get ( tenant , self . gen_refresh_key ( host , config_id )))","title":"check_refresh_status()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.check_retry_times","text":"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required limited int \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. 3 Returns: Type Description bool \u6821\u9a8c\u7ed3\u679c Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_retry_times ( self , tenant , host , config_id , limited = 3 ): \"\"\"\u6821\u9a8c\u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u662f\u5426\u8d85\u51fa\u9650\u5236 Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID limited (int, optional): \u8ba4\u8bc1\u5931\u8d25\u6b21\u6570\u9650\u5236. Defaults to 3. Returns: bool: \u6821\u9a8c\u7ed3\u679c \"\"\" key = self . gen_key ( host , config_id ) retry_times = int ( cache . get ( tenant , key ) or limited ) return retry_times > limited","title":"check_retry_times()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.check_rule","text":"\u62bd\u8c61\u65b9\u6cd5\uff1a\u6821\u9a8c\u89c4\u5219 Parameters: Name Type Description Default event Event CREATE_LOGIN_PAGE_RULES\u4e8b\u4ef6 required config TenantExtensionConfig \u8fd0\u884c\u65f6\u914d\u7f6e required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def check_rule ( self , event , config ): login_pages = event . data if self . check_retry_times ( event . tenant , event . request . META . get ( \"REMOTE_ADDR\" ), config . id . hex , config . config . get ( \"try_times\" , 0 )): dispatch_event ( Event ( core_event . AUTHRULE_FIX_LOGIN_PAGE , tenant = event . tenant , request = event . request , packages = [ config . config [ \"second_auth_factor\" ][ \"package\" ] ], data = { \"login_pages\" : login_pages , \"main_auth_factor_id\" : config . config [ \"main_auth_factor\" ][ \"id\" ], \"config_id\" : config . config [ \"second_auth_factor\" ][ \"id\" ] } ) )","title":"check_rule()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.create_extension_config_schema","text":"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def create_extension_config_schema ( self ): \"\"\"\u521b\u5efa\u63d2\u4ef6\u8fd0\u884c\u65f6schema \"\"\" main_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u4e3b\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( main_auth_factor_page ) main_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) second_auth_factor_page = pages . TablePage ( select = True , name = _ ( \"\u9009\u62e9\u6b21\u8ba4\u8bc1\u56e0\u7d20\" )) self . register_front_pages ( second_auth_factor_page ) second_auth_factor_page . create_actions ( init_action = actions . DirectAction ( path = '/api/v1/tenants/ {tenant_id} /config_select/?extension__type=auth_factor' , method = actions . FrontActionMethod . GET ) ) AuthRuleRetryTimesConfigSchema = create_extension_schema ( 'AuthRuleRetryTimesConfigSchema' , __file__ , [ ( 'try_times' , int , Field ( title = _ ( 'try_times' , '\u9650\u5236\u91cd\u8bd5\u6b21\u6570' ), default = 3 ) ), ( 'main_auth_factor' , MainAuthRuleSchema , Field ( title = _ ( 'main_auth_factor' , '\u4e3b\u8ba4\u8bc1\u56e0\u7d20' ), page = main_auth_factor_page . tag ) ), ( 'second_auth_factor' , SecondAuthFactorConfigSchema , Field ( title = _ ( 'second_auth_factor' , '\u6b21\u8ba4\u8bc1\u56e0\u7d20' ), page = second_auth_factor_page . tag ) ), ( 'expired' , Optional [ int ], Field ( title = _ ( 'expired' , '\u6709\u6548\u671f/\u5206\u949f' ), default = 30 , ) ), ], base_schema = BaseAuthRuleSchema ) self . register_auth_rule_schema ( AuthRuleRetryTimesConfigSchema , \"retry_times\" )","title":"create_extension_config_schema()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.gen_key","text":"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_key ( self , host : str , config_id : str ): \"\"\"\u751f\u6210\u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\u7684KEY \"\"\" return f \" { self . package } _cache_auth_retry_times_ { host } _ { config_id } \"","title":"gen_key()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.gen_refresh_key","text":"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Returns: Type Description str \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def gen_refresh_key ( self , host : str , config_id : str ): \"\"\"\u9875\u9762\u5237\u65b0\u6807\u8bc6KEY Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID Returns: str: \u9875\u9762\u5237\u65b0\u6807\u8bc6KEY \"\"\" return f \" { self . package } _cache_auth_refresh_ { host } _ { config_id } \"","title":"gen_refresh_key()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def load ( self ): super () . load () self . create_extension_config_schema () self . listen_event ( AUTH_FAIL , self . auth_fail ) self . listen_event ( BEFORE_AUTH , self . before_auth ) # \u914d\u7f6e\u521d\u59cb\u6570\u636e tenant = Tenant . platform_tenant () if not self . get_tenant_configs ( tenant ): main_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.password\" ) . first (), type = \"password\" ) . first () second_auth_factor = TenantExtensionConfig . active_objects . filter ( tenant = tenant , extension = Extension . active_objects . filter ( package = \"com.longgui.auth.factor.authcode\" ) . first (), type = \"authcode\" ) . first () if main_auth_factor and second_auth_factor : # \u5982\u4e3b\u8ba4\u8bc1\u56e0\u7d20\u548c\u6b64\u8ba4\u8bc1\u56e0\u7d20\u90fd\u5b58\u5728\u7684\u60c5\u51b5\u4e0b \u521b\u5efa\u8ba4\u8bc1\u89c4\u5219 config = { \"main_auth_factor\" : { \"id\" : main_auth_factor . id . hex , \"name\" : main_auth_factor . name , \"package\" : main_auth_factor . extension . package }, \"second_auth_factor\" : { \"id\" : second_auth_factor . id . hex , \"name\" : second_auth_factor . name , \"package\" : second_auth_factor . extension . package }, \"try_times\" : 3 } self . create_tenant_config ( tenant , config , \"\u8ba4\u8bc1\u89c4\u5219:\u767b\u5f55\u5931\u8d25\u4e09\u6b21\u542f\u7528\u56fe\u5f62\u9a8c\u8bc1\u7801\" , \"retry_times\" )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_auth_rule_retry_times/#extension_root.com_longgui_auth_rule_retry_times.AuthRuleRetryTimesExtension.set_refresh_status","text":"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Parameters: Name Type Description Default host str \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 required config_id str \u63d2\u4ef6\u8fd0\u884c\u65f6ID required Source code in extension_root/com_longgui_auth_rule_retry_times/__init__.py def set_refresh_status ( self , tenant , host , config_id ): \"\"\"\u8bbe\u7f6e\u767b\u9646\u9875\u9762\u5237\u65b0tag Args: host (str): \u5ba2\u6237\u4e00\u7aefIP\u5730\u5740 config_id (str): \u63d2\u4ef6\u8fd0\u884c\u65f6ID \"\"\" cache . set ( tenant , self . gen_refresh_key ( host , config_id ), 1 )","title":"set_refresh_status()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/","text":"Github \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6eGithub\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Github\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Github\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u521b\u5efaGithub\u5e94\u7528 # \u6253\u5f00\u521b\u5efaGithub\u5f00\u53d1\u8005\u8bbe\u7f6e\u9875\u9762 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u751f\u6210Client Secret \u4fdd\u5b58Client ID\u548cClient Secret \u540d\u79f0\uff0c\u4e3b\u9875URL\u548c\u56de\u8c03URL\u53ef\u4ee5\u968f\u610f\u586b\u5199\uff0c\u56de\u8c03URL\u540e\u9762\u6b65\u9aa4\u4e2d\u4f1a\u66f4\u6539\u6210ArkID\u81ea\u52a8\u751f\u6210\u7684URL\u3002 \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL \u66f4\u65b0Github\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u91cd\u65b0\u8bbe\u7f6eGithub\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762Github\u56fe\u6807 \u70b9\u51fb\u8ba4\u8bc1\u6309\u94ae \u5b9e\u73b0\u601d\u8def # \u9700\u8981\u8986\u76d6\u63d2\u4ef6\u57fa\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.extrnal_idp.ExternalIdpExtension \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0: # get_img_url get_authorize_url get_ext_token_by_code get_user_info_by_ext_token get_arkid_user \u4ee3\u7801 # extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension ( ExternalIdpExtension ) # Source code in extension_root/com_longgui_external_idp_github/__init__.py class ExternalIdpGithubExtension ( ExternalIdpExtension ): def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema ) def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ] def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save () def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" ) bind_arkid_user ( self , ext_id , user , data ) # Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required user arkid.core.models.User \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 required Source code in extension_root/com_longgui_external_idp_github/__init__.py def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save () get_arkid_user ( self , ext_id ) # Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description arkid.core.models.User \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None get_auth_code_from_request ( self , request ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HTTPRequest \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description str \u6388\u6743\u7801 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code get_authorize_url ( self , config , callback_url , next_url ) # Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required redirect_uri str \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 required Returns: Type Description str \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url get_ext_token ( self , config , code ) # Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required Returns: Type Description str \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ] get_ext_user_info ( self , config , code , token ) # Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required token str Github\u8fd4\u56de\u7684access_token required Returns: Type Description tuple \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response get_img_and_redirect_url ( self , config ) # \u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required Returns: Type Description tuple \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" ) get_img_url ( self ) # \u8fd4\u56deGithub\u7684\u56fe\u6807URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_external_idp_github/__init__.py def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema )","title":"Github \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#github","text":"","title":"Github \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#_1","text":"\u914d\u7f6eGithub\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Github\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Github\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#github_1","text":"\u6253\u5f00\u521b\u5efaGithub\u5f00\u53d1\u8005\u8bbe\u7f6e\u9875\u9762 \u70b9\u51fb\u521b\u5efa\uff0c\u586b\u5199\u8868\u5355 \u751f\u6210Client Secret \u4fdd\u5b58Client ID\u548cClient Secret \u540d\u79f0\uff0c\u4e3b\u9875URL\u548c\u56de\u8c03URL\u53ef\u4ee5\u968f\u610f\u586b\u5199\uff0c\u56de\u8c03URL\u540e\u9762\u6b65\u9aa4\u4e2d\u4f1a\u66f4\u6539\u6210ArkID\u81ea\u52a8\u751f\u6210\u7684URL\u3002","title":"\u521b\u5efaGithub\u5e94\u7528"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#githuburl","text":"\u91cd\u65b0\u8bbe\u7f6eGithub\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762Github\u56fe\u6807 \u70b9\u51fb\u8ba4\u8bc1\u6309\u94ae","title":"\u66f4\u65b0Github\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#_2","text":"\u9700\u8981\u8986\u76d6\u63d2\u4ef6\u57fa\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.extrnal_idp.ExternalIdpExtension","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#_3","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#_4","text":"get_img_url get_authorize_url get_ext_token_by_code get_user_info_by_ext_token get_arkid_user","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0:"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#_5","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension","text":"Source code in extension_root/com_longgui_external_idp_github/__init__.py class ExternalIdpGithubExtension ( ExternalIdpExtension ): def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema ) def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ] def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save () def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" )","title":"ExternalIdpGithubExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.bind_arkid_user","text":"Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required user arkid.core.models.User \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 required Source code in extension_root/com_longgui_external_idp_github/__init__.py def bind_arkid_user ( self , ext_id , user , data ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 user (arkid.core.models.User): \u7528\u4e8e\u7ed1\u5b9a\u7684ArkID\u7528\u6237 data (dict) request\u6570\u636e \"\"\" user . github_user_id = ext_id user . github_nickname = data . get ( 'ext_name' , '' ) user . github_avatar = data . get ( 'ext_icon' , '' ) user . save ()","title":"bind_arkid_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_arkid_user","text":"Parameters: Name Type Description Default ext_id str \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description arkid.core.models.User \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_arkid_user ( self , ext_id ): \"\"\" Args: ext_id (str): \u4eceGithub\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u83b7\u53d6\u7684\u7528\u6237\u6807\u8bc6 Returns: arkid.core.models.User: \u8fd4\u56deext_id\u7ed1\u5b9a\u7684ArkID\u7528\u6237 \"\"\" github_user = GithubUser . valid_objects . filter ( github_user_id = ext_id ) . first () if github_user : return github_user . target else : return None","title":"get_arkid_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_auth_code_from_request","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HTTPRequest \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u8fd4\u56de\u7684\u7528\u6237\u6807\u8bc6 required Returns: Type Description str \u6388\u6743\u7801 Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_auth_code_from_request ( self , request ): code = request . GET . get ( \"code\" , '' ) return code","title":"get_auth_code_from_request()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_authorize_url","text":"Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required redirect_uri str \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 required Returns: Type Description str \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_authorize_url ( self , config , callback_url , next_url ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e redirect_uri (str): \u5728ArkID\u4e2d\u521b\u5efaGithub\u767b\u5f55\u914d\u7f6e\u540e\u8fd4\u56de\u7684\u56de\u8c03\u5730\u5740 Returns: str: \u8fd4\u56de\u7528\u4e8e\u5411Github\u53d1\u8d77\u8ba4\u8bc1\u7684URL \"\"\" redirect_uri = \" {}{} \" . format ( callback_url , next_url ) redirect_uri = quote ( redirect_uri ) url = \" {} ?client_id= {} &redirect_uri= {} \" . format ( AUTHORIZE_URL , config . config . get ( \"client_id\" ), redirect_uri , ) return url","title":"get_authorize_url()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_ext_token","text":"Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required Returns: Type Description str \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_token ( self , config , code ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 Returns: str: \u8fd4\u56deGithub\u8fd4\u56de\u7684access_token \"\"\" response = requests . post ( GET_TOKEN_URL , params = { \"code\" : code , \"client_id\" : config . config . get ( \"client_id\" ), \"client_secret\" : config . config . get ( \"client_secret\" ), \"grant_type\" : \"authorization_code\" , }, ) . __getattribute__ ( \"_content\" ) result = dict ( [( k , v [ 0 ]) for k , v in parse_qs ( response . decode ()) . items ()] ) # \u5c06\u54cd\u5e94\u4fe1\u606f\u8f6c\u6362\u4e3a\u5b57\u5178 return result [ \"access_token\" ]","title":"get_ext_token()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_ext_user_info","text":"Parameters: Name Type Description Default config arkid.core.extension.TenantExtensionConfig \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e required code str Github\u8fd4\u56de\u7684\u6388\u6743\u7801 required token str Github\u8fd4\u56de\u7684access_token required Returns: Type Description tuple \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_ext_user_info ( self , config , code , token ): \"\"\" Args: config (arkid.core.extension.TenantExtensionConfig): \u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e code (str): Github\u8fd4\u56de\u7684\u6388\u6743\u7801 token (str): Github\u8fd4\u56de\u7684access_token Returns: tuple: \u8fd4\u56deGithub\u4e2d\u7528\u6237\u4fe1\u606f\u4e2d\u7684id\uff0c login\uff0cavatar_url\u548c\u6240\u6709\u7528\u6237\u4fe1\u606f \"\"\" headers = { \"Authorization\" : \"token \" + token } response = requests . get ( GET_USERINFO_URL , params = { \"access_token\" : token }, headers = headers , ) . json () return response [ \"id\" ], response [ \"login\" ], response [ \"avatar_url\" ], response","title":"get_ext_user_info()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_img_and_redirect_url","text":"\u8fd4\u56de\u524d\u7aef\u6e32\u67d3\u7b2c\u4e09\u65b9\u767b\u5f55\u7684\u6309\u94ae \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default config arkid.extension.models.TenantExtensionConfig \u7b2c\u4e09\u65b9\u8ba4\u8bc1\u63d0\u4f9b\u7684Client_ID, required Returns: Type Description tuple \u8fd4\u56de\u56fe\u7247url\u548c\u8df3\u8f6c\u5730\u5740('image_url', 'redirect_url') Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_and_redirect_url ( self , config ): return config . config . get ( \"img_url\" , \"\" ), config . config . get ( \"login_url\" , \"\" )","title":"get_img_and_redirect_url()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.get_img_url","text":"\u8fd4\u56deGithub\u7684\u56fe\u6807URL Source code in extension_root/com_longgui_external_idp_github/__init__.py def get_img_url ( self ): \"\"\" \u8fd4\u56deGithub\u7684\u56fe\u6807URL \"\"\" return IMG_URL","title":"get_img_url()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_external_idp_github/#extension_root.com_longgui_external_idp_github.ExternalIdpGithubExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_external_idp_github/__init__.py def load ( self ): super () . load () self . register_extend_field ( GithubUser , \"github_user_id\" ) self . register_extend_field ( GithubUser , \"github_nickname\" ) self . register_extend_field ( GithubUser , \"github_avatar\" ) self . register_external_idp_schema ( \"github\" , GithubConfigSchema )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/","text":"\u6e90\u7801 # extension_root.com_longgui_impower_rule.ImpowerRuleExtension ( ImpowerRuleBaseExtension ) # Source code in extension_root/com_longgui_impower_rule/__init__.py class ImpowerRuleExtension ( ImpowerRuleBaseExtension ): def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' ) def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page ) def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids get_auth_result ( self , event , ** kwargs ) # \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c Source code in extension_root/com_longgui_impower_rule/__init__.py def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_impower_rule/__init__.py def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' ) load_front_page ( self ) # \u6ce8\u518c\u524d\u7aef\u9875\u9762 Source code in extension_root/com_longgui_impower_rule/__init__.py def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page )","title":"\u6e90\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/#_1","text":"","title":"\u6e90\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension","text":"Source code in extension_root/com_longgui_impower_rule/__init__.py class ImpowerRuleExtension ( ImpowerRuleBaseExtension ): def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' ) def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page ) def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids","title":"ImpowerRuleExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension.get_auth_result","text":"\u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c Source code in extension_root/com_longgui_impower_rule/__init__.py def get_auth_result ( self , event , ** kwargs ): ''' \u83b7\u53d6\u6743\u9650\u9274\u5b9a\u7ed3\u679c ''' data = event . data tenant = event . tenant user = data . get ( 'user' ) config = data . get ( 'config' ) # \u5904\u7406\u6388\u6743\u903b\u8f91 permission_info = {} # \u53d6\u5f97\u4e86\u6240\u6709\u914d\u7f6e config_info = config . config config_matchfield = config_info . get ( 'matchfield' ) config_matchsymbol = config_info . get ( 'matchsymbol' ) config_matchvalue = config_info . get ( 'matchvalue' ) config_app = config_info . get ( 'app' ) config_app_id = config_app . get ( 'id' ) config_permissions = config_info . get ( 'permissions' ) # \u7528\u6237\u6269\u5c55\u5b57\u6bb5\u7528\u4e8e\u7b5b\u9009 user = User . expand_objects . filter ( id = user . id ) . first () # \u9009\u62e9\u7684\u5b57\u6bb5\u503c select_value = user . get ( config_matchfield . get ( 'id' )) # \u53d6\u5f97\u8fd4\u56de\u503c sort_ids = [] if config_matchsymbol == '\u7b49\u4e8e' and config_matchvalue == select_value : for config_permission in config_permissions : sort_ids . append ( config_permission . get ( 'sort_id' )) return sort_ids","title":"get_auth_result()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_impower_rule/__init__.py def load ( self ): super () . load () # \u6ce8\u518c\u524d\u7aef\u9875\u9762 self . load_front_page () # \u6ce8\u518cschema self . register_impower_rule_schema ( ImpowerRuleCreateIn , 'DefaultImpowerRule' )","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/#extension_root.com_longgui_impower_rule.ImpowerRuleExtension.load_front_page","text":"\u6ce8\u518c\u524d\u7aef\u9875\u9762 Source code in extension_root/com_longgui_impower_rule/__init__.py def load_front_page ( self ): ''' \u6ce8\u518c\u524d\u7aef\u9875\u9762 ''' self . register_front_pages ( user_field_page ) self . register_front_pages ( app_page ) self . register_front_pages ( app_permission_page )","title":"load_front_page()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/DefaultImpowerRule/","text":"DefaultImpowerRule # \u8fd9\u662f\u57fa\u4e8e\u7528\u6237\u5b57\u6bb5\u7684\u6388\u6743\u89c4\u5219 \u6dfb\u52a0\u9ed8\u8ba4\u7684\u6388\u6743\u89c4\u5219 # \u6253\u5f00\u6388\u6743\u89c4\u5219\u5217\u8868 \u65b0\u5efa\u6388\u6743\u89c4\u5219 \u67e5\u770b\u6388\u6743\u89c4\u5219 \u5220\u9664\u6388\u6743\u89c4\u5219","title":"DefaultImpowerRule"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/DefaultImpowerRule/#defaultimpowerrule","text":"\u8fd9\u662f\u57fa\u4e8e\u7528\u6237\u5b57\u6bb5\u7684\u6388\u6743\u89c4\u5219","title":"DefaultImpowerRule"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_impower_rule/DefaultImpowerRule/#_1","text":"\u6253\u5f00\u6388\u6743\u89c4\u5219\u5217\u8868 \u65b0\u5efa\u6388\u6743\u89c4\u5219 \u67e5\u770b\u6388\u6743\u89c4\u5219 \u5220\u9664\u6388\u6743\u89c4\u5219","title":"\u6dfb\u52a0\u9ed8\u8ba4\u7684\u6388\u6743\u89c4\u5219"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/","text":"\u591a\u8bed\u8a00\u5305\u63d2\u4ef6\uff1a\u7b80\u4f53\u4e2d\u6587 # \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u8bed\u8a00\u5305\u6570\u636e\u66f4\u65b0 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u4e2d\u6587\u8bed\u8a00\u5305\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7cfb\u7edf\u63d0\u4f9b\u8bed\u8a00\u5305\u6570\u636e\u5728\u7ebf\u66f4\u65b0\u80fd\u529b\uff0c\u4f18\u5148\u7ea7\u4e3a \u7528\u6237\u66f4\u65b0\u8bed\u8a00\u5305\u6570\u636e > \u8bed\u8a00\u5305\u63d2\u4ef6\u6570\u636e > \u7cfb\u7edf\u9ed8\u8ba4\u8bed\u8a00\u7ffb\u8bd1 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u5e73\u53f0\u7ba1\u7406\u3011->\u3010\u8bed\u8a00\u5305\u7ba1\u7406\u3011\uff0c\u8fdb\u5165\u8bed\u8a00\u5305\u5217\u8868\u9875\u9762 \u70b9\u51fb\u8bed\u8a00\u5305\u884c\u53f3\u4fa7\u7684\u7f16\u8f91\u6309\u94ae\uff0c\u8fdb\u5165\u8bed\u8a00\u5305\u6570\u636e\u8be6\u60c5\u9875\u9762 \u70b9\u51fb\u53f3\u4e0a\u89d2\u65b0\u589e\u6309\u94ae\uff0c\u8fdb\u5165\u65b0\u589e\u7ffb\u8bd1\u9875\u9762\uff0c\u6b64\u5904\u539f\u8bcd\u53e5\u662f\u6307\u7cfb\u7edf\u4e2d\u5f85\u7ffb\u8bd1\u7684\u8bcd\u53e5\uff0c\u8bd1\u8bcd\u53e5\u5219\u4e3a\u7ffb\u8bd1\u540e\u7684\u8bcd\u53e5 \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # language_type language_data \u4ee3\u7801 # extension_root.com_longgui_language_zh.TranslationZhExtension ( LanguageExtension ) # Source code in extension_root/com_longgui_language_zh/__init__.py class TranslationZhExtension ( LanguageExtension ): def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" } language_data ( self ) # \u7ffb\u8bd1\u6570\u636e Returns: Type Description dict \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 Source code in extension_root/com_longgui_language_zh/__init__.py def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" } language_type ( self ) # \u8bed\u8a00\u7c7b\u578b Returns: Type Description str \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 Source code in extension_root/com_longgui_language_zh/__init__.py def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" )","title":"\u591a\u8bed\u8a00\u5305\u63d2\u4ef6\uff1a\u7b80\u4f53\u4e2d\u6587"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#_1","text":"","title":"\u591a\u8bed\u8a00\u5305\u63d2\u4ef6\uff1a\u7b80\u4f53\u4e2d\u6587"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#_2","text":"\u63d2\u4ef6\u79df\u8d41 \u8bed\u8a00\u5305\u6570\u636e\u66f4\u65b0 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u4e2d\u6587\u8bed\u8a00\u5305\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7cfb\u7edf\u63d0\u4f9b\u8bed\u8a00\u5305\u6570\u636e\u5728\u7ebf\u66f4\u65b0\u80fd\u529b\uff0c\u4f18\u5148\u7ea7\u4e3a \u7528\u6237\u66f4\u65b0\u8bed\u8a00\u5305\u6570\u636e > \u8bed\u8a00\u5305\u63d2\u4ef6\u6570\u636e > \u7cfb\u7edf\u9ed8\u8ba4\u8bed\u8a00\u7ffb\u8bd1 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u5e73\u53f0\u7ba1\u7406\u3011->\u3010\u8bed\u8a00\u5305\u7ba1\u7406\u3011\uff0c\u8fdb\u5165\u8bed\u8a00\u5305\u5217\u8868\u9875\u9762 \u70b9\u51fb\u8bed\u8a00\u5305\u884c\u53f3\u4fa7\u7684\u7f16\u8f91\u6309\u94ae\uff0c\u8fdb\u5165\u8bed\u8a00\u5305\u6570\u636e\u8be6\u60c5\u9875\u9762 \u70b9\u51fb\u53f3\u4e0a\u89d2\u65b0\u589e\u6309\u94ae\uff0c\u8fdb\u5165\u65b0\u589e\u7ffb\u8bd1\u9875\u9762\uff0c\u6b64\u5904\u539f\u8bcd\u53e5\u662f\u6307\u7cfb\u7edf\u4e2d\u5f85\u7ffb\u8bd1\u7684\u8bcd\u53e5\uff0c\u8bd1\u8bcd\u53e5\u5219\u4e3a\u7ffb\u8bd1\u540e\u7684\u8bcd\u53e5","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#_3","text":"language_type language_data","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#_4","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#extension_root.com_longgui_language_zh.TranslationZhExtension","text":"Source code in extension_root/com_longgui_language_zh/__init__.py class TranslationZhExtension ( LanguageExtension ): def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" ) def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" }","title":"TranslationZhExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#extension_root.com_longgui_language_zh.TranslationZhExtension.language_data","text":"\u7ffb\u8bd1\u6570\u636e Returns: Type Description dict \u7ffb\u8bd1\u6570\u636e\u5b57\u5178 Source code in extension_root/com_longgui_language_zh/__init__.py def language_data ( self ) -> dict : return { \"data\" : \"\u6570\u636e\" }","title":"language_data()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_language_zh/#extension_root.com_longgui_language_zh.TranslationZhExtension.language_type","text":"\u8bed\u8a00\u7c7b\u578b Returns: Type Description str \u8bed\u8a00\u7c7b\u578b\u540d\u79f0 \u9ed8\u8ba4\u4e3a\u7b80\u4f53\u4e2d\u6587 Source code in extension_root/com_longgui_language_zh/__init__.py def language_type ( self ) -> str : return _ ( \"\u7b80\u4f53\u4e2d\u6587\" )","title":"language_type()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/","text":"ArkID \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # Server\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6SCIM\u63a5\u53e3\u83b7\u53d6ArkID\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 Client\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6SCIM Server\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 \u521b\u5efaArkID \u540c\u6b65Server # \u6253\u5f00 \u8eab\u4efd\u8ba4\u8bc1\u6e90->SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762\uff0c \u70b9\u51fb\u521b\u5efa \u914d\u7f6e\u8868\u5355\u53c2\u6570 \u521b\u5efaArkID \u540c\u6b65Client # \u6253\u5f00 \u8eab\u4efd\u8ba4\u8bc1\u6e90->SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762 \u914d\u7f6e\u8868\u5355\u53c2\u6570 \u70b9\u51fb\u521b\u5efa \u4ee5\u4e0b\u914d\u7f6e\u8868\u793a\u5b9a\u65f6\u540c\u6b65\u4efb\u52a1\u6bcf10\u5206\u949f\u8fd0\u884c\u4e00\u6b21 \u5b9e\u73b0\u601d\u8def # \u9700\u8981\u8986\u76d6\u63d2\u4ef6\u57fa\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.scim_sync.ScimSyncExtension \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0: # Server\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5 # query_users query_groups Client\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5 # sync_groups sync_users \u4ee3\u7801 # extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension ( ScimSyncExtension ) # Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py class ScimSyncArkIDExtension ( ScimSyncExtension ): def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load () def _get_arkid_user_attrs ( self , user ): active = user . get ( \"active\" ) if active is None : active = True return { \"username\" : user . get ( \"userName\" , \"\" ), \"is_active\" : active , } def _get_arkid_user ( self , scim_user , tenant ): scim_external_id = scim_user [ \"id\" ] username = scim_user [ \"userName\" ] arkid_user_attrs = self . _get_arkid_user_attrs ( scim_user ) user_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant , \"username\" : username , } arkid_user , _ = User . valid_objects . update_or_create ( defaults = arkid_user_attrs , ** user_lookup ) # \u66f4\u65b0arkid_user\u6240\u5c5e\u7684group arkid_user . user_set . clear () for scim_group in scim_user . get ( \"groups\" , []): scim_group_id = scim_group . get ( \"value\" ) arkid_group = self . scim_arkid_group_map . get ( scim_group_id ) if arkid_group : arkid_user . user_set . add ( arkid_group ) arkid_user . save () return arkid_user def _get_arkid_group ( self , group , scim_arkid_map , tenant ): scim_external_id = group [ \"id\" ] if \"id\" in group else group [ \"value\" ] if scim_external_id not in scim_arkid_map : group_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant } arkid_group , _ = UserGroup . valid_objects . update_or_create ( ** group_lookup ) scim_arkid_map [ scim_external_id ] = arkid_group return arkid_group else : return scim_arkid_map [ scim_external_id ] def _sync_group_attr ( self , arkid_group , scim_group ): arkid_group . name = scim_group . get ( \"displayName\" ) arkid_group . save () def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete () def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete () def _get_scim_user ( self , arkid_user ): attr_map = { \"id\" : \"id\" , \"username\" : \"userName\" , \"is_active\" : \"active\" } scim_user = Core2EnterpriseUser ( userName = '' , groups = []) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_user , arkid_attr ) scim_path = Path . create ( scim_attr ) if ( scim_path . schema_identifier and scim_path . schema_identifier == SchemaIdentifiers . Core2EnterpriseUser ): compose_enterprise_extension ( scim_user , scim_path , value ) else : compose_core2_user ( scim_user , scim_path , value ) # \u751f\u6210\u7528\u6237\u6240\u5728\u7684\u7ec4 parent_groups = arkid_user . user_set . filter ( is_del = 0 ) for grp in parent_groups : scim_group = ScimUserGroup () scim_group . value = grp . id scim_group . display = grp . name scim_user . groups . append ( scim_group ) return scim_user def _get_scim_group ( self , arkid_group ): members = UserGroup . valid_objects . filter ( parent = arkid_group ) attr_map = { \"id\" : \"id\" , \"name\" : \"displayName\" } scim_group = Core2Group ( displayName = '' ) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_group , arkid_attr ) scim_path = Path . create ( scim_attr ) compose_core2_group ( scim_group , scim_path , value ) for item in members : member = Member () member . value = item . id scim_group . members . append ( member ) return scim_group def _get_all_scim_users ( self , tenant ): scim_users = [] arkid_users = User . valid_objects . filter ( tenant = tenant ) for arkid_user in arkid_users : scim_user = self . _get_scim_user ( arkid_user ) scim_users . append ( scim_user ) return scim_users def _get_all_scim_groups ( self , tenant ): scim_groups = [] arkid_groups = UserGroup . valid_objects . filter ( tenant = tenant ) for arkid_group in arkid_groups : scim_group = self . _get_scim_group ( arkid_group ) scim_groups . append ( scim_group ) return scim_groups def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException () def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException () create_group ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () create_user ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () delete_group ( self , request , resource_identifier , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7ec4\u7ec7ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () delete_user ( self , request , resource_identifier , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7528\u6237ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load () query_groups ( self , request , parameters , correlation_identifier ) # \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2Group] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups query_users ( self , request , parameters , correlation_identifier ) # \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2EnterpriseUser] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users replace_group ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () replace_user ( self , request , resource , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () retrieve_group ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException () retrieve_user ( self , request , parameters , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException () sync_groups ( self , groups , config ) # \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Parameters: Name Type Description Default groups List SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete () sync_users ( self , users , config ) # \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Parameters: Name Type Description Default users List SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete () update_group ( self , request , patch , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException () update_user ( self , request , patch , correlation_identifier ) # \u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"ArkID \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#arkid","text":"","title":"ArkID \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#_1","text":"Server\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6SCIM\u63a5\u53e3\u83b7\u53d6ArkID\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 Client\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6SCIM Server\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#arkid-server","text":"\u6253\u5f00 \u8eab\u4efd\u8ba4\u8bc1\u6e90->SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762\uff0c \u70b9\u51fb\u521b\u5efa \u914d\u7f6e\u8868\u5355\u53c2\u6570","title":"\u521b\u5efaArkID \u540c\u6b65Server"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#arkid-client","text":"\u6253\u5f00 \u8eab\u4efd\u8ba4\u8bc1\u6e90->SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762 \u914d\u7f6e\u8868\u5355\u53c2\u6570 \u70b9\u51fb\u521b\u5efa \u4ee5\u4e0b\u914d\u7f6e\u8868\u793a\u5b9a\u65f6\u540c\u6b65\u4efb\u52a1\u6bcf10\u5206\u949f\u8fd0\u884c\u4e00\u6b21","title":"\u521b\u5efaArkID \u540c\u6b65Client"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#_2","text":"\u9700\u8981\u8986\u76d6\u63d2\u4ef6\u57fa\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u57fa\u7c7b\u89c1 arkid.core.extension.scim_sync.ScimSyncExtension","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#_3","text":"","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0:"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#server","text":"query_users query_groups","title":"Server\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#client","text":"sync_groups sync_users","title":"Client\u6a21\u5f0f\u7684\u62bd\u8c61\u65b9\u6cd5"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#_4","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension","text":"Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py class ScimSyncArkIDExtension ( ScimSyncExtension ): def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load () def _get_arkid_user_attrs ( self , user ): active = user . get ( \"active\" ) if active is None : active = True return { \"username\" : user . get ( \"userName\" , \"\" ), \"is_active\" : active , } def _get_arkid_user ( self , scim_user , tenant ): scim_external_id = scim_user [ \"id\" ] username = scim_user [ \"userName\" ] arkid_user_attrs = self . _get_arkid_user_attrs ( scim_user ) user_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant , \"username\" : username , } arkid_user , _ = User . valid_objects . update_or_create ( defaults = arkid_user_attrs , ** user_lookup ) # \u66f4\u65b0arkid_user\u6240\u5c5e\u7684group arkid_user . user_set . clear () for scim_group in scim_user . get ( \"groups\" , []): scim_group_id = scim_group . get ( \"value\" ) arkid_group = self . scim_arkid_group_map . get ( scim_group_id ) if arkid_group : arkid_user . user_set . add ( arkid_group ) arkid_user . save () return arkid_user def _get_arkid_group ( self , group , scim_arkid_map , tenant ): scim_external_id = group [ \"id\" ] if \"id\" in group else group [ \"value\" ] if scim_external_id not in scim_arkid_map : group_lookup = { \"scim_external_id\" : scim_external_id , \"tenant\" : tenant } arkid_group , _ = UserGroup . valid_objects . update_or_create ( ** group_lookup ) scim_arkid_map [ scim_external_id ] = arkid_group return arkid_group else : return scim_arkid_map [ scim_external_id ] def _sync_group_attr ( self , arkid_group , scim_group ): arkid_group . name = scim_group . get ( \"displayName\" ) arkid_group . save () def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete () def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete () def _get_scim_user ( self , arkid_user ): attr_map = { \"id\" : \"id\" , \"username\" : \"userName\" , \"is_active\" : \"active\" } scim_user = Core2EnterpriseUser ( userName = '' , groups = []) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_user , arkid_attr ) scim_path = Path . create ( scim_attr ) if ( scim_path . schema_identifier and scim_path . schema_identifier == SchemaIdentifiers . Core2EnterpriseUser ): compose_enterprise_extension ( scim_user , scim_path , value ) else : compose_core2_user ( scim_user , scim_path , value ) # \u751f\u6210\u7528\u6237\u6240\u5728\u7684\u7ec4 parent_groups = arkid_user . user_set . filter ( is_del = 0 ) for grp in parent_groups : scim_group = ScimUserGroup () scim_group . value = grp . id scim_group . display = grp . name scim_user . groups . append ( scim_group ) return scim_user def _get_scim_group ( self , arkid_group ): members = UserGroup . valid_objects . filter ( parent = arkid_group ) attr_map = { \"id\" : \"id\" , \"name\" : \"displayName\" } scim_group = Core2Group ( displayName = '' ) for arkid_attr , scim_attr in attr_map . items (): value = getattr ( arkid_group , arkid_attr ) scim_path = Path . create ( scim_attr ) compose_core2_group ( scim_group , scim_path , value ) for item in members : member = Member () member . value = item . id scim_group . members . append ( member ) return scim_group def _get_all_scim_users ( self , tenant ): scim_users = [] arkid_users = User . valid_objects . filter ( tenant = tenant ) for arkid_user in arkid_users : scim_user = self . _get_scim_user ( arkid_user ) scim_users . append ( scim_user ) return scim_users def _get_all_scim_groups ( self , tenant ): scim_groups = [] arkid_groups = UserGroup . valid_objects . filter ( tenant = tenant ) for arkid_group in arkid_groups : scim_group = self . _get_scim_group ( arkid_group ) scim_groups . append ( scim_group ) return scim_groups def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException () def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException () def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException () def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException () def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException () def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"ScimSyncArkIDExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.create_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_group ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"create_group()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.create_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def create_user ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"create_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.delete_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7ec4\u7ec7ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_group ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException ()","title":"delete_group()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.delete_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource_identifier str \u7528\u6237ID required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def delete_user ( self , request , resource_identifier , correlation_identifier ): raise NotImplementedException ()","title":"delete_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def load ( self ): self . register_scim_sync_schema ( 'ArkID' , ClientConfig , ServerConfig ) super () . load ()","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.query_groups","text":"\u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2Group] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_groups ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7ec4\u7ec7\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2Group\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2Group]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7ec4\u7ec7\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : groups = self . _get_all_scim_groups ( request . tenant ) return groups","title":"query_groups()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.query_users","text":"\u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.query_parameters.QueryParameters Query\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Returns: Type Description List[Core2EnterpriseUser] \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def query_users ( self , request , parameters , correlation_identifier ): \"\"\" \u5c06ArkID\u4e2d\u7684\u7528\u6237\u8f6c\u6362\u6210scim_server\u4e2d\u7684\u7b26\u5408SCIM\u6807\u51c6\u7684Core2EnterpriseUser\u5bf9\u8c61 Args: request (HttpRequest): Django \u8bf7\u6c42 parameters (scim_server.protocol.query_parameters.QueryParameters): Query\u8bf7\u6c42\u5bf9\u8c61 correlation_identifier (str): \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 Returns: List[Core2EnterpriseUser]: \u8fd4\u56descim_server\u6a21\u5757\u4e2d\u7684\u6807\u51c6\u7528\u6237\u5bf9\u8c61\u5217\u8868 \"\"\" if not parameters . alternate_filters : all_users = self . _get_all_scim_users ( request . tenant ) return all_users","title":"query_users()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.replace_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_group.Core2Group SCIM\u7ec4\u7ec7\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_group ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"replace_group()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.replace_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required resource scim_server.schemas.core2_enterprise_user.Core2EnterpriseUser SCIM\u7528\u6237\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def replace_user ( self , request , resource , correlation_identifier ): raise NotImplementedException ()","title":"replace_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.retrieve_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_group ( self , request , parameters , correlation_identifier ): raise NotImplementedException ()","title":"retrieve_group()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.retrieve_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required parameters scim_server.protocol.resource_retrieval_parameters.ResourceRetrievalParamters Retrieve\u8bf7\u6c42\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def retrieve_user ( self , request , parameters , correlation_identifier ): raise NotImplementedException ()","title":"retrieve_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.sync_groups","text":"\u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Parameters: Name Type Description Default groups List SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_groups ( self , groups , config ): \"\"\" \u904d\u5386groups\u4e2d\u7684SCIM \u7ec4\u7ec7\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7ec4\u7ec7\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d \u540c\u65f6\u904d\u5386\u6bcf\u4e2aSCIM \u7ec4\u7ec7\u4e2d\u7684members\uff0c\u540c\u6837\u7684\u65b9\u5f0f\u5728ArkID\u4e2d\u521b\u5efa\u6216\u66f4\u65b0\u7ec4\u7ec7\uff0c\u5e76\u4e14\u7ef4\u62a4\u7ec4\u7ec7\u4e4b\u95f4\u7684\u7236\u5b50\u5173\u7cfb\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7ec4\u7ec7 Args: groups (List): SCIM Server\u8fd4\u56de\u7684\u7ec4\u7ec7\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create groups ######\" ) tenant = config . tenant self . scim_arkid_group_map = {} for group in groups : parent_group = self . _get_arkid_group ( group , self . scim_arkid_group_map , tenant ) self . _sync_group_attr ( parent_group , group ) for member in group . get ( \"members\" , []): sub_group = self . _get_arkid_group ( member , self . scim_arkid_group_map , tenant ) sub_group . parent = parent_group logger . info ( \"###### delete groups ######\" ) groups_need_delete = ( UserGroup . objects . filter ( tenant = config . tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = self . scim_arkid_group_map . keys ()) ) logger . info ( f \"******* groups to be deleted: { groups_need_delete } ********\" ) groups_need_delete . delete ()","title":"sync_groups()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.sync_users","text":"\u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Parameters: Name Type Description Default users List SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 required config arkid.extension.models.TenantExtensionConfig Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def sync_users ( self , users , config ): \"\"\" \u904d\u5386users\u4e2d\u7684SCIM \u7528\u6237\u8bb0\u5f55\uff0c\u9010\u4e00\u548cArkID\u4e2d\u7684\u7528\u6237\u5339\u914d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5339\u914d\u7684\u5c31\u521b\u5efa\uff0c\u5b58\u5728\u5219\u66f4\u65b0\uff0c \u6700\u540e\u5220\u9664\u4ee5\u524d\u540c\u6b65\u5230ArkID\u4f46\u4e0d\u5728\u672c\u6b21\u540c\u6b65\u6570\u636e\u4e2d\u7684\u7528\u6237 Args: users (List): SCIM Server\u8fd4\u56de\u7684\u7528\u6237\u5217\u8868 config (arkid.extension.models.TenantExtensionConfig): Client\u6a21\u5f0f\u521b\u5efa\u7684\u914d\u7f6e \"\"\" logger . info ( \"###### update&create users ######\" ) tenant = config . tenant scim_user_ids = [] for user in users : scim_user_ids . append ( user [ \"id\" ]) try : arkid_user = self . _get_arkid_user ( user , tenant ) except IntegrityError as e : logger . error ( e ) logger . error ( f \"sync user failed: { user } \" ) logger . info ( \"###### delete users ######\" ) users_need_delete = ( User . objects . filter ( tenant = tenant ) . exclude ( scim_external_id = None ) . exclude ( scim_external_id__in = scim_user_ids ) ) logger . info ( f \"***** users to be deleted: { users_need_delete } ******\" ) users_need_delete . delete ()","title":"sync_users()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.update_group","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_group ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"update_group()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_arkid/#extension_root.com_longgui_scim_sync_arkid.ScimSyncArkIDExtension.update_user","text":"\u62bd\u8c61\u65b9\u6cd5 Parameters: Name Type Description Default request HttpRequest Django \u8bf7\u6c42 required patch scim_server.service.patch.Patch Patch\u53c2\u6570\u5bf9\u8c61 required correlation_identifier str \u8bf7\u6c42\u552f\u4e00\u6807\u8bc6 required Source code in extension_root/com_longgui_scim_sync_arkid/__init__.py def update_user ( self , request , patch , correlation_identifier ): raise NotImplementedException ()","title":"update_user()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/","text":"\u77ed\u4fe1\u63d2\u4ef6\uff1a\u963f\u91cc\u4e91\u77ed\u4fe1 # \u529f\u80fd\u4ecb\u7ecd # \u4e3a\u5e73\u53f0\u63d0\u4f9b\u77ed\u4fe1\u670d\u52a1\u652f\u6301\uff0c\u77ed\u4fe1\u670d\u52a1\u5546\u4e3a\u963f\u91cc\u4e91\u77ed\u4fe1\u3002 \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u63d2\u4ef6\u79df\u6237\u914d\u7f6e \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u79df\u8d41\u5b8c\u6210\u540e\uff0c\u8fdb\u5165\u5df2\u79df\u8d41\u5217\u8868\uff0c\u627e\u5230\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e\uff0c\u914d\u7f6e\u76f8\u5173\u6570\u636e * \u57df\u540d\u9ed8\u8ba4\u4e3adysmsapi.aliyuncs.com \u79df\u6237\u914d\u7f6e\u5b8c\u6210\u540e\u56de\u5230\u5df2\u79df\u8d41\u9875\u9762\uff0c\u5728\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u5361\u7247\u4e0a\u70b9\u51fb\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u5728\u5f39\u51fa\u7a97\u53e3\u4e2d\u70b9\u51fb\u65b0\u5efa\uff0c\u8f93\u5165\u5bf9\u5e94\u7684\u77ed\u4fe1\u6a21\u677f\u914d\u7f6e\u5373\u53ef * \u6ce8\u610f\uff1a \u6a21\u677f\u53c2\u6570\u4e00\u9879\u4e2d\u5982\u4e0d\u586b\u5219\u9ed8\u8ba4\u4e3a[\"code\"]\uff0c\u9002\u7528\u4e8e\u77ed\u4fe1\u9a8c\u8bc1\u7801 \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # load send_sms \u4ee3\u7801 # extension_root.com_longgui_sms_aliyun.AliyunSMSExtension ( SmsExtension ) # Source code in extension_root/com_longgui_sms_aliyun/__init__.py class AliyunSMSExtension ( SmsExtension ): def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load () def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map () load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_sms_aliyun/__init__.py def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load () send_sms ( self , event , ** kwargs ) # \u53d1\u9001\u77ed\u4fe1 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_sms_aliyun/__init__.py def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map ()","title":"\u77ed\u4fe1\u63d2\u4ef6\uff1a\u963f\u91cc\u4e91\u77ed\u4fe1"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#_1","text":"","title":"\u77ed\u4fe1\u63d2\u4ef6\uff1a\u963f\u91cc\u4e91\u77ed\u4fe1"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#_2","text":"\u4e3a\u5e73\u53f0\u63d0\u4f9b\u77ed\u4fe1\u670d\u52a1\u652f\u6301\uff0c\u77ed\u4fe1\u670d\u52a1\u5546\u4e3a\u963f\u91cc\u4e91\u77ed\u4fe1\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#_3","text":"\u63d2\u4ef6\u79df\u8d41 \u63d2\u4ef6\u79df\u6237\u914d\u7f6e \u63d2\u4ef6\u8fd0\u884c\u65f6\u914d\u7f6e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u79df\u8d41\u5b8c\u6210\u540e\uff0c\u8fdb\u5165\u5df2\u79df\u8d41\u5217\u8868\uff0c\u627e\u5230\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e\uff0c\u914d\u7f6e\u76f8\u5173\u6570\u636e * \u57df\u540d\u9ed8\u8ba4\u4e3adysmsapi.aliyuncs.com \u79df\u6237\u914d\u7f6e\u5b8c\u6210\u540e\u56de\u5230\u5df2\u79df\u8d41\u9875\u9762\uff0c\u5728\u963f\u91cc\u4e91\u77ed\u4fe1\u63d2\u4ef6\u5361\u7247\u4e0a\u70b9\u51fb\u8fd0\u884c\u65f6\u914d\u7f6e\uff0c\u5728\u5f39\u51fa\u7a97\u53e3\u4e2d\u70b9\u51fb\u65b0\u5efa\uff0c\u8f93\u5165\u5bf9\u5e94\u7684\u77ed\u4fe1\u6a21\u677f\u914d\u7f6e\u5373\u53ef * \u6ce8\u610f\uff1a \u6a21\u677f\u53c2\u6570\u4e00\u9879\u4e2d\u5982\u4e0d\u586b\u5219\u9ed8\u8ba4\u4e3a[\"code\"]\uff0c\u9002\u7528\u4e8e\u77ed\u4fe1\u9a8c\u8bc1\u7801","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#_4","text":"load send_sms","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#_5","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#extension_root.com_longgui_sms_aliyun.AliyunSMSExtension","text":"Source code in extension_root/com_longgui_sms_aliyun/__init__.py class AliyunSMSExtension ( SmsExtension ): def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load () def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map ()","title":"AliyunSMSExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#extension_root.com_longgui_sms_aliyun.AliyunSMSExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_sms_aliyun/__init__.py def load ( self ): self . register_settings_schema ( SettingsSchema ) self . register_config_schema ( ConfigSchema ) super () . load ()","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_sms_aliyun/#extension_root.com_longgui_sms_aliyun.AliyunSMSExtension.send_sms","text":"\u53d1\u9001\u77ed\u4fe1 Parameters: Name Type Description Default event Event \u4e8b\u4ef6 required Source code in extension_root/com_longgui_sms_aliyun/__init__.py def send_sms ( self , event , ** kwargs ): tenant = event . tenant config_id = event . data . pop ( \"config_id\" ) mobile = event . data . pop ( \"mobile\" ) template_params = {} settings = self . get_settings ( tenant ) settings = SimpleNamespace ( ** settings . settings ) config = self . get_config_by_id ( config_id ) . config for key in config . get ( \"template_params\" ,[ \"code\" ]): template_params [ key ] = event . data . get ( key , \"\" ) template_params = json . dumps ( template_params ) config = SimpleNamespace ( ** config ) aliyun_config = models . Config ( # \u60a8\u7684AccessKey ID, access_key_id = settings . access_key_id , # \u60a8\u7684AccessKey Secret, access_key_secret = settings . access_key_secret , # \u5730\u57dfID region_id = settings . region_id or None , # \u8bbf\u95ee\u7684\u57df\u540d endpoint = settings . endpoint or None , ) client = Client ( aliyun_config ) send_sms_request = dysmsapi_20170525_models . SendSmsRequest ( phone_numbers = mobile , sign_name = config . sign_name , template_code = config . template_code , template_param = template_params , sms_up_extend_code = config . sms_up_extend_code or None , out_id = config . out_id or None , ) res = client . send_sms ( send_sms_request ) return res . body . to_map ()","title":"send_sms()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/","text":"\u9759\u6001\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\uff1a\u672c\u5730\u6587\u4ef6\u5b58\u50a8 # \u529f\u80fd\u4ecb\u7ecd # \u5b9e\u73b0\u9759\u6001\u6587\u4ef6\u7684\u672c\u5730\u5316\u5b58\u50a8\uff0c\u5b58\u50a8\u8def\u5f84\u9ed8\u8ba4\u4e3a/data \u6ce8\u610f\uff1a \u6b64\u4e3a\u5e73\u53f0\u63d2\u4ef6\uff0c\u9700\u8981\u5e73\u53f0\u7ba1\u7406\u5458\u6743\u9650\u8fdb\u884c\u914d\u7f6e \u914d\u7f6e\u6307\u5357 # \u63d2\u4ef6\u79df\u8d41 \u5e73\u53f0\u914d\u7f6e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u672c\u5730\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u5e73\u53f0\u7ba1\u7406\u3011->\u3010\u5e73\u53f0\u63d2\u4ef6\u3011, \u5728\u5df2\u5b89\u88c5\u9875\u9762\u627e\u5230\u672c\u5730\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u63d2\u4ef6\u914d\u7f6e\uff0c\u914d\u7f6e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 \u5b9e\u73b0\u601d\u8def # \u5f00\u53d1\u8005\u5728\u5f00\u53d1\u9759\u6001\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\u65f6\uff0c\u9700\u7ee7\u627fStorageExtension,\u5e76\u91cd\u8f7dsave_file\u548cresolve\u65b9\u6cd5\u5373\u53ef \u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0 # load save_file resolve read \u4ee3\u7801 # extension_root.com_longgui_storage_local.LocalStorageExtension ( StorageExtension ) # Source code in extension_root/com_longgui_storage_local/__init__.py class LocalStorageExtension ( StorageExtension ): def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load () def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk ) def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs get_file ( self , request , tenant_id , file_name ) # \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 Source code in extension_root/com_longgui_storage_local/__init__.py def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) load ( self ) # \u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_storage_local/__init__.py def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load () read ( self , tenant_id , file_url , ** kwargs ) # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e Parameters: Name Type Description Default tenant_id str \u79df\u6237ID required file_url str \u6587\u4ef6\u94fe\u63a5 required Returns: Type Description bytes \u6587\u4ef6\u6570\u636e Source code in extension_root/com_longgui_storage_local/__init__.py def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs resolve ( self , f_key , tenant , * args , ** kwargs ) # \u751f\u6210\u6587\u4ef6\u94fe\u63a5 Parameters: Name Type Description Default f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required tenant Tenant \u79df\u6237 required Source code in extension_root/com_longgui_storage_local/__init__.py def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' save_file ( self , file , f_key , response = None , * args , ** kwargs ) # \u4fdd\u5b58\u6587\u4ef6 Parameters: Name Type Description Default file File \u6587\u4ef6\u5bf9\u8c61 required f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required Source code in extension_root/com_longgui_storage_local/__init__.py def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk )","title":"\u9759\u6001\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\uff1a\u672c\u5730\u6587\u4ef6\u5b58\u50a8"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#_1","text":"","title":"\u9759\u6001\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\uff1a\u672c\u5730\u6587\u4ef6\u5b58\u50a8"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#_2","text":"\u5b9e\u73b0\u9759\u6001\u6587\u4ef6\u7684\u672c\u5730\u5316\u5b58\u50a8\uff0c\u5b58\u50a8\u8def\u5f84\u9ed8\u8ba4\u4e3a/data \u6ce8\u610f\uff1a \u6b64\u4e3a\u5e73\u53f0\u63d2\u4ef6\uff0c\u9700\u8981\u5e73\u53f0\u7ba1\u7406\u5458\u6743\u9650\u8fdb\u884c\u914d\u7f6e","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#_3","text":"\u63d2\u4ef6\u79df\u8d41 \u5e73\u53f0\u914d\u7f6e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u672c\u5730\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u5e73\u53f0\u7ba1\u7406\u3011->\u3010\u5e73\u53f0\u63d2\u4ef6\u3011, \u5728\u5df2\u5b89\u88c5\u9875\u9762\u627e\u5230\u672c\u5730\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u63d2\u4ef6\u914d\u7f6e\uff0c\u914d\u7f6e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#_4","text":"\u5f00\u53d1\u8005\u5728\u5f00\u53d1\u9759\u6001\u6587\u4ef6\u5b58\u50a8\u63d2\u4ef6\u65f6\uff0c\u9700\u7ee7\u627fStorageExtension,\u5e76\u91cd\u8f7dsave_file\u548cresolve\u65b9\u6cd5\u5373\u53ef","title":"\u5b9e\u73b0\u601d\u8def"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#_5","text":"load save_file resolve read","title":"\u62bd\u8c61\u65b9\u6cd5\u5b9e\u73b0"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#_6","text":"","title":"\u4ee3\u7801"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#extension_root.com_longgui_storage_local.LocalStorageExtension","text":"Source code in extension_root/com_longgui_storage_local/__init__.py class LocalStorageExtension ( StorageExtension ): def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load () def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk ) def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } ' def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) ) def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs","title":"LocalStorageExtension"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#extension_root.com_longgui_storage_local.LocalStorageExtension.get_file","text":"\u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 Source code in extension_root/com_longgui_storage_local/__init__.py def get_file ( self , request , tenant_id : str , file_name : str ): \"\"\" \u672c\u5730\u5b58\u50a8\u63d2\u4ef6\u83b7\u53d6\u6587\u4ef6 \"\"\" extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name return FileResponse ( open ( file_path , 'rb' ) )","title":"get_file()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#extension_root.com_longgui_storage_local.LocalStorageExtension.load","text":"\u62bd\u8c61\u65b9\u6cd5\uff0c\u63d2\u4ef6\u52a0\u8f7d\u7684\u5165\u53e3\u65b9\u6cd5 Source code in extension_root/com_longgui_storage_local/__init__.py def load ( self ): self . register_profile_schema ( ProfileSchema ) self . register_api ( \"/localstorage/ {file_name} \" , 'GET' , self . get_file , tenant_path = True , auth = None ) super () . load ()","title":"load()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#extension_root.com_longgui_storage_local.LocalStorageExtension.read","text":"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Parameters: Name Type Description Default tenant_id str \u79df\u6237ID required file_url str \u6587\u4ef6\u94fe\u63a5 required Returns: Type Description bytes \u6587\u4ef6\u6570\u636e Source code in extension_root/com_longgui_storage_local/__init__.py def read ( self , tenant_id , file_url , ** kwargs ): \"\"\"\u8bfb\u53d6\u6587\u4ef6\u6570\u636e Args: tenant_id (str): \u79df\u6237ID file_url (str): \u6587\u4ef6\u94fe\u63a5 Returns: bytes: \u6587\u4ef6\u6570\u636e \"\"\" host = get_app_config () . get_frontend_host () useless_part = f ' { host } /api/v1/tenant/ { tenant_id } /com_longgui_storage_local/localstorage/' file_name = file_url . replace ( useless_part , \"\" ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) file_path = Path ( storage_path ) / file_name rs = None with open ( file_path , \"rb\" ) as f : rs = f . read () return rs","title":"read()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#extension_root.com_longgui_storage_local.LocalStorageExtension.resolve","text":"\u751f\u6210\u6587\u4ef6\u94fe\u63a5 Parameters: Name Type Description Default f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required tenant Tenant \u79df\u6237 required Source code in extension_root/com_longgui_storage_local/__init__.py def resolve ( self , f_key , tenant , * args , ** kwargs ): host = get_app_config () . get_frontend_host () return f ' { host } /api/v1/tenant/ { tenant . id } /com_longgui_storage_local/localstorage/ { f_key } '","title":"resolve()"},{"location":"%20%20%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6/com_longgui_storage_local/#extension_root.com_longgui_storage_local.LocalStorageExtension.save_file","text":"\u4fdd\u5b58\u6587\u4ef6 Parameters: Name Type Description Default file File \u6587\u4ef6\u5bf9\u8c61 required f_key str \u5b58\u50a8\u6587\u4ef6\u540d\u79f0 required Source code in extension_root/com_longgui_storage_local/__init__.py def save_file ( self , file , f_key , response = None , * args , ** kwargs ): print ( f_key ) extension = self . model storage_path = extension . profile . get ( 'storage_path' , '/data' ) p = Path ( storage_path ) / f_key if not p . parent . exists (): p . parent . mkdir ( parents = True ) with open ( p , 'wb' ) as fp : for chunk in file . chunks () if file else response : fp . write ( chunk )","title":"save_file()"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_cas_server/","text":"CasServer # CAS\u662fCentral Authentication Service\u7684\u7f29\u5199\uff0c\u4e2d\u592e\u8ba4\u8bc1\u670d\u52a1\u3002\u5f53\u7528\u6237\u8bbf\u95eeCAS\u8ba4\u8bc1\u670d\u52a1\u5668\uff0c\u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u3002CAS\u8ba4\u8bc1\u670d\u52a1\u4f1a\u68c0\u67e5\u7528\u6237\u662f\u5426\u767b\u5f55\u3002\u5982\u679c\u6ca1\u767b\u5f55\u5c31\u53bb\u767b\u5f55\uff0c\u5982\u679c\u5df2\u7ecf\u767b\u5f55\uff0cCAS\u4f1a\u53d1\u653e\u4e00\u4e2a\u4e00\u6b21\u6027\u77ed\u65f6\u95f4\u7684TGT\u7968\u636e\uff0c\u5e76\u91cd\u5b9a\u5411\u5230\u5f00\u53d1\u8005\u63d0\u4f9b\u7684service\u5730\u5740\u3002\u7136\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5b89\u5168\u8fde\u63a5\u8fde\u63a5CAS\uff0c\u5e76\u63d0\u4f9b\u81ea\u5df1\u7684\u670d\u52a1\u6807\u8bc6\u548c\u9a8c\u8bc1\u7968\u3002\u4e4b\u540eCAS\u7ed9\u51fa\u4e86\u5173\u4e8e\u7279\u5b9a\u7528\u6237\u7684\u8eab\u4efd\u4fe1\u606f \u6574\u4e2a\u8ba4\u8bc1\u8fc7\u7a0b\u5982\u56fe\u6240\u793a: graph LR A[\u5f00\u59cb] --> B[\u8bbf\u95ee\u767b\u5f55\u9875] --> C{\u662f\u5426\u767b\u5f55}--> |Yes| D[\u5e26\u4e0a\u7968\u636e\u8df3\u8f6c\u5230service\u5730\u5740]--> E[\u4f7f\u7528\u7968\u636e\u83b7\u53d6\u7528\u6237\u4fe1\u606f] --> F[\u7ed3\u675f]; C ---->|No| G[\u767b\u5f55!]; G --> |\u767b\u5f55\u6210\u529f| D; Cas\u8ba4\u8bc1 # \u521b\u5efa\u5e94\u7528 # \u6253\u5f00\u5e94\u7528\u5217\u8868 \u65b0\u5efaCas\u5e94\u7528 \u5728\u5217\u8868\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u9009\u62e9\u7c7b\u578b\u4e3aCas\u5e76\u786e\u8ba4 \u5728\u5217\u8868\u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u4fdd\u5b58\u767b\u5f55\u548c\u6821\u9a8c\u5730\u5740 \u4f7f\u7528 Cas \u5e94\u7528 # \u5c06\u767b\u5f55\u94fe\u63a5\u653e\u5728\u9700\u8981\u767b\u5f55\u7684\u7b2c\u4e09\u65b9\u9875\u9762 \u8fd9\u91cc\u9700\u8981\u8ba9\u7528\u6237\u901a\u8fc7\u94fe\u63a5\u8bbf\u95eearkid\u8fd9\u8fb9\u7684\u7edf\u4e00\u8ba4\u8bc1\u3002service\u53c2\u6570\u662farkid\u8ba4\u8bc1\u5b8c\u540e\u7684\u56de\u8c03\u5730\u5740\u3002 http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/app/e78f117b-1632-42c9-8e3c-ec4fd796c89e/cas/login/?service=http://www.baidu.com \u9875\u9762\u4f1a\u81ea\u52a8\u8df3\u5230\u8fdb\u884c\u767b\u5f55 http://localhost:9528/login?next=/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/app/e78f117b-1632-42c9-8e3c-ec4fd796c89e/cas/login/%3Fservice%3Dhttp%3A//www.baidu.com&tenant_id=4da114ce-e115-44a0-823b-d372114425d0 \u767b\u5f55\u6210\u529f\u540e\u4f1a\u53d6\u5f97\u4e00\u4e2a\u7968\u636e https://www.baidu.com/?ticket=ST-1658743424-pvotuhaInoW1UGQlIlD1eLU6tZoMppu6 \u901a\u8fc7\u6821\u9a8c\u5730\u5740\u83b7\u53d6\u7528\u6237\u4fe1\u606f \u4e00\u4e2a\u7968\u636e\u53ea\u80fd\u7528\u4e00\u6b21\uff0cservice\u8981\u548c\u524d\u9762\u767b\u5f55\u7684\u76f8\u540c\uff0c\u5982\u679c\u6210\u529f\u53ef\u4ee5\u83b7\u53d6\u5230\u7528\u6237\u4fe1\u606f \u5982\u679c\u4f60\u8bd5\u56fe\u7528\u5df2\u7ecf\u4f7f\u7528\u8fc7\u7684\u7968\u636e\u5c31\u4f1a\u8fd4\u56de \u9700\u8981\u6bcf\u6b21\u767b\u5f55\u5148\u62ff\u7968\u636e\u7136\u540e\u7528\u7968\u636e\u6362\u53d6\u7528\u6237\u4fe1\u606f","title":"CasServer"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_cas_server/#casserver","text":"CAS\u662fCentral Authentication Service\u7684\u7f29\u5199\uff0c\u4e2d\u592e\u8ba4\u8bc1\u670d\u52a1\u3002\u5f53\u7528\u6237\u8bbf\u95eeCAS\u8ba4\u8bc1\u670d\u52a1\u5668\uff0c\u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u3002CAS\u8ba4\u8bc1\u670d\u52a1\u4f1a\u68c0\u67e5\u7528\u6237\u662f\u5426\u767b\u5f55\u3002\u5982\u679c\u6ca1\u767b\u5f55\u5c31\u53bb\u767b\u5f55\uff0c\u5982\u679c\u5df2\u7ecf\u767b\u5f55\uff0cCAS\u4f1a\u53d1\u653e\u4e00\u4e2a\u4e00\u6b21\u6027\u77ed\u65f6\u95f4\u7684TGT\u7968\u636e\uff0c\u5e76\u91cd\u5b9a\u5411\u5230\u5f00\u53d1\u8005\u63d0\u4f9b\u7684service\u5730\u5740\u3002\u7136\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u5b89\u5168\u8fde\u63a5\u8fde\u63a5CAS\uff0c\u5e76\u63d0\u4f9b\u81ea\u5df1\u7684\u670d\u52a1\u6807\u8bc6\u548c\u9a8c\u8bc1\u7968\u3002\u4e4b\u540eCAS\u7ed9\u51fa\u4e86\u5173\u4e8e\u7279\u5b9a\u7528\u6237\u7684\u8eab\u4efd\u4fe1\u606f \u6574\u4e2a\u8ba4\u8bc1\u8fc7\u7a0b\u5982\u56fe\u6240\u793a: graph LR A[\u5f00\u59cb] --> B[\u8bbf\u95ee\u767b\u5f55\u9875] --> C{\u662f\u5426\u767b\u5f55}--> |Yes| D[\u5e26\u4e0a\u7968\u636e\u8df3\u8f6c\u5230service\u5730\u5740]--> E[\u4f7f\u7528\u7968\u636e\u83b7\u53d6\u7528\u6237\u4fe1\u606f] --> F[\u7ed3\u675f]; C ---->|No| G[\u767b\u5f55!]; G --> |\u767b\u5f55\u6210\u529f| D;","title":"CasServer"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_cas_server/#cas","text":"","title":"Cas\u8ba4\u8bc1"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_cas_server/#_1","text":"\u6253\u5f00\u5e94\u7528\u5217\u8868 \u65b0\u5efaCas\u5e94\u7528 \u5728\u5217\u8868\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u9009\u62e9\u7c7b\u578b\u4e3aCas\u5e76\u786e\u8ba4 \u5728\u5217\u8868\u518d\u6b21\u70b9\u51fb\u534f\u8bae\u914d\u7f6e \u4fdd\u5b58\u767b\u5f55\u548c\u6821\u9a8c\u5730\u5740","title":"\u521b\u5efa\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_cas_server/#cas_1","text":"\u5c06\u767b\u5f55\u94fe\u63a5\u653e\u5728\u9700\u8981\u767b\u5f55\u7684\u7b2c\u4e09\u65b9\u9875\u9762 \u8fd9\u91cc\u9700\u8981\u8ba9\u7528\u6237\u901a\u8fc7\u94fe\u63a5\u8bbf\u95eearkid\u8fd9\u8fb9\u7684\u7edf\u4e00\u8ba4\u8bc1\u3002service\u53c2\u6570\u662farkid\u8ba4\u8bc1\u5b8c\u540e\u7684\u56de\u8c03\u5730\u5740\u3002 http://localhost:9528/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/app/e78f117b-1632-42c9-8e3c-ec4fd796c89e/cas/login/?service=http://www.baidu.com \u9875\u9762\u4f1a\u81ea\u52a8\u8df3\u5230\u8fdb\u884c\u767b\u5f55 http://localhost:9528/login?next=/api/v1/tenant/4da114ce-e115-44a0-823b-d372114425d0/app/e78f117b-1632-42c9-8e3c-ec4fd796c89e/cas/login/%3Fservice%3Dhttp%3A//www.baidu.com&tenant_id=4da114ce-e115-44a0-823b-d372114425d0 \u767b\u5f55\u6210\u529f\u540e\u4f1a\u53d6\u5f97\u4e00\u4e2a\u7968\u636e https://www.baidu.com/?ticket=ST-1658743424-pvotuhaInoW1UGQlIlD1eLU6tZoMppu6 \u901a\u8fc7\u6821\u9a8c\u5730\u5740\u83b7\u53d6\u7528\u6237\u4fe1\u606f \u4e00\u4e2a\u7968\u636e\u53ea\u80fd\u7528\u4e00\u6b21\uff0cservice\u8981\u548c\u524d\u9762\u767b\u5f55\u7684\u76f8\u540c\uff0c\u5982\u679c\u6210\u529f\u53ef\u4ee5\u83b7\u53d6\u5230\u7528\u6237\u4fe1\u606f \u5982\u679c\u4f60\u8bd5\u56fe\u7528\u5df2\u7ecf\u4f7f\u7528\u8fc7\u7684\u7968\u636e\u5c31\u4f1a\u8fd4\u56de \u9700\u8981\u6bcf\u6b21\u767b\u5f55\u5148\u62ff\u7968\u636e\u7136\u540e\u7528\u7968\u636e\u6362\u53d6\u7528\u6237\u4fe1\u606f","title":"\u4f7f\u7528 Cas \u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_ldapserver/","text":"LDAP SERVER # \u529f\u80fd\u4ecb\u7ecd # ldap\u534f\u8bae\u63d2\u4ef6\uff0c\u56e0\u534f\u8bae\u7279\u6b8a\u6027\u9700\u914d\u5408 arkid_ldap_server\u670d\u52a1\u7aef \u7248\u672c\uff1a2.5.x \u6765\u5b9e\u73b0\u534f\u8bae\u529f\u80fd \u672c\u63d2\u4ef6\u4ec5\u4ee5arkid\u6570\u636e\u4e3a\u57fa\u7840\uff0c\u5b9e\u73b0LDAP\u534f\u8bae\u7684\u8ba4\u8bc1\u4e0e\u641c\u7d22\u529f\u80fd\u3002 \u914d\u7f6e\u6307\u5357 # arkid_ldap_server\u670d\u52a1\u7aef\u90e8\u7f72 # \u8054\u7cfb\u7ba1\u7406\u5458\u6216\u8fd0\u7ef4\u5de5\u4f5c\u4eba\u5458\u786e\u8ba4\u5df2\u5b8c\u6210 arkid_ldap_server\u670d\u52a1\u7aef \u7248\u672c\uff1a2.5.x \u7684\u90e8\u7f72,\u6216\u53c2\u8003\u4e0b\u5217\u6587\u6863\u81ea\u884c\u90e8\u7f72\uff1a k8s helm\u5b89\u88c5\u7684arkid\uff0c\u6dfb\u52a0ldap docker-compose\u5b89\u88c5\u7684arkid\uff0c\u6dfb\u52a0ldap\u90e8\u7f72 \u5728arkid\u5e73\u53f0\u4e0a\u542f\u7528LDAPSERVER \u5728LDAP Admin\u4e2d\u94fe\u63a5ARKID LDAP SERVER \u521b\u5efaldap\u6240\u9700\u7684yaml\u6587\u4ef6 --- apiVersion : v1 kind : Service metadata : name : arkid-ldapjs spec : type : NodePort ports : - name : ldap nodePort : 32581 port : 389 protocol : TCP targetPort : 1389 selector : app.kubernetes.io/instance : arkid app.kubernetes.io/name : arkid-ldapjs --- apiVersion : apps/v1 kind : Deployment metadata : name : arkid-ldapjs spec : selector : matchLabels : app.kubernetes.io/instance : arkid app.kubernetes.io/name : arkid-ldapjs template : metadata : labels : app.kubernetes.io/instance : arkid app.kubernetes.io/name : arkid-ldapjs spec : containers : - env : - name : TZ value : Asia/Shanghai - name : BEURL value : http://dev-arkidv2-be image : registry.cn-zhangjiakou.aliyuncs.com/ark-releases/ldapjs:latest imagePullPolicy : IfNotPresent name : arkid-ldapjs resources : {} initContainers : - command : - sh - -c - sysctl -w net.core.somaxconn=65535 image : busybox imagePullPolicy : Always name : setsysctl resources : {} securityContext : privileged : true \u53ef\u80fd\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9 args : - \"http://arkid-be\" // \u8fd9\u4e2a\u4f4d\u7f6e\u9700\u8981\u586barkid\u540e\u7aef\u7684service\u540d\u5b57 k8s \u5b89\u88c5ldap\uff0c\u5b89\u88c5\u5728arkid \u6240\u5728\u7684\u547d\u540d\u7a7a\u95f4\u4e2d kubectl -n arkid apply -f ldap.yaml \u4fee\u6539docker-compose.yml \u6587\u4ef6\uff0c\u5c06\u6ce8\u91ca\u6389\u7684ldap\u90e8\u5206\u89e3\u9664\u6ce8\u91ca \u7136\u540e\u518d\u6267\u884c\u547d\u4ee4 docker-compose up -d \u79df\u8d41\u63d2\u4ef6\uff1a \u79df\u6237\u7ba1\u7406\u5458\u4ece\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011,\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u9009\u62e9\u79df\u8d41LDAP server\u63d2\u4ef6: \u79df\u8d41\u6210\u529f\u540e\uff0c\u5728\u5df2\u79df\u8d41\u63d2\u4ef6\u5217\u8868\u4e2d\u627e\u5230LDAP server\u63d2\u4ef6,\u70b9\u51fb\u3010\u79df\u6237\u914d\u7f6e\u3011\u6309\u94ae,\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\uff1a \u6ce8\u610f\u7528\u6237/\u7fa4\u7ec4\u4fe1\u606f\u5b57\u6bb5\u6620\u5c04\u4e00\u680f\u4e2d\u6620\u5c04\u540d\u4e3aLDAP\u534f\u8bae\u4e2d\u7528\u6237/\u7fa4\u7ec4\u7684\u5c5e\u6027\u540d\uff0c\u5b57\u6bb5\u540d\u4e3aarkid\u5e73\u53f0\u4e2d\u7684\u7528\u6237/\u7fa4\u7ec4\u5c5e\u6027\u5b57\u6bb5\u540d\uff0c\u5982\u4e0d\u586b\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e \u914d\u7f6e\u5b8c\u6210\u540e\u8fdb\u5165\u3010\u8eab\u4efd\u6570\u636e\u6e90\u3011\u3010LDAP SERVER\u3011\u4e00\u680f\u4e2d\uff0c\u6b64\u5904\u4f1a\u663e\u793a\u76f8\u5173\u5ba2\u6237\u7aef\u6240\u9700\u4fe1\u606f\uff1a \u521b\u5efa\u94fe\u63a5: \u767b\u5f55\u540d\u5373\u4e3a\u4e0a\u4e00\u6b65\u9aa4\u4e2d\u8eab\u4efd\u6570\u636e\u6e90\u663e\u793a\u7684\u767b\u5f55\u540d \u5bc6\u7801\u4e3aarkid\u7528\u6237\u5bc6\u7801 \u7528\u6237\u641c\u7d22: \u7fa4\u7ec4\u641c\u7d22: \u6ce8\u610f\uff1a\u7fa4\u7ec4CN\u6620\u5c04\u4e3aarkid\u7fa4\u7ec4\u6a21\u578b\u7684id\u800c\u975ename","title":"LDAP SERVER"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_ldapserver/#ldap-server","text":"","title":"LDAP SERVER"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_ldapserver/#_1","text":"ldap\u534f\u8bae\u63d2\u4ef6\uff0c\u56e0\u534f\u8bae\u7279\u6b8a\u6027\u9700\u914d\u5408 arkid_ldap_server\u670d\u52a1\u7aef \u7248\u672c\uff1a2.5.x \u6765\u5b9e\u73b0\u534f\u8bae\u529f\u80fd \u672c\u63d2\u4ef6\u4ec5\u4ee5arkid\u6570\u636e\u4e3a\u57fa\u7840\uff0c\u5b9e\u73b0LDAP\u534f\u8bae\u7684\u8ba4\u8bc1\u4e0e\u641c\u7d22\u529f\u80fd\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_ldapserver/#_2","text":"","title":"\u914d\u7f6e\u6307\u5357"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_ldapserver/#arkid_ldap_server","text":"\u8054\u7cfb\u7ba1\u7406\u5458\u6216\u8fd0\u7ef4\u5de5\u4f5c\u4eba\u5458\u786e\u8ba4\u5df2\u5b8c\u6210 arkid_ldap_server\u670d\u52a1\u7aef \u7248\u672c\uff1a2.5.x \u7684\u90e8\u7f72,\u6216\u53c2\u8003\u4e0b\u5217\u6587\u6863\u81ea\u884c\u90e8\u7f72\uff1a k8s helm\u5b89\u88c5\u7684arkid\uff0c\u6dfb\u52a0ldap docker-compose\u5b89\u88c5\u7684arkid\uff0c\u6dfb\u52a0ldap\u90e8\u7f72 \u5728arkid\u5e73\u53f0\u4e0a\u542f\u7528LDAPSERVER \u5728LDAP Admin\u4e2d\u94fe\u63a5ARKID LDAP SERVER \u521b\u5efaldap\u6240\u9700\u7684yaml\u6587\u4ef6 --- apiVersion : v1 kind : Service metadata : name : arkid-ldapjs spec : type : NodePort ports : - name : ldap nodePort : 32581 port : 389 protocol : TCP targetPort : 1389 selector : app.kubernetes.io/instance : arkid app.kubernetes.io/name : arkid-ldapjs --- apiVersion : apps/v1 kind : Deployment metadata : name : arkid-ldapjs spec : selector : matchLabels : app.kubernetes.io/instance : arkid app.kubernetes.io/name : arkid-ldapjs template : metadata : labels : app.kubernetes.io/instance : arkid app.kubernetes.io/name : arkid-ldapjs spec : containers : - env : - name : TZ value : Asia/Shanghai - name : BEURL value : http://dev-arkidv2-be image : registry.cn-zhangjiakou.aliyuncs.com/ark-releases/ldapjs:latest imagePullPolicy : IfNotPresent name : arkid-ldapjs resources : {} initContainers : - command : - sh - -c - sysctl -w net.core.somaxconn=65535 image : busybox imagePullPolicy : Always name : setsysctl resources : {} securityContext : privileged : true \u53ef\u80fd\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9 args : - \"http://arkid-be\" // \u8fd9\u4e2a\u4f4d\u7f6e\u9700\u8981\u586barkid\u540e\u7aef\u7684service\u540d\u5b57 k8s \u5b89\u88c5ldap\uff0c\u5b89\u88c5\u5728arkid \u6240\u5728\u7684\u547d\u540d\u7a7a\u95f4\u4e2d kubectl -n arkid apply -f ldap.yaml \u4fee\u6539docker-compose.yml \u6587\u4ef6\uff0c\u5c06\u6ce8\u91ca\u6389\u7684ldap\u90e8\u5206\u89e3\u9664\u6ce8\u91ca \u7136\u540e\u518d\u6267\u884c\u547d\u4ee4 docker-compose up -d \u79df\u8d41\u63d2\u4ef6\uff1a \u79df\u6237\u7ba1\u7406\u5458\u4ece\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011,\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u9009\u62e9\u79df\u8d41LDAP server\u63d2\u4ef6: \u79df\u8d41\u6210\u529f\u540e\uff0c\u5728\u5df2\u79df\u8d41\u63d2\u4ef6\u5217\u8868\u4e2d\u627e\u5230LDAP server\u63d2\u4ef6,\u70b9\u51fb\u3010\u79df\u6237\u914d\u7f6e\u3011\u6309\u94ae,\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\uff1a \u6ce8\u610f\u7528\u6237/\u7fa4\u7ec4\u4fe1\u606f\u5b57\u6bb5\u6620\u5c04\u4e00\u680f\u4e2d\u6620\u5c04\u540d\u4e3aLDAP\u534f\u8bae\u4e2d\u7528\u6237/\u7fa4\u7ec4\u7684\u5c5e\u6027\u540d\uff0c\u5b57\u6bb5\u540d\u4e3aarkid\u5e73\u53f0\u4e2d\u7684\u7528\u6237/\u7fa4\u7ec4\u5c5e\u6027\u5b57\u6bb5\u540d\uff0c\u5982\u4e0d\u586b\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e \u914d\u7f6e\u5b8c\u6210\u540e\u8fdb\u5165\u3010\u8eab\u4efd\u6570\u636e\u6e90\u3011\u3010LDAP SERVER\u3011\u4e00\u680f\u4e2d\uff0c\u6b64\u5904\u4f1a\u663e\u793a\u76f8\u5173\u5ba2\u6237\u7aef\u6240\u9700\u4fe1\u606f\uff1a \u521b\u5efa\u94fe\u63a5: \u767b\u5f55\u540d\u5373\u4e3a\u4e0a\u4e00\u6b65\u9aa4\u4e2d\u8eab\u4efd\u6570\u636e\u6e90\u663e\u793a\u7684\u767b\u5f55\u540d \u5bc6\u7801\u4e3aarkid\u7528\u6237\u5bc6\u7801 \u7528\u6237\u641c\u7d22: \u7fa4\u7ec4\u641c\u7d22: \u6ce8\u610f\uff1a\u7fa4\u7ec4CN\u6620\u5c04\u4e3aarkid\u7fa4\u7ec4\u6a21\u578b\u7684id\u800c\u975ename","title":"arkid_ldap_server\u670d\u52a1\u7aef\u90e8\u7f72"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/","text":"Saml2Idp\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # Saml2\u534f\u8bae\u63d2\u4ef6\uff0c\u9002\u914d\u963f\u91cc\u4e91/\u534e\u4e3a\u4e91/zabbix\u7b49 \u4f7f\u7528\u793a\u4f8b # SAML2.0 \u534f\u8bae\u4e2d\u5e02\u9762\u4e0aSP\u7684\u914d\u7f6e\u65b9\u5f0f\u5927\u62b5\u5206\u4e3a\u4e24\u7c7b\uff0c - \u4e00\u7c7b\u4ee5\u5b8c\u6574metadata\u6587\u4ef6\u4f5c\u4e3a\u76f8\u4e92\u95f4\u4ea4\u6362\u6570\u636e\uff08\u516c\u94a5/\u63a5\u53e3\u7b49\uff09\u7684\u8f7d\u4f53\uff0c\u6bd4\u5982\u534e\u4e3a\u4e91; \u540c\u65f6\u8f85\u4ee5\u989d\u5916\u53c2\u6570\u8fdb\u884c\u9a8c\u8bc1\u7684\u9650\u5236\uff0c\u6bd4\u5982\u963f\u91cc\u4e91. - \u4e00\u7c7b\u5219\u5b8c\u5168\u4ee5\u53c2\u6570\u5f62\u5f0f\u4e0a\u4f20\u6240\u9700\u6570\u636e(\u516c\u94a5/\u63a5\u53e3\u7b49)\uff0c\u6bd4\u5982zabbix. \u5e02\u9762\u4e0a\u5e38\u89c1\u7684\u5927\u5382\u4ea7\u54c1\u666e\u904d\u652f\u6301SAML2.0\u534f\u8bae\uff0c\u6bd4\u5982\u98de\u4e66\u4f01\u4e1a\u7248\u3001\u5fae\u8f6f\u65d7\u4e0b\u7684Office365\u7b49\u3002","title":"Saml2Idp\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/#saml2idp","text":"","title":"Saml2Idp\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/#_1","text":"Saml2\u534f\u8bae\u63d2\u4ef6\uff0c\u9002\u914d\u963f\u91cc\u4e91/\u534e\u4e3a\u4e91/zabbix\u7b49","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/#_2","text":"SAML2.0 \u534f\u8bae\u4e2d\u5e02\u9762\u4e0aSP\u7684\u914d\u7f6e\u65b9\u5f0f\u5927\u62b5\u5206\u4e3a\u4e24\u7c7b\uff0c - \u4e00\u7c7b\u4ee5\u5b8c\u6574metadata\u6587\u4ef6\u4f5c\u4e3a\u76f8\u4e92\u95f4\u4ea4\u6362\u6570\u636e\uff08\u516c\u94a5/\u63a5\u53e3\u7b49\uff09\u7684\u8f7d\u4f53\uff0c\u6bd4\u5982\u534e\u4e3a\u4e91; \u540c\u65f6\u8f85\u4ee5\u989d\u5916\u53c2\u6570\u8fdb\u884c\u9a8c\u8bc1\u7684\u9650\u5236\uff0c\u6bd4\u5982\u963f\u91cc\u4e91. - \u4e00\u7c7b\u5219\u5b8c\u5168\u4ee5\u53c2\u6570\u5f62\u5f0f\u4e0a\u4f20\u6240\u9700\u6570\u636e(\u516c\u94a5/\u63a5\u53e3\u7b49)\uff0c\u6bd4\u5982zabbix. \u5e02\u9762\u4e0a\u5e38\u89c1\u7684\u5927\u5382\u4ea7\u54c1\u666e\u904d\u652f\u6301SAML2.0\u534f\u8bae\uff0c\u6bd4\u5982\u98de\u4e66\u4f01\u4e1a\u7248\u3001\u5fae\u8f6f\u65d7\u4e0b\u7684Office365\u7b49\u3002","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/zabbix%E9%85%8D%E7%BD%AE/","text":"zabbix SSO # \u51c6\u5907\u5de5\u4f5c \u6dfb\u52a0\u5e94\u7528 \u914d\u7f6e\u534f\u8bae \u4e0b\u8f7d\u8bc1\u4e66 \u914d\u7f6ezabbix \u8bc1\u4e66\u5bc6\u94a5 zabbix \u8ba4\u8bc1\u914d\u7f6e \u6dfb\u52a0zabbix\u7528\u6237 \u767b\u5f55\u81f3zabbix zabbix\u5fc5\u987b\u4e3a5.0\u4ee5\u4e0a\u7248\u672c\uff0c\u5426\u5219\u4e0d\u652f\u6301saml2\u534f\u8bae \u9884\u5148\u9700\u4e3azabbix\u914d\u7f6e\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u6587\u4ef6\u540e\u7f00\u540d\u4e3a.key\u548c.crt\uff0c\u5b58\u653e\u5728zabbix\u914d\u7f6e\u76ee\u5f55\u4e0b\uff0c\u4e00\u822c\u4e3a/etc/zabbix/web/certs/ \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3azabbix\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u4e3a ZABBIX_WEB_HOST/index_sso.php \u6dfb\u52a0\u5b8c\u6210\u540e\u5728\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a Saml2SP_CERT \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e + acs : Assertion Consumer URL \u5e94\u8be5\u8bbe\u7f6e\u4e3a \\<path_to_zabbix_ui>/index_sso.php?acs + sls: Single Logout URL \u5e94\u8bbe\u7f6e\u4e3a \\<path_to_zabbix_ui>/index_sso.php?sls + entity_id: \u4e0ezabbix\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4 \u70b9\u51fb\u786e\u8ba4\u540e\u8fdb\u5165\u7f16\u8f91\u9875\u9762\uff0c\u4e0b\u62c9\u540e\u5373\u53ef\u770b\u5230\u53ea\u8bfb\u7684\u5c5e\u6027,\u901a\u8fc7\u94fe\u63a5\u4e0b\u8f7dIDP\u8bc1\u4e66\uff0c\u5e76\u62f7\u8d1dIDP SSO URL\u7b49\u5907\u7528 \u5c06IDP\u8bc1\u4e66\u4e0a\u4f20\u5b58\u653e\u5728zabbix\u914d\u7f6e\u76ee\u5f55\u4e0b\uff0c\u4e00\u822c\u4e3a/etc/zabbix/web/certs/\uff0c\u4e0ezabbix\u8bc1\u4e66\u653e\u5728\u4e00\u8d77 \u3010\u6ce8\u610f\u3011\uff1a \u8981\u4f7f\u7528 SAML \u8eab\u4efd\u9a8c\u8bc1\uff0cZabbix \u5e94\u914d\u7f6e\u79c1\u94a5\u548c\u8bc1\u4e66\u5e94\u5b58\u50a8\u5728/etc/zabbix/web/conf/certs/\uff08\u6839\u636e\u7248\u672c\u6216\u5b89\u88c5\u65b9\u5f0f\u4e0d\u4e00\u6837\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u7b14\u8005\u6b64\u5904\u6d4b\u8bd5\u73af\u5883\u4e3azabbix5.4 + docker\uff09 \u4e2d\uff0c\u9664\u975e zabbix.conf.php \u4e2d\u63d0\u4f9b\u4e86\u81ea\u5b9a\u4e49\u8def\u5f84\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cZabbix \u5c06\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u67e5\u627e\uff1a + conf/certs/sp.key === \"SP\u79c1\u94a5\u6587\u4ef6\" + conf/certs/sp.crt === \"SP \u8bc1\u4e66\u6587\u4ef6\" + conf/certs/idp.crt === \"IDP \u8bc1\u4e66\u6587\u4ef6\" \u5b58\u50a8\u65f6\u6587\u4ef6\u540d\u79f0\u52a1\u5fc5\u4e3asp/idp.crt sp.key \u8fdb\u5165zabbix\u9875\u9762Authentication\u914d\u7f6e\u9875\u9762\uff0c\u5982\u4e0b\u56fe\u914d\u7f6e\uff0c\u6ce8\u610f\u66ff\u6362IDP entity id\u4ee5\u53caSSO service URL \u5728zabbix\u4e2d\u6dfb\u52a0\u4e0earkid\u7528\u6237\u540d\u4e00\u81f4\u7684\u7528\u6237\uff08\u6bd4\u5982admin\uff0c\u9700\u533a\u5206\u5927\u5c0f\u5199\uff09,\u5e76\u8d4b\u4e88\u8db3\u591f\u6743\u9650 \u8fdb\u5165arkid\u684c\u9762\uff0c\u70b9\u51fbzabbix\u5361\u7247\uff0c\u7ecf\u591a\u6b21\u8df3\u8f6c\u540e\u4ee5\u914d\u7f6e\u7528\u6237\u8eab\u4efd\u5373\u53ef\u8fdb\u5165zabbix","title":"zabbix SSO"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/zabbix%E9%85%8D%E7%BD%AE/#zabbix-sso","text":"\u51c6\u5907\u5de5\u4f5c \u6dfb\u52a0\u5e94\u7528 \u914d\u7f6e\u534f\u8bae \u4e0b\u8f7d\u8bc1\u4e66 \u914d\u7f6ezabbix \u8bc1\u4e66\u5bc6\u94a5 zabbix \u8ba4\u8bc1\u914d\u7f6e \u6dfb\u52a0zabbix\u7528\u6237 \u767b\u5f55\u81f3zabbix zabbix\u5fc5\u987b\u4e3a5.0\u4ee5\u4e0a\u7248\u672c\uff0c\u5426\u5219\u4e0d\u652f\u6301saml2\u534f\u8bae \u9884\u5148\u9700\u4e3azabbix\u914d\u7f6e\u79c1\u94a5\u548c\u8bc1\u4e66\uff0c\u6587\u4ef6\u540e\u7f00\u540d\u4e3a.key\u548c.crt\uff0c\u5b58\u653e\u5728zabbix\u914d\u7f6e\u76ee\u5f55\u4e0b\uff0c\u4e00\u822c\u4e3a/etc/zabbix/web/certs/ \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3azabbix\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u4e3a ZABBIX_WEB_HOST/index_sso.php \u6dfb\u52a0\u5b8c\u6210\u540e\u5728\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a Saml2SP_CERT \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e + acs : Assertion Consumer URL \u5e94\u8be5\u8bbe\u7f6e\u4e3a \\<path_to_zabbix_ui>/index_sso.php?acs + sls: Single Logout URL \u5e94\u8bbe\u7f6e\u4e3a \\<path_to_zabbix_ui>/index_sso.php?sls + entity_id: \u4e0ezabbix\u8bbe\u7f6e\u4fdd\u6301\u4e00\u81f4 \u70b9\u51fb\u786e\u8ba4\u540e\u8fdb\u5165\u7f16\u8f91\u9875\u9762\uff0c\u4e0b\u62c9\u540e\u5373\u53ef\u770b\u5230\u53ea\u8bfb\u7684\u5c5e\u6027,\u901a\u8fc7\u94fe\u63a5\u4e0b\u8f7dIDP\u8bc1\u4e66\uff0c\u5e76\u62f7\u8d1dIDP SSO URL\u7b49\u5907\u7528 \u5c06IDP\u8bc1\u4e66\u4e0a\u4f20\u5b58\u653e\u5728zabbix\u914d\u7f6e\u76ee\u5f55\u4e0b\uff0c\u4e00\u822c\u4e3a/etc/zabbix/web/certs/\uff0c\u4e0ezabbix\u8bc1\u4e66\u653e\u5728\u4e00\u8d77 \u3010\u6ce8\u610f\u3011\uff1a \u8981\u4f7f\u7528 SAML \u8eab\u4efd\u9a8c\u8bc1\uff0cZabbix \u5e94\u914d\u7f6e\u79c1\u94a5\u548c\u8bc1\u4e66\u5e94\u5b58\u50a8\u5728/etc/zabbix/web/conf/certs/\uff08\u6839\u636e\u7248\u672c\u6216\u5b89\u88c5\u65b9\u5f0f\u4e0d\u4e00\u6837\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u7b14\u8005\u6b64\u5904\u6d4b\u8bd5\u73af\u5883\u4e3azabbix5.4 + docker\uff09 \u4e2d\uff0c\u9664\u975e zabbix.conf.php \u4e2d\u63d0\u4f9b\u4e86\u81ea\u5b9a\u4e49\u8def\u5f84\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cZabbix \u5c06\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u67e5\u627e\uff1a + conf/certs/sp.key === \"SP\u79c1\u94a5\u6587\u4ef6\" + conf/certs/sp.crt === \"SP \u8bc1\u4e66\u6587\u4ef6\" + conf/certs/idp.crt === \"IDP \u8bc1\u4e66\u6587\u4ef6\" \u5b58\u50a8\u65f6\u6587\u4ef6\u540d\u79f0\u52a1\u5fc5\u4e3asp/idp.crt sp.key \u8fdb\u5165zabbix\u9875\u9762Authentication\u914d\u7f6e\u9875\u9762\uff0c\u5982\u4e0b\u56fe\u914d\u7f6e\uff0c\u6ce8\u610f\u66ff\u6362IDP entity id\u4ee5\u53caSSO service URL \u5728zabbix\u4e2d\u6dfb\u52a0\u4e0earkid\u7528\u6237\u540d\u4e00\u81f4\u7684\u7528\u6237\uff08\u6bd4\u5982admin\uff0c\u9700\u533a\u5206\u5927\u5c0f\u5199\uff09,\u5e76\u8d4b\u4e88\u8db3\u591f\u6743\u9650 \u8fdb\u5165arkid\u684c\u9762\uff0c\u70b9\u51fbzabbix\u5361\u7247\uff0c\u7ecf\u591a\u6b21\u8df3\u8f6c\u540e\u4ee5\u914d\u7f6e\u7528\u6237\u8eab\u4efd\u5373\u53ef\u8fdb\u5165zabbix","title":"zabbix SSO"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%85%8D%E7%BD%AE/","text":"\u534e\u4e3a\u4e91\u914d\u7f6e # \u534e\u4e3a\u4e91\u865a\u62df\u7528\u6237SSO # \u51c6\u5907\u5de5\u4f5c \u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546 \u590d\u5236\u767b\u5f55\u94fe\u63a5 \u521b\u5efa\u5e94\u7528 \u914d\u7f6e\u534f\u8bae \u83b7\u53d6IDP\u5143\u6570\u636e\u6587\u4ef6 \u4fee\u6539\u8eab\u4efd\u63d0\u4f9b\u5546 \u8df3\u8f6c\u767b\u5f55 \u4e0b\u8f7d\u534e\u4e3a\u4e91\u516c\u5171\u5e73\u53f0metadata\u6587\u4ef6\uff1ahttps://auth.huaweicloud.com/authui/saml/metadata.xml \u767b\u9646\u81f3\u534e\u4e3a\u4e91\u516c\u5171\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u63a7\u5236\u53f0\u3011\uff0c\u627e\u5230\u7edf\u4e00\u8eab\u4efd\u8ba4\u8bc1\u670d\u52a1\uff0c\u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546 \u521b\u5efa\u5b8c\u6210\u540e\u8fdb\u5165\u4fee\u6539\u8eab\u4efd\u63d0\u4f9b\u5546\u9875\u9762\uff0c\u590d\u5236\u767b\u5f55\u94fe\u63a5\u81f3\u526a\u8d34\u677f\u5907\u7528 \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u534e\u4e3a\u4e91\u865a\u62df\u7528\u6237SSO\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u586b\u5165\u590d\u5236\u7684\u94fe\u63a5 \u5728arkid\u4e2d\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a <b> Saml2SP_METADATA </b> \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e\uff1a sp metadata\u6587\u4ef6\u5373\u4e3a\u524d\u9762\u6b65\u9aa4\u4e0b\u8f7d\u7684\u6570\u636e\u6587\u4ef6 \u786e\u8ba4\u540e\u518d\u6b21\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae,\u590d\u5236IDP entity ID\u4e00\u9879\u7684\u94fe\u63a5\u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6\u5907\u7528 \u8fd4\u56de\u534e\u4e3a\u4e91\u516c\u5171\u5e73\u53f0\uff0c\u5728\u4fee\u6539\u8eab\u4efd\u63d0\u4f9b\u5546\u9875\u9762\u4e2d\u4e0a\u4f20\u521a\u521a\u4e0b\u8f7d\u7684IDP metadata\u6587\u4ef6 \u8fdb\u5165arkid\u684c\u9762,\u70b9\u51fb\u534e\u4e3a\u4e91\u5e94\u7528\uff0c\u7ecf\u8fc7\u6570\u6b21\u9875\u9762\u8df3\u8f6c\u540e\uff0c\u6210\u529f\u8fdb\u5165\u534e\u4e3a\u4e91\u5e73\u53f0,\u663e\u793a\u767b\u9646\u7528\u6237\u4e3aFederationUser","title":"\u534e\u4e3a\u4e91\u914d\u7f6e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%85%8D%E7%BD%AE/#_1","text":"","title":"\u534e\u4e3a\u4e91\u914d\u7f6e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E5%8D%8E%E4%B8%BA%E4%BA%91%E9%85%8D%E7%BD%AE/#sso","text":"\u51c6\u5907\u5de5\u4f5c \u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546 \u590d\u5236\u767b\u5f55\u94fe\u63a5 \u521b\u5efa\u5e94\u7528 \u914d\u7f6e\u534f\u8bae \u83b7\u53d6IDP\u5143\u6570\u636e\u6587\u4ef6 \u4fee\u6539\u8eab\u4efd\u63d0\u4f9b\u5546 \u8df3\u8f6c\u767b\u5f55 \u4e0b\u8f7d\u534e\u4e3a\u4e91\u516c\u5171\u5e73\u53f0metadata\u6587\u4ef6\uff1ahttps://auth.huaweicloud.com/authui/saml/metadata.xml \u767b\u9646\u81f3\u534e\u4e3a\u4e91\u516c\u5171\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u63a7\u5236\u53f0\u3011\uff0c\u627e\u5230\u7edf\u4e00\u8eab\u4efd\u8ba4\u8bc1\u670d\u52a1\uff0c\u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546 \u521b\u5efa\u5b8c\u6210\u540e\u8fdb\u5165\u4fee\u6539\u8eab\u4efd\u63d0\u4f9b\u5546\u9875\u9762\uff0c\u590d\u5236\u767b\u5f55\u94fe\u63a5\u81f3\u526a\u8d34\u677f\u5907\u7528 \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u534e\u4e3a\u4e91\u865a\u62df\u7528\u6237SSO\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u586b\u5165\u590d\u5236\u7684\u94fe\u63a5 \u5728arkid\u4e2d\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a <b> Saml2SP_METADATA </b> \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e\uff1a sp metadata\u6587\u4ef6\u5373\u4e3a\u524d\u9762\u6b65\u9aa4\u4e0b\u8f7d\u7684\u6570\u636e\u6587\u4ef6 \u786e\u8ba4\u540e\u518d\u6b21\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae,\u590d\u5236IDP entity ID\u4e00\u9879\u7684\u94fe\u63a5\u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6\u5907\u7528 \u8fd4\u56de\u534e\u4e3a\u4e91\u516c\u5171\u5e73\u53f0\uff0c\u5728\u4fee\u6539\u8eab\u4efd\u63d0\u4f9b\u5546\u9875\u9762\u4e2d\u4e0a\u4f20\u521a\u521a\u4e0b\u8f7d\u7684IDP metadata\u6587\u4ef6 \u8fdb\u5165arkid\u684c\u9762,\u70b9\u51fb\u534e\u4e3a\u4e91\u5e94\u7528\uff0c\u7ecf\u8fc7\u6570\u6b21\u9875\u9762\u8df3\u8f6c\u540e\uff0c\u6210\u529f\u8fdb\u5165\u534e\u4e3a\u4e91\u5e73\u53f0,\u663e\u793a\u767b\u9646\u7528\u6237\u4e3aFederationUser","title":"\u534e\u4e3a\u4e91\u865a\u62df\u7528\u6237SSO"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE/","text":"\u963f\u91cc\u4e91\u914d\u7f6e # \u963f\u91cc\u4e91\u7528\u6237SSO # \u521b\u5efa\u5e94\u7528 \u4e0b\u8f7dSP\u5143\u6570\u636e\u6587\u4ef6 \u914d\u7f6e\u534f\u8bae \u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6 \u4e0a\u4f20IDP\u5143\u6570\u636e\u6587\u4ef6 \u767b\u5f55\u81f3\u963f\u91cc\u4e91 \u6ce8\u610f \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u963f\u91cc\u4e91\u7528\u6237SSO\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u4e0d\u586b \u767b\u5f55\u81f3\u963f\u91cc\u4e91\u5e73\u53f0\uff0c\u901a\u8fc7\u5934\u50cf\u4e0b\u62c9\u83dc\u5355\u8fdb\u5165\u8bbf\u95ee\u63a7\u5236\u9875\u9762\uff0c\u5728SSO\u7ba1\u7406\u4e00\u680f\u4e2d\u9009\u62e9\u7528\u6237SSO\uff0c\u590d\u5236\u3010SAML \u670d\u52a1\u63d0\u4f9b\u65b9\u5143\u6570\u636e URL\u3011\u5e76\u4e0b\u8f7d\u8be5\u6587\u4ef6 \u5728arkid\u4e2d\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a <b> Saml2SP_AliyunRam </b> \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e + sp metadata\u6587\u4ef6\u5373\u4e3a\u4e0a\u4e00\u6b65\u4e0b\u8f7d\u7684\u6570\u636e\u6587\u4ef6 + \u8f85\u52a9\u57df\u540d\u89c1\u963f\u91cc\u4e91 \u6587\u6863 \u786e\u8ba4\u540e\u518d\u6b21\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae,\u590d\u5236IDP entity ID\u4e00\u9879\u7684\u94fe\u63a5\u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6\u5907\u7528 \u518d\u6b21\u56de\u5230\u963f\u91cc\u4e91\u5e73\u53f0\u9875\u9762\uff0c\u70b9\u51fb\u7f16\u8f91\u7528\u6237SSO \u4e0a\u4f20\u521a\u521a\u4e0b\u8f7d\u7684IDP\u5143\u6570\u636e\u6587\u4ef6 \u70b9\u51fb\u786e\u8ba4\uff0c\u56de\u5230arkid\u7edf\u4e00\u8ba4\u8bc1\u5e73\u53f0\u684c\u9762\uff0c\u6b64\u65f6\u70b9\u51fb\u963f\u91cc\u4e91\u7528\u6237SSO\u5e94\u7528\u5361\u7247\uff0c\u7ecf\u51e0\u6b21\u8df3\u8f6c\u540e\u5373\u53ef\u8fdb\u5165\u963f\u91cc\u4e91\u5e73\u53f0 \u5173\u4e8e\u57df\u540d\u53d6\u503c\uff1a\u963f\u91cc\u4e91\u63d0\u4f9b\u8f85\u52a9\u57df\u540d/\u57df\u522b\u540d/\u9ed8\u8ba4\u57df\u540d\u4e09\u79cd\u65b9\u5f0f\u8bbe\u7f6eSSO\u57df\u540d\uff0c\u793a\u4f8b\u4e2d\u4f7f\u7528\u8f85\u52a9\u57df\u540d\uff0c\u5176\u4ed6\u57df\u540d\u5728\u963f\u91cc\u4e91\u4e0a\u7684\u914d\u7f6e\u8bf7\u53c2\u8003\u6587\u6863 \u7528\u6237SSO\u9700\u8981\u63d0\u524d\u5728\u963f\u91cc\u4e91\u4e0a\u6dfb\u52a0\uff0c\u5e76\u4fdd\u6301\u4e0earkid\u5e73\u53f0\u4e0a\u7528\u6237\u540d\u4e00\u81f4\uff0c\u4f8b\u5982arkid\u7528\u6237admin \u5bf9\u5e94\u963f\u91cc\u4e91\u5e73\u53f0\u7528\u6237\u4e3aadmin@arkid \u963f\u91cc\u4e91\u89d2\u8272SSO # \u51c6\u5907\u5de5\u4f5c \u521b\u5efa\u5e94\u7528 \u914d\u7f6e\u534f\u8bae \u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6 \u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546 \u521b\u5efa\u89d2\u8272 \u914d\u7f6e\u89d2\u8272 \u89d2\u8272\u6388\u6743 \u89d2\u8272ARN \u4fee\u6539\u534f\u8bae\u914d\u7f6e \u767b\u5f55\u81f3\u963f\u91cc\u4e91 \u4e0b\u8f7d \u963f\u91cc\u4e91SP\u5143\u6570\u636e\u6587\u4ef6 \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u963f\u91cc\u4e91\u89d2\u8272SSO\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u4e0d\u586b \u6dfb\u52a0\u5b8c\u6210\u540e\u5728\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a Saml2SP_AliyunRole \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e + sp metadata\u6587\u4ef6\u5373\u4e3a\u51c6\u5907\u5de5\u4f5c\u65f6\u4e0b\u8f7d\u7684\u6570\u636e\u6587\u4ef6 + Role\u4e00\u9879\u5f53\u524d\u6ca1\u6709\u5bf9\u5e94\u6570\u636e\uff0c\u53ef\u7f6e\u4e3a\u7a7a\uff0c\u6b64\u5904\u7b14\u8005\u4f7f\u7528\"arkid\"\u5360\u4f4d \u914d\u7f6e\u5b8c\u6210\u540e\u70b9\u51fb\u786e\u8ba4\uff0c\u5728\u5217\u8868\u4e2d\u518d\u6b21\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u914d\u7f6e\u534f\u8bae\u5f39\u7a97\uff0c\u590d\u5236IDP entity ID\u4e00\u9879\u7684\u94fe\u63a5\u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6\u5907\u7528 \u767b\u5f55\u81f3\u963f\u91cc\u4e91\u5e73\u53f0\uff0c\u7ecf\u53f3\u4e0a\u89d2\u5934\u50cf\u4e0b\u62c9\u83dc\u5355\u8fdb\u5165\u3010\u8bbf\u95ee\u63a7\u5236\u3011\u9875\u9762\uff0c\u4e8e\u3010SSO\u7ba1\u7406\u3011\u9875\u9762\u9009\u62e9SAML\u534f\u8bae->\u89d2\u8272SSO->\u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546\uff0c\u5728\u6b64\u5904\u4e0a\u4f20\u4e0a\u4e00\u6b65\u4e2d\u4e0b\u8f7d\u7684\u5143\u6570\u636e\u6587\u4ef6\uff0c\u521b\u5efa\u5b8c\u6210\u540e\u70b9\u51fb\u521a\u521a\u521b\u5efa\u7684\u8eab\u4efd\u63d0\u4f9b\u5546\uff0c\u5728\u8be6\u7ec6\u9875\u9762\u4e2d\u627e\u5230\u8eab\u4efd\u63d0\u4f9b\u5546ARN\u5907\u7528 \u5728\u8eab\u4efd\u7ba1\u7406->\u89d2\u8272\u4e00\u680f\u4e2d\uff0c\u521b\u5efa\u89d2\u8272\uff0c\u7c7b\u578b\u9009\u62e9\u8eab\u4efd\u63d0\u4f9b\u5546,\u70b9\u51fb\u4e0b\u4e00\u6b65 \u914d\u7f6e\u89d2\u8272\u65f6\uff0c\u8eab\u4efd\u63d0\u4f9b\u5546\u7c7b\u578b\u9009\u62e9SAML\uff0c\u8eab\u4efd\u63d0\u4f9b\u5546\u9009\u62e9\u524d\u9762\u521b\u5efa\u7684\u8eab\u4efd\u63d0\u4f9b\u5546\uff0c\u70b9\u51fb\u5b8c\u6210 \u89d2\u8272\u521b\u5efa\u5b8c\u6210\u540e\u9700\u5bf9\u89d2\u8272\u8fdb\u884c\u6388\u6743\uff0c\u6b64\u5904\u7b14\u8005\u4e0d\u518d\u8d58\u8ff0 \u4e0a\u8ff0\u6b65\u9aa4\u5b8c\u6210\u540e\uff0c\u70b9\u51fb\u521a\u521a\u521b\u5efa\u7684\u89d2\u8272\uff0c\u590d\u5236\u89d2\u8272ARN\u5907\u7528 \u56de\u5230arkid\u8ba4\u8bc1\u5e73\u53f0\uff0c\u5728\u534f\u8bae\u914d\u7f6e\u5f39\u51fa\u6846\u4e2dRole\u4e00\u680f\u586b\u5165\u503c\uff0c\u683c\u5f0f\u4e3a \u3010\u89d2\u8272ARN\u3011,\u3010\u8eab\u4efd\u63d0\u4f9b\u5546ARN\u3011,\u6ce8\u610f\u4e24\u4e2aARN\u4e4b\u95f4\u7531\u534a\u89d2\uff08\u82f1\u6587\uff09\u9017\u53f7\u9694\u5f00\u3002 \u8fd4\u56dearkid\u8ba4\u8bc1\u5e73\u53f0\u684c\u9762\uff0c\u70b9\u51fb\u963f\u91cc\u4e91\u89d2\u8272SSO\u5e94\u7528\u5361\u7247\uff0c\u7ecf\u591a\u6b21\u8df3\u8f6c\u540e\u5373\u53ef\u4ee5\u5bf9\u5e94\u89d2\u8272\u8fdb\u5165\u963f\u91cc\u4e91\u5e73\u53f0","title":"\u963f\u91cc\u4e91\u914d\u7f6e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE/#_1","text":"","title":"\u963f\u91cc\u4e91\u914d\u7f6e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE/#sso","text":"\u521b\u5efa\u5e94\u7528 \u4e0b\u8f7dSP\u5143\u6570\u636e\u6587\u4ef6 \u914d\u7f6e\u534f\u8bae \u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6 \u4e0a\u4f20IDP\u5143\u6570\u636e\u6587\u4ef6 \u767b\u5f55\u81f3\u963f\u91cc\u4e91 \u6ce8\u610f \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u963f\u91cc\u4e91\u7528\u6237SSO\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u4e0d\u586b \u767b\u5f55\u81f3\u963f\u91cc\u4e91\u5e73\u53f0\uff0c\u901a\u8fc7\u5934\u50cf\u4e0b\u62c9\u83dc\u5355\u8fdb\u5165\u8bbf\u95ee\u63a7\u5236\u9875\u9762\uff0c\u5728SSO\u7ba1\u7406\u4e00\u680f\u4e2d\u9009\u62e9\u7528\u6237SSO\uff0c\u590d\u5236\u3010SAML \u670d\u52a1\u63d0\u4f9b\u65b9\u5143\u6570\u636e URL\u3011\u5e76\u4e0b\u8f7d\u8be5\u6587\u4ef6 \u5728arkid\u4e2d\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a <b> Saml2SP_AliyunRam </b> \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e + sp metadata\u6587\u4ef6\u5373\u4e3a\u4e0a\u4e00\u6b65\u4e0b\u8f7d\u7684\u6570\u636e\u6587\u4ef6 + \u8f85\u52a9\u57df\u540d\u89c1\u963f\u91cc\u4e91 \u6587\u6863 \u786e\u8ba4\u540e\u518d\u6b21\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae,\u590d\u5236IDP entity ID\u4e00\u9879\u7684\u94fe\u63a5\u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6\u5907\u7528 \u518d\u6b21\u56de\u5230\u963f\u91cc\u4e91\u5e73\u53f0\u9875\u9762\uff0c\u70b9\u51fb\u7f16\u8f91\u7528\u6237SSO \u4e0a\u4f20\u521a\u521a\u4e0b\u8f7d\u7684IDP\u5143\u6570\u636e\u6587\u4ef6 \u70b9\u51fb\u786e\u8ba4\uff0c\u56de\u5230arkid\u7edf\u4e00\u8ba4\u8bc1\u5e73\u53f0\u684c\u9762\uff0c\u6b64\u65f6\u70b9\u51fb\u963f\u91cc\u4e91\u7528\u6237SSO\u5e94\u7528\u5361\u7247\uff0c\u7ecf\u51e0\u6b21\u8df3\u8f6c\u540e\u5373\u53ef\u8fdb\u5165\u963f\u91cc\u4e91\u5e73\u53f0 \u5173\u4e8e\u57df\u540d\u53d6\u503c\uff1a\u963f\u91cc\u4e91\u63d0\u4f9b\u8f85\u52a9\u57df\u540d/\u57df\u522b\u540d/\u9ed8\u8ba4\u57df\u540d\u4e09\u79cd\u65b9\u5f0f\u8bbe\u7f6eSSO\u57df\u540d\uff0c\u793a\u4f8b\u4e2d\u4f7f\u7528\u8f85\u52a9\u57df\u540d\uff0c\u5176\u4ed6\u57df\u540d\u5728\u963f\u91cc\u4e91\u4e0a\u7684\u914d\u7f6e\u8bf7\u53c2\u8003\u6587\u6863 \u7528\u6237SSO\u9700\u8981\u63d0\u524d\u5728\u963f\u91cc\u4e91\u4e0a\u6dfb\u52a0\uff0c\u5e76\u4fdd\u6301\u4e0earkid\u5e73\u53f0\u4e0a\u7528\u6237\u540d\u4e00\u81f4\uff0c\u4f8b\u5982arkid\u7528\u6237admin \u5bf9\u5e94\u963f\u91cc\u4e91\u5e73\u53f0\u7528\u6237\u4e3aadmin@arkid","title":"\u963f\u91cc\u4e91\u7528\u6237SSO"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_protocol_saml2/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE/#sso_1","text":"\u51c6\u5907\u5de5\u4f5c \u521b\u5efa\u5e94\u7528 \u914d\u7f6e\u534f\u8bae \u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6 \u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546 \u521b\u5efa\u89d2\u8272 \u914d\u7f6e\u89d2\u8272 \u89d2\u8272\u6388\u6743 \u89d2\u8272ARN \u4fee\u6539\u534f\u8bae\u914d\u7f6e \u767b\u5f55\u81f3\u963f\u91cc\u4e91 \u4e0b\u8f7d \u963f\u91cc\u4e91SP\u5143\u6570\u636e\u6587\u4ef6 \u767b\u5f55arkid\u5e73\u53f0\uff0c\u8fdb\u5165\u3010\u5e94\u7528\u7ba1\u7406\u3011-> \u3010\u5e94\u7528\u5217\u8868\u3011, \u70b9\u51fb\u3010\u6dfb\u52a0\u3011\u6309\u94ae, \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u963f\u91cc\u4e91\u89d2\u8272SSO\u7684\u5e94\u7528\uff0c\u5e94\u7528URL\u4e0d\u586b \u6dfb\u52a0\u5b8c\u6210\u540e\u5728\u53f3\u4fa7\u64cd\u4f5c\u680f\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u534f\u8bae\u914d\u7f6e\u7a97\u53e3\uff0c\u9009\u62e9\u534f\u8bae\u7c7b\u578b\u4e3a Saml2SP_AliyunRole \uff0c\u4f9d\u6b21\u586b\u5165\u76f8\u5173\u6570\u636e + sp metadata\u6587\u4ef6\u5373\u4e3a\u51c6\u5907\u5de5\u4f5c\u65f6\u4e0b\u8f7d\u7684\u6570\u636e\u6587\u4ef6 + Role\u4e00\u9879\u5f53\u524d\u6ca1\u6709\u5bf9\u5e94\u6570\u636e\uff0c\u53ef\u7f6e\u4e3a\u7a7a\uff0c\u6b64\u5904\u7b14\u8005\u4f7f\u7528\"arkid\"\u5360\u4f4d \u914d\u7f6e\u5b8c\u6210\u540e\u70b9\u51fb\u786e\u8ba4\uff0c\u5728\u5217\u8868\u4e2d\u518d\u6b21\u70b9\u51fb\u3010\u914d\u7f6e\u534f\u8bae\u3011\u6309\u94ae\u8fdb\u5165\u914d\u7f6e\u534f\u8bae\u5f39\u7a97\uff0c\u590d\u5236IDP entity ID\u4e00\u9879\u7684\u94fe\u63a5\u4e0b\u8f7dIDP\u5143\u6570\u636e\u6587\u4ef6\u5907\u7528 \u767b\u5f55\u81f3\u963f\u91cc\u4e91\u5e73\u53f0\uff0c\u7ecf\u53f3\u4e0a\u89d2\u5934\u50cf\u4e0b\u62c9\u83dc\u5355\u8fdb\u5165\u3010\u8bbf\u95ee\u63a7\u5236\u3011\u9875\u9762\uff0c\u4e8e\u3010SSO\u7ba1\u7406\u3011\u9875\u9762\u9009\u62e9SAML\u534f\u8bae->\u89d2\u8272SSO->\u521b\u5efa\u8eab\u4efd\u63d0\u4f9b\u5546\uff0c\u5728\u6b64\u5904\u4e0a\u4f20\u4e0a\u4e00\u6b65\u4e2d\u4e0b\u8f7d\u7684\u5143\u6570\u636e\u6587\u4ef6\uff0c\u521b\u5efa\u5b8c\u6210\u540e\u70b9\u51fb\u521a\u521a\u521b\u5efa\u7684\u8eab\u4efd\u63d0\u4f9b\u5546\uff0c\u5728\u8be6\u7ec6\u9875\u9762\u4e2d\u627e\u5230\u8eab\u4efd\u63d0\u4f9b\u5546ARN\u5907\u7528 \u5728\u8eab\u4efd\u7ba1\u7406->\u89d2\u8272\u4e00\u680f\u4e2d\uff0c\u521b\u5efa\u89d2\u8272\uff0c\u7c7b\u578b\u9009\u62e9\u8eab\u4efd\u63d0\u4f9b\u5546,\u70b9\u51fb\u4e0b\u4e00\u6b65 \u914d\u7f6e\u89d2\u8272\u65f6\uff0c\u8eab\u4efd\u63d0\u4f9b\u5546\u7c7b\u578b\u9009\u62e9SAML\uff0c\u8eab\u4efd\u63d0\u4f9b\u5546\u9009\u62e9\u524d\u9762\u521b\u5efa\u7684\u8eab\u4efd\u63d0\u4f9b\u5546\uff0c\u70b9\u51fb\u5b8c\u6210 \u89d2\u8272\u521b\u5efa\u5b8c\u6210\u540e\u9700\u5bf9\u89d2\u8272\u8fdb\u884c\u6388\u6743\uff0c\u6b64\u5904\u7b14\u8005\u4e0d\u518d\u8d58\u8ff0 \u4e0a\u8ff0\u6b65\u9aa4\u5b8c\u6210\u540e\uff0c\u70b9\u51fb\u521a\u521a\u521b\u5efa\u7684\u89d2\u8272\uff0c\u590d\u5236\u89d2\u8272ARN\u5907\u7528 \u56de\u5230arkid\u8ba4\u8bc1\u5e73\u53f0\uff0c\u5728\u534f\u8bae\u914d\u7f6e\u5f39\u51fa\u6846\u4e2dRole\u4e00\u680f\u586b\u5165\u503c\uff0c\u683c\u5f0f\u4e3a \u3010\u89d2\u8272ARN\u3011,\u3010\u8eab\u4efd\u63d0\u4f9b\u5546ARN\u3011,\u6ce8\u610f\u4e24\u4e2aARN\u4e4b\u95f4\u7531\u534a\u89d2\uff08\u82f1\u6587\uff09\u9017\u53f7\u9694\u5f00\u3002 \u8fd4\u56dearkid\u8ba4\u8bc1\u5e73\u53f0\u684c\u9762\uff0c\u70b9\u51fb\u963f\u91cc\u4e91\u89d2\u8272SSO\u5e94\u7528\u5361\u7247\uff0c\u7ecf\u591a\u6b21\u8df3\u8f6c\u540e\u5373\u53ef\u4ee5\u5bf9\u5e94\u89d2\u8272\u8fdb\u5165\u963f\u91cc\u4e91\u5e73\u53f0","title":"\u963f\u91cc\u4e91\u89d2\u8272SSO"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_proxy_nginx/","text":"\u5e94\u7528URL\u4ee3\u7406\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u521b\u5efa\u5e94\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u8bbe\u7f6e\u5e94\u7528\u7684\u8bbf\u95eeURL\u4e3a\u5185\u90e8\u5730\u5740(\u5982\uff1ahttp://192.168.1.100:8000), \u684c\u9762\u8bbf\u95ee\u5e94\u7528\u7684URL\u4f1a\u88ab\u81ea\u52a8\u6539\u6210 http(s)://{\u5e94\u7528ID}.{frontend_host}, \u7136\u540e\u70b9\u51fb\u6b64\u94fe\u63a5\uff0c\u4f1a\u88abnginx\u4ee3\u7406\u8df3\u8f6c\u5230\u5e94\u7528\u7684\u5185\u90e8URL \u914d\u7f6e\u65b9\u6cd5 # \u521b\u5efa\u4ee3\u7406URL\u5e94\u7528 \u6ce8\u610f URL\u683c\u5f0f\u6ee1\u8db3http://xxxx, \u4e0d\u80fd\u662fhttps \u786e\u8ba4\u684c\u9762\u5e94\u7528URL\u6539\u53d8 \u6ce8\u610f \u521b\u5efa\u4ee3\u7406URL\u5e94\u7528\u540e\uff0c\u4f1a\u81ea\u52a8\u751f\u6210nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u90e8\u7f72ArkID\u540e\uff0cnginx\u4f1a\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u8df3\u8f6c\u5230\u5185\u90e8\u5730\u5740\uff0c\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a","title":"\u5e94\u7528URL\u4ee3\u7406\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_proxy_nginx/#url","text":"","title":"\u5e94\u7528URL\u4ee3\u7406\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_proxy_nginx/#_1","text":"\u521b\u5efa\u5e94\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u8bbe\u7f6e\u5e94\u7528\u7684\u8bbf\u95eeURL\u4e3a\u5185\u90e8\u5730\u5740(\u5982\uff1ahttp://192.168.1.100:8000), \u684c\u9762\u8bbf\u95ee\u5e94\u7528\u7684URL\u4f1a\u88ab\u81ea\u52a8\u6539\u6210 http(s)://{\u5e94\u7528ID}.{frontend_host}, \u7136\u540e\u70b9\u51fb\u6b64\u94fe\u63a5\uff0c\u4f1a\u88abnginx\u4ee3\u7406\u8df3\u8f6c\u5230\u5e94\u7528\u7684\u5185\u90e8URL","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_app_proxy_nginx/#_2","text":"\u521b\u5efa\u4ee3\u7406URL\u5e94\u7528 \u6ce8\u610f URL\u683c\u5f0f\u6ee1\u8db3http://xxxx, \u4e0d\u80fd\u662fhttps \u786e\u8ba4\u684c\u9762\u5e94\u7528URL\u6539\u53d8 \u6ce8\u610f \u521b\u5efa\u4ee3\u7406URL\u5e94\u7528\u540e\uff0c\u4f1a\u81ea\u52a8\u751f\u6210nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u90e8\u7f72ArkID\u540e\uff0cnginx\u4f1a\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u8df3\u8f6c\u5230\u5185\u90e8\u5730\u5740\uff0c\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a","title":"\u914d\u7f6e\u65b9\u6cd5"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_email/","text":"Email \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # Email\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\uff0c\u4f7f\u7528\u90ae\u7bb1\u8d26\u53f7\u6765\u5b8c\u6210\u7528\u6237\u7ed1\u5b9a\u4ee5\u53ca\u8ba4\u8bc1 \u4f7f\u7528\u793a\u4f8b # \u63d2\u4ef6\u79df\u8d41 \u6dfb\u52a0\u8ba4\u8bc1\u56e0\u7d20 \u767b\u5f55\u9875\u9762 \u6ce8\u518c\u9875\u9762 \u66f4\u6539\u5bc6\u7801\u9875\u9762 \u66f4\u6362\u90ae\u7bb1\u9875\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230Email\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u6ce8\u610f\uff1a\u6b64\u5904\u7684SMTP\u90ae\u7bb1\u670d\u52a1\u4ec5\u652f\u6301SSL\u6a21\u5f0f","title":"Email \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_email/#email","text":"","title":"Email \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_email/#_1","text":"Email\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\uff0c\u4f7f\u7528\u90ae\u7bb1\u8d26\u53f7\u6765\u5b8c\u6210\u7528\u6237\u7ed1\u5b9a\u4ee5\u53ca\u8ba4\u8bc1","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_email/#_2","text":"\u63d2\u4ef6\u79df\u8d41 \u6dfb\u52a0\u8ba4\u8bc1\u56e0\u7d20 \u767b\u5f55\u9875\u9762 \u6ce8\u518c\u9875\u9762 \u66f4\u6539\u5bc6\u7801\u9875\u9762 \u66f4\u6362\u90ae\u7bb1\u9875\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230Email\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u6ce8\u610f\uff1a\u6b64\u5904\u7684SMTP\u90ae\u7bb1\u670d\u52a1\u4ec5\u652f\u6301SSL\u6a21\u5f0f","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_ldap/","text":"LDAP \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # ldap\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\uff0c\u4f7f\u7528LDAP\u534f\u8bae\u6765\u5b8c\u6210\u7528\u6237\u7ed1\u5b9a\u4ee5\u53ca\u8ba4\u8bc1 \u4f7f\u7528\u793a\u4f8b # \u63d2\u4ef6\u79df\u8d41 \u6dfb\u52a0\u8ba4\u8bc1\u56e0\u7d20 \u767b\u5f55\u9875\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230LDAP\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u6ce8\u610f\uff1a\u7528\u6237\u4fe1\u606f\u5b57\u6bb5\u6620\u5c04\u4e2d\u5b57\u6bb5\u540d\u4e3aarkid\u5e73\u53f0\u4e2dUSER\u6a21\u578b\u5c5e\u6027\u5b57\u6bb5\u540d\u79f0\uff0c\u6620\u5c04\u540d\u4e3a\u5728LDAP\u534f\u8bae\u4e2d\u7528\u6237\u4fe1\u606f\u5c5e\u6027\u5b57\u6bb5\u540d\u79f0\uff0c\u8be5\u6620\u5c04\u5173\u7cfb\u914d\u7f6e\u540e\u4f1a\u5c06\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u7684\u7528\u6237\u4fe1\u606f\u5bf9\u5e94\u5199\u5165arkid\u6570\u636e\u5e93","title":"LDAP \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_ldap/#ldap","text":"","title":"LDAP \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_ldap/#_1","text":"ldap\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\uff0c\u4f7f\u7528LDAP\u534f\u8bae\u6765\u5b8c\u6210\u7528\u6237\u7ed1\u5b9a\u4ee5\u53ca\u8ba4\u8bc1","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_ldap/#_2","text":"\u63d2\u4ef6\u79df\u8d41 \u6dfb\u52a0\u8ba4\u8bc1\u56e0\u7d20 \u767b\u5f55\u9875\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230LDAP\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u6ce8\u610f\uff1a\u7528\u6237\u4fe1\u606f\u5b57\u6bb5\u6620\u5c04\u4e2d\u5b57\u6bb5\u540d\u4e3aarkid\u5e73\u53f0\u4e2dUSER\u6a21\u578b\u5c5e\u6027\u5b57\u6bb5\u540d\u79f0\uff0c\u6620\u5c04\u540d\u4e3a\u5728LDAP\u534f\u8bae\u4e2d\u7528\u6237\u4fe1\u606f\u5c5e\u6027\u5b57\u6bb5\u540d\u79f0\uff0c\u8be5\u6620\u5c04\u5173\u7cfb\u914d\u7f6e\u540e\u4f1a\u5c06\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u7684\u7528\u6237\u4fe1\u606f\u5bf9\u5e94\u5199\u5165arkid\u6570\u636e\u5e93","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_saml2/","text":"SAML 2.0 \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # SAML 2.0\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\uff0c\u4f7f\u7528SAML 2.0\u534f\u8bae\u6765\u5b8c\u6210\u7528\u6237\u7ed1\u5b9a\u4ee5\u53ca\u8ba4\u8bc1 \u4f7f\u7528\u793a\u4f8b # \u63d2\u4ef6\u79df\u8d41 \u6dfb\u52a0\u8ba4\u8bc1\u56e0\u7d20 \u767b\u5f55\u9875\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230SAML 2.0\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011->\u3010\u8ba4\u8bc1\u56e0\u7d20\u3011\uff0c\u70b9\u51fb\u9875\u9762\u4e0a\u7684\u6dfb\u52a0\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9saml2.0,\u4e0a\u4f20IDPmetadata\u6587\u4ef6 SP\u5143\u6570\u636e\u6587\u4ef6\u5730\u5740\u590d\u5236\u5230\u6d4f\u89c8\u5668\u6807\u7b7e\u680f\u6253\u5f00\u5907\u7528","title":"SAML 2.0 \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_saml2/#saml-20","text":"","title":"SAML 2.0 \u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_saml2/#_1","text":"SAML 2.0\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\uff0c\u4f7f\u7528SAML 2.0\u534f\u8bae\u6765\u5b8c\u6210\u7528\u6237\u7ed1\u5b9a\u4ee5\u53ca\u8ba4\u8bc1","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auth_factor_saml2/#_2","text":"\u63d2\u4ef6\u79df\u8d41 \u6dfb\u52a0\u8ba4\u8bc1\u56e0\u7d20 \u767b\u5f55\u9875\u9762 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230SAML 2.0\u8ba4\u8bc1\u56e0\u7d20\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u8ba4\u8bc1\u7ba1\u7406\u3011->\u3010\u8ba4\u8bc1\u56e0\u7d20\u3011\uff0c\u70b9\u51fb\u9875\u9762\u4e0a\u7684\u6dfb\u52a0\u6309\u94ae\uff0c\u7c7b\u578b\u9009\u62e9saml2.0,\u4e0a\u4f20IDPmetadata\u6587\u4ef6 SP\u5143\u6570\u636e\u6587\u4ef6\u5730\u5740\u590d\u5236\u5230\u6d4f\u89c8\u5668\u6807\u7b7e\u680f\u6253\u5f00\u5907\u7528","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/","text":"Kerberos\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u901a\u8fc7\u6b64\u63d2\u4ef6\uff0c\u53ef\u4ee5\u7528AD\u57df\u4e2d\u7684\u8d26\u53f7\u81ea\u52a8\u767b\u5f55\u5230ArkID, \u524d\u63d0\u4f01\u4e1a\u5df2\u7ecf\u914d\u7f6e\u597dAD\u57df\u73af\u5883\uff0c\u5458\u5de5\u7535\u8111\u4e5f\u5728\u57df\u7ba1\u7406\u4e4b\u4e0b \u6709\u5173\u5982\u4f55\u914d\u7f6eAD\u57df\u7684\u8be6\u60c5\uff0c\u53c2\u89c1 AD\u57df\u4e0b\u914d\u7f6ekerberos\u8ba4\u8bc1\u6587\u6863 AD\u57df\u4e0a\u521b\u5efaArkID\u670d\u52a1\u8d26\u6237 # AD\u4e0a\u521b\u5efaArkID\u670d\u52a1\u8d26\u6237 \u914d\u7f6e\u670d\u52a1\u8d26\u6237\u5c5e\u6027 \u5728AD\u4e2d\u5bfc\u51faArkID\u670d\u52a1\u5bf9\u5e94\u7684keytab\u6587\u4ef6 # AD\u6240\u5728Windows Server\u4e0a\u6267\u884c\u547d\u4ee4 \u914d\u7f6eArkID Server # Server\u4e0a\u5b89\u88c5Kerberos\u5ba2\u6237\u7aef \u4fee\u6539kerberos\u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6 AD\u4e2d\u5bfc\u51fa\u7684krb5.keytab\u653e\u5230/etc\u76ee\u5f55\u4e0b centos\u4e0a\u6267\u884c\u547d\u4ee4: yum install krb5-workstation krb5-libs krb5-devel \u6ce8\u610f \u5176\u4ed6\u7684linux\u53d1\u884c\u7248\u5b89\u88c5\u7684\u5ba2\u6237\u7aef\u8f6f\u4ef6\u53ef\u80fd\u4e0d\u4e00\u6837 \u914d\u7f6eArkID kerberos\u63d2\u4ef6 # \u521b\u5efa\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6\u914d\u7f6e \u914d\u7f6e\u6d4f\u89c8\u5668 # \u6253\u5f00\u6d4f\u89c8\u5668\u672c\u5730\u7ad9\u70b9 \u6253\u5f00\u9ad8\u7ea7\u8bbe\u7f6e \u6dfb\u52a0ArkID\u7ad9\u70b9 \u6ce8\u610f edge\u548cchrome\u5171\u7528\u8fd9\u4e2a\u8bbe\u7f6e, firefox\u9700\u8981\u53e6\u5916\u7684\u914d\u7f6e\u65b9\u6cd5, \u53e6\u5916\u4e5f\u53ef\u4ee5\u901a\u8fc7AD\u4e0b\u53d1\u7ec4\u7b56\u7565\u8bbe\u7f6e\u57df\u4e2d\u7684\u8ba1\u7b97\u673a \u53c2\u8003\uff1a \u901a\u8fc7\u7ec4\u7b56\u7565\u5b9e\u73b0IE\u81ea\u52a8\u4ee5\u5f53\u524d\u57df\u8d26\u53f7\u767b\u5f55SP\u7ad9\u70b9 \u6d4b\u8bd5\u81ea\u52a8\u767b\u5f55\u6548\u679c # \u6d4f\u89c8\u5668\u6253\u5f00ArkID\u5730\u5740\uff0c\u4e0d\u9700\u8981\u8f93\u5165\u5bc6\u7801\uff0c\u4ee5\u5f53\u524dPC\u57df\u8d26\u53f7\u767b\u5f55\u5230ArkID","title":"Kerberos\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#kerberos","text":"","title":"Kerberos\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#_1","text":"\u901a\u8fc7\u6b64\u63d2\u4ef6\uff0c\u53ef\u4ee5\u7528AD\u57df\u4e2d\u7684\u8d26\u53f7\u81ea\u52a8\u767b\u5f55\u5230ArkID, \u524d\u63d0\u4f01\u4e1a\u5df2\u7ecf\u914d\u7f6e\u597dAD\u57df\u73af\u5883\uff0c\u5458\u5de5\u7535\u8111\u4e5f\u5728\u57df\u7ba1\u7406\u4e4b\u4e0b \u6709\u5173\u5982\u4f55\u914d\u7f6eAD\u57df\u7684\u8be6\u60c5\uff0c\u53c2\u89c1 AD\u57df\u4e0b\u914d\u7f6ekerberos\u8ba4\u8bc1\u6587\u6863","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#adarkid","text":"AD\u4e0a\u521b\u5efaArkID\u670d\u52a1\u8d26\u6237 \u914d\u7f6e\u670d\u52a1\u8d26\u6237\u5c5e\u6027","title":"AD\u57df\u4e0a\u521b\u5efaArkID\u670d\u52a1\u8d26\u6237"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#adarkidkeytab","text":"AD\u6240\u5728Windows Server\u4e0a\u6267\u884c\u547d\u4ee4","title":"\u5728AD\u4e2d\u5bfc\u51faArkID\u670d\u52a1\u5bf9\u5e94\u7684keytab\u6587\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#arkid-server","text":"Server\u4e0a\u5b89\u88c5Kerberos\u5ba2\u6237\u7aef \u4fee\u6539kerberos\u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6 AD\u4e2d\u5bfc\u51fa\u7684krb5.keytab\u653e\u5230/etc\u76ee\u5f55\u4e0b centos\u4e0a\u6267\u884c\u547d\u4ee4: yum install krb5-workstation krb5-libs krb5-devel \u6ce8\u610f \u5176\u4ed6\u7684linux\u53d1\u884c\u7248\u5b89\u88c5\u7684\u5ba2\u6237\u7aef\u8f6f\u4ef6\u53ef\u80fd\u4e0d\u4e00\u6837","title":"\u914d\u7f6eArkID Server"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#arkid-kerberos","text":"\u521b\u5efa\u81ea\u52a8\u767b\u5f55\u63d2\u4ef6\u914d\u7f6e","title":"\u914d\u7f6eArkID kerberos\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#_2","text":"\u6253\u5f00\u6d4f\u89c8\u5668\u672c\u5730\u7ad9\u70b9 \u6253\u5f00\u9ad8\u7ea7\u8bbe\u7f6e \u6dfb\u52a0ArkID\u7ad9\u70b9 \u6ce8\u610f edge\u548cchrome\u5171\u7528\u8fd9\u4e2a\u8bbe\u7f6e, firefox\u9700\u8981\u53e6\u5916\u7684\u914d\u7f6e\u65b9\u6cd5, \u53e6\u5916\u4e5f\u53ef\u4ee5\u901a\u8fc7AD\u4e0b\u53d1\u7ec4\u7b56\u7565\u8bbe\u7f6e\u57df\u4e2d\u7684\u8ba1\u7b97\u673a \u53c2\u8003\uff1a \u901a\u8fc7\u7ec4\u7b56\u7565\u5b9e\u73b0IE\u81ea\u52a8\u4ee5\u5f53\u524d\u57df\u8d26\u53f7\u767b\u5f55SP\u7ad9\u70b9","title":"\u914d\u7f6e\u6d4f\u89c8\u5668"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_auth_kerberos/#_3","text":"\u6d4f\u89c8\u5668\u6253\u5f00ArkID\u5730\u5740\uff0c\u4e0d\u9700\u8981\u8f93\u5165\u5bc6\u7801\uff0c\u4ee5\u5f53\u524dPC\u57df\u8d26\u53f7\u767b\u5f55\u5230ArkID","title":"\u6d4b\u8bd5\u81ea\u52a8\u767b\u5f55\u6548\u679c"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_form_fill/","text":"\u8d26\u5bc6\u4ee3\u586b\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u901a\u8fc7\u6b64\u63d2\u4ef6\u521b\u5efa\u5e94\u7528\u540e\uff0c\u5b89\u88c5\u5bf9\u5e94\u7684chrome\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5c06\u7528\u4e8e\u767b\u5f55\u8be5\u5e94\u7528\u7684\u8d26\u53f7\u548c\u5bc6\u7801\u5b58\u50a8\u5728chrome\u63d2\u4ef6\u91cc\uff0c\u70b9\u51fb\u5e94\u7528\u56fe\u6807\uff0c\u53ef\u4ee5\u9009\u62e9\u767b\u5f55\u7684\u8d26\u53f7\uff0c \u81ea\u52a8\u8df3\u8f6c\u5230\u8be5\u5e94\u7528\u7684\u767b\u5f55URL\uff0c\u5e76\u81ea\u52a8\u586b\u5165\u5e94\u7528\u767b\u5f55\u9875\u8d26\u53f7\u548c\u5bc6\u7801\uff0c\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\uff0c\u907f\u514d\u6bcf\u6b21\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u5728chrome\u63d2\u4ef6\u91cc\u505a\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u8d26\u53f7\u5bc6\u7801\u7b49\u7ba1\u7406\u64cd\u4f5c\u3002 \u914d\u7f6e\u8d26\u5bc6\u4ee3\u586b\u5e94\u7528 # \u521b\u5efa\u4ee3\u7406URL\u5e94\u7528 \u914d\u7f6e\u5e94\u7528\u534f\u8bae \u70b9\u51fb\u5e94\u7528\u56fe\u6807 \u5b89\u88c5chrome\u63d2\u4ef6 \u9996\u6b21\u767b\u5f55\u8f93\u5165\u8d26\u53f7\u5bc6\u7801 \u8df3\u8f6c\u5230\u5e94\u7528\u767b\u5f55\u9875\u9762 \u63d0\u793a \u81ea\u52a8\u767b\u5f55\u767b\u5f55\u6253\u5f00, \u4ee3\u8868\u5e94\u7528\u767b\u5f55\u9875\u81ea\u52a8\u586b\u5165\u8d26\u53f7\u5bc6\u7801\u540e\uff0c\u81ea\u52a8\u70b9\u51fb\u767b\u5f55\u6309\u94ae, \u5426\u5219\u4e0d\u81ea\u52a8\u70b9\u51fb\u767b\u5f55\u6309\u94ae \u5982\u679c\u6ca1\u6709\u5b89\u88c5\u8fc7chrome\u63d2\u4ef6\uff0c\u9700\u8981\u6309\u9875\u9762\u63d0\u793a\u5148\u5b89\u88c5chrome\u63d2\u4ef6\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5237\u65b0\u9875\u9762 \u70b9\u51fb\u6dfb\u52a0\u540e\uff0c\u4f1a\u81ea\u52a8\u8df3\u8f6c\u5230\u5e94\u7528\u767b\u5f55\u9875\u9762 \u4f7f\u7528chrome\u63d2\u4ef6\u7ba1\u7406\u8d26\u53f7 # \u6dfb\u52a0\u5e94\u7528\u8d26\u53f7 \u91cd\u65b0\u70b9\u51fb\u5e94\u7528\u56fe\u6807","title":"\u8d26\u5bc6\u4ee3\u586b\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_form_fill/#_1","text":"","title":"\u8d26\u5bc6\u4ee3\u586b\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_form_fill/#_2","text":"\u901a\u8fc7\u6b64\u63d2\u4ef6\u521b\u5efa\u5e94\u7528\u540e\uff0c\u5b89\u88c5\u5bf9\u5e94\u7684chrome\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5c06\u7528\u4e8e\u767b\u5f55\u8be5\u5e94\u7528\u7684\u8d26\u53f7\u548c\u5bc6\u7801\u5b58\u50a8\u5728chrome\u63d2\u4ef6\u91cc\uff0c\u70b9\u51fb\u5e94\u7528\u56fe\u6807\uff0c\u53ef\u4ee5\u9009\u62e9\u767b\u5f55\u7684\u8d26\u53f7\uff0c \u81ea\u52a8\u8df3\u8f6c\u5230\u8be5\u5e94\u7528\u7684\u767b\u5f55URL\uff0c\u5e76\u81ea\u52a8\u586b\u5165\u5e94\u7528\u767b\u5f55\u9875\u8d26\u53f7\u548c\u5bc6\u7801\uff0c\u5b9e\u73b0\u81ea\u52a8\u767b\u5f55\uff0c\u907f\u514d\u6bcf\u6b21\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u5728chrome\u63d2\u4ef6\u91cc\u505a\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u8d26\u53f7\u5bc6\u7801\u7b49\u7ba1\u7406\u64cd\u4f5c\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_form_fill/#_3","text":"\u521b\u5efa\u4ee3\u7406URL\u5e94\u7528 \u914d\u7f6e\u5e94\u7528\u534f\u8bae \u70b9\u51fb\u5e94\u7528\u56fe\u6807 \u5b89\u88c5chrome\u63d2\u4ef6 \u9996\u6b21\u767b\u5f55\u8f93\u5165\u8d26\u53f7\u5bc6\u7801 \u8df3\u8f6c\u5230\u5e94\u7528\u767b\u5f55\u9875\u9762 \u63d0\u793a \u81ea\u52a8\u767b\u5f55\u767b\u5f55\u6253\u5f00, \u4ee3\u8868\u5e94\u7528\u767b\u5f55\u9875\u81ea\u52a8\u586b\u5165\u8d26\u53f7\u5bc6\u7801\u540e\uff0c\u81ea\u52a8\u70b9\u51fb\u767b\u5f55\u6309\u94ae, \u5426\u5219\u4e0d\u81ea\u52a8\u70b9\u51fb\u767b\u5f55\u6309\u94ae \u5982\u679c\u6ca1\u6709\u5b89\u88c5\u8fc7chrome\u63d2\u4ef6\uff0c\u9700\u8981\u6309\u9875\u9762\u63d0\u793a\u5148\u5b89\u88c5chrome\u63d2\u4ef6\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5237\u65b0\u9875\u9762 \u70b9\u51fb\u6dfb\u52a0\u540e\uff0c\u4f1a\u81ea\u52a8\u8df3\u8f6c\u5230\u5e94\u7528\u767b\u5f55\u9875\u9762","title":"\u914d\u7f6e\u8d26\u5bc6\u4ee3\u586b\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_auto_form_fill/#chrome","text":"\u6dfb\u52a0\u5e94\u7528\u8d26\u53f7 \u91cd\u65b0\u70b9\u51fb\u5e94\u7528\u56fe\u6807","title":"\u4f7f\u7528chrome\u63d2\u4ef6\u7ba1\u7406\u8d26\u53f7"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_cache_redis/","text":"\u7f13\u5b58\u63d2\u4ef6\uff1aRedis # \u529f\u80fd\u4ecb\u7ecd # \u901a\u8fc7Redis\u8fdb\u884c\u7f13\u5b58\u6570\u636e\u7684\u5b58\u53d6 \u4f7f\u7528\u793a\u4f8b # \u63d2\u4ef6\u79df\u8d41 \u542f\u7528\u63d2\u4ef6 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u7f13\u5b58\u63d2\u4ef6\uff1aRedis\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u5df2\u5b89\u88c5\u63d2\u4ef6\u9875\u9762\u4e2d\u627e\u5230\u7f13\u5b58\u63d2\u4ef6\uff1aRedis\u63d2\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e \u914d\u7f6e\u5b8c\u6210\u540e\u4ec5\u5bf9\u5f53\u524d\u79df\u6237\u751f\u6548\u3002","title":"\u7f13\u5b58\u63d2\u4ef6\uff1aRedis"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_cache_redis/#redis","text":"","title":"\u7f13\u5b58\u63d2\u4ef6\uff1aRedis"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_cache_redis/#_1","text":"\u901a\u8fc7Redis\u8fdb\u884c\u7f13\u5b58\u6570\u636e\u7684\u5b58\u53d6","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_cache_redis/#_2","text":"\u63d2\u4ef6\u79df\u8d41 \u542f\u7528\u63d2\u4ef6 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u7f13\u5b58\u63d2\u4ef6\uff1aRedis\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u5df2\u5b89\u88c5\u63d2\u4ef6\u9875\u9762\u4e2d\u627e\u5230\u7f13\u5b58\u63d2\u4ef6\uff1aRedis\u63d2\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e \u914d\u7f6e\u5b8c\u6210\u540e\u4ec5\u5bf9\u5f53\u524d\u79df\u6237\u751f\u6548\u3002","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_export_user/","text":"\u7528\u6237\u548c\u5206\u7ec4\u5bfc\u5165\u5bfc\u51fa # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6e\u7528\u6237\u548c\u7528\u6237\u5206\u7ec4\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fb\u7528\u6237\u5217\u8868\u548c\u5206\u7ec4\u5217\u8868\u7684\u5bfc\u51fa\u6309\u94ae\uff0c\u5bfc\u51fa\u7528\u6237\u6570\u636e\u6216\u5206\u7ec4\u6570\u636e\u3002\u6216\u70b9\u51fb\u5bfc\u5165\u6309\u94ae\uff0c\u5bfc\u5165\u7528\u6237\u6570\u636e\u6216\u5206\u7ec4\u6570\u636e \u63d2\u4ef6\u914d\u7f6e\u8bf4\u660e # \u79df\u8d41\u597d\u63d2\u4ef6\u540e\uff0c\u70b9\u51fb\u79df\u6237\u7ba1\u7406\u7684\u5df2\u79df\u8d41\uff0c\u627e\u5230\u8be5\u63d2\u4ef6 \u70b9\u51fb\u79df\u6237\u914d\u7f6e\u6309\u94ae\uff0c\u8bbe\u7f6e\u5bfc\u51fa\u683c\u5f0f \u5bfc\u51fa\u7528\u6237\u6570\u636e \u5bfc\u51fa\u7528\u6237\u5206\u7ec4\u6570\u636e \u5bfc\u5165\u7528\u6237\u6570\u636e\uff0c\u9700\u8981\u5148\u586b\u5199\u6a21\u677f\u518d\u5bfc\u5165 \u5bfc\u5165\u7528\u6237\u5206\u7ec4\u6570\u636e\uff0c\u9700\u8981\u5148\u586b\u5199\u6a21\u677f\u518d\u5bfc\u5165","title":"\u7528\u6237\u548c\u5206\u7ec4\u5bfc\u5165\u5bfc\u51fa"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_export_user/#_1","text":"","title":"\u7528\u6237\u548c\u5206\u7ec4\u5bfc\u5165\u5bfc\u51fa"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_export_user/#_2","text":"\u914d\u7f6e\u7528\u6237\u548c\u7528\u6237\u5206\u7ec4\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fb\u7528\u6237\u5217\u8868\u548c\u5206\u7ec4\u5217\u8868\u7684\u5bfc\u51fa\u6309\u94ae\uff0c\u5bfc\u51fa\u7528\u6237\u6570\u636e\u6216\u5206\u7ec4\u6570\u636e\u3002\u6216\u70b9\u51fb\u5bfc\u5165\u6309\u94ae\uff0c\u5bfc\u5165\u7528\u6237\u6570\u636e\u6216\u5206\u7ec4\u6570\u636e","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_export_user/#_3","text":"\u79df\u8d41\u597d\u63d2\u4ef6\u540e\uff0c\u70b9\u51fb\u79df\u6237\u7ba1\u7406\u7684\u5df2\u79df\u8d41\uff0c\u627e\u5230\u8be5\u63d2\u4ef6 \u70b9\u51fb\u79df\u6237\u914d\u7f6e\u6309\u94ae\uff0c\u8bbe\u7f6e\u5bfc\u51fa\u683c\u5f0f \u5bfc\u51fa\u7528\u6237\u6570\u636e \u5bfc\u51fa\u7528\u6237\u5206\u7ec4\u6570\u636e \u5bfc\u5165\u7528\u6237\u6570\u636e\uff0c\u9700\u8981\u5148\u586b\u5199\u6a21\u677f\u518d\u5bfc\u5165 \u5bfc\u5165\u7528\u6237\u5206\u7ec4\u6570\u636e\uff0c\u9700\u8981\u5148\u586b\u5199\u6a21\u677f\u518d\u5bfc\u5165","title":"\u63d2\u4ef6\u914d\u7f6e\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/","text":"Dingding \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6eDingding\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Dingding\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Dingding\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u9996\u5148\u6210\u4e3a\u9489\u9489\u5f00\u53d1\u8005 # \u8be6\u60c5\u8bf7\u53c2\u8003[\u6210\u4e3a\u9489\u9489\u5f00\u53d1\u8005](https://open.dingtalk.com/document/org/become-a-dingtalk-developer) \u914d\u7f6e\u9489\u9489\u5e94\u7528\u8bf7\u53c2\u8003\u94fe\u63a5[\u5b9e\u73b0\u767b\u5f55\u7b2c\u4e09\u65b9\u7f51\u7ad9](https://open.dingtalk.com/document/orgapp-server/tutorial-obtaining-user-personal-information) \u767b\u5f55\u9489\u9489\u5f00\u53d1\u8005\u540e\u53f0\uff0c\u521b\u5efa\u5e76\u914d\u7f6e\u5e94\u7528 # \u70b9\u51fb\u521b\u5efa\u5e94\u7528 \u586b\u5199\u8868\u5355\u53c2\u6570 \u4fdd\u5b58App Key\u548cApp Secret \u914d\u7f6e\u5f00\u53d1\u7ba1\u7406\u4fe1\u606f \u6dfb\u52a0\u63a5\u53e3\u6743\u9650 \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u521b\u5efa\u9489\u9489\u7b2c\u4e09\u65b9\u767b\u5f55 \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL \u66f4\u65b0\u9489\u9489\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u8bbe\u7f6e\u9489\u9489\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762\u9489\u9489\u56fe\u6807 \u9489\u9489\u626b\u7801\u767b\u5f55 \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"Dingding \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#dingding","text":"","title":"Dingding \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#_1","text":"\u914d\u7f6eDingding\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Dingding\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Dingding\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#_2","text":"\u8be6\u60c5\u8bf7\u53c2\u8003[\u6210\u4e3a\u9489\u9489\u5f00\u53d1\u8005](https://open.dingtalk.com/document/org/become-a-dingtalk-developer) \u914d\u7f6e\u9489\u9489\u5e94\u7528\u8bf7\u53c2\u8003\u94fe\u63a5[\u5b9e\u73b0\u767b\u5f55\u7b2c\u4e09\u65b9\u7f51\u7ad9](https://open.dingtalk.com/document/orgapp-server/tutorial-obtaining-user-personal-information)","title":"\u9996\u5148\u6210\u4e3a\u9489\u9489\u5f00\u53d1\u8005"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#_3","text":"\u70b9\u51fb\u521b\u5efa\u5e94\u7528 \u586b\u5199\u8868\u5355\u53c2\u6570 \u4fdd\u5b58App Key\u548cApp Secret \u914d\u7f6e\u5f00\u53d1\u7ba1\u7406\u4fe1\u606f \u6dfb\u52a0\u63a5\u53e3\u6743\u9650","title":"\u767b\u5f55\u9489\u9489\u5f00\u53d1\u8005\u540e\u53f0\uff0c\u521b\u5efa\u5e76\u914d\u7f6e\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#arkidurl","text":"\u521b\u5efa\u9489\u9489\u7b2c\u4e09\u65b9\u767b\u5f55 \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#url","text":"\u8bbe\u7f6e\u9489\u9489\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762\u9489\u9489\u56fe\u6807 \u9489\u9489\u626b\u7801\u767b\u5f55","title":"\u66f4\u65b0\u9489\u9489\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_dingding/#_4","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/","text":"Feishu \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6eFeishu\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Feishu\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Feishu\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u521b\u5efaFeishu\u5e94\u7528 # \u6253\u5f00\u521b\u5efa\u5e94\u7528\u9875\u9762 \u70b9\u51fb\u521b\u5efa\u4f01\u4e1a\u81ea\u5efa\u5e94\u7528\uff0c\u586b\u5199\u8868\u5355 \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u70b9\u51fb\u7f16\u8f91\uff0c\u70b9\u51fb\u6743\u9650\u7ba1\u7406\uff0c\u6dfb\u52a0\u83b7\u53d6\u7528\u6237userID\u6743\u9650 \u5207\u56de\u51ed\u8bc1\u4e0e\u57fa\u7840\u4fe1\u606f\u9875 \u4fdd\u5b58App ID\u548cApp Secret \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL \u66f4\u65b0Feishu\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u91cd\u65b0\u8bbe\u7f6eFeishu\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762Feishu\u56fe\u6807 \u70b9\u51fb\u6388\u6743\u6309\u94ae \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"Feishu \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/#feishu","text":"","title":"Feishu \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/#_1","text":"\u914d\u7f6eFeishu\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Feishu\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Feishu\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/#feishu_1","text":"\u6253\u5f00\u521b\u5efa\u5e94\u7528\u9875\u9762 \u70b9\u51fb\u521b\u5efa\u4f01\u4e1a\u81ea\u5efa\u5e94\u7528\uff0c\u586b\u5199\u8868\u5355 \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u70b9\u51fb\u7f16\u8f91\uff0c\u70b9\u51fb\u6743\u9650\u7ba1\u7406\uff0c\u6dfb\u52a0\u83b7\u53d6\u7528\u6237userID\u6743\u9650 \u5207\u56de\u51ed\u8bc1\u4e0e\u57fa\u7840\u4fe1\u606f\u9875 \u4fdd\u5b58App ID\u548cApp Secret","title":"\u521b\u5efaFeishu\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/#feishuurl","text":"\u91cd\u65b0\u8bbe\u7f6eFeishu\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762Feishu\u56fe\u6807 \u70b9\u51fb\u6388\u6743\u6309\u94ae","title":"\u66f4\u65b0Feishu\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_feishu/#_2","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/","text":"Gitee \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6eGitee\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Gitee\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Gitee\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u521b\u5efaGitee\u5e94\u7528 # \u6253\u5f00\u521b\u5efa\u5e94\u7528\u9875\u9762 \u70b9\u51fb\u521b\u5efa\u5e94\u7528\uff0c\u586b\u5199\u8868\u5355(\u540d\u79f0\uff0c\u4e3b\u9875URL\u548c\u56de\u8c03URL\u53ef\u4ee5\u968f\u610f\u586b\u5199\uff0c\u56de\u8c03URL\u540e\u9762\u6b65\u9aa4\u4e2d\u4f1a\u66f4\u6539\u6210ArkID\u81ea\u52a8\u751f\u6210\u7684URL) \u4fdd\u5b58Client ID\u548cClient Secret \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL \u66f4\u65b0Gitee\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u91cd\u65b0\u8bbe\u7f6eGitee\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762Gitee\u56fe\u6807 \u70b9\u51fb\u8ba4\u8bc1\u6309\u94ae \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"Gitee \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/#gitee","text":"","title":"Gitee \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/#_1","text":"\u914d\u7f6eGitee\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684Gitee\u56fe\u6807\uff0c\u8df3\u8f6c\u5230Gitee\u7f51\u7ad9\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/#gitee_1","text":"\u6253\u5f00\u521b\u5efa\u5e94\u7528\u9875\u9762 \u70b9\u51fb\u521b\u5efa\u5e94\u7528\uff0c\u586b\u5199\u8868\u5355(\u540d\u79f0\uff0c\u4e3b\u9875URL\u548c\u56de\u8c03URL\u53ef\u4ee5\u968f\u610f\u586b\u5199\uff0c\u56de\u8c03URL\u540e\u9762\u6b65\u9aa4\u4e2d\u4f1a\u66f4\u6539\u6210ArkID\u81ea\u52a8\u751f\u6210\u7684URL) \u4fdd\u5b58Client ID\u548cClient Secret","title":"\u521b\u5efaGitee\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/#giteeurl","text":"\u91cd\u65b0\u8bbe\u7f6eGitee\u5e94\u7528\u56de\u8c03URL \u70b9\u51fb\u767b\u5f55\u9875\u9762Gitee\u56fe\u6807 \u70b9\u51fb\u8ba4\u8bc1\u6309\u94ae","title":"\u66f4\u65b0Gitee\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_gitee/#_2","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/","text":"Miniprogram \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6eMiniprogram\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fb\u901a\u8fc7\u63d2\u4ef6\u63d0\u4f9b\u7684\u767b\u5f55\u548c\u7ed1\u5b9a\u65b9\u6cd5\uff0c\u5f88\u65b9\u4fbf\u7684\u5c06\u5c0f\u7a0b\u5e8f\u7528\u6237\uff0c\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a\u3002\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5b9e\u73b0\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u514d\u5bc6\u767b\u5f55arkid \u914d\u7f6e\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u57fa\u672c\u4fe1\u606f # \u767b\u5f55\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0\uff0c\u8fdb\u5165\u9700\u8981\u914d\u7f6e\u7684\u5c0f\u7a0b\u5e8f \u4fdd\u5b58App ID\u548cApp Secret \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c\u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6\u767b\u5f55\u5730\u5740\u3001\u7ed1\u5b9a\u5730\u5740\u3001\u767b\u5f55\u5730\u5740\u7684\u57df\u540d \u66f4\u65b0\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u670d\u52a1\u5668\u57df\u540d # \u914d\u7f6e\u670d\u52a1\u5668\u57df\u540d \u5982\u4f55\u4f7f\u7528\u767b\u5f55\u63a5\u53e3\u548c\u7ed1\u5b9a\u63a5\u53e3 # \u767b\u5f55\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: login url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code code \u5f00\u53d1\u4eba\u5458\u8c03\u7528\u5c0f\u7a0b\u5e8f\u63d0\u4f9b\u7684\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2acode \u8bf7\u6c42\u793a\u4f8b: http://login url/?code=xxxxx \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b token token \u7528\u6237token(\u53ea\u6709\u7528\u6237\u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u624d\u4f1a\u6709\u8fd9\u4e2a\u53c2\u6570) ext_id ext_id \u7528\u6237id tenant_id tenant_id \u79df\u6237id bind bind \u7ed1\u5b9a\u5730\u5740 \u8fd4\u56de\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"com.longgui.external.idp.miniprogram\" , \"data\" :{ \"token\" : \"\" , \"ext_id\" : \"o0ByU5cit-Pl3uxeXmsABV4xiRq8\" , \"tenant_id\" : \"4da114cee11544a0823bd372114425d0\" , \"bind\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_miniprogram/0d1183d2-46e5-409c-924c-438f722de2eb/bind\" } } or { \"error\" : \"0\" , \"package\" : \"com.longgui.external.idp.miniprogram\" , \"data\" :{ \"token\" : \"f4d8a6976111f9e3cc08d17bd16154a3dba9a2d5\" } } \u7ed1\u5b9a\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: bind url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization Token token \u7531arkid\u7528\u6237\u767b\u5f55\u83b7\u53d6\u7684token \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b ext_id ext_id \u5728\u767b\u5f55\u63a5\u53e3\u83b7\u5f97\u7684\u7ed1\u5b9aid \u8bf7\u6c42\u793a\u4f8b: http://bind url \u8fd4\u56de\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"com.longgui.external.idp.miniprogram\" } \u5982\u4f55\u83b7\u53d6arkid\u7528\u6237\u7684token # login_page\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: /api/v1/tenant/{tenant_id}/login_page/ \u8bf7\u6c42\u65b9\u5f0f: GET \u8fd4\u56de\u793a\u4f8b: { \"data\" :{ \"login\" :{ \"name\" : \"login\" , \"forms\" :[ { \"label\" : \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , \"items\" :[ { \"value\" : null , \"type\" : \"text\" , \"placeholder\" : \"\u7528\u6237\u540d\" , \"name\" : \"username\" , \"append\" : null , \"http\" : null }, { \"value\" : null , \"type\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" , \"name\" : \"password\" , \"append\" : null , \"http\" : null }, { \"value\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" , \"type\" : \"hidden\" , \"placeholder\" : null , \"name\" : \"config_id\" , \"append\" : null , \"http\" : null } ], \"submit\" :{ \"prepend\" : null , \"title\" : \"\u767b\u5f55\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : null , \"redirect\" : null , \"http\" :{ \"url\" : \"/api/v1/tenant/tenant_id/auth/?event_tag=com.longgui.auth.factor.password.auth\" , \"method\" : \"post\" , \"params\" : null }, \"delay\" : null , \"agreement\" : null } } ], \"bottoms\" :[ { \"prepend\" : \"\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u6ce8\u518c\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"register\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null } ], \"extend\" :{ \"title\" : null , \"buttons\" :[ { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://gitee.com/assets/favicon.ico\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_gitee/8fa7fcf2-d906-4da5-a6a8-1382b70863a5/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://p6-hera.byteimg.com/tos-cn-i-jbbdkfciu3/f3de430ed2b64f90a95fb8a393dfa6bd~tplv-jbbdkfciu3-image:0:0.image\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_feishu/a36d40d6-1374-4503-a8b9-84550d9da24b/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://img.onlinedown.net/download/202108/151913-611379f149740.jpg\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://aa.loopbing.top/api/v1/idp/com_longgui_external_idp_wechatwork/5d6b5935-15bb-46b2-a9f6-aa6329e64a9d/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://src.onlinedown.net/d/file/p/2019-08-06/2dc4d1b597725835d85259829db3fcff.jpg\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_wechatscan/5ac3dec7-44a1-4269-b450-6fe0fd0fe956/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null } ] } }, \"register\" :{ \"name\" : \"register\" , \"forms\" :[ { \"label\" : \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , \"items\" :[ { \"value\" : null , \"type\" : \"text\" , \"placeholder\" : \"\u7528\u6237\u540d\" , \"name\" : \"username\" , \"append\" : null , \"http\" : null }, { \"value\" : null , \"type\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" , \"name\" : \"password\" , \"append\" : null , \"http\" : null }, { \"value\" : null , \"type\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" , \"name\" : \"checkpassword\" , \"append\" : null , \"http\" : null }, { \"value\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" , \"type\" : \"hidden\" , \"placeholder\" : null , \"name\" : \"config_id\" , \"append\" : null , \"http\" : null } ], \"submit\" :{ \"prepend\" : null , \"title\" : \"\u6ce8\u518c\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : null , \"redirect\" : null , \"http\" :{ \"url\" : \"/api/v1/tenant/tenant_id/register/?event_tag=com.longgui.auth.factor.password.register\" , \"method\" : \"post\" , \"params\" : null }, \"delay\" : null , \"agreement\" : null } } ], \"bottoms\" :[ { \"prepend\" : \"\u5df2\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u767b\u5f55\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"login\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null } ], \"extend\" : null }, \"password\" :{ \"name\" : \"password\" , \"forms\" :[ ], \"bottoms\" :[ { \"prepend\" : \"\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u6ce8\u518c\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"register\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : \"\u5df2\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u767b\u5f55\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"login\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null } ], \"extend\" : null } }, \"tenant\" :{ \"id\" : \"4da114ce-e115-44a0-823b-d372114425d0\" , \"name\" : \"\u5e73\u53f0\u79df\u6237\" , \"slug\" : \"\" , \"icon\" : null } } \u8fd4\u56de\u8bf4\u660e: \u6211\u4eec\u9700\u8981\u91cd\u70b9\u5173\u6ce8data\u4e2d\u7684login\u548cregister\u5bf9\u8c61\u4e2d\u7684forms\u4e2d\u7684\u7b2c0\u4e2a\u5bf9\u8c61\u7684items\u548csubmit\u5b57\u6bb5\uff0c\u5176\u4e2dsubmit\u4e2d\u7684http\u5730\u5740\u662f\u8bf7\u6c42\u5730\u5740\uff0citems\u6570\u7ec4\u4e2d\u4e3a\u8bf7\u6c42\u53c2\u6570 \u6ce8\u518c\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: /api/v1/tenant/{tenant_id}/register/?event_tag=com.longgui.auth.factor.password.register \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b username username \u7528\u6237\u540d password password \u5bc6\u7801 checkpassword checkpassword \u91cd\u590d\u5bc6\u7801 config_id config_id \u914d\u7f6eid\u5728login_page\u7684items\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86 \u8bf7\u6c42\u793a\u4f8b: { \"username\" : \"abcd\" , \"password\" : \"abcd\" , \"checkpassword\" : \"abcd\" , \"config_id\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" } \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b user user \u7528\u6237\u5bf9\u8c61 id id \u7528\u6237id username username \u7528\u6237\u540d token token \u7528\u6237token \u8bf7\u6c42\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"core\" , \"message\" : \"\" , \"data\" : { \"user\" : { \"id\" : \"3740d775-e267-49f7-b431-098ca6e65f55\" , \"username\" : \"dage\" }, \"token\" : \"3dde5f5272743b9c82d826be3c0b8c0df290c24b\" } } \u767b\u5f55\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: /api/v1/tenant/{tenant_id}/auth/?event_tag=com.longgui.auth.factor.password.auth \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b username username \u7528\u6237\u540d password password \u5bc6\u7801 config_id config_id \u914d\u7f6eid\u5728login_page\u7684items\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86 \u8bf7\u6c42\u793a\u4f8b: { \"username\" : \"abcd\" , \"password\" : \"abcd\" , \"config_id\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" } \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b user user \u7528\u6237\u5bf9\u8c61 id id \u7528\u6237id username username \u7528\u6237\u540d token token \u7528\u6237token \u8bf7\u6c42\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"core\" , \"message\" : \"\" , \"data\" : { \"user\" : { \"id\" : \"3740d775-e267-49f7-b431-098ca6e65f55\" , \"username\" : \"dage\" }, \"token\" : \"3dde5f5272743b9c82d826be3c0b8c0df290c24b\" } }","title":"Miniprogram \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#miniprogram","text":"","title":"Miniprogram \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#_1","text":"\u914d\u7f6eMiniprogram\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fb\u901a\u8fc7\u63d2\u4ef6\u63d0\u4f9b\u7684\u767b\u5f55\u548c\u7ed1\u5b9a\u65b9\u6cd5\uff0c\u5f88\u65b9\u4fbf\u7684\u5c06\u5c0f\u7a0b\u5e8f\u7528\u6237\uff0c\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a\u3002\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5b9e\u73b0\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u514d\u5bc6\u767b\u5f55arkid","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#_2","text":"\u767b\u5f55\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0\uff0c\u8fdb\u5165\u9700\u8981\u914d\u7f6e\u7684\u5c0f\u7a0b\u5e8f \u4fdd\u5b58App ID\u548cApp Secret","title":"\u914d\u7f6e\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u57fa\u672c\u4fe1\u606f"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c\u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6\u767b\u5f55\u5730\u5740\u3001\u7ed1\u5b9a\u5730\u5740\u3001\u767b\u5f55\u5730\u5740\u7684\u57df\u540d","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#_3","text":"\u914d\u7f6e\u670d\u52a1\u5668\u57df\u540d","title":"\u66f4\u65b0\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u7684\u670d\u52a1\u5668\u57df\u540d"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#_4","text":"\u767b\u5f55\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: login url \u8bf7\u6c42\u65b9\u5f0f: GET \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b code code \u5f00\u53d1\u4eba\u5458\u8c03\u7528\u5c0f\u7a0b\u5e8f\u63d0\u4f9b\u7684\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2acode \u8bf7\u6c42\u793a\u4f8b: http://login url/?code=xxxxx \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b token token \u7528\u6237token(\u53ea\u6709\u7528\u6237\u5df2\u7ecf\u7ed1\u5b9a\u8fc7\u624d\u4f1a\u6709\u8fd9\u4e2a\u53c2\u6570) ext_id ext_id \u7528\u6237id tenant_id tenant_id \u79df\u6237id bind bind \u7ed1\u5b9a\u5730\u5740 \u8fd4\u56de\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"com.longgui.external.idp.miniprogram\" , \"data\" :{ \"token\" : \"\" , \"ext_id\" : \"o0ByU5cit-Pl3uxeXmsABV4xiRq8\" , \"tenant_id\" : \"4da114cee11544a0823bd372114425d0\" , \"bind\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_miniprogram/0d1183d2-46e5-409c-924c-438f722de2eb/bind\" } } or { \"error\" : \"0\" , \"package\" : \"com.longgui.external.idp.miniprogram\" , \"data\" :{ \"token\" : \"f4d8a6976111f9e3cc08d17bd16154a3dba9a2d5\" } } \u7ed1\u5b9a\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: bind url \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u5934\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b Authorization Token token \u7531arkid\u7528\u6237\u767b\u5f55\u83b7\u53d6\u7684token \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b ext_id ext_id \u5728\u767b\u5f55\u63a5\u53e3\u83b7\u5f97\u7684\u7ed1\u5b9aid \u8bf7\u6c42\u793a\u4f8b: http://bind url \u8fd4\u56de\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"com.longgui.external.idp.miniprogram\" }","title":"\u5982\u4f55\u4f7f\u7528\u767b\u5f55\u63a5\u53e3\u548c\u7ed1\u5b9a\u63a5\u53e3"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_miniprogram/#arkidtoken","text":"login_page\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: /api/v1/tenant/{tenant_id}/login_page/ \u8bf7\u6c42\u65b9\u5f0f: GET \u8fd4\u56de\u793a\u4f8b: { \"data\" :{ \"login\" :{ \"name\" : \"login\" , \"forms\" :[ { \"label\" : \"\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\" , \"items\" :[ { \"value\" : null , \"type\" : \"text\" , \"placeholder\" : \"\u7528\u6237\u540d\" , \"name\" : \"username\" , \"append\" : null , \"http\" : null }, { \"value\" : null , \"type\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" , \"name\" : \"password\" , \"append\" : null , \"http\" : null }, { \"value\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" , \"type\" : \"hidden\" , \"placeholder\" : null , \"name\" : \"config_id\" , \"append\" : null , \"http\" : null } ], \"submit\" :{ \"prepend\" : null , \"title\" : \"\u767b\u5f55\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : null , \"redirect\" : null , \"http\" :{ \"url\" : \"/api/v1/tenant/tenant_id/auth/?event_tag=com.longgui.auth.factor.password.auth\" , \"method\" : \"post\" , \"params\" : null }, \"delay\" : null , \"agreement\" : null } } ], \"bottoms\" :[ { \"prepend\" : \"\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u6ce8\u518c\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"register\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null } ], \"extend\" :{ \"title\" : null , \"buttons\" :[ { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://gitee.com/assets/favicon.ico\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_gitee/8fa7fcf2-d906-4da5-a6a8-1382b70863a5/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://p6-hera.byteimg.com/tos-cn-i-jbbdkfciu3/f3de430ed2b64f90a95fb8a393dfa6bd~tplv-jbbdkfciu3-image:0:0.image\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_feishu/a36d40d6-1374-4503-a8b9-84550d9da24b/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://img.onlinedown.net/download/202108/151913-611379f149740.jpg\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://aa.loopbing.top/api/v1/idp/com_longgui_external_idp_wechatwork/5d6b5935-15bb-46b2-a9f6-aa6329e64a9d/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : null , \"title\" : null , \"tooltip\" : null , \"long\" : null , \"img\" : \"https://src.onlinedown.net/d/file/p/2019-08-06/2dc4d1b597725835d85259829db3fcff.jpg\" , \"gopage\" : null , \"redirect\" :{ \"url\" : \"http://localhost:8000/api/v1/idp/com_longgui_external_idp_wechatscan/5ac3dec7-44a1-4269-b450-6fe0fd0fe956/login\" , \"params\" : null }, \"http\" : null , \"delay\" : null , \"agreement\" : null } ] } }, \"register\" :{ \"name\" : \"register\" , \"forms\" :[ { \"label\" : \"\u7528\u6237\u540d\u5bc6\u7801\u6ce8\u518c\" , \"items\" :[ { \"value\" : null , \"type\" : \"text\" , \"placeholder\" : \"\u7528\u6237\u540d\" , \"name\" : \"username\" , \"append\" : null , \"http\" : null }, { \"value\" : null , \"type\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\" , \"name\" : \"password\" , \"append\" : null , \"http\" : null }, { \"value\" : null , \"type\" : \"password\" , \"placeholder\" : \"\u5bc6\u7801\u786e\u8ba4\" , \"name\" : \"checkpassword\" , \"append\" : null , \"http\" : null }, { \"value\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" , \"type\" : \"hidden\" , \"placeholder\" : null , \"name\" : \"config_id\" , \"append\" : null , \"http\" : null } ], \"submit\" :{ \"prepend\" : null , \"title\" : \"\u6ce8\u518c\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : null , \"redirect\" : null , \"http\" :{ \"url\" : \"/api/v1/tenant/tenant_id/register/?event_tag=com.longgui.auth.factor.password.register\" , \"method\" : \"post\" , \"params\" : null }, \"delay\" : null , \"agreement\" : null } } ], \"bottoms\" :[ { \"prepend\" : \"\u5df2\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u767b\u5f55\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"login\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null } ], \"extend\" : null }, \"password\" :{ \"name\" : \"password\" , \"forms\" :[ ], \"bottoms\" :[ { \"prepend\" : \"\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u6ce8\u518c\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"register\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null }, { \"prepend\" : \"\u5df2\u6709\u8d26\u53f7\uff0c\" , \"title\" : \"\u7acb\u5373\u767b\u5f55\" , \"tooltip\" : null , \"long\" : null , \"img\" : null , \"gopage\" : \"login\" , \"redirect\" : null , \"http\" : null , \"delay\" : null , \"agreement\" : null } ], \"extend\" : null } }, \"tenant\" :{ \"id\" : \"4da114ce-e115-44a0-823b-d372114425d0\" , \"name\" : \"\u5e73\u53f0\u79df\u6237\" , \"slug\" : \"\" , \"icon\" : null } } \u8fd4\u56de\u8bf4\u660e: \u6211\u4eec\u9700\u8981\u91cd\u70b9\u5173\u6ce8data\u4e2d\u7684login\u548cregister\u5bf9\u8c61\u4e2d\u7684forms\u4e2d\u7684\u7b2c0\u4e2a\u5bf9\u8c61\u7684items\u548csubmit\u5b57\u6bb5\uff0c\u5176\u4e2dsubmit\u4e2d\u7684http\u5730\u5740\u662f\u8bf7\u6c42\u5730\u5740\uff0citems\u6570\u7ec4\u4e2d\u4e3a\u8bf7\u6c42\u53c2\u6570 \u6ce8\u518c\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: /api/v1/tenant/{tenant_id}/register/?event_tag=com.longgui.auth.factor.password.register \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b username username \u7528\u6237\u540d password password \u5bc6\u7801 checkpassword checkpassword \u91cd\u590d\u5bc6\u7801 config_id config_id \u914d\u7f6eid\u5728login_page\u7684items\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86 \u8bf7\u6c42\u793a\u4f8b: { \"username\" : \"abcd\" , \"password\" : \"abcd\" , \"checkpassword\" : \"abcd\" , \"config_id\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" } \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b user user \u7528\u6237\u5bf9\u8c61 id id \u7528\u6237id username username \u7528\u6237\u540d token token \u7528\u6237token \u8bf7\u6c42\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"core\" , \"message\" : \"\" , \"data\" : { \"user\" : { \"id\" : \"3740d775-e267-49f7-b431-098ca6e65f55\" , \"username\" : \"dage\" }, \"token\" : \"3dde5f5272743b9c82d826be3c0b8c0df290c24b\" } } \u767b\u5f55\u63a5\u53e3 \u8bf7\u6c42\u5730\u5740: /api/v1/tenant/{tenant_id}/auth/?event_tag=com.longgui.auth.factor.password.auth \u8bf7\u6c42\u65b9\u5f0f: POST \u8bf7\u6c42\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b username username \u7528\u6237\u540d password password \u5bc6\u7801 config_id config_id \u914d\u7f6eid\u5728login_page\u7684items\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86 \u8bf7\u6c42\u793a\u4f8b: { \"username\" : \"abcd\" , \"password\" : \"abcd\" , \"config_id\" : \"70f8d39e-30cc-40de-8a70-ec6495c21e84\" } \u8fd4\u56de\u53c2\u6570: \u53c2\u6570\u540d\u79f0 \u53c2\u6570\u8bf4\u660e \u793a\u4f8b user user \u7528\u6237\u5bf9\u8c61 id id \u7528\u6237id username username \u7528\u6237\u540d token token \u7528\u6237token \u8bf7\u6c42\u793a\u4f8b: { \"error\" : \"0\" , \"package\" : \"core\" , \"message\" : \"\" , \"data\" : { \"user\" : { \"id\" : \"3740d775-e267-49f7-b431-098ca6e65f55\" , \"username\" : \"dage\" }, \"token\" : \"3dde5f5272743b9c82d826be3c0b8c0df290c24b\" } }","title":"\u5982\u4f55\u83b7\u53d6arkid\u7528\u6237\u7684token"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/","text":"WechatScan \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6e\u5fae\u4fe1\u626b\u7801\u767b\u5f55\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684\u5fae\u4fe1\u56fe\u6807\uff0c\u8df3\u8f6c\u5230\u5fae\u4fe1\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u5bf9\u63a5\u8be6\u60c5\u89c1 \u626b\u7801\u6388\u6743\u767b\u5f55 \u521b\u5efa\u5fae\u4fe1\u5e94\u7528 # \u6253\u5f00\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\uff0c\u521b\u5efa\u7f51\u7ad9\u5e94\u7528 \u4fdd\u5b58AppID\u548cAppSecret \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03\u57df\u540d \u66f4\u65b0\u5fae\u4fe1\u5e94\u7528\u56de\u8c03\u57df\u540d\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u767b\u5f55 \u5fae\u4fe1\u5f00\u653e\u5e73\u53f0->\u8fdb\u5165\u521b\u5efa\u7684\u7f51\u9875\u5e94\u7528 \u5230\u767b\u5f55\u9875\u9762\u70b9\u51fb\u5fae\u4fe1\u56fe\u6807\u6309\u94ae \u626b\u7801\u767b\u5f55 \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"WechatScan \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/#wechatscan","text":"","title":"WechatScan \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/#_1","text":"\u914d\u7f6e\u5fae\u4fe1\u626b\u7801\u767b\u5f55\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684\u5fae\u4fe1\u56fe\u6807\uff0c\u8df3\u8f6c\u5230\u5fae\u4fe1\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u5bf9\u63a5\u8be6\u60c5\u89c1 \u626b\u7801\u6388\u6743\u767b\u5f55","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/#_2","text":"\u6253\u5f00\u5fae\u4fe1\u5f00\u653e\u5e73\u53f0\uff0c\u521b\u5efa\u7f51\u7ad9\u5e94\u7528 \u4fdd\u5b58AppID\u548cAppSecret","title":"\u521b\u5efa\u5fae\u4fe1\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03\u57df\u540d","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/#_3","text":"\u767b\u5f55 \u5fae\u4fe1\u5f00\u653e\u5e73\u53f0->\u8fdb\u5165\u521b\u5efa\u7684\u7f51\u9875\u5e94\u7528 \u5230\u767b\u5f55\u9875\u9762\u70b9\u51fb\u5fae\u4fe1\u56fe\u6807\u6309\u94ae \u626b\u7801\u767b\u5f55","title":"\u66f4\u65b0\u5fae\u4fe1\u5e94\u7528\u56de\u8c03\u57df\u540d\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatscan/#_4","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/","text":"WechatWork \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\uff0c\u8df3\u8f6c\u5230\u4f01\u4e1a\u5fae\u4fe1\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u5bf9\u63a5\u8be6\u60c5\u89c1 \u626b\u7801\u6388\u6743\u767b\u5f55 \u521b\u5efa\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528 # \u6253\u5f00\u4f01\u4e1a\u5fae\u4fe1\u7ba1\u7406\u540e\u53f0\uff0c\u521b\u5efa\u5e94\u7528 \u586b\u5199\u8868\u5355 \u4fdd\u5b58Secret \u4fdd\u5b58\u4f01\u4e1aID \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03\u57df\u540d \u66f4\u65b0\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u767b\u5f55 \u4f01\u4e1a\u7ba1\u7406\u7aef\u540e\u53f0->\u8fdb\u5165\u9700\u8981\u5f00\u542f\u7684\u81ea\u5efa\u5e94\u7528->\u70b9\u51fb \u7f51\u9875\u6388\u6743\u53caJS-SDK \u8bbe\u7f6e\u53ef\u4fe1\u57df\u540d\uff0c\u8f93\u5165\u56de\u8c03\u57df\u540d \u70b9\u51fb\u53ef\u4fe1ip \u914d\u7f6e\u53ef\u4fe1ip \u670d\u52a1\u5668ip\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ec8\u7aefping\u7f51\u7ad9\u7684\u65b9\u5f0f\u83b7\u5f97 \u5728\u4f01\u4e1a\u5fae\u4fe1\u4e2d\u6253\u5f00\u7f51\u9875\u94fe\u63a5\uff0c\u70b9\u51fb\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\u6309\u94ae \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"WechatWork \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/#wechatwork","text":"","title":"WechatWork \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/#_1","text":"\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\uff0c\u8df3\u8f6c\u5230\u4f01\u4e1a\u5fae\u4fe1\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u5bf9\u63a5\u8be6\u60c5\u89c1 \u626b\u7801\u6388\u6743\u767b\u5f55","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/#_2","text":"\u6253\u5f00\u4f01\u4e1a\u5fae\u4fe1\u7ba1\u7406\u540e\u53f0\uff0c\u521b\u5efa\u5e94\u7528 \u586b\u5199\u8868\u5355 \u4fdd\u5b58Secret \u4fdd\u5b58\u4f01\u4e1aID","title":"\u521b\u5efa\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03\u57df\u540d","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/#url","text":"\u767b\u5f55 \u4f01\u4e1a\u7ba1\u7406\u7aef\u540e\u53f0->\u8fdb\u5165\u9700\u8981\u5f00\u542f\u7684\u81ea\u5efa\u5e94\u7528->\u70b9\u51fb \u7f51\u9875\u6388\u6743\u53caJS-SDK \u8bbe\u7f6e\u53ef\u4fe1\u57df\u540d\uff0c\u8f93\u5165\u56de\u8c03\u57df\u540d \u70b9\u51fb\u53ef\u4fe1ip \u914d\u7f6e\u53ef\u4fe1ip \u670d\u52a1\u5668ip\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7ec8\u7aefping\u7f51\u7ad9\u7684\u65b9\u5f0f\u83b7\u5f97 \u5728\u4f01\u4e1a\u5fae\u4fe1\u4e2d\u6253\u5f00\u7f51\u9875\u94fe\u63a5\uff0c\u70b9\u51fb\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\u6309\u94ae","title":"\u66f4\u65b0\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatwork/#_3","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/","text":"Github \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\uff0c\u8df3\u8f6c\u5230\u4f01\u4e1a\u5fae\u4fe1\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u5bf9\u63a5\u8be6\u60c5\u89c1 \u626b\u7801\u6388\u6743\u767b\u5f55 \u521b\u5efa\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528 # \u6253\u5f00\u4f01\u4e1a\u5fae\u4fe1\u7ba1\u7406\u540e\u53f0\uff0c\u521b\u5efa\u5e94\u7528 \u586b\u5199\u8868\u5355 \u4fdd\u5b58Agent ID\u548cSecret \u4fdd\u5b58\u4f01\u4e1aID \u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL # \u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL \u66f4\u65b0\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae # \u767b\u5f55 \u4f01\u4e1a\u7ba1\u7406\u7aef\u540e\u53f0->\u8fdb\u5165\u9700\u8981\u5f00\u542f\u7684\u81ea\u5efa\u5e94\u7528->\u70b9\u51fb \u4f01\u4e1a\u5fae\u4fe1\u6388\u6743\u767b\u5f55 \u8bbe\u7f6e\u6388\u6743\u56de\u8c03\u57df\uff0c\u8f93\u5165\u56de\u8c03\u57df\u540d \u70b9\u51fb\u767b\u5f55\u9875\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\u6309\u94ae \u5fae\u4fe1\u626b\u7801\u767b\u5f55 \u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e # \u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"Github \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/#github","text":"","title":"Github \u7b2c\u4e09\u65b9\u767b\u5f55\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/#_1","text":"\u914d\u7f6e\u4f01\u4e1a\u5fae\u4fe1\u63d2\u4ef6\u540e\uff0c\u53ef\u4ee5\u70b9\u51fbArkID\u767b\u5f55\u9875\u9762\u7684\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\uff0c\u8df3\u8f6c\u5230\u4f01\u4e1a\u5fae\u4fe1\u5b8c\u6210Oauth2\u8ba4\u8bc1\uff0c\u5e76\u548cArkID\u7684\u7528\u6237\u7ed1\u5b9a \u5bf9\u63a5\u8be6\u60c5\u89c1 \u626b\u7801\u6388\u6743\u767b\u5f55","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/#_2","text":"\u6253\u5f00\u4f01\u4e1a\u5fae\u4fe1\u7ba1\u7406\u540e\u53f0\uff0c\u521b\u5efa\u5e94\u7528 \u586b\u5199\u8868\u5355 \u4fdd\u5b58Agent ID\u548cSecret \u4fdd\u5b58\u4f01\u4e1aID","title":"\u521b\u5efa\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/#arkidurl","text":"\u6253\u5f00\u7b2c\u4e09\u65b9\u8ba4\u8bc1\u9875\u9762 \u586b\u5199\u8868\u5355\u53c2\u6570\uff0c \u70b9\u51fb\u521b\u5efa \u70b9\u51fb\u7f16\u8f91\u6309\u94ae\uff0c\u83b7\u53d6ArkID\u56de\u8c03URL","title":"\u521b\u5efaArkID\u7b2c\u4e09\u65b9\u767b\u5f55\u914d\u7f6e,\u83b7\u53d6\u56de\u8c03URL"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/#url","text":"\u767b\u5f55 \u4f01\u4e1a\u7ba1\u7406\u7aef\u540e\u53f0->\u8fdb\u5165\u9700\u8981\u5f00\u542f\u7684\u81ea\u5efa\u5e94\u7528->\u70b9\u51fb \u4f01\u4e1a\u5fae\u4fe1\u6388\u6743\u767b\u5f55 \u8bbe\u7f6e\u6388\u6743\u56de\u8c03\u57df\uff0c\u8f93\u5165\u56de\u8c03\u57df\u540d \u70b9\u51fb\u767b\u5f55\u9875\u4f01\u4e1a\u5fae\u4fe1\u56fe\u6807\u6309\u94ae \u5fae\u4fe1\u626b\u7801\u767b\u5f55","title":"\u66f4\u65b0\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u56de\u8c03URL\uff0c\u70b9\u51fb\u767b\u5f55\u6309\u94ae"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_external_idp_wechatworkscan/#_3","text":"\u8bf7\u53c2\u89c1 \u4e09\u65b9\u8d26\u53f7\u7ed1\u5b9a","title":"\u7edf\u4e00\u7ed1\u5b9a\u548c\u89e3\u7ed1\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_message_artemis/","text":"\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis # \u529f\u80fd\u4ecb\u7ecd # \u901a\u8fc7Artemis\u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u63a5\u6536\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u4f20\u8f93\u7684\u6d88\u606f\u6570\u636e\u5e76\u5c55\u793a\u4e8eArkid\u5e73\u53f0 \u4f7f\u7528\u793a\u4f8b # \u63d2\u4ef6\u79df\u8d41 \u8bbe\u7f6e\u5e73\u53f0\u63d2\u4ef6 \u53d1\u9001\u6d88\u606f\u8bf4\u660e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u5e73\u53f0\u7ba1\u7406\u3011->\u3010\u5e73\u53f0\u63d2\u4ef6\u3011\uff0c\u627e\u5230\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis\u63d2\u4ef6\u5361\u7247\uff0c\u7f16\u8f91\u914d\u7f6e \u8bf4\u660e:\u914d\u7f6e\u4fe1\u606f\u9664\u4e86\u670d\u52a1\u5668\u5730\u5740\u7aef\u53e3\u7528\u6237\u540d\u5bc6\u7801\u800c\u5916\uff0c\u961f\u5217\u540d\u4e3a\u5e73\u53f0\u7edf\u4e00\u961f\u5217\u540d\uff0c\u5373\u5e73\u53f0\u4e0a\u6240\u6709\u79df\u6237\u5171\u7528 \u6d88\u606f\u7ed3\u6784\u5982\u4e0b\uff1a\u6ce8\u610f\u7528\u6237ID\u5217\u8868\u4e2d\u7684ID\u9700\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u4ee5OIDC\u534f\u8bae\u7b49\u65b9\u5f0f\u5411\u5e73\u53f0\u83b7\u53d6 { \"title\": \"\u6d88\u606f\u6807\u9898\", \"content\": \"\u6d88\u606f\u5185\u5bb9\", \"url\": \"\u8df3\u8f6c\u94fe\u63a5\", \"users\": [\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"], #\u7528\u6237ID\u5217\u8868 } python3+stomp\u53d1\u9001\u6d88\u606f\u4ee3\u7801\u793a\u4f8b import time import sys import json import stomp class MyListener(stomp.ConnectionListener): def on_error(self,message): print('received an error \"%s\"' % message) def on_message(self, message): print('received a message \"%s\"' % message) hosts = [('your host', 61616)] conn = stomp.Connection(host_and_ports=hosts) conn.set_listener('', MyListener()) conn.connect('artemis', 'artemis', wait=True, headers={\"client-id\":\"arkid\"}) data = { \"title\": \"\u6d88\u606f\u6807\u9898\", \"content\": \"\u6d88\u606f\u5185\u5bb9\", \"url\": \"\u8df3\u8f6c\u94fe\u63a5\", \"users\": [\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"], #\u7528\u6237ID\u5217\u8868 \"sender\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" # \u53d1\u9001\u8005ID } conn.send(body=json.dumps(data), destination='your destination') time.sleep(2) conn.disconnect()","title":"\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_message_artemis/#artemis","text":"","title":"\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_message_artemis/#_1","text":"\u901a\u8fc7Artemis\u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u63a5\u6536\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u4f20\u8f93\u7684\u6d88\u606f\u6570\u636e\u5e76\u5c55\u793a\u4e8eArkid\u5e73\u53f0","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_message_artemis/#_2","text":"\u63d2\u4ef6\u79df\u8d41 \u8bbe\u7f6e\u5e73\u53f0\u63d2\u4ef6 \u53d1\u9001\u6d88\u606f\u8bf4\u660e \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u5e73\u53f0\u7ba1\u7406\u3011->\u3010\u5e73\u53f0\u63d2\u4ef6\u3011\uff0c\u627e\u5230\u6d88\u606f\u4e2d\u95f4\u4ef6\uff1aArtemis\u63d2\u4ef6\u5361\u7247\uff0c\u7f16\u8f91\u914d\u7f6e \u8bf4\u660e:\u914d\u7f6e\u4fe1\u606f\u9664\u4e86\u670d\u52a1\u5668\u5730\u5740\u7aef\u53e3\u7528\u6237\u540d\u5bc6\u7801\u800c\u5916\uff0c\u961f\u5217\u540d\u4e3a\u5e73\u53f0\u7edf\u4e00\u961f\u5217\u540d\uff0c\u5373\u5e73\u53f0\u4e0a\u6240\u6709\u79df\u6237\u5171\u7528 \u6d88\u606f\u7ed3\u6784\u5982\u4e0b\uff1a\u6ce8\u610f\u7528\u6237ID\u5217\u8868\u4e2d\u7684ID\u9700\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u4ee5OIDC\u534f\u8bae\u7b49\u65b9\u5f0f\u5411\u5e73\u53f0\u83b7\u53d6 { \"title\": \"\u6d88\u606f\u6807\u9898\", \"content\": \"\u6d88\u606f\u5185\u5bb9\", \"url\": \"\u8df3\u8f6c\u94fe\u63a5\", \"users\": [\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"], #\u7528\u6237ID\u5217\u8868 } python3+stomp\u53d1\u9001\u6d88\u606f\u4ee3\u7801\u793a\u4f8b import time import sys import json import stomp class MyListener(stomp.ConnectionListener): def on_error(self,message): print('received an error \"%s\"' % message) def on_message(self, message): print('received a message \"%s\"' % message) hosts = [('your host', 61616)] conn = stomp.Connection(host_and_ports=hosts) conn.set_listener('', MyListener()) conn.connect('artemis', 'artemis', wait=True, headers={\"client-id\":\"arkid\"}) data = { \"title\": \"\u6d88\u606f\u6807\u9898\", \"content\": \"\u6d88\u606f\u5185\u5bb9\", \"url\": \"\u8df3\u8f6c\u94fe\u63a5\", \"users\": [\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"], #\u7528\u6237ID\u5217\u8868 \"sender\":\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" # \u53d1\u9001\u8005ID } conn.send(body=json.dumps(data), destination='your destination') time.sleep(2) conn.disconnect()","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_other_app_subscribe/","text":"\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # \u5e94\u7528\u8ba2\u9605\u7ba1\u7406\uff0c\u63a7\u5236\u684c\u9762\u5e94\u7528\u663e\u793a\u4ee5\u65b9\u4fbf\u7528\u6237\u5c06\u5e38\u7528\u5e94\u7528\u4e0e\u4e0d\u5e38\u7528\u5e94\u7528\u533a\u5206\u5f00 \u4f7f\u7528\u793a\u4f8b # \u63d2\u4ef6\u79df\u8d41 \u542f\u7528\u63d2\u4ef6 \u8ba2\u9605\u72b6\u6001\u4fee\u6539 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u5df2\u5b89\u88c5\u63d2\u4ef6\u9875\u9762\u4e2d\u627e\u5230\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e \u7ecf\u7531\u53f3\u4e0a\u89d2\u5934\u50cf\u4e0b\u62c9\u83dc\u5355\u4f9d\u6b21\u8fdb\u5165\u3010\u4e2a\u4eba\u7ba1\u7406\u3011->\u3010\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u3011,\u9009\u62e9\u9700\u8981\u663e\u793a\u5728\u684c\u9762\u4e0a\u7684\u5e94\u7528\u4f7f\u5176\u8ba2\u9605\u72b6\u6001\u4e3a\u662f\uff0c\u8ba2\u9605\u72b6\u6001\u4e3a\u5426\u7684\u5e94\u7528\u5c06\u4e0d\u4f1a\u76f4\u63a5\u663e\u793a\u5728\u684c\u9762\u4e0a \u5168\u90e8\u8ba2\u9605\u65f6\uff0c\u684c\u9762\u663e\u793a\u6240\u6709\u5e94\u7528 \u53d6\u6d88\u67d0APP\u8ba2\u9605\uff0c\u8be5\u5e94\u7528\u5c06\u4f1a\u4ece\u684c\u9762\u6d88\u5931","title":"\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_other_app_subscribe/#_1","text":"","title":"\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_other_app_subscribe/#_2","text":"\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\uff0c\u63a7\u5236\u684c\u9762\u5e94\u7528\u663e\u793a\u4ee5\u65b9\u4fbf\u7528\u6237\u5c06\u5e38\u7528\u5e94\u7528\u4e0e\u4e0d\u5e38\u7528\u5e94\u7528\u533a\u5206\u5f00","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_other_app_subscribe/#_3","text":"\u63d2\u4ef6\u79df\u8d41 \u542f\u7528\u63d2\u4ef6 \u8ba2\u9605\u72b6\u6001\u4fee\u6539 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u63d2\u4ef6\u79df\u8d41\u9875\u9762\u4e2d\u627e\u5230\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u8d41 \u7ecf\u7531\u5de6\u4fa7\u83dc\u5355\u680f\u4f9d\u6b21\u8fdb\u5165\u3010\u79df\u6237\u7ba1\u7406\u3011->\u3010\u63d2\u4ef6\u7ba1\u7406\u3011\uff0c\u5728\u5df2\u5b89\u88c5\u63d2\u4ef6\u9875\u9762\u4e2d\u627e\u5230\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u63d2\u4ef6\u5361\u7247\uff0c\u70b9\u51fb\u79df\u6237\u914d\u7f6e \u7ecf\u7531\u53f3\u4e0a\u89d2\u5934\u50cf\u4e0b\u62c9\u83dc\u5355\u4f9d\u6b21\u8fdb\u5165\u3010\u4e2a\u4eba\u7ba1\u7406\u3011->\u3010\u5e94\u7528\u8ba2\u9605\u7ba1\u7406\u3011,\u9009\u62e9\u9700\u8981\u663e\u793a\u5728\u684c\u9762\u4e0a\u7684\u5e94\u7528\u4f7f\u5176\u8ba2\u9605\u72b6\u6001\u4e3a\u662f\uff0c\u8ba2\u9605\u72b6\u6001\u4e3a\u5426\u7684\u5e94\u7528\u5c06\u4e0d\u4f1a\u76f4\u63a5\u663e\u793a\u5728\u684c\u9762\u4e0a \u5168\u90e8\u8ba2\u9605\u65f6\uff0c\u684c\u9762\u663e\u793a\u6240\u6709\u5e94\u7528 \u53d6\u6d88\u67d0APP\u8ba2\u9605\uff0c\u8be5\u5e94\u7528\u5c06\u4f1a\u4ece\u684c\u9762\u6d88\u5931","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_register_notice/","text":"\u9690\u79c1\u58f0\u660e # \u529f\u80fd\u4ecb\u7ecd # \u914d\u7f6e\u9690\u79c1\u58f0\u660e\u63d2\u4ef6\u540e\uff0c\u4f1a\u5728\u7528\u6237\u6ce8\u518c\u9875\u51fa\u73b0\u9690\u79c1\u58f0\u660e\u7684\u5185\u5bb9 \u63d2\u4ef6\u914d\u7f6e\u8bf4\u660e # \u79df\u8d41\u597d\u63d2\u4ef6\u540e\uff0c\u70b9\u51fb\u79df\u6237\u7ba1\u7406\u7684\u5df2\u79df\u8d41\uff0c\u627e\u5230\u8be5\u63d2\u4ef6 \u70b9\u51fb\u79df\u6237\u914d\u7f6e\u6309\u94ae\uff0c\u8bbe\u7f6e\u6807\u9898\u548c\u5185\u5bb9","title":"\u9690\u79c1\u58f0\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_register_notice/#_1","text":"","title":"\u9690\u79c1\u58f0\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_register_notice/#_2","text":"\u914d\u7f6e\u9690\u79c1\u58f0\u660e\u63d2\u4ef6\u540e\uff0c\u4f1a\u5728\u7528\u6237\u6ce8\u518c\u9875\u51fa\u73b0\u9690\u79c1\u58f0\u660e\u7684\u5185\u5bb9","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_register_notice/#_3","text":"\u79df\u8d41\u597d\u63d2\u4ef6\u540e\uff0c\u70b9\u51fb\u79df\u6237\u7ba1\u7406\u7684\u5df2\u79df\u8d41\uff0c\u627e\u5230\u8be5\u63d2\u4ef6 \u70b9\u51fb\u79df\u6237\u914d\u7f6e\u6309\u94ae\uff0c\u8bbe\u7f6e\u6807\u9898\u548c\u5185\u5bb9","title":"\u63d2\u4ef6\u914d\u7f6e\u8bf4\u660e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_ad/","text":"AD \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # Server\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6SCIM\u63a5\u53e3\u83b7\u53d6AD\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 Client\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6SCIM Server\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 \u521b\u5efaAD \u540c\u6b65Server # \u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762\uff0c\u70b9\u51fb\u521b\u5efa \u914d\u7f6e\u8868\u5355\u53c2\u6570 \u914d\u7f6e\u4eceArkID\u540c\u6b65\u6570\u636e\u5230AD # \u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762, \u70b9\u51fb\u521b\u5efa \u914d\u7f6eArkID\u540c\u6b65Server \u914d\u7f6eAD\u540c\u6b65Client \u914d\u7f6eAD Client\u5c5e\u6027\u6620\u5c04 \u67e5\u770bArkID\u4e2d\u6e90\u6570\u636e \u67e5\u770bAD\u4e2d\u5df2\u540c\u6b65\u6570\u636e \u63d0\u793a SCIM\u540c\u6b65\u670d\u52a1\u5668: \u9009\u62e9\u4e0a\u4e2a\u6b65\u9aa4\u521b\u5efa\u7684 AD\u540c\u6b65Server \u5b9a\u65f6\u8fd0\u884c\u65f6\u95f4: \u683c\u5f0f\u53c2\u7167linux crontab, \u4e0b\u56fe\u4e2d\u8868\u793a\u6bcf\u592911\uff1a51\u8fd0\u884c\u5b9a\u65f6\u540c\u6b65\u4efb\u52a1 \u5b9a\u65f6\u4efb\u52a1\u9700\u8981\u542f\u52a8celery work\u548cbeat: celery -A arkid.core.tasks.celery beat -l debug celery -A arkid.core.tasks.celery worker -l debug","title":"AD \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_ad/#ad","text":"","title":"AD \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_ad/#_1","text":"Server\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6SCIM\u63a5\u53e3\u83b7\u53d6AD\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 Client\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6SCIM Server\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_ad/#ad-server","text":"\u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762\uff0c\u70b9\u51fb\u521b\u5efa \u914d\u7f6e\u8868\u5355\u53c2\u6570","title":"\u521b\u5efaAD \u540c\u6b65Server"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_ad/#arkidad","text":"\u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762, \u70b9\u51fb\u521b\u5efa \u914d\u7f6eArkID\u540c\u6b65Server \u914d\u7f6eAD\u540c\u6b65Client \u914d\u7f6eAD Client\u5c5e\u6027\u6620\u5c04 \u67e5\u770bArkID\u4e2d\u6e90\u6570\u636e \u67e5\u770bAD\u4e2d\u5df2\u540c\u6b65\u6570\u636e \u63d0\u793a SCIM\u540c\u6b65\u670d\u52a1\u5668: \u9009\u62e9\u4e0a\u4e2a\u6b65\u9aa4\u521b\u5efa\u7684 AD\u540c\u6b65Server \u5b9a\u65f6\u8fd0\u884c\u65f6\u95f4: \u683c\u5f0f\u53c2\u7167linux crontab, \u4e0b\u56fe\u4e2d\u8868\u793a\u6bcf\u592911\uff1a51\u8fd0\u884c\u5b9a\u65f6\u540c\u6b65\u4efb\u52a1 \u5b9a\u65f6\u4efb\u52a1\u9700\u8981\u542f\u52a8celery work\u548cbeat: celery -A arkid.core.tasks.celery beat -l debug celery -A arkid.core.tasks.celery worker -l debug","title":"\u914d\u7f6e\u4eceArkID\u540c\u6b65\u6570\u636e\u5230AD"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/","text":"SQL Server \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6 # \u529f\u80fd\u4ecb\u7ecd # Server\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6SCIM\u63a5\u53e3\u83b7\u53d6SQL Server\u6570\u636e\u5e93\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 Client\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6SCIM Server\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7, \u540c\u6b65\u5230SQL Server\u6570\u636e\u5e93\u4e2d \u914d\u7f6e\u4e24\u4e2aSQL Server\u6570\u636e\u5e93\u4e4b\u95f4\u6570\u636e\u5e93\u540c\u6b65 # \u521b\u5efa\u4e24\u4e2a\u6570\u636e\u5e93\u548c\u8868 # \u521b\u5efa\u4f5c\u4e3a\u63d0\u4f9b\u540c\u6b65\u6570\u636e\u7684Server\u6570\u636e\u5e93\uff0c\u5efa\u7acb users , groups \u8868\uff0c \u4ee5\u53causer\u6240\u5c5egroups\u7684\u4e2d\u95f4\u8868 users_groups , users_groups \u4e2d\u95f4\u8868\u4e2duser_id\u5916\u952e\u5173\u8054users(id)\uff0c group_id\u5916\u952e\u5173\u8054groups(id) \u63d0\u793a \u6b64\u4f8b\u4e2d\u6f14\u793auser\u548cgroup\u4e4b\u95f4\u662fManyToMany\u7684\u5173\u7cfb, \u5982\u679cuser\u53ea\u5c5e\u4e8e\u4e00\u4e2agroup\uff0c\u53ef\u4ee5\u5728 users \u8868\u4e2d\u5b9a\u4e49group_id\uff0c\u5916\u952e\u5173\u8054groups(id) \u521b\u5efaClient\u6570\u636e\u5e93\uff0c\u7528\u4e8e\u5c06Server\u6570\u636e\u5e93\u63d0\u4f9b\u7684\u6570\u636e\u540c\u6b65\u5230Client\u6570\u636e\u5e93 \u6ce8\u610f \u4e3a\u6f14\u793a\u65b9\u4fbf\uff0cClient\u6570\u636e\u5e93\u4e2d\u7684\u8868\u5b9a\u4e49\u548cServer\u6570\u636e\u5e93\u4e00\u6837,\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u53ef\u80fd\u4e0d\u540c \u914d\u7f6eSQL Server \u6e90\u6570\u636e\u5e93 # \u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762\uff0c\u70b9\u51fb\u521b\u5efa \u914d\u7f6e\u8868\u5355\u53c2\u6570 \u63d0\u793a \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u8868Group\u5916\u952e\u5b57\u6bb5 \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u548c\u7ec4\u7ec7\u591a\u5bf9\u591a\u5173\u7cfb\u8868 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868User\u5916\u952e\u5b57\u6bb5 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868Group\u5916\u952e\u5b57\u6bb5 group\u4e0a\u4e0b\u7ea7\u4e4b\u95f4\u5173\u8054\u7684\u5b57\u6bb5\u9700\u8981\u8bbe\u7f6e \u7ec4\u7ec7\u8868Parent\u5916\u952e\u5b57\u6bb5 \u7528\u6237\u548c\u7ec4\u7ec7\u5c5e\u6027\u6620\u5c04\u5217\u8868\u4e2d\u5fc5\u987b\u5b58\u5728target_attr\u4e3aid\u7684\u6620\u5c04, \u6b64\u5904id\u4e3aSCIM\u534f\u8bae\u4e2duser\u548cgroup\u7684\u552f\u4e00\u6807\u8bc6 \u914d\u7f6e\u4ece\u6e90\u6570\u636e\u5e93\u540c\u6b65\u6570\u636e\u5230Client\u6570\u636e\u5e93 # \u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762, \u70b9\u51fb\u521b\u5efa \u914d\u7f6eSQL Server\u540c\u6b65Client \u63d0\u793a \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u8868Group\u5916\u952e\u5b57\u6bb5 \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u548c\u7ec4\u7ec7\u591a\u5bf9\u591a\u5173\u7cfb\u8868 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868User\u5916\u952e\u5b57\u6bb5 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868Group\u5916\u952e\u5b57\u6bb5 group\u4e0a\u4e0b\u7ea7\u4e4b\u95f4\u5173\u8054\u7684\u5b57\u6bb5\u9700\u8981\u8bbe\u7f6e \u7ec4\u7ec7\u8868Parent\u5916\u952e\u5b57\u6bb5 \u7528\u6237\u548c\u7ec4\u7ec7\u5c5e\u6027\u6620\u5c04\u5217\u8868\u4e2d\u5fc5\u987b\u5b58\u5728source_attr\u4e3aid\u7684\u6620\u5c04\uff0c\u7528\u4e8e\u5339\u914dServer\u548cClient\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e, \u5224\u65ad\u6570\u636e\u662f\u5426\u5df2\u7ecf\u540c\u6b65\u8fc7 \u67e5\u770bServer\u6570\u636e\u5e93\u8868\u6570\u636e # \u67e5\u770b\u6e90\u6570\u636e\u5e93groups \u67e5\u770b\u6e90\u6570\u636e\u5e93users \u67e5\u770b\u6e90\u6570\u636e\u5e93users_groups \u67e5\u770bClient\u6570\u636e\u5e93\u8868\u6570\u636e # \u67e5\u770bClient\u6570\u636e\u5e93groups \u67e5\u770bClient\u6570\u636e\u5e93users \u67e5\u770bClient\u6570\u636e\u5e93users_groups","title":"SQL Server \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#sql-server","text":"","title":"SQL Server \u7528\u6237\u6570\u636e\u540c\u6b65\u63d2\u4ef6"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#_1","text":"Server\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6SCIM\u63a5\u53e3\u83b7\u53d6SQL Server\u6570\u636e\u5e93\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7 Client\u6a21\u5f0f\u5b9e\u73b0\u4e86\u53ef\u4ee5\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u62c9\u53d6SCIM Server\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7ec7, \u540c\u6b65\u5230SQL Server\u6570\u636e\u5e93\u4e2d","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#sql-server_1","text":"","title":"\u914d\u7f6e\u4e24\u4e2aSQL Server\u6570\u636e\u5e93\u4e4b\u95f4\u6570\u636e\u5e93\u540c\u6b65"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#_2","text":"\u521b\u5efa\u4f5c\u4e3a\u63d0\u4f9b\u540c\u6b65\u6570\u636e\u7684Server\u6570\u636e\u5e93\uff0c\u5efa\u7acb users , groups \u8868\uff0c \u4ee5\u53causer\u6240\u5c5egroups\u7684\u4e2d\u95f4\u8868 users_groups , users_groups \u4e2d\u95f4\u8868\u4e2duser_id\u5916\u952e\u5173\u8054users(id)\uff0c group_id\u5916\u952e\u5173\u8054groups(id) \u63d0\u793a \u6b64\u4f8b\u4e2d\u6f14\u793auser\u548cgroup\u4e4b\u95f4\u662fManyToMany\u7684\u5173\u7cfb, \u5982\u679cuser\u53ea\u5c5e\u4e8e\u4e00\u4e2agroup\uff0c\u53ef\u4ee5\u5728 users \u8868\u4e2d\u5b9a\u4e49group_id\uff0c\u5916\u952e\u5173\u8054groups(id) \u521b\u5efaClient\u6570\u636e\u5e93\uff0c\u7528\u4e8e\u5c06Server\u6570\u636e\u5e93\u63d0\u4f9b\u7684\u6570\u636e\u540c\u6b65\u5230Client\u6570\u636e\u5e93 \u6ce8\u610f \u4e3a\u6f14\u793a\u65b9\u4fbf\uff0cClient\u6570\u636e\u5e93\u4e2d\u7684\u8868\u5b9a\u4e49\u548cServer\u6570\u636e\u5e93\u4e00\u6837,\u5b9e\u9645\u751f\u4ea7\u73af\u5883\u4e2d\u53ef\u80fd\u4e0d\u540c","title":"\u521b\u5efa\u4e24\u4e2a\u6570\u636e\u5e93\u548c\u8868"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#sql-server_2","text":"\u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762\uff0c\u70b9\u51fb\u521b\u5efa \u914d\u7f6e\u8868\u5355\u53c2\u6570 \u63d0\u793a \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u8868Group\u5916\u952e\u5b57\u6bb5 \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u548c\u7ec4\u7ec7\u591a\u5bf9\u591a\u5173\u7cfb\u8868 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868User\u5916\u952e\u5b57\u6bb5 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868Group\u5916\u952e\u5b57\u6bb5 group\u4e0a\u4e0b\u7ea7\u4e4b\u95f4\u5173\u8054\u7684\u5b57\u6bb5\u9700\u8981\u8bbe\u7f6e \u7ec4\u7ec7\u8868Parent\u5916\u952e\u5b57\u6bb5 \u7528\u6237\u548c\u7ec4\u7ec7\u5c5e\u6027\u6620\u5c04\u5217\u8868\u4e2d\u5fc5\u987b\u5b58\u5728target_attr\u4e3aid\u7684\u6620\u5c04, \u6b64\u5904id\u4e3aSCIM\u534f\u8bae\u4e2duser\u548cgroup\u7684\u552f\u4e00\u6807\u8bc6","title":"\u914d\u7f6eSQL Server \u6e90\u6570\u636e\u5e93"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#client","text":"\u6253\u5f00 SCIM\u6570\u636e\u540c\u6b65 \u9875\u9762, \u70b9\u51fb\u521b\u5efa \u914d\u7f6eSQL Server\u540c\u6b65Client \u63d0\u793a \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u8868Group\u5916\u952e\u5b57\u6bb5 \u5982\u679cuser\u548cgroup\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u9700\u586b\u5165 \u7528\u6237\u548c\u7ec4\u7ec7\u591a\u5bf9\u591a\u5173\u7cfb\u8868 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868User\u5916\u952e\u5b57\u6bb5 \uff0c \u7528\u6237\u7ec4\u7ec7\u5173\u7cfb\u8868Group\u5916\u952e\u5b57\u6bb5 group\u4e0a\u4e0b\u7ea7\u4e4b\u95f4\u5173\u8054\u7684\u5b57\u6bb5\u9700\u8981\u8bbe\u7f6e \u7ec4\u7ec7\u8868Parent\u5916\u952e\u5b57\u6bb5 \u7528\u6237\u548c\u7ec4\u7ec7\u5c5e\u6027\u6620\u5c04\u5217\u8868\u4e2d\u5fc5\u987b\u5b58\u5728source_attr\u4e3aid\u7684\u6620\u5c04\uff0c\u7528\u4e8e\u5339\u914dServer\u548cClient\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e, \u5224\u65ad\u6570\u636e\u662f\u5426\u5df2\u7ecf\u540c\u6b65\u8fc7","title":"\u914d\u7f6e\u4ece\u6e90\u6570\u636e\u5e93\u540c\u6b65\u6570\u636e\u5230Client\u6570\u636e\u5e93"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#server","text":"\u67e5\u770b\u6e90\u6570\u636e\u5e93groups \u67e5\u770b\u6e90\u6570\u636e\u5e93users \u67e5\u770b\u6e90\u6570\u636e\u5e93users_groups","title":"\u67e5\u770bServer\u6570\u636e\u5e93\u8868\u6570\u636e"},{"location":"%20%E5%85%B6%E5%AE%83%E6%8F%92%E4%BB%B6/com_longgui_scim_sync_mssql/#client_1","text":"\u67e5\u770bClient\u6570\u636e\u5e93groups \u67e5\u770bClient\u6570\u636e\u5e93users \u67e5\u770bClient\u6570\u636e\u5e93users_groups","title":"\u67e5\u770bClient\u6570\u636e\u5e93\u8868\u6570\u636e"},{"location":"%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/","text":"\u9f99\u5f52\u79d1\u6280 # \u56fd\u5185\u8f6f\u4ef6\u4e1a\u5927\u800c\u4e0d\u5f3a # \u4e2d\u56fd\u8f6f\u4ef6\u884c\u4e1a\u8d77\u6b65\u867d\u665a\uff0c\u4f46\u53d1\u5c55\u81f3\u4eca\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u63a5\u8fd1\u5341\u4e07\u4ebf\u7684\u5e02\u573a\u89c4\u6a21\u548c\u8fd1\u516b\u767e\u4e07\u7684\u4ece\u4e1a\u4eba\u5458\u3002\u4f46\u4e0e\u5176\u4e0d\u76f8\u79f0\u7684\u662f\uff0c\u56fd\u5185\u8f6f\u4ef6\u7684\u7814\u53d1\u90e8\u5206\u59cb\u7ec8\u5904\u4e8e\u76f8\u5173\u4ea7\u4e1a\u94fe\u7684\u4f4e\u7aef\u5730\u4f4d\u3002 \u4efb\u4f55\u5e02\u573a\u6216\u751f\u610f\uff0c\u672c\u8d28\u4e0a\u5b83\u5f62\u6210\u7684\u6765\u6e90\u90fd\u662f\u5ba2\u6237\u7684\u9700\u6c42\u3002\u8f6f\u4ef6\u516c\u53f8\u4f5c\u4e3a\u4e59\u65b9\u5728\u6ee1\u8db3\u5ba2\u6237\u9700\u6c42\u4e0a\uff0c\u8fd9\u4e2a\u884c\u4e1a\u5448\u73b0\u51fa\u5b8c\u5168\u4e0d\u540c\u7684\u7279\u70b9\u3002 \u8f6f\u4ef6\u5e02\u573a\u4e2d\uff0c\u6309\u4ed8\u8d39\u80fd\u529b\u53ef\u4ee5\u628a\u5ba2\u6237\u88ab\u5206\u4e3a\u51e0\u4e2a\u7b49\u7ea7\uff1a\u653f\u5e9c\u4e0e\u4e8b\u4e1a\u5355\u4f4d\u3001\u5927\u578b\u56fd\u4f01\u4e0e\u79c1\u4f01\u3001\u4e2d\u578b\u4f01\u4e1a\u3001\u5c0f\u5fae\u4f01\u4e1a\u3001\u4e2a\u4eba\u3002 \u7b2c\u4e00\u7c7b\u5ba2\u6237\u2014\u2014\u653f\u5e9c\u4e0e\u4e8b\u4e1a\u5355\u4f4d \uff0c\u7531\u4e8e\u4e2d\u592e\u9f13\u52b1\u548c\u6276\u6301\u4fe1\u606f\u4ea7\u4e1a\uff0c\u4ee5\u53ca\u5728\u9884\u7b97\u4e0a\u7ed9\u4e88\u4e86\u8fd9\u4e9b\u673a\u6784\u5145\u8db3\u7684\u7a7a\u95f4\uff0c\u653f\u5e9c\u4e0e\u4e8b\u4e1a\u5355\u4f4d\u7684\u4ed8\u8d39\u80fd\u529b\u5f3a\uff0c\u5728\u6574\u4e2a\u5e02\u573a\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002 \u7531\u5404\u5730\u65b9\u653f\u5e9c\u548c\u4e8b\u4e1a\u5355\u4f4d\u6276\u6301\uff0c\u5728\u8f6f\u4ef6\u4e1a\u53d1\u5c55\u521d\u671f\u5feb\u901f\u7684\u57f9\u517b\u51fa\u4e00\u5927\u6279\u5730\u65b9\u6027\u8f6f\u4ef6\u4f01\u4e1a\uff0c\u4e3a\u8f6f\u4ef6\u4e1a\u6253\u4e0b\u57fa\u7840\u3002 \u4f46\u7531\u4e8e\u5176\u5ba2\u6237\u5173\u7cfb\u7a33\u5b9a\uff0c\u4f7f\u5176\u5bf9\u7814\u53d1\u6295\u5165\u7f3a\u4e4f\u79ef\u6781\u6027\u3002\u5e76\u4e14\u7531\u4e8e\u5176\u5f88\u5f3a\u7684\u5730\u57df\u6027\uff0c\u4f1a\u5404\u81ea\u4e3a\u6218\u3002\u540c\u65f6\u4e3a\u4e86\u964d\u4f4e\u6210\u672c\uff0c\u8fd9\u7c7b\u8f6f\u4ef6\u4f01\u4e1a\u66f4\u613f\u610f\u4f7f\u7528\u56fd\u5916\u6210\u719f\u7684\u5546\u4e1a\u65b9\u6848\uff0c\u4e5f\u95f4\u63a5\u8ba9\u5ba2\u6237\u4e0d\u5f97\u4e0d\u91c7\u8d2d\u4e00\u4e9b\u6602\u8d35\u7684\u6d77\u5916\u8f6f\u4ef6\u4ea7\u54c1\u3002 \u7b2c\u4e8c\u7c7b\u5ba2\u6237\u2014\u2014\u5927\u578b\u56fd\u4f01\u4e0e\u79c1\u4f01 \uff0c\u5176\u5e02\u573a\u5316\u7684\u8fd0\u4f5c\u65b9\u5f0f\u5728\u9700\u6c42\u65b9\u9762\u53d7\u653f\u7b56\u5f71\u54cd\u8f83\u5c0f\u3002\u4f46\u7531\u4e8e\u4f01\u4e1a\u5185\u90e8\u5e9e\u5927\uff0c\u5206\u5de5\u7ec6\u5bc6\uff0c\u4e1a\u52a1\u6d41\u7a0b\u590d\u6742\u3001\u72ec\u7279\uff0c\u8fd9\u7c7b\u5ba2\u6237\u5bf9\u8f6f\u4ef6\u7684\u9700\u6c42\u5448\u73b0\u51fa\u9ad8\u5ea6\u5b9a\u5236\u5316\u7684\u7279\u70b9\uff0c\u65e0\u6cd5\u901a\u8fc7\u8d2d\u4e70\u5df2\u6709\u4ea7\u54c1\u6765\u964d\u4f4e\u6210\u672c\uff0c\u53ea\u80fd\u7ec4\u7ec7\u5f00\u53d1\u56e2\u961f\u6765\u5b9a\u5236\u3002 \u56f4\u7ed5\u7740\u8fd9\u4e9b\u5927\u578b\u4f01\u4e1a\u964d\u4f4e\u7528\u4eba\u6210\u672c\u7684\u9700\u6c42\uff0c\u4e5f\u8bde\u751f\u4e86\u4e00\u6279\u8f6f\u4ef6\u516c\u53f8\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u5927\u578b\u4f01\u4e1a\u7684\u6280\u672f\u5916\u5305\u4f01\u4e1a\u3002\u5927\u578b\u4f01\u4e1a\u5185\u90e8\u5f00\u53d1\u56e2\u961f\u662f\u4ee5\u6ee1\u8db3\u4f01\u4e1a\u6d41\u7a0b\u7b49\u5e94\u7528\u9700\u6c42\u4e3a\u76ee\u7684\u800c\u5b58\u5728\u7684\uff0c\u503e\u5411\u4e8e\u4f7f\u7528\u4fdd\u5b88\u7684\u6280\u672f\u65b9\u6848\uff0c\u6280\u672f\u521b\u65b0\u7814\u53d1\u5e76\u4e0d\u662f\u5176\u4f18\u5148\u8003\u8651\u7684\u8981\u7d20\u3002 \u7b2c\u4e09\u7c7b\u5ba2\u6237\u2014\u2014\u4e2d\u578b\u4f01\u4e1a\u6216\u5927\u578b\u4f01\u4e1a\u7684\u8fb9\u7f18\u90e8\u95e8 \uff0c\u5176\u89c4\u6a21\u65e0\u6cd5\u652f\u6491\u5b9a\u5236\u8f6f\u4ef6\u7684\u6210\u672c\uff0c\u5f80\u5f80\u8d2d\u4e70\u73b0\u6210\u4ea7\u54c1\uff0c\u518d\u6784\u5efa\u5176\u4e1a\u52a1\u6d41\u7a0b\uff0c\u5b83\u4eec\u662f\u56fd\u5185\u8f6f\u4ef6\u4ea7\u54c1\u7684\u4e3b\u6d41\u6d88\u8d39\u8005\u3002\u5728\u8fd9\u4e2a\u5ba2\u6237\u7fa4\u4f53\u7684\u5e02\u573a\u4e0a\uff0c\u8f6f\u4ef6\u516c\u53f8\u4e4b\u95f4\u5448\u73b0\u51fa\u6fc0\u70c8\u7684\u7ade\u4e89\u72b6\u6001\u3002\u9664\u4e86\u5c11\u6570\u4e13\u4e1a\u6216\u653f\u7b56\u58c1\u5792\u8f83\u5f3a\u7684\u9886\u57df\uff0c\u80fd\u4ea7\u751f\u4e00\u4e24\u5bb6\u5f3a\u8005\uff0c\u5176\u5b83\u7c7b\u522b\u8f6f\u4ef6\u540c\u8d28\u5316\u4e25\u91cd\u3002 \u8f6f\u4ef6\u516c\u53f8\u5185\u90e8\u5bf9\u8f6f\u4ef6\u7684\u77e5\u8bc6\u4ea7\u6743\u4fdd\u62a4\u4e5f\u76f8\u5bf9\u8f83\u5f31\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u76d7\u7248\u8f6f\u4ef6\uff0c\u4ee5\u53ca\u5e76\u672a\u9075\u5b88\u89c4\u5219\u5730\u4f7f\u7528\u5f00\u6e90\u4ee3\u7801\u3002\u8fd9\u79cd\u65b9\u5f0f\u6709\u5229\u4e8e\u6709\u4e00\u5b9a\u5e02\u573a\u5730\u4f4d\u7684\u8f6f\u4ef6\u4f01\u4e1a\u7ee7\u7eed\u5de9\u56fa\u5176\u5e02\u573a\u5730\u4f4d\uff0c\u5e76\u627c\u6740\u540e\u6765\u7684\u521b\u65b0\u8005\u3002\u5728\u6ca1\u6709\u540e\u8d77\u4e4b\u79c0\u7684\u538b\u529b\u4e0b\uff0c\u65e2\u5f97\u5229\u76ca\u4f01\u4e1a\u503e\u5411\u4e8e\u6295\u5165\u66f4\u591a\u8d44\u6e90\u6765\u7ef4\u62a4\u5176\u4e1a\u52a1\u5173\u7cfb\uff0c\u800c\u975e\u6280\u672f\u3002 \u7b2c\u56db\u7c7b\u5ba2\u6237\u2014\u2014\u5c0f\u5fae\u4f01\u4e1a \uff0c\u5b83\u4eec\u6570\u91cf\u591a\u3001\u4ed8\u8d39\u80fd\u529b\u76f8\u5bf9\u8f83\u5f31\uff0c\u53ea\u80fd\u4f7f\u7528\u514d\u8d39\u6216\u8005\u6781\u4f4e\u4ef7\u683c\u79df\u7528\u8f6f\u4ef6\uff0c\u8fd9\u6784\u6210\u4e86\u56fd\u5185SaaS\u8f6f\u4ef6\u5e02\u573a\u53eb\u597d\u4e0d\u53eb\u5ea7\u7684\u73b0\u72b6\u3002\u800cSaaS\u8f6f\u4ef6\u4f01\u4e1a\u8fde\u5e26\u7740\u4e5f\u65e0\u6cd5\u5f97\u5230\u5065\u5eb7\u73b0\u91d1\u6d41\uff0c\u9020\u6210\u4e86\u5176\u5728\u7814\u53d1\u5c42\u9762\u6b62\u6b65\u4e0d\u524d\u3002 SaaS\u4f01\u4e1a\u7531\u4e8e\u5176\u4ea7\u54c1\u4e13\u4e1a\u6027\uff0c\u65e0\u6cd5\u6548\u4eff\u4e2a\u4eba\u8f6f\u4ef6\u901a\u8fc7\u7535\u5546\u3001\u6e38\u620f\u3001\u5e7f\u544a\u7b49\u5546\u4e1a\u6a21\u5f0f\u53d8\u73b0\u3002\u800cSaaS\u4f01\u4e1a\u4e00\u65e6\u60f3\u8981\u6269\u5c55\u5230\u4e2d\u578b\u4f01\u4e1a\u5ba2\u6237\u9886\u57df\uff0c\u5c31\u8981\u9762\u5bf9\u4e0a\u8ff0\u6fc0\u70c8\u7684\u7ade\u4e89\u73b0\u72b6\uff0c\u5927\u90e8\u5206\u521b\u4e1aSaaS\u516c\u53f8\u4e5f\u90fd\u65e0\u6cd5\u627f\u53d7\u8fd9\u4e2a\u4ee3\u4ef7\u3002 \u5373\u4fbf\u5c11\u6570SaaS\u516c\u53f8\u6709\u8d44\u672c\u52a0\u6301\uff0c\u4ece\u73b0\u6709\u5e02\u573a\u4e2d\u62a2\u4e0b\u4e00\u5757\u8089\uff0c\u4ecd\u7136\u4f1a\u9677\u5165\u4e1a\u52a1\u65e0\u6cd5\u8fdb\u4e00\u6b65\u6269\u5f20\u3001\u8d44\u672c\u65e0\u6cd5\u83b7\u5f97\u6709\u6548\u56de\u62a5\u7684\u5c34\u5c2c\u5883\u5730\uff0c\u4f01\u4e1a\u4ecd\u8981\u56de\u5230\u4e0d\u5f97\u4e0d\u6295\u5165\u5927\u91cf\u8d44\u6e90\u7ef4\u62a4\u5e02\u573a\u5173\u7cfb\u7684\u8001\u8def\u4e0a\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7814\u53d1\u90e8\u95e8\u4f1a\u53d8\u6210\u6210\u672c\u4e2d\u5fc3\u800c\u975e\u5229\u6da6\u4e2d\u5fc3\u3002SaaS\u4f01\u4e1a\u591a\u662f\u521d\u521b\u4f01\u4e1a\uff0c\u5176\u6838\u5fc3\u9aa8\u5e72\u591a\u4e3a\u6280\u672f\u4ea7\u54c1\u7b49\u4ece\u4e1a\u4eba\u5458\u51fa\u8eab\uff0c\u4ed6\u4eec\u62e5\u6709\u6280\u672f\u8fdb\u6b65\u7684\u610f\u613f\uff0c\u5982\u679c\u6709\u673a\u4f1a\uff0c\u5c06\u662f\u6280\u672f\u8fdb\u6b65\u7684\u4e2d\u575a\u529b\u91cf\u3002 \u7b2c\u4e94\u7c7b\uff0c\u4e2a\u4eba\u8f6f\u4ef6\u9886\u57df \uff0c\u901a\u8fc7\u514d\u8d39\u5438\u5f15\u7528\u6237\uff0c\u9760\u7535\u5546\u3001\u6e38\u620f\u3001\u5e7f\u544a\u5c06\u6d41\u91cf\u53d8\u73b0\uff0c\u8fd9\u5c31\u662f\u4e92\u8054\u7f51\u4f01\u4e1a\u7684\u4e3b\u573a\u3002\u7136\u800c\uff0c\u4e92\u8054\u7f51\u5de8\u5934\u8ffd\u6c42\u7684\u662f\u5e02\u573a\u4efd\u989d\u548c\u5229\u6da6\u56de\u62a5\uff0c\u56e4\u79ef\u4e86\u5927\u91cf\u6280\u672f\u4eba\u624d\uff0c\u4f46\u521b\u65b0\uff0c\u5c24\u5176\u662f\u6280\u672f\u521b\u65b0\u5305\u542b\u7740\u8f83\u5927\u7684\u98ce\u9669\uff0c\u800c\u77ed\u671f\u5185\u8d44\u672c\u56de\u62a5\u5374\u96be\u4ee5\u8ba1\u91cf\uff0c\u5bfc\u81f4\u5927\u578b\u4e92\u8054\u7f51\u4f01\u4e1a\u4e5f\u4f1a\u4fdd\u5b88\uff0c\u805a\u7126\u4e8e\u4e3b\u4e1a\u7684\u5546\u4e1a\u5316\u90e8\u5206\u3002 \u56fd\u5185\u8f6f\u4ef6\u884c\u4e1a\u59cb\u7ec8\u5904\u4e8e\u4ea7\u4e1a\u94fe\u4f4e\u7aef\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u6574\u4e2a\u884c\u4e1a\u7684\u5229\u6da6\u589e\u957f\u4e0d\u662f\u4f9d\u9760\u6280\u672f\u521b\u65b0\u6765\u521b\u9020\uff0c\u800c\u662f\u4e25\u91cd\u4f9d\u8d56\u4eba\u529b\u7684\u89c4\u6a21\uff0c\u9700\u8981\u6269\u5927\u52b3\u52a8\u89c4\u6a21\u5e76\u5ef6\u957f\u52b3\u52a8\u65f6\u95f4\u3002\u8fd9\u79cd\u72b6\u51b5\u5e26\u6765\u771f\u6b63\u7684\u8f6f\u4ef6\u751f\u4ea7\u8005\u52b3\u52a8\u8005\uff0c\u5305\u62ec\uff1a\u4ea7\u54c1\u3001\u8bbe\u8ba1\u3001\u5f00\u53d1\u3001\u6d4b\u8bd5\u7b49\u7b49\uff0c\u5e76\u4e0d\u80fd\u83b7\u5f97\u884c\u4e1a\u53d1\u5c55\u5e26\u6765\u7684\u6536\u76ca\u589e\u957f\u3002 \u7531\u6b64\u53ef\u89c1\uff0c\u6574\u4e2a\u8f6f\u4ef6\u4ea7\u4e1a\u73b0\u6709\u7684\u5546\u4e1a\u6a21\u5f0f\uff08\u751f\u4ea7\u5173\u7cfb\uff09\u5df2\u7ecf\u6210\u4e3a\u6280\u672f\u8fdb\u6b65\uff08\u751f\u4ea7\u529b\u53d1\u5c55\uff09\u7684\u675f\u7f1a\u3002\u8fd9\u91cc\u5c31\u6709\u4e00\u79cd\u53ef\u80fd\uff0c\u6216\u4e00\u79cd\u8d8b\u52bf\u3001\u4e00\u79cd\u529b\u91cf\uff0c\u60f3\u8981\u91cd\u5851\u751f\u4ea7\u5173\u7cfb\uff08\u4ea7\u4e1a\u9769\u547d\uff09\uff0c\u4ee5\u6ee1\u8db3\u751f\u4ea7\u529b\u53d1\u5c55\u7684\u9700\u8981\u3002 \u901a\u8fc7\u5bf9\u56fd\u5185\u8f6f\u4ef6\u884c\u4e1a\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b58\u5728\u7740\u8fd9\u4e9b\u95ee\u9898\uff1a \u7f3a\u4e4f\u4e00\u4e2a\u8d44\u6e90\u81ea\u7531\u6d41\u52a8\u7684\u5e02\u573a \u8f6f\u4ef6\u751f\u4ea7\u8005\u9760\u65f6\u95f4\u800c\u4e0d\u662f\u9760\u6280\u672f\u521b\u65b0\u9a71\u52a8\uff0c\u6269\u5927\u4e1a\u52a1\u89c4\u6a21\u8981\u9760\u5806\u4eba\u5458\u6570\u91cf \u4ea7\u54c1\u540c\u8d28\u5316\u4e25\u91cd\uff0c\u5bfc\u81f4\u6076\u610f\u7ade\u4e89 \u5c0f\u5fae\u4f01\u4e1a\u4ed8\u8d39\u80fd\u529b\u5dee\uff0c\u4ed8\u8d39\u610f\u613f\u4f4e \u4e92\u8054\u7f51\u5e73\u53f0\u7684\u5784\u65ad \u77e5\u8bc6\u4ea7\u6743\u4fdd\u62a4\u529b\u5ea6\u5f31 \u6d88\u9664\u4e0d\u5229\u4e8e\u6280\u672f\u8fdb\u6b65\u7684\u56e0\u7d20\u540e\uff0c\u53c2\u4e0e\u751f\u4ea7\u548c\u4ea4\u6613\u7684\u4f01\u4e1a\u6216\u4e2a\u4eba\u91cd\u65b0\u8fde\u63a5\u8d77\u6765\u5c31\u662f\u65b0\u7684\u5e02\u573a\u673a\u4f1a\uff0c\u800c\u6280\u672f\u8fd9\u4e2a\u8981\u7d20\u89e3\u653e\u51fa\u6765\uff0c\u5c31\u80fd\u6210\u4e3a\u63a8\u52a8\u521b\u65b0\u3001\u63a8\u52a8\u751f\u4ea7\u529b\u53d1\u5c55\u7684\u65b0\u9a71\u52a8\u529b\uff0c\u5b9e\u73b0\u4ea7\u4e1a\u53d8\u9769\u3002 \u63a8\u52a8\u8f6f\u4ef6\u884c\u4e1a\u6574\u4f53\u53d8\u9769\u9700\u8981\u6539\u53d8\u751f\u4ea7\u5173\u7cfb\uff0c\u521b\u9020\u8fde\u63a5\u7684\u65b0\u53ef\u80fd # \u6253\u8f66\u5e02\u573a\u7684\u53d8\u9769\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u601d\u8def\u3002\u6253\u8f66APP\u901a\u8fc7\u5c06\u53f8\u673a\u3001\u4e58\u5ba2\u6574\u5408\u5728\u540c\u4e00\u4e2a\u5e73\u53f0\u4e0a\u76f4\u63a5\u5b8c\u6210\u4ea4\u6613\uff0c\u6d88\u706d\u4fe1\u606f\u58c1\u5792\uff0c\u6210\u529f\u5730\u901a\u8fc7\u5e02\u573a\u53d8\u5316\u63a8\u52a8\u4e86\u884c\u4e1a\u53d8\u9769\u3002\u8f6f\u4ef6\u4ea7\u4e1a\u5982\u679c\u80fd\u6253\u901a\u6d88\u8d39\u8005\u4e0e\u751f\u4ea7\u8005\uff0c\u5efa\u7acb\u5168\u56fd\u6027\u7684\u8f6f\u4ef6\u5e02\u573a\uff0c\u76f8\u4fe1\u4e5f\u80fd\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002 \u4e0d\u540c\u4e8e\u6253\u8f66\u5e02\u573a\u4e2d\u670d\u52a1\u63d0\u4f9b\u8005\u5c31\u662f\u53f8\u673a\u8fd9\u822c\u7b80\u5355\uff0c\u8f6f\u4ef6\u884c\u4e1a\u8981\u590d\u6742\u5f97\u591a\u3002\u8f6f\u4ef6\u4ea7\u54c1\u3001\u670d\u52a1\u9762\u5bf9\u7684\u662f\u5343\u53d8\u4e07\u5316\u7684\u4e2a\u6027\u5316\u9700\u6c42\uff0c\u5e76\u4e14\u9700\u8981\u5f88\u591a\u4eba\u534f\u4f5c\u624d\u80fd\u5b8c\u6210\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5c06\u751f\u4ea7\u8005\u7ec4\u7ec7\u8d77\u6765\u662f\u5f62\u6210\u7edf\u4e00\u5e02\u573a\u7684\u5fc5\u8981\u6761\u4ef6\u3002 \u73b0\u5728\u7684\u8f6f\u4ef6\u751f\u4ea7\u8005\u90fd\u6563\u843d\u5728\u5404\u4e2a\u4f01\u4e1a\u4e2d\uff0c\u65e0\u8bba\u662f\u4ea7\u54c1\u3001\u8bbe\u8ba1\u3001\u5f00\u53d1\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u4ea4\u6d41\u4e92\u52a8\u90fd\u5f88\u6709\u9650\u3002 \u5728\u5bf9\u751f\u4ea7\u8005\u7684\u7ec4\u7ec7\u4e0a\uff0c\u6b27\u7f8e\u76f8\u5bf9\u6210\u719f\u7684\u8f6f\u4ef6\u5e02\u573a\u662f\u5f88\u597d\u7684\u53c2\u7167\u3002\u4f01\u4e1a\u60f3\u843d\u5730\u4e00\u4e2aIT\u9879\u76ee\uff0c\u5f80\u5f80\u5148\u5bf9\u63a5\u54a8\u8be2\u7c7b\u4f01\u4e1a\uff0c\u7531\u8fd9\u4e9b\u4f01\u4e1a\u5bf9\u63a5\u6216\u6316\u6398\u9700\u6c42\uff0c\u518d\u7531\u4e13\u4e1a\u7684\u5b9e\u65bd\u7c7b\u4f01\u4e1a\u8d1f\u8d23\u5c06\u9700\u6c42\u843d\u5730\uff0c\u8fd9\u7c7b\u5b9e\u65bd\u4f01\u4e1a\u5219\u4f1a\u91c7\u8d2d\u4e0a\u6e38\u5404\u7c7b\u57fa\u7840\u6027\u8f6f\u4ef6\uff0c\u5305\u62ec\u5f00\u53d1\u5de5\u5177\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93\u7b49\u3002\u5b9e\u65bd\u7c7b\u4f01\u4e1a\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u4e92\u76f8\u4ea4\u6613\uff0c\u5305\u542b\u529f\u80fd\u6a21\u5757\u4ee5\u53ca\u6210\u719f\u4ea7\u54c1\u7b49\u3002\u5b8c\u6210\u5f00\u53d1\u540e\uff0c\u518d\u7531\u4e13\u4e1a\u6d4b\u8bd5\u7c7b\u4f01\u4e1a\u8d1f\u8d23\u9a8c\u6536\u3002 \u5982\u6b64\u4ea7\u4e1a\u94fe\u5206\u5de5\uff0c\u8ba9\u9762\u5411\u5ba2\u6237\u8fd9\u4e00\u5c42\u5b9e\u65bd\u7c7b\u4f01\u4e1a\u4e0d\u518d\u662f\u5355\u7eaf\u7684\u4eba\u6d77\u6218\u672f\u3002\u867d\u7136\u4eba\u8fd8\u662f\u5173\u952e\u56e0\u7d20\uff0c\u4f46\u81f3\u5c11\u6446\u8131\u4e86\u8f6f\u4ef6\u5f00\u53d1\u4ec5\u4ec5\u662f\u4f53\u529b\u52b3\u52a8\u7684\u5c40\u9762\u3002 \u56fd\u5185\u6ca1\u6709\u5f62\u6210\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u6838\u5fc3\u539f\u56e0\u662f\u6d77\u5916\u8fd9\u79cd\u5206\u5de5\u65b9\u5f0f\u6240\u5e26\u6765\u7684\u6210\u672c\u4f18\u52bf\u62b5\u4e0d\u4e0a\u56fd\u5185\u4f4e\u5ec9\u7684\u4eba\u5de5\u6210\u672c\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u53ea\u6709\u8fdb\u4e00\u6b65\u7ec6\u5316\u5206\u5de5\uff0c\u6269\u5927\u4ea7\u4e1a\u94fe\u5408\u4f5c\u5e26\u6765\u7684\u6210\u672c\u4f18\u52bf\uff0c\u751f\u4ea7\u8005\u624d\u4f1a\u8d70\u5411\u4e92\u76f8\u4f9d\u8d56\u7684\u5de5\u4e1a\u5316\u7684\u751f\u4ea7\u65b9\u5f0f\u3002\u751f\u4ea7\u8005\u4eec\u7684\u5229\u76ca\u4e00\u81f4\uff0c\u4e5f\u5c31\u80fd\u6446\u8131\u4ea7\u54c1\u540c\u8d28\u5316\u7684\u7ade\u4e89\u3002 \u4e0e\u56fd\u5916\u540c\u6837\u4e0d\u540c\u7684\u4e00\u4e2a\u4f18\u52bf\u662f\uff0c\u56fd\u5185\u6709\u8db3\u591f\u591a\u7684\u4ea7\u4e1a\u4eba\u7fa4\u6765\u652f\u6491\u66f4\u7ec6\u9897\u7c92\u5ea6\u7684\u4ea7\u4e1a\u5206\u5de5\uff0c\u4ece\u8fd9\u4e00\u70b9\u4e0a\u770b\uff0c\u56fd\u5185\u76f8\u6bd4\u6b27\u7f8e\u66f4\u6709\u4f18\u52bf\u80fd\u66f4\u6df1\u5165\u5730\u5b8c\u6210\u4ea7\u4e1a\u53d8\u9769\u3002 \u8f6f\u4ef6\u4ea7\u54c1\u6709\u590d\u5236\u6210\u672c\u51e0\u4e4e\u4e3a\u96f6\u8fd9\u4e2a\u7279\u70b9\uff0c\u5728\u4ea7\u4e1a\u94fe\u5206\u5de5\u548c\u7edf\u4e00\u5e02\u573a\u7684\u5171\u540c\u4f5c\u7528\u4e0b\uff0c\u5f88\u5bb9\u6613\u5145\u5b9e\u4ee5\u4f4e\u4ef7\u91cf\u5927\u4e3a\u5356\u70b9\u3001\u670d\u52a1\u5c0f\u5fae\u4f01\u4e1a\u7684\u8f6f\u4ef6\u5e02\u573a\uff0c\u751a\u81f3\u6269\u5c55\u5230\u4e2a\u4eba\u8f6f\u4ef6\u9886\u57df\u3002\u8fd9\u4e00\u70b9\uff0c\u5982\u4eca\u6709\u5927\u91cf\u552e\u4ef7\u51e0\u5341\u5143\u3001\u51e0\u767e\u5143\u7684\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\uff0c\u8fd9\u4e2a\u7ec6\u5206\u8f6f\u4ef6\u5e02\u573a\u5df2\u7ecf\u505a\u4e86\u5f88\u597d\u7684\u793a\u8303\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u8981\u8ba9\u8f6f\u4ef6\u884c\u4e1a\u6574\u4f53\u4e0a\u5411\u4e0a\u8fc8\u8fdb\u53d8\u9769\u7684\u4e00\u6b65\uff0c\u8981\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u5c31\u8981\u63a8\u8fdb\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5efa\u7acb\u5168\u56fd\u6027\u7684\u8f6f\u4ef6\u4ea7\u54c1\u5e02\u573a\uff0c\u8ba9\u8d44\u6e90\u80fd\u81ea\u7531\u7684\u6d41\u52a8 \u5efa\u7acb\u4ee5\u5206\u5de5\u5408\u4f5c\u4e3a\u57fa\u7840\u7684\u8f6f\u4ef6\u5f00\u53d1\u5e02\u573a\uff0c\u5982\u54a8\u8be2\u3001\u7814\u53d1\u3001\u8bbe\u8ba1\u3001\u6d4b\u8bd5\u7b49\u4e13\u4e1a\u4f01\u4e1a \u52a0\u5f3a\u8f6f\u4ef6\u4ea7\u4e1a\u94fe\u4e0a\u6e38\u751f\u4ea7\u8005\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u5c06\u7ade\u4e89\u53d8\u4e3a\u4e92\u52a9\uff0c\u6bd4\u5982\u5efa\u7acb\u6e90\u4ee3\u7801\u4ea4\u6613\u5e02\u573a \u52a0\u5f3a\u8f6f\u4ef6\u4ea7\u54c1\u5728\u9500\u552e\u7aef\u7684\u5408\u4f5c\uff0c\u964d\u4f4e\u4ee3\u7406\u95e8\u69db \u5c0a\u91cd\u5f7c\u6b64\u52b3\u52a8\u6210\u679c\uff0c\u52a0\u5f3a\u5bf9\u521b\u65b0\u6027\u77e5\u8bc6\u4ea7\u6743\u7684\u4fdd\u62a4 \u4ee5\u4e0a\u7684\u6bcf\u4e00\u4e2a\u65b9\u9762\u770b\u4e0a\u53bb\u90fd\u6bd4\u8f83\u96be\u4ee5\u5728\u77ed\u671f\u5185\u5b9e\u73b0\uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u6280\u672f\u65b9\u9762\u7684\u8d8b\u52bf\uff0c\u6b63\u5728\u50cf\u62f1\u51fa\u5730\u9762\u7684\u5ae9\u82bd\uff0c\u8ba9\u8fd9\u4e9b\u94c1\u677f\u4e00\u5757\u7684\u8981\u7d20\u4ea7\u751f\u88c2\u7f1d\uff0c\u5f97\u4ee5\u6e17\u900f\u8fdb\u65b0\u7684\u53d8\u5316\u3002\u6bd4\u5982\uff1a \u7edf\u4e00\u8eab\u4efd \u4ee5OIDC\u4e3a\u4ee3\u8868\uff0c\u5efa\u7acb\u8d77\u4e86\u7edf\u4e00\u8eab\u4efd\u8ba4\u8bc1\u7684\u901a\u7528\u6807\u51c6\u534f\u8bae\uff0c\u4e3a\u964d\u4f4e\u4f01\u4e1a\u7ba1\u7406\u8f6f\u4ef6\u6210\u672c\u3001\u5b9e\u73b0\u6570\u5b57\u5316\u7684\u613f\u666f\u6253\u4e0b\u4e86\u57fa\u7840\uff0c\u7531\u6b64\u884d\u751f\u51fa\u4e00\u7cfb\u5217\u6784\u5efa\u7edf\u4e00\u8eab\u4efd\u670d\u52a1\u7684IAM/IDaaS\u4f01\u4e1a\u3002 \u4e91\u539f\u751f \u4ee5docker\u548ck8s\u4e3a\u4ee3\u8868\u7684\u4e91\u539f\u751f\u6280\u672f\uff0c\u80fd\u5927\u5e45\u964d\u4f4e\u8fd0\u7ef4\u5b9e\u65bd\u7684\u96be\u5ea6\u548c\u6210\u672c\uff0c\u4e5f\u5728IT\u7ba1\u7406\u548c\u8fd0\u7ef4\u7684\u5206\u5de5\u4e0a\u5212\u51fa\u4e86\u66f4\u4e3a\u660e\u6670\u7684\u8fb9\u754c\uff0c\u8fd9\u5c31\u4f7f\u7edf\u4e00\u7684\u8f6f\u4ef6\u5e02\u573a\u8fd9\u4e00\u65b9\u6848\u6709\u4e86\u6280\u672f\u57fa\u7840\u3002\u56fd\u5185\u5c31\u6709\u4e00\u6279\u4f18\u79c0\u7684\u4ee5\u4e91\u539f\u751f\u6280\u672f\u4e3a\u57fa\u7840\u6253\u9020\u4f01\u4e1a\u4e91\u5e73\u53f0\u7684\u6280\u672f\u578b\u4f01\u4e1a\u3002 \u4f4e\u4ee3\u7801 \u4ee5Vue\u4e3a\u4ee3\u8868\u7684Web\u6280\u672f\u8fd1\u671f\u5feb\u901f\u53d1\u5c55\u548c\u666e\u53ca\uff0cWeb\u4f18\u79c0\u7684\u8de8\u5e73\u53f0\u80fd\u529b\u8ba9\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u53d1\u751f\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4e0d\u5c11\u521b\u65b0\u4f01\u4e1a\u5f00\u59cb\u5728\u4f4e\u4ee3\u7801\u6216\u65e0\u4ee3\u7801\u8fd9\u4e2a\u9886\u57df\u79ef\u6781\u63a2\u7d22\u3002\u867d\u7136\u5728\u63a2\u7d22\u9636\u6bb5\uff0c\u4f46\u662f\u4f4e\u4ee3\u7801\u7684\u7406\u5ff5\u4e3a\u8fdb\u4e00\u6b65\u7ec6\u5316\u5206\u5de5\u3001\u91cd\u5851\u4ea7\u4e1a\u94fe\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u5411\u3002 \u5f00\u6e90\u8fd0\u52a8 Python\uff0cGo\u7b49\u8bed\u8a00\u7684\u5f00\u6e90\u793e\u533a\u6b63\u5728\u6311\u6218\u539f\u672cJava\u548c.Net\u7b49\u7b49\u4e3a\u57fa\u7840\u7684\u4f01\u4e1a\u7ea7\u8f6f\u4ef6\u5e02\u573a\uff0c\u4ee5\u5f00\u6e90\u4e3a\u5546\u4e1a\u6a21\u5f0f\u7684\u6280\u672f\u4f01\u4e1a\u6b63\u5feb\u901f\u63a8\u8fdb\u6280\u672f\u666e\u53ca\uff0c\u6253\u7834\u4e86\u5927\u4f01\u4e1a\u7684\u6280\u672f\u5784\u65ad\uff1b\u5b83\u4eec\u540c\u65f6\u4e5f\u5efa\u7acb\u4e86\u6807\u51c6\uff0c\u5728\u4fc3\u8fdb\u4ea7\u4e1a\u94fe\u878d\u5408\uff0c\u5e76\u6210\u4e3a\u6838\u5fc3\u529b\u91cf\u3002 \u56fd\u5bb6\u5bf9\u884c\u4e1a\u7684\u89c4\u8303\u548c\u6307\u5f15\u4fdd\u62a4\u65b9\u9762\uff0c\u6211\u4eec\u4e5f\u770b\u5230\u653f\u5e9c\u51fa\u53f0\u4e00\u7cfb\u5217\u6fc0\u52b1\u884c\u4e1a\u7684\u63aa\u65bd\u3002\u5f53\u7136\uff0c\u4ec5\u4f9d\u9760\u653f\u5e9c\u529b\u91cf\u662f\u4e0d\u591f\u7684\u3002\u4ea7\u4e1a\u9769\u547d\u7684\u53d1\u751f\u4e00\u5b9a\u662f\u5f88\u591a\u4ea7\u4e1a\u4eba\u5171\u540c\u63a8\u52a8\u7684\u7ed3\u679c\uff0c\u5c24\u5176\u662fSaaS\u7c7b\u4f01\u4e1a\uff0c\u4f5c\u4e3a\u65b0\u5174\u7684\u529b\u91cf\uff0c\u56e2\u7ed3\u8d77\u6765\uff0c\u7d27\u5bc6\u5408\u4f5c\uff0c\u5f62\u6210\u4ea7\u4e1a\u94fe\u6761\uff0c\u5171\u540c\u6210\u957f\uff0c\u5171\u540c\u63a8\u52a8\u53d8\u9769\u3002 \u53d8\u9769\u4e2d\uff0c\u9f99\u5f52\u79d1\u6280\u7684\u5207\u5165\u70b9 # \u9f99\u5f52\u79d1\u6280\u6b63\u5728\u5c1d\u8bd5\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u9f99\u5f52\u79d1\u6280\u5f00\u53d1\u7684ArkID\u662f\u627f\u8f7d\u8fd9\u4e9b\u60f3\u6cd5\u7684\u4e00\u4e2a\u6838\u5fc3\u9879\u76ee\u3002\u8868\u9762\u4e0a\u770b\uff0cArkID\u662f\u4e00\u4e2aIDaaS\u4ea7\u54c1\uff0c\u770b\u4e0a\u53bb\u53ef\u80fd\u4e0e\u4e00\u822c\u7684\u7edf\u4e00\u8eab\u4efd\u4ea7\u54c1\u7c7b\u4f3c\u3002\u4f46\u4e0d\u540c\u70b9\u5728\u4e8e\uff1a \u5f00\u6e90 \u4e4b\u6240\u4ee5\u5f00\u6e90\uff0c\u76ee\u7684\u662f\u4e0e\u6240\u6709\u4ea7\u4e1a\u4eba\u5171\u4eab\u6211\u4eec\u7684\u4ea7\u54c1\u3002\u5f00\u53d1\u4efb\u4f55\u4ea7\u54c1\u90fd\u9700\u8981\u8eab\u4efd\u6a21\u5757\uff0c\u4f7f\u7528ArkID\u5c31\u80fd\u76f4\u63a5\u8282\u7701\u5f00\u53d1\u65f6\u95f4\u3002ArkID\u652f\u6301\u79c1\u6709\u5316\u90e8\u7f72\uff0c\u65e0\u8bba\u662f\u81ea\u7528\u8fd8\u662f\u505a\u4e3a\u72ec\u7acb\u7684IDaaS\u7ad9\u70b9\uff0c\u4f60\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u63d2\u4ef6\u5316\uff0c\u5e76\u8bbe\u7acb\u63d2\u4ef6\u5546\u5e97 ArkID\u5927\u90e8\u5206\u529f\u80fd\u90fd\u662f\u4f9d\u9760\u63d2\u4ef6\u6765\u5b9e\u73b0\u3002\u63d2\u4ef6\u7684\u7075\u6d3b\u6027\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u5404\u79cd\u4e2a\u6027\u5316\u7684\u9700\u6c42\uff0c\u964d\u4f4e\u5b9e\u65bd\u6210\u672c\u3002\u6240\u6709\u7684ArkID\u7684\u7528\u6237\u90fd\u53ef\u4ee5\u5c06\u81ea\u5df1\u5f00\u53d1\u7684\u63d2\u4ef6\u4e0a\u4f20\u5230\u63d2\u4ef6\u5546\u5e97\u4e0e\u5408\u4f5c\u4f19\u4f34\u5171\u4eab\u6216\u51fa\u552e\uff0c\u800c\u5b9e\u65bd\u65b9\u80fd\u7528\u4f4e\u4e8e\u76f4\u63a5\u5f00\u53d1\u7684\u6210\u672c\u76f4\u63a5\u8d2d\u4e70\u8fd9\u4e9b\u63d2\u4ef6\u3002 \u5185\u7f6e\u4e86SaaS\u5e94\u7528\u5546\u5e97 ArkID\u5185\u7f6e\u4e86\u5e94\u7528\u5546\u5e97\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u5b98\u65b9IDaaS\u5e73\u53f0\u521b\u5efaSaaS\u5e94\u7528\u7684\u5165\u53e3\uff0c\u65e0\u8bba\u662fArkID\u7528\u6237\u662f\u79c1\u6709\u90e8\u7f72\u8fd8\u662f\u4f7f\u7528\u79df\u6237\u7684\u65b9\u5f0f\uff0c\u90fd\u53ef\u4ee5\u7528\u81ea\u5df1\u7684ArkID\u7684\u8d26\u53f7\u76f4\u63a5\u767b\u5f55\u4f7f\u7528\u5e94\u7528\u5546\u5e97\u4e2d\u7684SaaS\u8f6f\u4ef6\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u4e0eArkID\u7684\u5408\u4f5c\u5f00\u53d1\u8005\u5171\u4eab\u7528\u6237\u3002 \u5f00\u653e\u7684\u4ee3\u7406\u89c4\u5219 \u65e0\u8bba\u4f60\u662f\u4e2a\u4eba\u8fd8\u662f\u4f01\u4e1a\uff0c\u4f7f\u7528\u7684\u662f\u79c1\u6709\u90e8\u7f72\u8fd8\u662f\u79df\u6237\u7684\u65b9\u5f0f\uff0c\u4f60\u901a\u8fc7\u4efb\u4f55\u6e20\u9053\u6ce8\u518c\u4e86ArkID\u7684\u8d26\u53f7\uff0c\u90fd\u81ea\u52a8\u6210\u4e3aArkID\u7684\u4ee3\u7406\u5546\uff0c\u4ee5\u4ee3\u7406\u4ef7\u683c\u53bb\u9500\u552e\u63d2\u4ef6\u4e0e\u5e94\u7528\u5546\u5e97\u7684\u6240\u6709\u4ea7\u54c1\u3002 \u4f4e\u4ee3\u7801\u7684\u5f00\u53d1\u6846\u67b6 \u5982\u679c\u4f60\u662f\u7a0b\u5e8f\u5458\uff0c\u5e76\u4e14\u6709\u5174\u8da3\u7ffb\u770bArkID\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u4e00\u70b9\uff1a\u6211\u4eec\u5728ArkID\u7684\u5f00\u53d1\u4e2d\u878d\u5165\u4f4e\u4ee3\u7801\u5f00\u53d1\u7684\u4e00\u4e9b\u601d\u60f3\uff0c\u5e76\u5c06\u8fd9\u4e9b\u601d\u60f3\u7528\u5f00\u53d1\u6846\u67b6\u7684\u65b9\u5f0f\u5b9e\u73b0\u51fa\u6765\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u671f\u671b\u63a8\u52a8\u66f4\u9897\u7ec6\u7c92\u5ea6\u7684\u4ea7\u4e1a\u5206\u5de5\u7684\u5c1d\u8bd5\u3002\u5982\u679c\u6709\u5174\u8da3\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\u4eec\u4ea4\u6d41\u3002 \u5982\u679c\u60a8\u5bf9\u6211\u4eec\u5728\u505a\u7684\u4e8b\u60c5\u611f\u5174\u8da3\uff0c\u6b22\u8fce\u7528\u4ee5\u4e0b\u5f62\u5f0f\u53c2\u4e0e\uff1a \u5728\u5f00\u6e90\u793e\u533a\u8d21\u732eIssue\u6216\u4ee3\u7801 \u5728\u63d2\u4ef6\u5546\u5e97\u4e2d\u63d0\u4ea4\u529f\u80fd\u63d2\u4ef6 \u5728\u5e94\u7528\u5546\u5e97\u4e2d\u63d0\u4ea4SaaS\u5e94\u7528 \u6210\u4e3a\u4ee3\u7406\u5546\u5411\u5ba2\u6237\u63a8\u8350ArkID","title":"\u9f99\u5f52\u79d1\u6280"},{"location":"%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/#_1","text":"","title":"\u9f99\u5f52\u79d1\u6280"},{"location":"%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/#_2","text":"\u4e2d\u56fd\u8f6f\u4ef6\u884c\u4e1a\u8d77\u6b65\u867d\u665a\uff0c\u4f46\u53d1\u5c55\u81f3\u4eca\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u63a5\u8fd1\u5341\u4e07\u4ebf\u7684\u5e02\u573a\u89c4\u6a21\u548c\u8fd1\u516b\u767e\u4e07\u7684\u4ece\u4e1a\u4eba\u5458\u3002\u4f46\u4e0e\u5176\u4e0d\u76f8\u79f0\u7684\u662f\uff0c\u56fd\u5185\u8f6f\u4ef6\u7684\u7814\u53d1\u90e8\u5206\u59cb\u7ec8\u5904\u4e8e\u76f8\u5173\u4ea7\u4e1a\u94fe\u7684\u4f4e\u7aef\u5730\u4f4d\u3002 \u4efb\u4f55\u5e02\u573a\u6216\u751f\u610f\uff0c\u672c\u8d28\u4e0a\u5b83\u5f62\u6210\u7684\u6765\u6e90\u90fd\u662f\u5ba2\u6237\u7684\u9700\u6c42\u3002\u8f6f\u4ef6\u516c\u53f8\u4f5c\u4e3a\u4e59\u65b9\u5728\u6ee1\u8db3\u5ba2\u6237\u9700\u6c42\u4e0a\uff0c\u8fd9\u4e2a\u884c\u4e1a\u5448\u73b0\u51fa\u5b8c\u5168\u4e0d\u540c\u7684\u7279\u70b9\u3002 \u8f6f\u4ef6\u5e02\u573a\u4e2d\uff0c\u6309\u4ed8\u8d39\u80fd\u529b\u53ef\u4ee5\u628a\u5ba2\u6237\u88ab\u5206\u4e3a\u51e0\u4e2a\u7b49\u7ea7\uff1a\u653f\u5e9c\u4e0e\u4e8b\u4e1a\u5355\u4f4d\u3001\u5927\u578b\u56fd\u4f01\u4e0e\u79c1\u4f01\u3001\u4e2d\u578b\u4f01\u4e1a\u3001\u5c0f\u5fae\u4f01\u4e1a\u3001\u4e2a\u4eba\u3002 \u7b2c\u4e00\u7c7b\u5ba2\u6237\u2014\u2014\u653f\u5e9c\u4e0e\u4e8b\u4e1a\u5355\u4f4d \uff0c\u7531\u4e8e\u4e2d\u592e\u9f13\u52b1\u548c\u6276\u6301\u4fe1\u606f\u4ea7\u4e1a\uff0c\u4ee5\u53ca\u5728\u9884\u7b97\u4e0a\u7ed9\u4e88\u4e86\u8fd9\u4e9b\u673a\u6784\u5145\u8db3\u7684\u7a7a\u95f4\uff0c\u653f\u5e9c\u4e0e\u4e8b\u4e1a\u5355\u4f4d\u7684\u4ed8\u8d39\u80fd\u529b\u5f3a\uff0c\u5728\u6574\u4e2a\u5e02\u573a\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002 \u7531\u5404\u5730\u65b9\u653f\u5e9c\u548c\u4e8b\u4e1a\u5355\u4f4d\u6276\u6301\uff0c\u5728\u8f6f\u4ef6\u4e1a\u53d1\u5c55\u521d\u671f\u5feb\u901f\u7684\u57f9\u517b\u51fa\u4e00\u5927\u6279\u5730\u65b9\u6027\u8f6f\u4ef6\u4f01\u4e1a\uff0c\u4e3a\u8f6f\u4ef6\u4e1a\u6253\u4e0b\u57fa\u7840\u3002 \u4f46\u7531\u4e8e\u5176\u5ba2\u6237\u5173\u7cfb\u7a33\u5b9a\uff0c\u4f7f\u5176\u5bf9\u7814\u53d1\u6295\u5165\u7f3a\u4e4f\u79ef\u6781\u6027\u3002\u5e76\u4e14\u7531\u4e8e\u5176\u5f88\u5f3a\u7684\u5730\u57df\u6027\uff0c\u4f1a\u5404\u81ea\u4e3a\u6218\u3002\u540c\u65f6\u4e3a\u4e86\u964d\u4f4e\u6210\u672c\uff0c\u8fd9\u7c7b\u8f6f\u4ef6\u4f01\u4e1a\u66f4\u613f\u610f\u4f7f\u7528\u56fd\u5916\u6210\u719f\u7684\u5546\u4e1a\u65b9\u6848\uff0c\u4e5f\u95f4\u63a5\u8ba9\u5ba2\u6237\u4e0d\u5f97\u4e0d\u91c7\u8d2d\u4e00\u4e9b\u6602\u8d35\u7684\u6d77\u5916\u8f6f\u4ef6\u4ea7\u54c1\u3002 \u7b2c\u4e8c\u7c7b\u5ba2\u6237\u2014\u2014\u5927\u578b\u56fd\u4f01\u4e0e\u79c1\u4f01 \uff0c\u5176\u5e02\u573a\u5316\u7684\u8fd0\u4f5c\u65b9\u5f0f\u5728\u9700\u6c42\u65b9\u9762\u53d7\u653f\u7b56\u5f71\u54cd\u8f83\u5c0f\u3002\u4f46\u7531\u4e8e\u4f01\u4e1a\u5185\u90e8\u5e9e\u5927\uff0c\u5206\u5de5\u7ec6\u5bc6\uff0c\u4e1a\u52a1\u6d41\u7a0b\u590d\u6742\u3001\u72ec\u7279\uff0c\u8fd9\u7c7b\u5ba2\u6237\u5bf9\u8f6f\u4ef6\u7684\u9700\u6c42\u5448\u73b0\u51fa\u9ad8\u5ea6\u5b9a\u5236\u5316\u7684\u7279\u70b9\uff0c\u65e0\u6cd5\u901a\u8fc7\u8d2d\u4e70\u5df2\u6709\u4ea7\u54c1\u6765\u964d\u4f4e\u6210\u672c\uff0c\u53ea\u80fd\u7ec4\u7ec7\u5f00\u53d1\u56e2\u961f\u6765\u5b9a\u5236\u3002 \u56f4\u7ed5\u7740\u8fd9\u4e9b\u5927\u578b\u4f01\u4e1a\u964d\u4f4e\u7528\u4eba\u6210\u672c\u7684\u9700\u6c42\uff0c\u4e5f\u8bde\u751f\u4e86\u4e00\u6279\u8f6f\u4ef6\u516c\u53f8\uff0c\u53ef\u4ee5\u770b\u4f5c\u662f\u5927\u578b\u4f01\u4e1a\u7684\u6280\u672f\u5916\u5305\u4f01\u4e1a\u3002\u5927\u578b\u4f01\u4e1a\u5185\u90e8\u5f00\u53d1\u56e2\u961f\u662f\u4ee5\u6ee1\u8db3\u4f01\u4e1a\u6d41\u7a0b\u7b49\u5e94\u7528\u9700\u6c42\u4e3a\u76ee\u7684\u800c\u5b58\u5728\u7684\uff0c\u503e\u5411\u4e8e\u4f7f\u7528\u4fdd\u5b88\u7684\u6280\u672f\u65b9\u6848\uff0c\u6280\u672f\u521b\u65b0\u7814\u53d1\u5e76\u4e0d\u662f\u5176\u4f18\u5148\u8003\u8651\u7684\u8981\u7d20\u3002 \u7b2c\u4e09\u7c7b\u5ba2\u6237\u2014\u2014\u4e2d\u578b\u4f01\u4e1a\u6216\u5927\u578b\u4f01\u4e1a\u7684\u8fb9\u7f18\u90e8\u95e8 \uff0c\u5176\u89c4\u6a21\u65e0\u6cd5\u652f\u6491\u5b9a\u5236\u8f6f\u4ef6\u7684\u6210\u672c\uff0c\u5f80\u5f80\u8d2d\u4e70\u73b0\u6210\u4ea7\u54c1\uff0c\u518d\u6784\u5efa\u5176\u4e1a\u52a1\u6d41\u7a0b\uff0c\u5b83\u4eec\u662f\u56fd\u5185\u8f6f\u4ef6\u4ea7\u54c1\u7684\u4e3b\u6d41\u6d88\u8d39\u8005\u3002\u5728\u8fd9\u4e2a\u5ba2\u6237\u7fa4\u4f53\u7684\u5e02\u573a\u4e0a\uff0c\u8f6f\u4ef6\u516c\u53f8\u4e4b\u95f4\u5448\u73b0\u51fa\u6fc0\u70c8\u7684\u7ade\u4e89\u72b6\u6001\u3002\u9664\u4e86\u5c11\u6570\u4e13\u4e1a\u6216\u653f\u7b56\u58c1\u5792\u8f83\u5f3a\u7684\u9886\u57df\uff0c\u80fd\u4ea7\u751f\u4e00\u4e24\u5bb6\u5f3a\u8005\uff0c\u5176\u5b83\u7c7b\u522b\u8f6f\u4ef6\u540c\u8d28\u5316\u4e25\u91cd\u3002 \u8f6f\u4ef6\u516c\u53f8\u5185\u90e8\u5bf9\u8f6f\u4ef6\u7684\u77e5\u8bc6\u4ea7\u6743\u4fdd\u62a4\u4e5f\u76f8\u5bf9\u8f83\u5f31\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u76d7\u7248\u8f6f\u4ef6\uff0c\u4ee5\u53ca\u5e76\u672a\u9075\u5b88\u89c4\u5219\u5730\u4f7f\u7528\u5f00\u6e90\u4ee3\u7801\u3002\u8fd9\u79cd\u65b9\u5f0f\u6709\u5229\u4e8e\u6709\u4e00\u5b9a\u5e02\u573a\u5730\u4f4d\u7684\u8f6f\u4ef6\u4f01\u4e1a\u7ee7\u7eed\u5de9\u56fa\u5176\u5e02\u573a\u5730\u4f4d\uff0c\u5e76\u627c\u6740\u540e\u6765\u7684\u521b\u65b0\u8005\u3002\u5728\u6ca1\u6709\u540e\u8d77\u4e4b\u79c0\u7684\u538b\u529b\u4e0b\uff0c\u65e2\u5f97\u5229\u76ca\u4f01\u4e1a\u503e\u5411\u4e8e\u6295\u5165\u66f4\u591a\u8d44\u6e90\u6765\u7ef4\u62a4\u5176\u4e1a\u52a1\u5173\u7cfb\uff0c\u800c\u975e\u6280\u672f\u3002 \u7b2c\u56db\u7c7b\u5ba2\u6237\u2014\u2014\u5c0f\u5fae\u4f01\u4e1a \uff0c\u5b83\u4eec\u6570\u91cf\u591a\u3001\u4ed8\u8d39\u80fd\u529b\u76f8\u5bf9\u8f83\u5f31\uff0c\u53ea\u80fd\u4f7f\u7528\u514d\u8d39\u6216\u8005\u6781\u4f4e\u4ef7\u683c\u79df\u7528\u8f6f\u4ef6\uff0c\u8fd9\u6784\u6210\u4e86\u56fd\u5185SaaS\u8f6f\u4ef6\u5e02\u573a\u53eb\u597d\u4e0d\u53eb\u5ea7\u7684\u73b0\u72b6\u3002\u800cSaaS\u8f6f\u4ef6\u4f01\u4e1a\u8fde\u5e26\u7740\u4e5f\u65e0\u6cd5\u5f97\u5230\u5065\u5eb7\u73b0\u91d1\u6d41\uff0c\u9020\u6210\u4e86\u5176\u5728\u7814\u53d1\u5c42\u9762\u6b62\u6b65\u4e0d\u524d\u3002 SaaS\u4f01\u4e1a\u7531\u4e8e\u5176\u4ea7\u54c1\u4e13\u4e1a\u6027\uff0c\u65e0\u6cd5\u6548\u4eff\u4e2a\u4eba\u8f6f\u4ef6\u901a\u8fc7\u7535\u5546\u3001\u6e38\u620f\u3001\u5e7f\u544a\u7b49\u5546\u4e1a\u6a21\u5f0f\u53d8\u73b0\u3002\u800cSaaS\u4f01\u4e1a\u4e00\u65e6\u60f3\u8981\u6269\u5c55\u5230\u4e2d\u578b\u4f01\u4e1a\u5ba2\u6237\u9886\u57df\uff0c\u5c31\u8981\u9762\u5bf9\u4e0a\u8ff0\u6fc0\u70c8\u7684\u7ade\u4e89\u73b0\u72b6\uff0c\u5927\u90e8\u5206\u521b\u4e1aSaaS\u516c\u53f8\u4e5f\u90fd\u65e0\u6cd5\u627f\u53d7\u8fd9\u4e2a\u4ee3\u4ef7\u3002 \u5373\u4fbf\u5c11\u6570SaaS\u516c\u53f8\u6709\u8d44\u672c\u52a0\u6301\uff0c\u4ece\u73b0\u6709\u5e02\u573a\u4e2d\u62a2\u4e0b\u4e00\u5757\u8089\uff0c\u4ecd\u7136\u4f1a\u9677\u5165\u4e1a\u52a1\u65e0\u6cd5\u8fdb\u4e00\u6b65\u6269\u5f20\u3001\u8d44\u672c\u65e0\u6cd5\u83b7\u5f97\u6709\u6548\u56de\u62a5\u7684\u5c34\u5c2c\u5883\u5730\uff0c\u4f01\u4e1a\u4ecd\u8981\u56de\u5230\u4e0d\u5f97\u4e0d\u6295\u5165\u5927\u91cf\u8d44\u6e90\u7ef4\u62a4\u5e02\u573a\u5173\u7cfb\u7684\u8001\u8def\u4e0a\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7814\u53d1\u90e8\u95e8\u4f1a\u53d8\u6210\u6210\u672c\u4e2d\u5fc3\u800c\u975e\u5229\u6da6\u4e2d\u5fc3\u3002SaaS\u4f01\u4e1a\u591a\u662f\u521d\u521b\u4f01\u4e1a\uff0c\u5176\u6838\u5fc3\u9aa8\u5e72\u591a\u4e3a\u6280\u672f\u4ea7\u54c1\u7b49\u4ece\u4e1a\u4eba\u5458\u51fa\u8eab\uff0c\u4ed6\u4eec\u62e5\u6709\u6280\u672f\u8fdb\u6b65\u7684\u610f\u613f\uff0c\u5982\u679c\u6709\u673a\u4f1a\uff0c\u5c06\u662f\u6280\u672f\u8fdb\u6b65\u7684\u4e2d\u575a\u529b\u91cf\u3002 \u7b2c\u4e94\u7c7b\uff0c\u4e2a\u4eba\u8f6f\u4ef6\u9886\u57df \uff0c\u901a\u8fc7\u514d\u8d39\u5438\u5f15\u7528\u6237\uff0c\u9760\u7535\u5546\u3001\u6e38\u620f\u3001\u5e7f\u544a\u5c06\u6d41\u91cf\u53d8\u73b0\uff0c\u8fd9\u5c31\u662f\u4e92\u8054\u7f51\u4f01\u4e1a\u7684\u4e3b\u573a\u3002\u7136\u800c\uff0c\u4e92\u8054\u7f51\u5de8\u5934\u8ffd\u6c42\u7684\u662f\u5e02\u573a\u4efd\u989d\u548c\u5229\u6da6\u56de\u62a5\uff0c\u56e4\u79ef\u4e86\u5927\u91cf\u6280\u672f\u4eba\u624d\uff0c\u4f46\u521b\u65b0\uff0c\u5c24\u5176\u662f\u6280\u672f\u521b\u65b0\u5305\u542b\u7740\u8f83\u5927\u7684\u98ce\u9669\uff0c\u800c\u77ed\u671f\u5185\u8d44\u672c\u56de\u62a5\u5374\u96be\u4ee5\u8ba1\u91cf\uff0c\u5bfc\u81f4\u5927\u578b\u4e92\u8054\u7f51\u4f01\u4e1a\u4e5f\u4f1a\u4fdd\u5b88\uff0c\u805a\u7126\u4e8e\u4e3b\u4e1a\u7684\u5546\u4e1a\u5316\u90e8\u5206\u3002 \u56fd\u5185\u8f6f\u4ef6\u884c\u4e1a\u59cb\u7ec8\u5904\u4e8e\u4ea7\u4e1a\u94fe\u4f4e\u7aef\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u6574\u4e2a\u884c\u4e1a\u7684\u5229\u6da6\u589e\u957f\u4e0d\u662f\u4f9d\u9760\u6280\u672f\u521b\u65b0\u6765\u521b\u9020\uff0c\u800c\u662f\u4e25\u91cd\u4f9d\u8d56\u4eba\u529b\u7684\u89c4\u6a21\uff0c\u9700\u8981\u6269\u5927\u52b3\u52a8\u89c4\u6a21\u5e76\u5ef6\u957f\u52b3\u52a8\u65f6\u95f4\u3002\u8fd9\u79cd\u72b6\u51b5\u5e26\u6765\u771f\u6b63\u7684\u8f6f\u4ef6\u751f\u4ea7\u8005\u52b3\u52a8\u8005\uff0c\u5305\u62ec\uff1a\u4ea7\u54c1\u3001\u8bbe\u8ba1\u3001\u5f00\u53d1\u3001\u6d4b\u8bd5\u7b49\u7b49\uff0c\u5e76\u4e0d\u80fd\u83b7\u5f97\u884c\u4e1a\u53d1\u5c55\u5e26\u6765\u7684\u6536\u76ca\u589e\u957f\u3002 \u7531\u6b64\u53ef\u89c1\uff0c\u6574\u4e2a\u8f6f\u4ef6\u4ea7\u4e1a\u73b0\u6709\u7684\u5546\u4e1a\u6a21\u5f0f\uff08\u751f\u4ea7\u5173\u7cfb\uff09\u5df2\u7ecf\u6210\u4e3a\u6280\u672f\u8fdb\u6b65\uff08\u751f\u4ea7\u529b\u53d1\u5c55\uff09\u7684\u675f\u7f1a\u3002\u8fd9\u91cc\u5c31\u6709\u4e00\u79cd\u53ef\u80fd\uff0c\u6216\u4e00\u79cd\u8d8b\u52bf\u3001\u4e00\u79cd\u529b\u91cf\uff0c\u60f3\u8981\u91cd\u5851\u751f\u4ea7\u5173\u7cfb\uff08\u4ea7\u4e1a\u9769\u547d\uff09\uff0c\u4ee5\u6ee1\u8db3\u751f\u4ea7\u529b\u53d1\u5c55\u7684\u9700\u8981\u3002 \u901a\u8fc7\u5bf9\u56fd\u5185\u8f6f\u4ef6\u884c\u4e1a\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b58\u5728\u7740\u8fd9\u4e9b\u95ee\u9898\uff1a \u7f3a\u4e4f\u4e00\u4e2a\u8d44\u6e90\u81ea\u7531\u6d41\u52a8\u7684\u5e02\u573a \u8f6f\u4ef6\u751f\u4ea7\u8005\u9760\u65f6\u95f4\u800c\u4e0d\u662f\u9760\u6280\u672f\u521b\u65b0\u9a71\u52a8\uff0c\u6269\u5927\u4e1a\u52a1\u89c4\u6a21\u8981\u9760\u5806\u4eba\u5458\u6570\u91cf \u4ea7\u54c1\u540c\u8d28\u5316\u4e25\u91cd\uff0c\u5bfc\u81f4\u6076\u610f\u7ade\u4e89 \u5c0f\u5fae\u4f01\u4e1a\u4ed8\u8d39\u80fd\u529b\u5dee\uff0c\u4ed8\u8d39\u610f\u613f\u4f4e \u4e92\u8054\u7f51\u5e73\u53f0\u7684\u5784\u65ad \u77e5\u8bc6\u4ea7\u6743\u4fdd\u62a4\u529b\u5ea6\u5f31 \u6d88\u9664\u4e0d\u5229\u4e8e\u6280\u672f\u8fdb\u6b65\u7684\u56e0\u7d20\u540e\uff0c\u53c2\u4e0e\u751f\u4ea7\u548c\u4ea4\u6613\u7684\u4f01\u4e1a\u6216\u4e2a\u4eba\u91cd\u65b0\u8fde\u63a5\u8d77\u6765\u5c31\u662f\u65b0\u7684\u5e02\u573a\u673a\u4f1a\uff0c\u800c\u6280\u672f\u8fd9\u4e2a\u8981\u7d20\u89e3\u653e\u51fa\u6765\uff0c\u5c31\u80fd\u6210\u4e3a\u63a8\u52a8\u521b\u65b0\u3001\u63a8\u52a8\u751f\u4ea7\u529b\u53d1\u5c55\u7684\u65b0\u9a71\u52a8\u529b\uff0c\u5b9e\u73b0\u4ea7\u4e1a\u53d8\u9769\u3002","title":"\u56fd\u5185\u8f6f\u4ef6\u4e1a\u5927\u800c\u4e0d\u5f3a"},{"location":"%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/#_3","text":"\u6253\u8f66\u5e02\u573a\u7684\u53d8\u9769\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u601d\u8def\u3002\u6253\u8f66APP\u901a\u8fc7\u5c06\u53f8\u673a\u3001\u4e58\u5ba2\u6574\u5408\u5728\u540c\u4e00\u4e2a\u5e73\u53f0\u4e0a\u76f4\u63a5\u5b8c\u6210\u4ea4\u6613\uff0c\u6d88\u706d\u4fe1\u606f\u58c1\u5792\uff0c\u6210\u529f\u5730\u901a\u8fc7\u5e02\u573a\u53d8\u5316\u63a8\u52a8\u4e86\u884c\u4e1a\u53d8\u9769\u3002\u8f6f\u4ef6\u4ea7\u4e1a\u5982\u679c\u80fd\u6253\u901a\u6d88\u8d39\u8005\u4e0e\u751f\u4ea7\u8005\uff0c\u5efa\u7acb\u5168\u56fd\u6027\u7684\u8f6f\u4ef6\u5e02\u573a\uff0c\u76f8\u4fe1\u4e5f\u80fd\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\u3002 \u4e0d\u540c\u4e8e\u6253\u8f66\u5e02\u573a\u4e2d\u670d\u52a1\u63d0\u4f9b\u8005\u5c31\u662f\u53f8\u673a\u8fd9\u822c\u7b80\u5355\uff0c\u8f6f\u4ef6\u884c\u4e1a\u8981\u590d\u6742\u5f97\u591a\u3002\u8f6f\u4ef6\u4ea7\u54c1\u3001\u670d\u52a1\u9762\u5bf9\u7684\u662f\u5343\u53d8\u4e07\u5316\u7684\u4e2a\u6027\u5316\u9700\u6c42\uff0c\u5e76\u4e14\u9700\u8981\u5f88\u591a\u4eba\u534f\u4f5c\u624d\u80fd\u5b8c\u6210\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5c06\u751f\u4ea7\u8005\u7ec4\u7ec7\u8d77\u6765\u662f\u5f62\u6210\u7edf\u4e00\u5e02\u573a\u7684\u5fc5\u8981\u6761\u4ef6\u3002 \u73b0\u5728\u7684\u8f6f\u4ef6\u751f\u4ea7\u8005\u90fd\u6563\u843d\u5728\u5404\u4e2a\u4f01\u4e1a\u4e2d\uff0c\u65e0\u8bba\u662f\u4ea7\u54c1\u3001\u8bbe\u8ba1\u3001\u5f00\u53d1\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u4ea4\u6d41\u4e92\u52a8\u90fd\u5f88\u6709\u9650\u3002 \u5728\u5bf9\u751f\u4ea7\u8005\u7684\u7ec4\u7ec7\u4e0a\uff0c\u6b27\u7f8e\u76f8\u5bf9\u6210\u719f\u7684\u8f6f\u4ef6\u5e02\u573a\u662f\u5f88\u597d\u7684\u53c2\u7167\u3002\u4f01\u4e1a\u60f3\u843d\u5730\u4e00\u4e2aIT\u9879\u76ee\uff0c\u5f80\u5f80\u5148\u5bf9\u63a5\u54a8\u8be2\u7c7b\u4f01\u4e1a\uff0c\u7531\u8fd9\u4e9b\u4f01\u4e1a\u5bf9\u63a5\u6216\u6316\u6398\u9700\u6c42\uff0c\u518d\u7531\u4e13\u4e1a\u7684\u5b9e\u65bd\u7c7b\u4f01\u4e1a\u8d1f\u8d23\u5c06\u9700\u6c42\u843d\u5730\uff0c\u8fd9\u7c7b\u5b9e\u65bd\u4f01\u4e1a\u5219\u4f1a\u91c7\u8d2d\u4e0a\u6e38\u5404\u7c7b\u57fa\u7840\u6027\u8f6f\u4ef6\uff0c\u5305\u62ec\u5f00\u53d1\u5de5\u5177\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93\u7b49\u3002\u5b9e\u65bd\u7c7b\u4f01\u4e1a\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u4e92\u76f8\u4ea4\u6613\uff0c\u5305\u542b\u529f\u80fd\u6a21\u5757\u4ee5\u53ca\u6210\u719f\u4ea7\u54c1\u7b49\u3002\u5b8c\u6210\u5f00\u53d1\u540e\uff0c\u518d\u7531\u4e13\u4e1a\u6d4b\u8bd5\u7c7b\u4f01\u4e1a\u8d1f\u8d23\u9a8c\u6536\u3002 \u5982\u6b64\u4ea7\u4e1a\u94fe\u5206\u5de5\uff0c\u8ba9\u9762\u5411\u5ba2\u6237\u8fd9\u4e00\u5c42\u5b9e\u65bd\u7c7b\u4f01\u4e1a\u4e0d\u518d\u662f\u5355\u7eaf\u7684\u4eba\u6d77\u6218\u672f\u3002\u867d\u7136\u4eba\u8fd8\u662f\u5173\u952e\u56e0\u7d20\uff0c\u4f46\u81f3\u5c11\u6446\u8131\u4e86\u8f6f\u4ef6\u5f00\u53d1\u4ec5\u4ec5\u662f\u4f53\u529b\u52b3\u52a8\u7684\u5c40\u9762\u3002 \u56fd\u5185\u6ca1\u6709\u5f62\u6210\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u6838\u5fc3\u539f\u56e0\u662f\u6d77\u5916\u8fd9\u79cd\u5206\u5de5\u65b9\u5f0f\u6240\u5e26\u6765\u7684\u6210\u672c\u4f18\u52bf\u62b5\u4e0d\u4e0a\u56fd\u5185\u4f4e\u5ec9\u7684\u4eba\u5de5\u6210\u672c\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u53ea\u6709\u8fdb\u4e00\u6b65\u7ec6\u5316\u5206\u5de5\uff0c\u6269\u5927\u4ea7\u4e1a\u94fe\u5408\u4f5c\u5e26\u6765\u7684\u6210\u672c\u4f18\u52bf\uff0c\u751f\u4ea7\u8005\u624d\u4f1a\u8d70\u5411\u4e92\u76f8\u4f9d\u8d56\u7684\u5de5\u4e1a\u5316\u7684\u751f\u4ea7\u65b9\u5f0f\u3002\u751f\u4ea7\u8005\u4eec\u7684\u5229\u76ca\u4e00\u81f4\uff0c\u4e5f\u5c31\u80fd\u6446\u8131\u4ea7\u54c1\u540c\u8d28\u5316\u7684\u7ade\u4e89\u3002 \u4e0e\u56fd\u5916\u540c\u6837\u4e0d\u540c\u7684\u4e00\u4e2a\u4f18\u52bf\u662f\uff0c\u56fd\u5185\u6709\u8db3\u591f\u591a\u7684\u4ea7\u4e1a\u4eba\u7fa4\u6765\u652f\u6491\u66f4\u7ec6\u9897\u7c92\u5ea6\u7684\u4ea7\u4e1a\u5206\u5de5\uff0c\u4ece\u8fd9\u4e00\u70b9\u4e0a\u770b\uff0c\u56fd\u5185\u76f8\u6bd4\u6b27\u7f8e\u66f4\u6709\u4f18\u52bf\u80fd\u66f4\u6df1\u5165\u5730\u5b8c\u6210\u4ea7\u4e1a\u53d8\u9769\u3002 \u8f6f\u4ef6\u4ea7\u54c1\u6709\u590d\u5236\u6210\u672c\u51e0\u4e4e\u4e3a\u96f6\u8fd9\u4e2a\u7279\u70b9\uff0c\u5728\u4ea7\u4e1a\u94fe\u5206\u5de5\u548c\u7edf\u4e00\u5e02\u573a\u7684\u5171\u540c\u4f5c\u7528\u4e0b\uff0c\u5f88\u5bb9\u6613\u5145\u5b9e\u4ee5\u4f4e\u4ef7\u91cf\u5927\u4e3a\u5356\u70b9\u3001\u670d\u52a1\u5c0f\u5fae\u4f01\u4e1a\u7684\u8f6f\u4ef6\u5e02\u573a\uff0c\u751a\u81f3\u6269\u5c55\u5230\u4e2a\u4eba\u8f6f\u4ef6\u9886\u57df\u3002\u8fd9\u4e00\u70b9\uff0c\u5982\u4eca\u6709\u5927\u91cf\u552e\u4ef7\u51e0\u5341\u5143\u3001\u51e0\u767e\u5143\u7684\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\uff0c\u8fd9\u4e2a\u7ec6\u5206\u8f6f\u4ef6\u5e02\u573a\u5df2\u7ecf\u505a\u4e86\u5f88\u597d\u7684\u793a\u8303\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u8981\u8ba9\u8f6f\u4ef6\u884c\u4e1a\u6574\u4f53\u4e0a\u5411\u4e0a\u8fc8\u8fdb\u53d8\u9769\u7684\u4e00\u6b65\uff0c\u8981\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u5c31\u8981\u63a8\u8fdb\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5efa\u7acb\u5168\u56fd\u6027\u7684\u8f6f\u4ef6\u4ea7\u54c1\u5e02\u573a\uff0c\u8ba9\u8d44\u6e90\u80fd\u81ea\u7531\u7684\u6d41\u52a8 \u5efa\u7acb\u4ee5\u5206\u5de5\u5408\u4f5c\u4e3a\u57fa\u7840\u7684\u8f6f\u4ef6\u5f00\u53d1\u5e02\u573a\uff0c\u5982\u54a8\u8be2\u3001\u7814\u53d1\u3001\u8bbe\u8ba1\u3001\u6d4b\u8bd5\u7b49\u4e13\u4e1a\u4f01\u4e1a \u52a0\u5f3a\u8f6f\u4ef6\u4ea7\u4e1a\u94fe\u4e0a\u6e38\u751f\u4ea7\u8005\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u5c06\u7ade\u4e89\u53d8\u4e3a\u4e92\u52a9\uff0c\u6bd4\u5982\u5efa\u7acb\u6e90\u4ee3\u7801\u4ea4\u6613\u5e02\u573a \u52a0\u5f3a\u8f6f\u4ef6\u4ea7\u54c1\u5728\u9500\u552e\u7aef\u7684\u5408\u4f5c\uff0c\u964d\u4f4e\u4ee3\u7406\u95e8\u69db \u5c0a\u91cd\u5f7c\u6b64\u52b3\u52a8\u6210\u679c\uff0c\u52a0\u5f3a\u5bf9\u521b\u65b0\u6027\u77e5\u8bc6\u4ea7\u6743\u7684\u4fdd\u62a4 \u4ee5\u4e0a\u7684\u6bcf\u4e00\u4e2a\u65b9\u9762\u770b\u4e0a\u53bb\u90fd\u6bd4\u8f83\u96be\u4ee5\u5728\u77ed\u671f\u5185\u5b9e\u73b0\uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u6280\u672f\u65b9\u9762\u7684\u8d8b\u52bf\uff0c\u6b63\u5728\u50cf\u62f1\u51fa\u5730\u9762\u7684\u5ae9\u82bd\uff0c\u8ba9\u8fd9\u4e9b\u94c1\u677f\u4e00\u5757\u7684\u8981\u7d20\u4ea7\u751f\u88c2\u7f1d\uff0c\u5f97\u4ee5\u6e17\u900f\u8fdb\u65b0\u7684\u53d8\u5316\u3002\u6bd4\u5982\uff1a \u7edf\u4e00\u8eab\u4efd \u4ee5OIDC\u4e3a\u4ee3\u8868\uff0c\u5efa\u7acb\u8d77\u4e86\u7edf\u4e00\u8eab\u4efd\u8ba4\u8bc1\u7684\u901a\u7528\u6807\u51c6\u534f\u8bae\uff0c\u4e3a\u964d\u4f4e\u4f01\u4e1a\u7ba1\u7406\u8f6f\u4ef6\u6210\u672c\u3001\u5b9e\u73b0\u6570\u5b57\u5316\u7684\u613f\u666f\u6253\u4e0b\u4e86\u57fa\u7840\uff0c\u7531\u6b64\u884d\u751f\u51fa\u4e00\u7cfb\u5217\u6784\u5efa\u7edf\u4e00\u8eab\u4efd\u670d\u52a1\u7684IAM/IDaaS\u4f01\u4e1a\u3002 \u4e91\u539f\u751f \u4ee5docker\u548ck8s\u4e3a\u4ee3\u8868\u7684\u4e91\u539f\u751f\u6280\u672f\uff0c\u80fd\u5927\u5e45\u964d\u4f4e\u8fd0\u7ef4\u5b9e\u65bd\u7684\u96be\u5ea6\u548c\u6210\u672c\uff0c\u4e5f\u5728IT\u7ba1\u7406\u548c\u8fd0\u7ef4\u7684\u5206\u5de5\u4e0a\u5212\u51fa\u4e86\u66f4\u4e3a\u660e\u6670\u7684\u8fb9\u754c\uff0c\u8fd9\u5c31\u4f7f\u7edf\u4e00\u7684\u8f6f\u4ef6\u5e02\u573a\u8fd9\u4e00\u65b9\u6848\u6709\u4e86\u6280\u672f\u57fa\u7840\u3002\u56fd\u5185\u5c31\u6709\u4e00\u6279\u4f18\u79c0\u7684\u4ee5\u4e91\u539f\u751f\u6280\u672f\u4e3a\u57fa\u7840\u6253\u9020\u4f01\u4e1a\u4e91\u5e73\u53f0\u7684\u6280\u672f\u578b\u4f01\u4e1a\u3002 \u4f4e\u4ee3\u7801 \u4ee5Vue\u4e3a\u4ee3\u8868\u7684Web\u6280\u672f\u8fd1\u671f\u5feb\u901f\u53d1\u5c55\u548c\u666e\u53ca\uff0cWeb\u4f18\u79c0\u7684\u8de8\u5e73\u53f0\u80fd\u529b\u8ba9\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u53d1\u751f\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4e0d\u5c11\u521b\u65b0\u4f01\u4e1a\u5f00\u59cb\u5728\u4f4e\u4ee3\u7801\u6216\u65e0\u4ee3\u7801\u8fd9\u4e2a\u9886\u57df\u79ef\u6781\u63a2\u7d22\u3002\u867d\u7136\u5728\u63a2\u7d22\u9636\u6bb5\uff0c\u4f46\u662f\u4f4e\u4ee3\u7801\u7684\u7406\u5ff5\u4e3a\u8fdb\u4e00\u6b65\u7ec6\u5316\u5206\u5de5\u3001\u91cd\u5851\u4ea7\u4e1a\u94fe\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u5411\u3002 \u5f00\u6e90\u8fd0\u52a8 Python\uff0cGo\u7b49\u8bed\u8a00\u7684\u5f00\u6e90\u793e\u533a\u6b63\u5728\u6311\u6218\u539f\u672cJava\u548c.Net\u7b49\u7b49\u4e3a\u57fa\u7840\u7684\u4f01\u4e1a\u7ea7\u8f6f\u4ef6\u5e02\u573a\uff0c\u4ee5\u5f00\u6e90\u4e3a\u5546\u4e1a\u6a21\u5f0f\u7684\u6280\u672f\u4f01\u4e1a\u6b63\u5feb\u901f\u63a8\u8fdb\u6280\u672f\u666e\u53ca\uff0c\u6253\u7834\u4e86\u5927\u4f01\u4e1a\u7684\u6280\u672f\u5784\u65ad\uff1b\u5b83\u4eec\u540c\u65f6\u4e5f\u5efa\u7acb\u4e86\u6807\u51c6\uff0c\u5728\u4fc3\u8fdb\u4ea7\u4e1a\u94fe\u878d\u5408\uff0c\u5e76\u6210\u4e3a\u6838\u5fc3\u529b\u91cf\u3002 \u56fd\u5bb6\u5bf9\u884c\u4e1a\u7684\u89c4\u8303\u548c\u6307\u5f15\u4fdd\u62a4\u65b9\u9762\uff0c\u6211\u4eec\u4e5f\u770b\u5230\u653f\u5e9c\u51fa\u53f0\u4e00\u7cfb\u5217\u6fc0\u52b1\u884c\u4e1a\u7684\u63aa\u65bd\u3002\u5f53\u7136\uff0c\u4ec5\u4f9d\u9760\u653f\u5e9c\u529b\u91cf\u662f\u4e0d\u591f\u7684\u3002\u4ea7\u4e1a\u9769\u547d\u7684\u53d1\u751f\u4e00\u5b9a\u662f\u5f88\u591a\u4ea7\u4e1a\u4eba\u5171\u540c\u63a8\u52a8\u7684\u7ed3\u679c\uff0c\u5c24\u5176\u662fSaaS\u7c7b\u4f01\u4e1a\uff0c\u4f5c\u4e3a\u65b0\u5174\u7684\u529b\u91cf\uff0c\u56e2\u7ed3\u8d77\u6765\uff0c\u7d27\u5bc6\u5408\u4f5c\uff0c\u5f62\u6210\u4ea7\u4e1a\u94fe\u6761\uff0c\u5171\u540c\u6210\u957f\uff0c\u5171\u540c\u63a8\u52a8\u53d8\u9769\u3002","title":"\u63a8\u52a8\u8f6f\u4ef6\u884c\u4e1a\u6574\u4f53\u53d8\u9769\u9700\u8981\u6539\u53d8\u751f\u4ea7\u5173\u7cfb\uff0c\u521b\u9020\u8fde\u63a5\u7684\u65b0\u53ef\u80fd"},{"location":"%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/#_4","text":"\u9f99\u5f52\u79d1\u6280\u6b63\u5728\u5c1d\u8bd5\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u9f99\u5f52\u79d1\u6280\u5f00\u53d1\u7684ArkID\u662f\u627f\u8f7d\u8fd9\u4e9b\u60f3\u6cd5\u7684\u4e00\u4e2a\u6838\u5fc3\u9879\u76ee\u3002\u8868\u9762\u4e0a\u770b\uff0cArkID\u662f\u4e00\u4e2aIDaaS\u4ea7\u54c1\uff0c\u770b\u4e0a\u53bb\u53ef\u80fd\u4e0e\u4e00\u822c\u7684\u7edf\u4e00\u8eab\u4efd\u4ea7\u54c1\u7c7b\u4f3c\u3002\u4f46\u4e0d\u540c\u70b9\u5728\u4e8e\uff1a \u5f00\u6e90 \u4e4b\u6240\u4ee5\u5f00\u6e90\uff0c\u76ee\u7684\u662f\u4e0e\u6240\u6709\u4ea7\u4e1a\u4eba\u5171\u4eab\u6211\u4eec\u7684\u4ea7\u54c1\u3002\u5f00\u53d1\u4efb\u4f55\u4ea7\u54c1\u90fd\u9700\u8981\u8eab\u4efd\u6a21\u5757\uff0c\u4f7f\u7528ArkID\u5c31\u80fd\u76f4\u63a5\u8282\u7701\u5f00\u53d1\u65f6\u95f4\u3002ArkID\u652f\u6301\u79c1\u6709\u5316\u90e8\u7f72\uff0c\u65e0\u8bba\u662f\u81ea\u7528\u8fd8\u662f\u505a\u4e3a\u72ec\u7acb\u7684IDaaS\u7ad9\u70b9\uff0c\u4f60\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u63d2\u4ef6\u5316\uff0c\u5e76\u8bbe\u7acb\u63d2\u4ef6\u5546\u5e97 ArkID\u5927\u90e8\u5206\u529f\u80fd\u90fd\u662f\u4f9d\u9760\u63d2\u4ef6\u6765\u5b9e\u73b0\u3002\u63d2\u4ef6\u7684\u7075\u6d3b\u6027\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u5404\u79cd\u4e2a\u6027\u5316\u7684\u9700\u6c42\uff0c\u964d\u4f4e\u5b9e\u65bd\u6210\u672c\u3002\u6240\u6709\u7684ArkID\u7684\u7528\u6237\u90fd\u53ef\u4ee5\u5c06\u81ea\u5df1\u5f00\u53d1\u7684\u63d2\u4ef6\u4e0a\u4f20\u5230\u63d2\u4ef6\u5546\u5e97\u4e0e\u5408\u4f5c\u4f19\u4f34\u5171\u4eab\u6216\u51fa\u552e\uff0c\u800c\u5b9e\u65bd\u65b9\u80fd\u7528\u4f4e\u4e8e\u76f4\u63a5\u5f00\u53d1\u7684\u6210\u672c\u76f4\u63a5\u8d2d\u4e70\u8fd9\u4e9b\u63d2\u4ef6\u3002 \u5185\u7f6e\u4e86SaaS\u5e94\u7528\u5546\u5e97 ArkID\u5185\u7f6e\u4e86\u5e94\u7528\u5546\u5e97\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u5b98\u65b9IDaaS\u5e73\u53f0\u521b\u5efaSaaS\u5e94\u7528\u7684\u5165\u53e3\uff0c\u65e0\u8bba\u662fArkID\u7528\u6237\u662f\u79c1\u6709\u90e8\u7f72\u8fd8\u662f\u4f7f\u7528\u79df\u6237\u7684\u65b9\u5f0f\uff0c\u90fd\u53ef\u4ee5\u7528\u81ea\u5df1\u7684ArkID\u7684\u8d26\u53f7\u76f4\u63a5\u767b\u5f55\u4f7f\u7528\u5e94\u7528\u5546\u5e97\u4e2d\u7684SaaS\u8f6f\u4ef6\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u4e0eArkID\u7684\u5408\u4f5c\u5f00\u53d1\u8005\u5171\u4eab\u7528\u6237\u3002 \u5f00\u653e\u7684\u4ee3\u7406\u89c4\u5219 \u65e0\u8bba\u4f60\u662f\u4e2a\u4eba\u8fd8\u662f\u4f01\u4e1a\uff0c\u4f7f\u7528\u7684\u662f\u79c1\u6709\u90e8\u7f72\u8fd8\u662f\u79df\u6237\u7684\u65b9\u5f0f\uff0c\u4f60\u901a\u8fc7\u4efb\u4f55\u6e20\u9053\u6ce8\u518c\u4e86ArkID\u7684\u8d26\u53f7\uff0c\u90fd\u81ea\u52a8\u6210\u4e3aArkID\u7684\u4ee3\u7406\u5546\uff0c\u4ee5\u4ee3\u7406\u4ef7\u683c\u53bb\u9500\u552e\u63d2\u4ef6\u4e0e\u5e94\u7528\u5546\u5e97\u7684\u6240\u6709\u4ea7\u54c1\u3002 \u4f4e\u4ee3\u7801\u7684\u5f00\u53d1\u6846\u67b6 \u5982\u679c\u4f60\u662f\u7a0b\u5e8f\u5458\uff0c\u5e76\u4e14\u6709\u5174\u8da3\u7ffb\u770bArkID\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u4e00\u70b9\uff1a\u6211\u4eec\u5728ArkID\u7684\u5f00\u53d1\u4e2d\u878d\u5165\u4f4e\u4ee3\u7801\u5f00\u53d1\u7684\u4e00\u4e9b\u601d\u60f3\uff0c\u5e76\u5c06\u8fd9\u4e9b\u601d\u60f3\u7528\u5f00\u53d1\u6846\u67b6\u7684\u65b9\u5f0f\u5b9e\u73b0\u51fa\u6765\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u671f\u671b\u63a8\u52a8\u66f4\u9897\u7ec6\u7c92\u5ea6\u7684\u4ea7\u4e1a\u5206\u5de5\u7684\u5c1d\u8bd5\u3002\u5982\u679c\u6709\u5174\u8da3\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\u4eec\u4ea4\u6d41\u3002 \u5982\u679c\u60a8\u5bf9\u6211\u4eec\u5728\u505a\u7684\u4e8b\u60c5\u611f\u5174\u8da3\uff0c\u6b22\u8fce\u7528\u4ee5\u4e0b\u5f62\u5f0f\u53c2\u4e0e\uff1a \u5728\u5f00\u6e90\u793e\u533a\u8d21\u732eIssue\u6216\u4ee3\u7801 \u5728\u63d2\u4ef6\u5546\u5e97\u4e2d\u63d0\u4ea4\u529f\u80fd\u63d2\u4ef6 \u5728\u5e94\u7528\u5546\u5e97\u4e2d\u63d0\u4ea4SaaS\u5e94\u7528 \u6210\u4e3a\u4ee3\u7406\u5546\u5411\u5ba2\u6237\u63a8\u8350ArkID","title":"\u53d8\u9769\u4e2d\uff0c\u9f99\u5f52\u79d1\u6280\u7684\u5207\u5165\u70b9"}]}